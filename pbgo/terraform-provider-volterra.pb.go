// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/terraform-provider-volterra/terraform-provider-volterra.proto

package pbgo

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Service configuration for terraform
type Conf struct {
	// Objects for service to start with, maybe updated dynamically
	Bootstrap []*types.Any `protobuf:"bytes,1,rep,name=Bootstrap,proto3" json:"Bootstrap,omitempty"`
	// Objects for service to always have, may NOT be updated dynamically
	Overrides []*types.Any `protobuf:"bytes,2,rep,name=Overrides,proto3" json:"Overrides,omitempty"`
	// GRPC and REST server ports (TLS and insecure)
	GrpcPort    int32 `protobuf:"varint,3,opt,name=GrpcPort,proto3" json:"GrpcPort,omitempty"`
	RestPort    int32 `protobuf:"varint,4,opt,name=RestPort,proto3" json:"RestPort,omitempty"`
	GrpcTLSPort int32 `protobuf:"varint,5,opt,name=GrpcTLSPort,proto3" json:"GrpcTLSPort,omitempty"`
	RestTLSPort int32 `protobuf:"varint,6,opt,name=RestTLSPort,proto3" json:"RestTLSPort,omitempty"`
	// TLS parameters
	Tls *schema.DaemonTLSParamsType `protobuf:"bytes,7,opt,name=tls,proto3" json:"tls,omitempty"`
	// List of etcd server URLs
	EtcdServerURLs []string `protobuf:"bytes,8,rep,name=EtcdServerURLs,proto3" json:"EtcdServerURLs,omitempty"`
	// Key prefix for all keys in etcd server
	EtcdKeyPrefix string `protobuf:"bytes,9,opt,name=EtcdKeyPrefix,proto3" json:"EtcdKeyPrefix,omitempty"`
}

func (m *Conf) Reset()      { *m = Conf{} }
func (*Conf) ProtoMessage() {}
func (*Conf) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ae8cbeecec2517a, []int{0}
}
func (m *Conf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Conf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Conf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Conf.Merge(m, src)
}
func (m *Conf) XXX_Size() int {
	return m.Size()
}
func (m *Conf) XXX_DiscardUnknown() {
	xxx_messageInfo_Conf.DiscardUnknown(m)
}

var xxx_messageInfo_Conf proto.InternalMessageInfo

func (m *Conf) GetBootstrap() []*types.Any {
	if m != nil {
		return m.Bootstrap
	}
	return nil
}

func (m *Conf) GetOverrides() []*types.Any {
	if m != nil {
		return m.Overrides
	}
	return nil
}

func (m *Conf) GetGrpcPort() int32 {
	if m != nil {
		return m.GrpcPort
	}
	return 0
}

func (m *Conf) GetRestPort() int32 {
	if m != nil {
		return m.RestPort
	}
	return 0
}

func (m *Conf) GetGrpcTLSPort() int32 {
	if m != nil {
		return m.GrpcTLSPort
	}
	return 0
}

func (m *Conf) GetRestTLSPort() int32 {
	if m != nil {
		return m.RestTLSPort
	}
	return 0
}

func (m *Conf) GetTls() *schema.DaemonTLSParamsType {
	if m != nil {
		return m.Tls
	}
	return nil
}

func (m *Conf) GetEtcdServerURLs() []string {
	if m != nil {
		return m.EtcdServerURLs
	}
	return nil
}

func (m *Conf) GetEtcdKeyPrefix() string {
	if m != nil {
		return m.EtcdKeyPrefix
	}
	return ""
}

func init() {
	proto.RegisterType((*Conf)(nil), "ves.io.tpv.Conf")
}

func init() {
	proto.RegisterFile("ves.io/terraform-provider-volterra/terraform-provider-volterra.proto", fileDescriptor_6ae8cbeecec2517a)
}

var fileDescriptor_6ae8cbeecec2517a = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x31, 0x6f, 0x13, 0x31,
	0x18, 0x86, 0xed, 0xa6, 0x2d, 0x89, 0x23, 0x18, 0x4e, 0x0c, 0x47, 0x24, 0xdc, 0x53, 0x85, 0xd0,
	0x2d, 0x71, 0xa4, 0xc0, 0xc4, 0x46, 0x29, 0x62, 0xa0, 0x12, 0xd5, 0xb5, 0x2c, 0x2c, 0xe8, 0x92,
	0x38, 0xee, 0x89, 0xbb, 0xfb, 0x2c, 0xdb, 0x39, 0x71, 0x5b, 0x7f, 0x02, 0x3f, 0x01, 0x36, 0x7e,
	0x0a, 0x63, 0xc6, 0x8c, 0xc4, 0x59, 0x18, 0x3b, 0x76, 0x44, 0xf6, 0x25, 0x69, 0x61, 0xc8, 0x76,
	0xef, 0xfb, 0x3c, 0xdf, 0xa7, 0x93, 0x6d, 0x72, 0x5a, 0x71, 0xcd, 0x32, 0x18, 0x18, 0xae, 0x54,
	0x3a, 0x05, 0x55, 0xf4, 0xa5, 0x82, 0x2a, 0x9b, 0x70, 0xd5, 0xaf, 0x20, 0xf7, 0xed, 0x2e, 0xc6,
	0xa4, 0x02, 0x03, 0x01, 0x69, 0xb6, 0x30, 0x23, 0xab, 0x5e, 0x5f, 0x64, 0xe6, 0x6a, 0x36, 0x62,
	0x63, 0x28, 0x06, 0x02, 0x04, 0x0c, 0xbc, 0x32, 0x9a, 0x4d, 0x7d, 0xf2, 0xc1, 0x7f, 0x35, 0xa3,
	0xbd, 0x27, 0x02, 0x40, 0xe4, 0xfc, 0xce, 0x4a, 0xcb, 0x7a, 0x8d, 0x9e, 0xae, 0xff, 0x4d, 0x8f,
	0xaf, 0x78, 0x91, 0x0e, 0x64, 0x65, 0x3e, 0x9b, 0x5a, 0x72, 0xdd, 0xe0, 0xe3, 0xdb, 0x3d, 0xb2,
	0xff, 0x06, 0xca, 0x69, 0x30, 0x24, 0x9d, 0x13, 0x00, 0xa3, 0x8d, 0x4a, 0x65, 0x88, 0xa3, 0x56,
	0xdc, 0x1d, 0x3e, 0x66, 0xcd, 0x5a, 0xb6, 0x59, 0xcb, 0x5e, 0x97, 0x75, 0x72, 0xa7, 0xb9, 0x99,
	0x0f, 0x15, 0x57, 0x2a, 0x9b, 0x70, 0x1d, 0xee, 0xed, 0x9a, 0xd9, 0x6a, 0x41, 0x8f, 0xb4, 0xdf,
	0x29, 0x39, 0x3e, 0x07, 0x65, 0xc2, 0x56, 0x84, 0xe3, 0x83, 0x64, 0x9b, 0x1d, 0x4b, 0xb8, 0x36,
	0x9e, 0xed, 0x37, 0x6c, 0x93, 0x83, 0x88, 0x74, 0x9d, 0x77, 0x79, 0x76, 0xe1, 0xf1, 0x81, 0xc7,
	0xf7, 0x2b, 0x67, 0x38, 0x7b, 0x63, 0x1c, 0x36, 0xc6, 0xbd, 0x2a, 0x78, 0x49, 0x5a, 0x26, 0xd7,
	0xe1, 0x83, 0x08, 0xc7, 0xdd, 0xe1, 0x31, 0x5b, 0x9f, 0x77, 0x73, 0x32, 0xec, 0x34, 0xe5, 0x05,
	0x94, 0x4e, 0x4d, 0x55, 0x5a, 0xe8, 0xcb, 0x5a, 0xf2, 0xc4, 0xe9, 0xc1, 0x73, 0xf2, 0xe8, 0xad,
	0x19, 0x4f, 0x2e, 0xb8, 0xaa, 0xb8, 0xfa, 0x98, 0x9c, 0xe9, 0xb0, 0x1d, 0xb5, 0xe2, 0x4e, 0xf2,
	0x5f, 0x1b, 0x3c, 0x23, 0x0f, 0x5d, 0xf3, 0x9e, 0xd7, 0xe7, 0x8a, 0x4f, 0xb3, 0xaf, 0x61, 0x27,
	0xc2, 0x71, 0x27, 0xf9, 0xb7, 0x7c, 0xd5, 0xbe, 0xfd, 0x7e, 0x84, 0xae, 0x7f, 0x1c, 0xa1, 0x93,
	0x7c, 0xbe, 0xa4, 0x68, 0xb1, 0xa4, 0xe8, 0x66, 0x49, 0xf1, 0xb5, 0xa5, 0xf8, 0xa7, 0xa5, 0xf8,
	0x97, 0xa5, 0x78, 0x6e, 0x29, 0x5e, 0x58, 0x8a, 0x7f, 0x5b, 0x8a, 0xff, 0x58, 0x8a, 0x6e, 0x2c,
	0xc5, 0xdf, 0x56, 0x14, 0xcd, 0x57, 0x14, 0x2d, 0x56, 0x14, 0x7d, 0x1a, 0x0a, 0x90, 0x5f, 0x04,
	0xdb, 0xbe, 0x9f, 0x99, 0xde, 0xf9, 0xf4, 0xe4, 0x48, 0xc0, 0xe8, 0xd0, 0x5f, 0xc8, 0x8b, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x61, 0x16, 0xa1, 0xac, 0x02, 0x00, 0x00,
}

func (this *Conf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Conf)
	if !ok {
		that2, ok := that.(Conf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Bootstrap) != len(that1.Bootstrap) {
		return false
	}
	for i := range this.Bootstrap {
		if !this.Bootstrap[i].Equal(that1.Bootstrap[i]) {
			return false
		}
	}
	if len(this.Overrides) != len(that1.Overrides) {
		return false
	}
	for i := range this.Overrides {
		if !this.Overrides[i].Equal(that1.Overrides[i]) {
			return false
		}
	}
	if this.GrpcPort != that1.GrpcPort {
		return false
	}
	if this.RestPort != that1.RestPort {
		return false
	}
	if this.GrpcTLSPort != that1.GrpcTLSPort {
		return false
	}
	if this.RestTLSPort != that1.RestTLSPort {
		return false
	}
	if !this.Tls.Equal(that1.Tls) {
		return false
	}
	if len(this.EtcdServerURLs) != len(that1.EtcdServerURLs) {
		return false
	}
	for i := range this.EtcdServerURLs {
		if this.EtcdServerURLs[i] != that1.EtcdServerURLs[i] {
			return false
		}
	}
	if this.EtcdKeyPrefix != that1.EtcdKeyPrefix {
		return false
	}
	return true
}
func (this *Conf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pbgo.Conf{")
	if this.Bootstrap != nil {
		s = append(s, "Bootstrap: "+fmt.Sprintf("%#v", this.Bootstrap)+",\n")
	}
	if this.Overrides != nil {
		s = append(s, "Overrides: "+fmt.Sprintf("%#v", this.Overrides)+",\n")
	}
	s = append(s, "GrpcPort: "+fmt.Sprintf("%#v", this.GrpcPort)+",\n")
	s = append(s, "RestPort: "+fmt.Sprintf("%#v", this.RestPort)+",\n")
	s = append(s, "GrpcTLSPort: "+fmt.Sprintf("%#v", this.GrpcTLSPort)+",\n")
	s = append(s, "RestTLSPort: "+fmt.Sprintf("%#v", this.RestTLSPort)+",\n")
	if this.Tls != nil {
		s = append(s, "Tls: "+fmt.Sprintf("%#v", this.Tls)+",\n")
	}
	s = append(s, "EtcdServerURLs: "+fmt.Sprintf("%#v", this.EtcdServerURLs)+",\n")
	s = append(s, "EtcdKeyPrefix: "+fmt.Sprintf("%#v", this.EtcdKeyPrefix)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTerraformProviderVolterra(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Conf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Conf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Conf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EtcdKeyPrefix) > 0 {
		i -= len(m.EtcdKeyPrefix)
		copy(dAtA[i:], m.EtcdKeyPrefix)
		i = encodeVarintTerraformProviderVolterra(dAtA, i, uint64(len(m.EtcdKeyPrefix)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EtcdServerURLs) > 0 {
		for iNdEx := len(m.EtcdServerURLs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EtcdServerURLs[iNdEx])
			copy(dAtA[i:], m.EtcdServerURLs[iNdEx])
			i = encodeVarintTerraformProviderVolterra(dAtA, i, uint64(len(m.EtcdServerURLs[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Tls != nil {
		{
			size, err := m.Tls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTerraformProviderVolterra(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.RestTLSPort != 0 {
		i = encodeVarintTerraformProviderVolterra(dAtA, i, uint64(m.RestTLSPort))
		i--
		dAtA[i] = 0x30
	}
	if m.GrpcTLSPort != 0 {
		i = encodeVarintTerraformProviderVolterra(dAtA, i, uint64(m.GrpcTLSPort))
		i--
		dAtA[i] = 0x28
	}
	if m.RestPort != 0 {
		i = encodeVarintTerraformProviderVolterra(dAtA, i, uint64(m.RestPort))
		i--
		dAtA[i] = 0x20
	}
	if m.GrpcPort != 0 {
		i = encodeVarintTerraformProviderVolterra(dAtA, i, uint64(m.GrpcPort))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Overrides) > 0 {
		for iNdEx := len(m.Overrides) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Overrides[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTerraformProviderVolterra(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Bootstrap) > 0 {
		for iNdEx := len(m.Bootstrap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bootstrap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTerraformProviderVolterra(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTerraformProviderVolterra(dAtA []byte, offset int, v uint64) int {
	offset -= sovTerraformProviderVolterra(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Conf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bootstrap) > 0 {
		for _, e := range m.Bootstrap {
			l = e.Size()
			n += 1 + l + sovTerraformProviderVolterra(uint64(l))
		}
	}
	if len(m.Overrides) > 0 {
		for _, e := range m.Overrides {
			l = e.Size()
			n += 1 + l + sovTerraformProviderVolterra(uint64(l))
		}
	}
	if m.GrpcPort != 0 {
		n += 1 + sovTerraformProviderVolterra(uint64(m.GrpcPort))
	}
	if m.RestPort != 0 {
		n += 1 + sovTerraformProviderVolterra(uint64(m.RestPort))
	}
	if m.GrpcTLSPort != 0 {
		n += 1 + sovTerraformProviderVolterra(uint64(m.GrpcTLSPort))
	}
	if m.RestTLSPort != 0 {
		n += 1 + sovTerraformProviderVolterra(uint64(m.RestTLSPort))
	}
	if m.Tls != nil {
		l = m.Tls.Size()
		n += 1 + l + sovTerraformProviderVolterra(uint64(l))
	}
	if len(m.EtcdServerURLs) > 0 {
		for _, s := range m.EtcdServerURLs {
			l = len(s)
			n += 1 + l + sovTerraformProviderVolterra(uint64(l))
		}
	}
	l = len(m.EtcdKeyPrefix)
	if l > 0 {
		n += 1 + l + sovTerraformProviderVolterra(uint64(l))
	}
	return n
}

func sovTerraformProviderVolterra(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTerraformProviderVolterra(x uint64) (n int) {
	return sovTerraformProviderVolterra(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Conf) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBootstrap := "[]*Any{"
	for _, f := range this.Bootstrap {
		repeatedStringForBootstrap += strings.Replace(fmt.Sprintf("%v", f), "Any", "types.Any", 1) + ","
	}
	repeatedStringForBootstrap += "}"
	repeatedStringForOverrides := "[]*Any{"
	for _, f := range this.Overrides {
		repeatedStringForOverrides += strings.Replace(fmt.Sprintf("%v", f), "Any", "types.Any", 1) + ","
	}
	repeatedStringForOverrides += "}"
	s := strings.Join([]string{`&Conf{`,
		`Bootstrap:` + repeatedStringForBootstrap + `,`,
		`Overrides:` + repeatedStringForOverrides + `,`,
		`GrpcPort:` + fmt.Sprintf("%v", this.GrpcPort) + `,`,
		`RestPort:` + fmt.Sprintf("%v", this.RestPort) + `,`,
		`GrpcTLSPort:` + fmt.Sprintf("%v", this.GrpcTLSPort) + `,`,
		`RestTLSPort:` + fmt.Sprintf("%v", this.RestTLSPort) + `,`,
		`Tls:` + strings.Replace(fmt.Sprintf("%v", this.Tls), "DaemonTLSParamsType", "schema.DaemonTLSParamsType", 1) + `,`,
		`EtcdServerURLs:` + fmt.Sprintf("%v", this.EtcdServerURLs) + `,`,
		`EtcdKeyPrefix:` + fmt.Sprintf("%v", this.EtcdKeyPrefix) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTerraformProviderVolterra(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Conf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTerraformProviderVolterra
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Conf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Conf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bootstrap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerraformProviderVolterra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTerraformProviderVolterra
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTerraformProviderVolterra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bootstrap = append(m.Bootstrap, &types.Any{})
			if err := m.Bootstrap[len(m.Bootstrap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overrides", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerraformProviderVolterra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTerraformProviderVolterra
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTerraformProviderVolterra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Overrides = append(m.Overrides, &types.Any{})
			if err := m.Overrides[len(m.Overrides)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpcPort", wireType)
			}
			m.GrpcPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerraformProviderVolterra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrpcPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestPort", wireType)
			}
			m.RestPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerraformProviderVolterra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RestPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpcTLSPort", wireType)
			}
			m.GrpcTLSPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerraformProviderVolterra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrpcTLSPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestTLSPort", wireType)
			}
			m.RestTLSPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerraformProviderVolterra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RestTLSPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerraformProviderVolterra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTerraformProviderVolterra
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTerraformProviderVolterra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tls == nil {
				m.Tls = &schema.DaemonTLSParamsType{}
			}
			if err := m.Tls.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EtcdServerURLs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerraformProviderVolterra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTerraformProviderVolterra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTerraformProviderVolterra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EtcdServerURLs = append(m.EtcdServerURLs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EtcdKeyPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerraformProviderVolterra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTerraformProviderVolterra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTerraformProviderVolterra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EtcdKeyPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTerraformProviderVolterra(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTerraformProviderVolterra
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTerraformProviderVolterra
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTerraformProviderVolterra(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTerraformProviderVolterra
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTerraformProviderVolterra
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTerraformProviderVolterra
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTerraformProviderVolterra
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTerraformProviderVolterra
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTerraformProviderVolterra
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTerraformProviderVolterra        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTerraformProviderVolterra          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTerraformProviderVolterra = fmt.Errorf("proto: unexpected end of group")
)
