//
// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package secret_policy_rule

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) ClientChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for client_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ClientChoiceClientNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ClientName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for client_name")
	}
	return oValidatorFn_ClientName, nil
}

func (v *ValidateCreateSpecType) ActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.RuleAction)
		return int32(i)
	}
	// ves_io_schema_policy.RuleAction_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_policy.RuleAction_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for action")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["client_choice"]; exists {
		val := m.GetClientChoice()
		vOpts := append(opts,
			db.WithValidateField("client_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClientChoice().(type) {
	case *CreateSpecType_ClientName:
		if fv, exists := v.FldValidators["client_choice.client_name"]; exists {
			val := m.GetClientChoice().(*CreateSpecType_ClientName).ClientName
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ClientSelector:
		if fv, exists := v.FldValidators["client_choice.client_selector"]; exists {
			val := m.GetClientChoice().(*CreateSpecType_ClientSelector).ClientSelector
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ClientNameMatcher:
		if fv, exists := v.FldValidators["client_choice.client_name_matcher"]; exists {
			val := m.GetClientChoice().(*CreateSpecType_ClientNameMatcher).ClientNameMatcher
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_name_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["label_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("label_matcher"))
		if err := fv(ctx, m.GetLabelMatcher(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhClientChoice := v.ClientChoiceValidationRuleHandler
	rulesClientChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClientChoice(rulesClientChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.client_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["client_choice"] = vFn

	vrhClientChoiceClientName := v.ClientChoiceClientNameValidationRuleHandler
	rulesClientChoiceClientName := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
	}
	vFnMap["client_choice.client_name"], err = vrhClientChoiceClientName(rulesClientChoiceClientName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CreateSpecType.client_choice_client_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["client_choice.client_name"] = vFnMap["client_choice.client_name"]

	vrhAction := v.ActionValidationRuleHandler
	rulesAction := map[string]string{
		"ves.io.schema.rules.enum.in":          "[0,1]",
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAction(rulesAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["action"] = vFn

	v.FldValidators["client_choice.client_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["client_choice.client_name_matcher"] = ves_io_schema_policy.MatcherTypeBasicValidator().Validate

	v.FldValidators["label_matcher"] = ves_io_schema.LabelMatcherTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) ClientChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for client_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ClientChoiceClientNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ClientName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for client_name")
	}
	return oValidatorFn_ClientName, nil
}

func (v *ValidateGetSpecType) ActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.RuleAction)
		return int32(i)
	}
	// ves_io_schema_policy.RuleAction_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_policy.RuleAction_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for action")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["client_choice"]; exists {
		val := m.GetClientChoice()
		vOpts := append(opts,
			db.WithValidateField("client_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClientChoice().(type) {
	case *GetSpecType_ClientName:
		if fv, exists := v.FldValidators["client_choice.client_name"]; exists {
			val := m.GetClientChoice().(*GetSpecType_ClientName).ClientName
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ClientSelector:
		if fv, exists := v.FldValidators["client_choice.client_selector"]; exists {
			val := m.GetClientChoice().(*GetSpecType_ClientSelector).ClientSelector
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ClientNameMatcher:
		if fv, exists := v.FldValidators["client_choice.client_name_matcher"]; exists {
			val := m.GetClientChoice().(*GetSpecType_ClientNameMatcher).ClientNameMatcher
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_name_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["label_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("label_matcher"))
		if err := fv(ctx, m.GetLabelMatcher(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhClientChoice := v.ClientChoiceValidationRuleHandler
	rulesClientChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClientChoice(rulesClientChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.client_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["client_choice"] = vFn

	vrhClientChoiceClientName := v.ClientChoiceClientNameValidationRuleHandler
	rulesClientChoiceClientName := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
	}
	vFnMap["client_choice.client_name"], err = vrhClientChoiceClientName(rulesClientChoiceClientName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GetSpecType.client_choice_client_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["client_choice.client_name"] = vFnMap["client_choice.client_name"]

	vrhAction := v.ActionValidationRuleHandler
	rulesAction := map[string]string{
		"ves.io.schema.rules.enum.in":          "[0,1]",
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAction(rulesAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["action"] = vFn

	v.FldValidators["client_choice.client_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["client_choice.client_name_matcher"] = ves_io_schema_policy.MatcherTypeBasicValidator().Validate

	v.FldValidators["label_matcher"] = ves_io_schema.LabelMatcherTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) ClientChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for client_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ClientChoiceClientNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ClientName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for client_name")
	}
	return oValidatorFn_ClientName, nil
}

func (v *ValidateGlobalSpecType) ActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.RuleAction)
		return int32(i)
	}
	// ves_io_schema_policy.RuleAction_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_policy.RuleAction_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for action")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["client_choice"]; exists {
		val := m.GetClientChoice()
		vOpts := append(opts,
			db.WithValidateField("client_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClientChoice().(type) {
	case *GlobalSpecType_ClientName:
		if fv, exists := v.FldValidators["client_choice.client_name"]; exists {
			val := m.GetClientChoice().(*GlobalSpecType_ClientName).ClientName
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ClientSelector:
		if fv, exists := v.FldValidators["client_choice.client_selector"]; exists {
			val := m.GetClientChoice().(*GlobalSpecType_ClientSelector).ClientSelector
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ClientNameMatcher:
		if fv, exists := v.FldValidators["client_choice.client_name_matcher"]; exists {
			val := m.GetClientChoice().(*GlobalSpecType_ClientNameMatcher).ClientNameMatcher
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_name_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["label_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("label_matcher"))
		if err := fv(ctx, m.GetLabelMatcher(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhClientChoice := v.ClientChoiceValidationRuleHandler
	rulesClientChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClientChoice(rulesClientChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.client_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["client_choice"] = vFn

	vrhClientChoiceClientName := v.ClientChoiceClientNameValidationRuleHandler
	rulesClientChoiceClientName := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
	}
	vFnMap["client_choice.client_name"], err = vrhClientChoiceClientName(rulesClientChoiceClientName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GlobalSpecType.client_choice_client_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["client_choice.client_name"] = vFnMap["client_choice.client_name"]

	vrhAction := v.ActionValidationRuleHandler
	rulesAction := map[string]string{
		"ves.io.schema.rules.enum.in":          "[0,1]",
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAction(rulesAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["action"] = vFn

	v.FldValidators["client_choice.client_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["client_choice.client_name_matcher"] = ves_io_schema_policy.MatcherTypeValidator().Validate

	v.FldValidators["label_matcher"] = ves_io_schema.LabelMatcherTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) ClientChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for client_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ClientChoiceClientNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ClientName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for client_name")
	}
	return oValidatorFn_ClientName, nil
}

func (v *ValidateReplaceSpecType) ActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.RuleAction)
		return int32(i)
	}
	// ves_io_schema_policy.RuleAction_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_policy.RuleAction_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for action")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["client_choice"]; exists {
		val := m.GetClientChoice()
		vOpts := append(opts,
			db.WithValidateField("client_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClientChoice().(type) {
	case *ReplaceSpecType_ClientName:
		if fv, exists := v.FldValidators["client_choice.client_name"]; exists {
			val := m.GetClientChoice().(*ReplaceSpecType_ClientName).ClientName
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ClientSelector:
		if fv, exists := v.FldValidators["client_choice.client_selector"]; exists {
			val := m.GetClientChoice().(*ReplaceSpecType_ClientSelector).ClientSelector
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ClientNameMatcher:
		if fv, exists := v.FldValidators["client_choice.client_name_matcher"]; exists {
			val := m.GetClientChoice().(*ReplaceSpecType_ClientNameMatcher).ClientNameMatcher
			vOpts := append(opts,
				db.WithValidateField("client_choice"),
				db.WithValidateField("client_name_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["label_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("label_matcher"))
		if err := fv(ctx, m.GetLabelMatcher(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhClientChoice := v.ClientChoiceValidationRuleHandler
	rulesClientChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClientChoice(rulesClientChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.client_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["client_choice"] = vFn

	vrhClientChoiceClientName := v.ClientChoiceClientNameValidationRuleHandler
	rulesClientChoiceClientName := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
	}
	vFnMap["client_choice.client_name"], err = vrhClientChoiceClientName(rulesClientChoiceClientName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ReplaceSpecType.client_choice_client_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["client_choice.client_name"] = vFnMap["client_choice.client_name"]

	vrhAction := v.ActionValidationRuleHandler
	rulesAction := map[string]string{
		"ves.io.schema.rules.enum.in":          "[0,1]",
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAction(rulesAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["action"] = vFn

	v.FldValidators["client_choice.client_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["client_choice.client_name_matcher"] = ves_io_schema_policy.MatcherTypeBasicValidator().Validate

	v.FldValidators["label_matcher"] = ves_io_schema.LabelMatcherTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetClientChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClientChoice.(type) {
	case nil:
		o.ClientChoice = nil

	case *CreateSpecType_ClientName:
		o.ClientChoice = &GlobalSpecType_ClientName{ClientName: of.ClientName}

	case *CreateSpecType_ClientNameMatcher:

		f1 := o.GetClientNameMatcher()
		if f1 == nil {
			f1 = &ves_io_schema_policy.MatcherType{}
		}
		of.ClientNameMatcher.ToMatcherTypeWithoutDeepCopy(f1)
		o.ClientChoice = &GlobalSpecType_ClientNameMatcher{ClientNameMatcher: f1}

	case *CreateSpecType_ClientSelector:
		o.ClientChoice = &GlobalSpecType_ClientSelector{ClientSelector: of.ClientSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetClientChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClientChoice.(type) {
	case nil:
		r.ClientChoice = nil

	case *GlobalSpecType_ClientName:
		r.ClientChoice = &CreateSpecType_ClientName{ClientName: of.ClientName}

	case *GlobalSpecType_ClientNameMatcher:

		f1 := &ves_io_schema_policy.MatcherTypeBasic{}
		f1.FromMatcherTypeWithoutDeepCopy(of.ClientNameMatcher)
		r.ClientChoice = &CreateSpecType_ClientNameMatcher{ClientNameMatcher: f1}

	case *GlobalSpecType_ClientSelector:
		r.ClientChoice = &CreateSpecType_ClientSelector{ClientSelector: of.ClientSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Action = f.GetAction()
	m.GetClientChoiceFromGlobalSpecType(f)
	m.LabelMatcher = f.GetLabelMatcher()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Action = m1.Action
	m1.SetClientChoiceToGlobalSpecType(f)
	f.LabelMatcher = m1.LabelMatcher
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetClientChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClientChoice.(type) {
	case nil:
		o.ClientChoice = nil

	case *GetSpecType_ClientName:
		o.ClientChoice = &GlobalSpecType_ClientName{ClientName: of.ClientName}

	case *GetSpecType_ClientNameMatcher:

		f1 := o.GetClientNameMatcher()
		if f1 == nil {
			f1 = &ves_io_schema_policy.MatcherType{}
		}
		of.ClientNameMatcher.ToMatcherTypeWithoutDeepCopy(f1)
		o.ClientChoice = &GlobalSpecType_ClientNameMatcher{ClientNameMatcher: f1}

	case *GetSpecType_ClientSelector:
		o.ClientChoice = &GlobalSpecType_ClientSelector{ClientSelector: of.ClientSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetClientChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClientChoice.(type) {
	case nil:
		r.ClientChoice = nil

	case *GlobalSpecType_ClientName:
		r.ClientChoice = &GetSpecType_ClientName{ClientName: of.ClientName}

	case *GlobalSpecType_ClientNameMatcher:

		f1 := &ves_io_schema_policy.MatcherTypeBasic{}
		f1.FromMatcherTypeWithoutDeepCopy(of.ClientNameMatcher)
		r.ClientChoice = &GetSpecType_ClientNameMatcher{ClientNameMatcher: f1}

	case *GlobalSpecType_ClientSelector:
		r.ClientChoice = &GetSpecType_ClientSelector{ClientSelector: of.ClientSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Action = f.GetAction()
	m.GetClientChoiceFromGlobalSpecType(f)
	m.LabelMatcher = f.GetLabelMatcher()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Action = m1.Action
	m1.SetClientChoiceToGlobalSpecType(f)
	f.LabelMatcher = m1.LabelMatcher
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetClientChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClientChoice.(type) {
	case nil:
		o.ClientChoice = nil

	case *ReplaceSpecType_ClientName:
		o.ClientChoice = &GlobalSpecType_ClientName{ClientName: of.ClientName}

	case *ReplaceSpecType_ClientNameMatcher:

		f1 := o.GetClientNameMatcher()
		if f1 == nil {
			f1 = &ves_io_schema_policy.MatcherType{}
		}
		of.ClientNameMatcher.ToMatcherTypeWithoutDeepCopy(f1)
		o.ClientChoice = &GlobalSpecType_ClientNameMatcher{ClientNameMatcher: f1}

	case *ReplaceSpecType_ClientSelector:
		o.ClientChoice = &GlobalSpecType_ClientSelector{ClientSelector: of.ClientSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetClientChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClientChoice.(type) {
	case nil:
		r.ClientChoice = nil

	case *GlobalSpecType_ClientName:
		r.ClientChoice = &ReplaceSpecType_ClientName{ClientName: of.ClientName}

	case *GlobalSpecType_ClientNameMatcher:

		f1 := &ves_io_schema_policy.MatcherTypeBasic{}
		f1.FromMatcherTypeWithoutDeepCopy(of.ClientNameMatcher)
		r.ClientChoice = &ReplaceSpecType_ClientNameMatcher{ClientNameMatcher: f1}

	case *GlobalSpecType_ClientSelector:
		r.ClientChoice = &ReplaceSpecType_ClientSelector{ClientSelector: of.ClientSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Action = f.GetAction()
	m.GetClientChoiceFromGlobalSpecType(f)
	m.LabelMatcher = f.GetLabelMatcher()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Action = m1.Action
	m1.SetClientChoiceToGlobalSpecType(f)
	f.LabelMatcher = m1.LabelMatcher
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}
