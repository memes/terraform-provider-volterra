// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/bigip/apm/public_custom_data_api.proto

// BIG-IP APM as a Service
//
// x-displayName: "BIG-IP APM as a Service"
// APIs to get metrics for BIG-IP APM services

package apm

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Metric Type
//
// x-displayName: "Metric Type"
// List of metric types
type MetricType int32

const (
	// x-displayName: "CPU utilization of an instance of BIG-IP running APM"
	// x-unit: "percent"
	CPU_UTILIZATION MetricType = 0
	// x-displayName: "Packets received by instance BIG-IP running APM"
	// x-unit: "count"
	NETWORK_IN_PACKETS MetricType = 1
	// x-displayName: "Packets received by instance BIG-IP running APM"
	// x-unit: "count"
	NETWORK_OUT_PACKETS MetricType = 2
	// x-displayName: "Number of access sessions in BIG-IP APM instance"
	// x-unit: "count"
	ACCESS_SESSIONS_COUNT MetricType = 3
	// x-displayName: "Received Throughput in Throughput bytes"
	// x-unit: "Bps"
	RX_THROUGHPUT_BYTES MetricType = 4
	// x-displayName: "Received Data in bytes bytes"
	// x-unit: "Bps"
	RX_TRANSFERRED_BYTES MetricType = 5
	// x-displayName: "Rate of connection establishment"
	// x-unit: "per second"
	CONNECTIONS_RATE MetricType = 7
	// x-displayName: "Total number of connections established"
	// x-unit: "count"
	CONNECTIONS_TOTAL MetricType = 8
	// x-displayName: "Max access sessions count"
	// x-unit: "count"
	MAX_ACCESS_SESSIONS_COUNT MetricType = 9
	// x-displayName: "Average healthscore of the service"
	// x-unit: "percentage"
	HEALTHSCORE MetricType = 10
)

var MetricType_name = map[int32]string{
	0:  "CPU_UTILIZATION",
	1:  "NETWORK_IN_PACKETS",
	2:  "NETWORK_OUT_PACKETS",
	3:  "ACCESS_SESSIONS_COUNT",
	4:  "RX_THROUGHPUT_BYTES",
	5:  "RX_TRANSFERRED_BYTES",
	7:  "CONNECTIONS_RATE",
	8:  "CONNECTIONS_TOTAL",
	9:  "MAX_ACCESS_SESSIONS_COUNT",
	10: "HEALTHSCORE",
}

var MetricType_value = map[string]int32{
	"CPU_UTILIZATION":           0,
	"NETWORK_IN_PACKETS":        1,
	"NETWORK_OUT_PACKETS":       2,
	"ACCESS_SESSIONS_COUNT":     3,
	"RX_THROUGHPUT_BYTES":       4,
	"RX_TRANSFERRED_BYTES":      5,
	"CONNECTIONS_RATE":          7,
	"CONNECTIONS_TOTAL":         8,
	"MAX_ACCESS_SESSIONS_COUNT": 9,
	"HEALTHSCORE":               10,
}

func (MetricType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f892952591f8a9fd, []int{0}
}

// Metric Label
//
// x-displayName: "Metric Label"
// Labels in BIG-IP APM Service Metrics
type MetricLabel int32

const (
	// x-displayName: "Site"
	SITE MetricLabel = 0
	// x-displayName: "Service"
	SERVICE MetricLabel = 1
	// x-displayName: "Service Instance"
	SERVICE_INSTANCE MetricLabel = 2
)

var MetricLabel_name = map[int32]string{
	0: "SITE",
	1: "SERVICE",
	2: "SERVICE_INSTANCE",
}

var MetricLabel_value = map[string]int32{
	"SITE":             0,
	"SERVICE":          1,
	"SERVICE_INSTANCE": 2,
}

func (MetricLabel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f892952591f8a9fd, []int{1}
}

// Metrics Request
//
// x-displayName: "Metrics Request"
// Request to get the metrics for BIG-IP APM services
type MetricsRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "system"
	// Only `system` namespace is supported.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Label Filter
	//
	// x-displayName: "Filter"
	// x-example: "{HOSTNAME=\"WAF-1\"}"
	// filter is used to specify the list of matchers
	// syntax for filter := {[<matcher>]}
	// <matcher> := <label><operator>"<value>"
	//   <label> := string
	//     One or more labels defined in MetricLabel {SITE, SERVICE, SERVICE_INSTANCE} can be specified in the filter.
	//   <value> := string
	//   <operator> := ["="|"!="|"=~"|"!~"]
	//     =  : equal to
	//     != : not equal to
	//     =~ : regex match
	//     !~ : not regex match
	//
	// Optional: If not specified, metric will be aggregated based on the group_by labels.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// Group by
	//
	// x-displayName: "Group By"
	// Aggregate data by zero or more labels {SITE, SERVICE, SERVICE_INSTANCE}
	GroupBy []MetricLabel `protobuf:"varint,3,rep,packed,name=group_by,json=groupBy,proto3,enum=ves.io.schema.bigip.apm.MetricLabel" json:"group_by,omitempty"`
	// Field Selector
	//
	// x-displayName: "Field Selector"
	// x-required
	// Select fields to be returned in the response.
	// One or more fields in {TX_THROUGHPUT_BYTES, CONNECTION_RATE, TX_THROUGHPUT_PACKETS, RX_THROUGHPUT_BYTES, RX_THROUGHPUT_PACKETS} can be specified.
	FieldSelector []MetricType `protobuf:"varint,4,rep,packed,name=field_selector,json=fieldSelector,proto3,enum=ves.io.schema.bigip.apm.MetricType" json:"field_selector,omitempty"`
	// Start time
	//
	// x-displayName: "Start Time"
	// x-example: "1570194000"
	//
	// start time of metric collection from which data will be considered to build graph.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the start_time will be evaluated to end_time-10m
	//           If end_time is not specified, then the start_time will be evaluated to <current time>-10m
	StartTime string `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time
	//
	// x-displayName: "End Time"
	// x-example: "1570197600"
	// end time of metric collection from which data will be considered to build graph.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the end_time will be evaluated to start_time+10m
	//           If start_time is not specified, then the end_time will be evaluated to <current time>
	EndTime string `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Step
	//
	// x-displayName: "Step"
	// x-example: "5m"
	// step is the resolution width, which determines the number of the data points [x-axis (time)] to be returned in the response.
	// The timestamps in the response will be t1=start_time, t2=t1+step, ... tn=tn-1+step, where tn <= end_time.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	//
	// Optional: If not specified, then step size is evaluated to <end_time - start_time>
	Step string `protobuf:"bytes,7,opt,name=step,proto3" json:"step,omitempty"`
}

func (m *MetricsRequest) Reset()      { *m = MetricsRequest{} }
func (*MetricsRequest) ProtoMessage() {}
func (*MetricsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f892952591f8a9fd, []int{0}
}
func (m *MetricsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetricsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsRequest.Merge(m, src)
}
func (m *MetricsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MetricsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsRequest proto.InternalMessageInfo

func (m *MetricsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *MetricsRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *MetricsRequest) GetGroupBy() []MetricLabel {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *MetricsRequest) GetFieldSelector() []MetricType {
	if m != nil {
		return m.FieldSelector
	}
	return nil
}

func (m *MetricsRequest) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *MetricsRequest) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *MetricsRequest) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

// Metrics Response
//
// x-displayName: "Metrics Response"
// Metrics for BIG-IP APM Services
type MetricsResponse struct {
	// Data
	//
	// x-displayName: "Data"
	// Data contains time-series metric data for BIG-IP APM services
	Data []*MetricData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	// step
	//
	// x-displayName: "Step"
	// x-example: "30m"
	// Actual step size used in the response. It could be higher than the requested step due to metric rollups and the query duration.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	Step string `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
}

func (m *MetricsResponse) Reset()      { *m = MetricsResponse{} }
func (*MetricsResponse) ProtoMessage() {}
func (*MetricsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f892952591f8a9fd, []int{1}
}
func (m *MetricsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetricsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsResponse.Merge(m, src)
}
func (m *MetricsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MetricsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsResponse proto.InternalMessageInfo

func (m *MetricsResponse) GetData() []*MetricData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MetricsResponse) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

// Metric Type Data
//
// x-displayName: "Metric Type Data"
// Metric Type Data contains key/value pair that uniquely identifies the group_by labels specified in the request.
type MetricTypeData struct {
	// Key
	//
	// x-displayName: "Key"
	// Key contains the name/value pair.
	// "name" is the label name defined in "MetricLabel"
	Key map[string]string `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Value
	//
	// x-displayName: "Value"
	// List of metric values.
	Value []*schema.MetricValue `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (m *MetricTypeData) Reset()      { *m = MetricTypeData{} }
func (*MetricTypeData) ProtoMessage() {}
func (*MetricTypeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f892952591f8a9fd, []int{2}
}
func (m *MetricTypeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricTypeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricTypeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetricTypeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricTypeData.Merge(m, src)
}
func (m *MetricTypeData) XXX_Size() int {
	return m.Size()
}
func (m *MetricTypeData) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricTypeData.DiscardUnknown(m)
}

var xxx_messageInfo_MetricTypeData proto.InternalMessageInfo

func (m *MetricTypeData) GetKey() map[string]string {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MetricTypeData) GetValue() []*schema.MetricValue {
	if m != nil {
		return m.Value
	}
	return nil
}

// Metric Data
//
// x-displayName: "Metric Data"
// Metric data contains the metric type and the corresponding metric value
type MetricData struct {
	// Type
	//
	// x-displayName: "Type"
	// Metric Type
	Type MetricType `protobuf:"varint,1,opt,name=type,proto3,enum=ves.io.schema.bigip.apm.MetricType" json:"type,omitempty"`
	// Data
	//
	// x-displayName: "Data"
	// List of metric data
	Data []*MetricTypeData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *MetricData) Reset()      { *m = MetricData{} }
func (*MetricData) ProtoMessage() {}
func (*MetricData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f892952591f8a9fd, []int{3}
}
func (m *MetricData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetricData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricData.Merge(m, src)
}
func (m *MetricData) XXX_Size() int {
	return m.Size()
}
func (m *MetricData) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricData.DiscardUnknown(m)
}

var xxx_messageInfo_MetricData proto.InternalMessageInfo

func (m *MetricData) GetType() MetricType {
	if m != nil {
		return m.Type
	}
	return CPU_UTILIZATION
}

func (m *MetricData) GetData() []*MetricTypeData {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.bigip.apm.MetricType", MetricType_name, MetricType_value)
	golang_proto.RegisterEnum("ves.io.schema.bigip.apm.MetricType", MetricType_name, MetricType_value)
	proto.RegisterEnum("ves.io.schema.bigip.apm.MetricLabel", MetricLabel_name, MetricLabel_value)
	golang_proto.RegisterEnum("ves.io.schema.bigip.apm.MetricLabel", MetricLabel_name, MetricLabel_value)
	proto.RegisterType((*MetricsRequest)(nil), "ves.io.schema.bigip.apm.MetricsRequest")
	golang_proto.RegisterType((*MetricsRequest)(nil), "ves.io.schema.bigip.apm.MetricsRequest")
	proto.RegisterType((*MetricsResponse)(nil), "ves.io.schema.bigip.apm.MetricsResponse")
	golang_proto.RegisterType((*MetricsResponse)(nil), "ves.io.schema.bigip.apm.MetricsResponse")
	proto.RegisterType((*MetricTypeData)(nil), "ves.io.schema.bigip.apm.MetricTypeData")
	golang_proto.RegisterType((*MetricTypeData)(nil), "ves.io.schema.bigip.apm.MetricTypeData")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.bigip.apm.MetricTypeData.KeyEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.bigip.apm.MetricTypeData.KeyEntry")
	proto.RegisterType((*MetricData)(nil), "ves.io.schema.bigip.apm.MetricData")
	golang_proto.RegisterType((*MetricData)(nil), "ves.io.schema.bigip.apm.MetricData")
}

func init() {
	proto.RegisterFile("ves.io/schema/bigip/apm/public_custom_data_api.proto", fileDescriptor_f892952591f8a9fd)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/bigip/apm/public_custom_data_api.proto", fileDescriptor_f892952591f8a9fd)
}

var fileDescriptor_f892952591f8a9fd = []byte{
	// 974 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xce, 0x38, 0xe9, 0x26, 0x9d, 0x6a, 0x5b, 0x33, 0xed, 0xee, 0xba, 0xa1, 0x58, 0x55, 0x00,
	0x51, 0x2a, 0x62, 0x57, 0xcb, 0x4f, 0x95, 0x03, 0x4a, 0xbc, 0x86, 0x46, 0x6d, 0x93, 0xca, 0x76,
	0xca, 0xb2, 0x17, 0x6b, 0x92, 0x4c, 0xb3, 0x6e, 0x63, 0x8f, 0xb1, 0x27, 0x81, 0x08, 0x21, 0xa1,
	0x5e, 0xb8, 0x22, 0xb8, 0x70, 0xe4, 0xc8, 0x1f, 0xc0, 0x01, 0xb1, 0x12, 0xea, 0x8d, 0x3d, 0xa1,
	0x0a, 0x2e, 0x7b, 0xa4, 0x29, 0x48, 0x70, 0xeb, 0x81, 0x2b, 0x12, 0xf2, 0xd8, 0x4e, 0x9b, 0xc2,
	0xaa, 0xbd, 0xbd, 0xf7, 0xbe, 0xf7, 0x7d, 0xef, 0xcd, 0xf3, 0xcc, 0x33, 0x7c, 0x6d, 0x40, 0x42,
	0xc5, 0xa1, 0x6a, 0xd8, 0x7e, 0x48, 0x5c, 0xac, 0xb6, 0x9c, 0xae, 0xe3, 0xab, 0xd8, 0x77, 0x55,
	0xbf, 0xdf, 0xea, 0x39, 0x6d, 0xbb, 0xdd, 0x0f, 0x19, 0x75, 0xed, 0x0e, 0x66, 0xd8, 0xc6, 0xbe,
	0xa3, 0xf8, 0x01, 0x65, 0x14, 0xdd, 0x89, 0x59, 0x4a, 0xcc, 0x52, 0x38, 0x4b, 0xc1, 0xbe, 0x5b,
	0x2c, 0x77, 0x1d, 0xf6, 0xb0, 0xdf, 0x52, 0xda, 0xd4, 0x55, 0xbb, 0xb4, 0x4b, 0x55, 0x9e, 0xdf,
	0xea, 0xef, 0x71, 0x8f, 0x3b, 0xdc, 0x8a, 0x75, 0x8a, 0x4b, 0x5d, 0x4a, 0xbb, 0x3d, 0xa2, 0x62,
	0xdf, 0x51, 0xb1, 0xe7, 0x51, 0x86, 0x99, 0x43, 0xbd, 0x30, 0x41, 0x9f, 0x9d, 0xec, 0x8d, 0xfa,
	0x17, 0xc1, 0xc5, 0x49, 0x90, 0x0d, 0x7d, 0x92, 0x42, 0x4b, 0x93, 0xd0, 0x00, 0xf7, 0x9c, 0x0e,
	0x66, 0x24, 0x41, 0x4b, 0x97, 0x50, 0x12, 0x12, 0x6f, 0x30, 0x29, 0x5e, 0xfa, 0x43, 0x80, 0xb3,
	0xdb, 0x84, 0x05, 0x4e, 0x3b, 0x34, 0xc8, 0x87, 0x7d, 0x12, 0x32, 0xb4, 0x04, 0xa7, 0x3d, 0xec,
	0x92, 0xd0, 0xc7, 0x6d, 0x22, 0x81, 0x65, 0xb0, 0x32, 0x6d, 0x9c, 0x07, 0xd0, 0x6d, 0x78, 0x63,
	0xcf, 0xe9, 0x31, 0x12, 0x48, 0x02, 0x87, 0x12, 0x0f, 0xbd, 0x03, 0x0b, 0xdd, 0x80, 0xf6, 0x7d,
	0xbb, 0x35, 0x94, 0xb2, 0xcb, 0xd9, 0x95, 0xd9, 0xbb, 0x2f, 0x28, 0x4f, 0x99, 0x9d, 0x12, 0x17,
	0xdc, 0xc2, 0x2d, 0xd2, 0x33, 0xf2, 0x9c, 0x55, 0x1d, 0xa2, 0x7d, 0x38, 0xbb, 0xe7, 0x90, 0x5e,
	0xc7, 0x0e, 0x49, 0x8f, 0xb4, 0x19, 0x0d, 0xa4, 0x1c, 0x97, 0x79, 0xfe, 0x0a, 0x19, 0x6b, 0xe8,
	0x93, 0xaa, 0xfc, 0xc3, 0x5f, 0x47, 0xd9, 0xa9, 0x2f, 0x81, 0x20, 0x16, 0x52, 0xab, 0x00, 0x52,
	0x4b, 0x02, 0xc6, 0x4d, 0x2e, 0x6d, 0x26, 0xca, 0xe8, 0x65, 0x08, 0x43, 0x86, 0x03, 0x66, 0x33,
	0xc7, 0x25, 0xd2, 0x54, 0x74, 0x90, 0x2a, 0xe4, 0xe9, 0x41, 0xf6, 0xeb, 0x1c, 0x30, 0xa6, 0x39,
	0x6a, 0x39, 0x2e, 0x41, 0x2f, 0xc2, 0x02, 0xf1, 0x3a, 0x71, 0xe2, 0x8d, 0xff, 0x24, 0xe6, 0x89,
	0xd7, 0xe1, 0x69, 0x32, 0xcc, 0x85, 0x8c, 0xf8, 0x52, 0x7e, 0x22, 0xe5, 0x9b, 0x1c, 0x30, 0x78,
	0xbc, 0xb4, 0x0f, 0xe7, 0xc6, 0x63, 0x0e, 0x7d, 0xea, 0x85, 0x04, 0xbd, 0x09, 0x73, 0xd1, 0x65,
	0x93, 0xc0, 0x72, 0x76, 0x65, 0xe6, 0xca, 0x63, 0xde, 0xc3, 0x0c, 0x1b, 0x9c, 0x30, 0xae, 0x25,
	0x4c, 0xd4, 0x3a, 0x13, 0xd2, 0x5a, 0x3f, 0x82, 0xf4, 0x9b, 0x46, 0xb3, 0x89, 0x88, 0xa8, 0x0a,
	0xb3, 0x07, 0x64, 0x98, 0x94, 0x5a, 0xbb, 0xc6, 0x44, 0x23, 0x96, 0xb2, 0x49, 0x86, 0xba, 0xc7,
	0x82, 0xa1, 0x11, 0x91, 0xd1, 0x1a, 0x9c, 0x1a, 0xe0, 0x5e, 0x9f, 0x48, 0x02, 0x57, 0x29, 0x5e,
	0x52, 0x89, 0xb9, 0xbb, 0x51, 0x86, 0x11, 0x27, 0x16, 0xdf, 0x80, 0x85, 0x54, 0x02, 0x89, 0x69,
	0x07, 0xd1, 0xa5, 0xe1, 0x7a, 0x0b, 0xe7, 0x7a, 0x51, 0x2c, 0x76, 0xd6, 0x85, 0xb7, 0x40, 0xe9,
	0x10, 0x40, 0x78, 0x7e, 0xea, 0x68, 0x50, 0xd1, 0xa5, 0xe7, 0xdc, 0xeb, 0xdd, 0x07, 0x83, 0x13,
	0xd0, 0xdb, 0xc9, 0x84, 0xe3, 0x86, 0x5f, 0xba, 0xe6, 0xb1, 0xe3, 0x29, 0xaf, 0xfe, 0x33, 0x6e,
	0x22, 0x02, 0xd0, 0x3c, 0x9c, 0xd3, 0x76, 0x9a, 0x76, 0xd3, 0xaa, 0x6d, 0xd5, 0x1e, 0x54, 0xac,
	0x5a, 0xa3, 0x2e, 0x66, 0xd0, 0x6d, 0x88, 0xea, 0xba, 0xf5, 0x7e, 0xc3, 0xd8, 0xb4, 0x6b, 0x75,
	0x7b, 0xa7, 0xa2, 0x6d, 0xea, 0x96, 0x29, 0x02, 0x74, 0x07, 0xce, 0xa7, 0xf1, 0x46, 0xd3, 0x1a,
	0x03, 0x02, 0x5a, 0x84, 0xb7, 0x2a, 0x9a, 0xa6, 0x9b, 0xa6, 0x6d, 0xea, 0xa6, 0x59, 0x6b, 0xd4,
	0x4d, 0x5b, 0x6b, 0x34, 0xeb, 0x96, 0x98, 0x8d, 0x38, 0xc6, 0x7d, 0xdb, 0xda, 0x30, 0x1a, 0xcd,
	0xf7, 0x36, 0x76, 0x9a, 0x96, 0x5d, 0xfd, 0xc0, 0xd2, 0x4d, 0x31, 0x87, 0x24, 0xb8, 0x10, 0x01,
	0x46, 0xa5, 0x6e, 0xbe, 0xab, 0x1b, 0x86, 0x7e, 0x2f, 0x41, 0xa6, 0xd0, 0x02, 0x14, 0xb5, 0x46,
	0xbd, 0xae, 0x6b, 0x16, 0x57, 0x32, 0x2a, 0x96, 0x2e, 0xe6, 0xd1, 0x2d, 0xf8, 0xcc, 0xc5, 0xa8,
	0xd5, 0xb0, 0x2a, 0x5b, 0x62, 0x01, 0x3d, 0x07, 0x17, 0xb7, 0x2b, 0xf7, 0xed, 0xff, 0x2f, 0x3f,
	0x8d, 0xe6, 0xe0, 0xcc, 0x86, 0x5e, 0xd9, 0xb2, 0x36, 0x4c, 0xad, 0x61, 0xe8, 0x22, 0x5c, 0x5d,
	0x87, 0x33, 0x17, 0xde, 0x29, 0x2a, 0xc0, 0x9c, 0x59, 0xb3, 0x74, 0x31, 0x83, 0x66, 0x60, 0xde,
	0xd4, 0x8d, 0xdd, 0x9a, 0xa6, 0x8b, 0x20, 0x6a, 0x21, 0x71, 0xec, 0x5a, 0xdd, 0xb4, 0x2a, 0x75,
	0x4d, 0x17, 0x85, 0xbb, 0x7f, 0x03, 0x78, 0x53, 0xe3, 0xfb, 0x34, 0x1a, 0x68, 0x65, 0xa7, 0x86,
	0xbe, 0x03, 0x30, 0x9f, 0x3c, 0x00, 0x74, 0xd5, 0x87, 0x48, 0x37, 0x51, 0x71, 0xe5, 0xea, 0xc4,
	0xf8, 0x2d, 0x95, 0x76, 0x1f, 0x7f, 0x2f, 0x80, 0xd1, 0x4f, 0xd2, 0xfc, 0x80, 0x84, 0x65, 0x87,
	0x96, 0x3d, 0xc2, 0x3e, 0xa2, 0xc1, 0x41, 0x39, 0x20, 0xb8, 0x73, 0xf8, 0xeb, 0xef, 0x5f, 0x09,
	0xaf, 0x97, 0xd6, 0x92, 0x45, 0xaf, 0x8e, 0x77, 0x59, 0xa8, 0x7e, 0x32, 0xb6, 0x3f, 0xbd, 0xf0,
	0x43, 0x70, 0x63, 0xf1, 0x75, 0xb0, 0x5a, 0x7c, 0xe5, 0xe8, 0x11, 0xc8, 0xfe, 0xf2, 0x08, 0xc8,
	0x4f, 0x6b, 0xa4, 0xd1, 0xda, 0x27, 0x6d, 0x76, 0xf8, 0xb3, 0x24, 0x48, 0xa0, 0xfa, 0x39, 0x38,
	0x3e, 0x91, 0x33, 0x4f, 0x4e, 0xe4, 0xcc, 0xd9, 0x89, 0x0c, 0x3e, 0x1b, 0xc9, 0xe0, 0xdb, 0x91,
	0x0c, 0x1e, 0x8f, 0x64, 0x70, 0x3c, 0x92, 0xc1, 0x6f, 0x23, 0x19, 0xfc, 0x39, 0x92, 0x33, 0x67,
	0x23, 0x19, 0x7c, 0x71, 0x2a, 0x67, 0x8e, 0x4e, 0x65, 0x70, 0x7c, 0x2a, 0x67, 0x9e, 0x9c, 0xca,
	0x99, 0x07, 0xdb, 0x5d, 0xea, 0x1f, 0x74, 0x95, 0x01, 0x8d, 0x96, 0x69, 0x80, 0x95, 0x7e, 0xa8,
	0x72, 0x63, 0x8f, 0x06, 0x6e, 0xd9, 0x0f, 0xe8, 0xc0, 0xe9, 0x90, 0xa0, 0x9c, 0xc2, 0xaa, 0xdf,
	0xea, 0x52, 0x95, 0x7c, 0xcc, 0x92, 0xd5, 0x7e, 0xf9, 0x9f, 0xd6, 0xba, 0xc1, 0xb7, 0xfb, 0xab,
	0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x62, 0x6a, 0x04, 0xf5, 0x06, 0x00, 0x00,
}

func (x MetricType) String() string {
	s, ok := MetricType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MetricLabel) String() string {
	s, ok := MetricLabel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *MetricsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetricsRequest)
	if !ok {
		that2, ok := that.(MetricsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Filter != that1.Filter {
		return false
	}
	if len(this.GroupBy) != len(that1.GroupBy) {
		return false
	}
	for i := range this.GroupBy {
		if this.GroupBy[i] != that1.GroupBy[i] {
			return false
		}
	}
	if len(this.FieldSelector) != len(that1.FieldSelector) {
		return false
	}
	for i := range this.FieldSelector {
		if this.FieldSelector[i] != that1.FieldSelector[i] {
			return false
		}
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.Step != that1.Step {
		return false
	}
	return true
}
func (this *MetricsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetricsResponse)
	if !ok {
		that2, ok := that.(MetricsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	if this.Step != that1.Step {
		return false
	}
	return true
}
func (this *MetricTypeData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetricTypeData)
	if !ok {
		that2, ok := that.(MetricTypeData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Key) != len(that1.Key) {
		return false
	}
	for i := range this.Key {
		if this.Key[i] != that1.Key[i] {
			return false
		}
	}
	if len(this.Value) != len(that1.Value) {
		return false
	}
	for i := range this.Value {
		if !this.Value[i].Equal(that1.Value[i]) {
			return false
		}
	}
	return true
}
func (this *MetricData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetricData)
	if !ok {
		that2, ok := that.(MetricData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *MetricsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&apm.MetricsRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Filter: "+fmt.Sprintf("%#v", this.Filter)+",\n")
	s = append(s, "GroupBy: "+fmt.Sprintf("%#v", this.GroupBy)+",\n")
	s = append(s, "FieldSelector: "+fmt.Sprintf("%#v", this.FieldSelector)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetricsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apm.MetricsResponse{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetricTypeData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apm.MetricTypeData{")
	keysForKey := make([]string, 0, len(this.Key))
	for k, _ := range this.Key {
		keysForKey = append(keysForKey, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForKey)
	mapStringForKey := "map[string]string{"
	for _, k := range keysForKey {
		mapStringForKey += fmt.Sprintf("%#v: %#v,", k, this.Key[k])
	}
	mapStringForKey += "}"
	if this.Key != nil {
		s = append(s, "Key: "+mapStringForKey+",\n")
	}
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetricData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apm.MetricData{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomDataApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomDataAPIClient is the client API for CustomDataAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomDataAPIClient interface {
	// Metrics
	//
	// x-displayName: "Metrics"
	// BIG-IP APM metrics
	Metrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error)
}

type customDataAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomDataAPIClient(cc *grpc.ClientConn) CustomDataAPIClient {
	return &customDataAPIClient{cc}
}

func (c *customDataAPIClient) Metrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error) {
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.bigip.apm.CustomDataAPI/Metrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomDataAPIServer is the server API for CustomDataAPI service.
type CustomDataAPIServer interface {
	// Metrics
	//
	// x-displayName: "Metrics"
	// BIG-IP APM metrics
	Metrics(context.Context, *MetricsRequest) (*MetricsResponse, error)
}

// UnimplementedCustomDataAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomDataAPIServer struct {
}

func (*UnimplementedCustomDataAPIServer) Metrics(ctx context.Context, req *MetricsRequest) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metrics not implemented")
}

func RegisterCustomDataAPIServer(s *grpc.Server, srv CustomDataAPIServer) {
	s.RegisterService(&_CustomDataAPI_serviceDesc, srv)
}

func _CustomDataAPI_Metrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataAPIServer).Metrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.bigip.apm.CustomDataAPI/Metrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataAPIServer).Metrics(ctx, req.(*MetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomDataAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.bigip.apm.CustomDataAPI",
	HandlerType: (*CustomDataAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Metrics",
			Handler:    _CustomDataAPI_Metrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/bigip/apm/public_custom_data_api.proto",
}

func (m *MetricsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Step) > 0 {
		i -= len(m.Step)
		copy(dAtA[i:], m.Step)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Step)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FieldSelector) > 0 {
		dAtA2 := make([]byte, len(m.FieldSelector)*10)
		var j1 int
		for _, num := range m.FieldSelector {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GroupBy) > 0 {
		dAtA4 := make([]byte, len(m.GroupBy)*10)
		var j3 int
		for _, num := range m.GroupBy {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Filter) > 0 {
		i -= len(m.Filter)
		copy(dAtA[i:], m.Filter)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Filter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetricsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Step) > 0 {
		i -= len(m.Step)
		copy(dAtA[i:], m.Step)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Step)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MetricTypeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricTypeData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricTypeData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		for iNdEx := len(m.Value) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Value[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Key) > 0 {
		for k := range m.Key {
			v := m.Key[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MetricData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Type != 0 {
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomDataApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomDataApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MetricsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	if len(m.GroupBy) > 0 {
		l = 0
		for _, e := range m.GroupBy {
			l += sovPublicCustomDataApi(uint64(e))
		}
		n += 1 + sovPublicCustomDataApi(uint64(l)) + l
	}
	if len(m.FieldSelector) > 0 {
		l = 0
		for _, e := range m.FieldSelector {
			l += sovPublicCustomDataApi(uint64(e))
		}
		n += 1 + sovPublicCustomDataApi(uint64(l)) + l
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	return n
}

func (m *MetricsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	return n
}

func (m *MetricTypeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Key) > 0 {
		for k, v := range m.Key {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPublicCustomDataApi(uint64(len(k))) + 1 + len(v) + sovPublicCustomDataApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovPublicCustomDataApi(uint64(mapEntrySize))
		}
	}
	if len(m.Value) > 0 {
		for _, e := range m.Value {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	return n
}

func (m *MetricData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPublicCustomDataApi(uint64(m.Type))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	return n
}

func sovPublicCustomDataApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomDataApi(x uint64) (n int) {
	return sovPublicCustomDataApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MetricsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetricsRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Filter:` + fmt.Sprintf("%v", this.Filter) + `,`,
		`GroupBy:` + fmt.Sprintf("%v", this.GroupBy) + `,`,
		`FieldSelector:` + fmt.Sprintf("%v", this.FieldSelector) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetricsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*MetricData{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(f.String(), "MetricData", "MetricData", 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&MetricsResponse{`,
		`Data:` + repeatedStringForData + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetricTypeData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValue := "[]*MetricValue{"
	for _, f := range this.Value {
		repeatedStringForValue += strings.Replace(fmt.Sprintf("%v", f), "MetricValue", "schema.MetricValue", 1) + ","
	}
	repeatedStringForValue += "}"
	keysForKey := make([]string, 0, len(this.Key))
	for k, _ := range this.Key {
		keysForKey = append(keysForKey, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForKey)
	mapStringForKey := "map[string]string{"
	for _, k := range keysForKey {
		mapStringForKey += fmt.Sprintf("%v: %v,", k, this.Key[k])
	}
	mapStringForKey += "}"
	s := strings.Join([]string{`&MetricTypeData{`,
		`Key:` + mapStringForKey + `,`,
		`Value:` + repeatedStringForValue + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetricData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*MetricTypeData{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(f.String(), "MetricTypeData", "MetricTypeData", 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&MetricData{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Data:` + repeatedStringForData + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomDataApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MetricsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v MetricLabel
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= MetricLabel(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GroupBy = append(m.GroupBy, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicCustomDataApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicCustomDataApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.GroupBy) == 0 {
					m.GroupBy = make([]MetricLabel, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v MetricLabel
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomDataApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= MetricLabel(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GroupBy = append(m.GroupBy, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupBy", wireType)
			}
		case 4:
			if wireType == 0 {
				var v MetricType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= MetricType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FieldSelector = append(m.FieldSelector, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicCustomDataApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicCustomDataApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.FieldSelector) == 0 {
					m.FieldSelector = make([]MetricType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v MetricType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomDataApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= MetricType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FieldSelector = append(m.FieldSelector, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldSelector", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &MetricData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricTypeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricTypeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricTypeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomDataApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCustomDataApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPublicCustomDataApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomDataApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPublicCustomDataApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPublicCustomDataApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCustomDataApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Key[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value, &schema.MetricValue{})
			if err := m.Value[len(m.Value)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MetricType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &MetricTypeData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomDataApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomDataApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomDataApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomDataApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomDataApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomDataApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomDataApi = fmt.Errorf("proto: unexpected end of group")
)
