// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/bigip/apm/types.proto

package apm

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	nfv_service "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/nfv_service"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BIG-IP AWS Marketplace Image for BIG-IP APM Service
//
// x-displayName: "BIG-IP AWS Marketplace Image"
// Select the flavor of BIG-IP AWS Marketplace to launch the instance on AWS TGW Site
type AWSMarketPlaceImageTypeAPMaaS struct {
	// AMI choice
	//
	// x-displayName: "AMI Choice"
	// x-required
	// AMI Choice for F5 BIG-IP AWS Marketplace Image
	//
	// Types that are valid to be assigned to AmiChoice:
	//	*AWSMarketPlaceImageTypeAPMaaS_BestPlusPayG200Mbps
	//	*AWSMarketPlaceImageTypeAPMaaS_BestPlusPayg_1Gbps
	AmiChoice isAWSMarketPlaceImageTypeAPMaaS_AmiChoice `protobuf_oneof:"ami_choice"`
}

func (m *AWSMarketPlaceImageTypeAPMaaS) Reset()      { *m = AWSMarketPlaceImageTypeAPMaaS{} }
func (*AWSMarketPlaceImageTypeAPMaaS) ProtoMessage() {}
func (*AWSMarketPlaceImageTypeAPMaaS) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba5f0c12c4d92c49, []int{0}
}
func (m *AWSMarketPlaceImageTypeAPMaaS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSMarketPlaceImageTypeAPMaaS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSMarketPlaceImageTypeAPMaaS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSMarketPlaceImageTypeAPMaaS.Merge(m, src)
}
func (m *AWSMarketPlaceImageTypeAPMaaS) XXX_Size() int {
	return m.Size()
}
func (m *AWSMarketPlaceImageTypeAPMaaS) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSMarketPlaceImageTypeAPMaaS.DiscardUnknown(m)
}

var xxx_messageInfo_AWSMarketPlaceImageTypeAPMaaS proto.InternalMessageInfo

type isAWSMarketPlaceImageTypeAPMaaS_AmiChoice interface {
	isAWSMarketPlaceImageTypeAPMaaS_AmiChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AWSMarketPlaceImageTypeAPMaaS_BestPlusPayG200Mbps struct {
	BestPlusPayG200Mbps *schema.Empty `protobuf:"bytes,2,opt,name=BestPlusPayG200Mbps,proto3,oneof" json:"BestPlusPayG200Mbps,omitempty"`
}
type AWSMarketPlaceImageTypeAPMaaS_BestPlusPayg_1Gbps struct {
	BestPlusPayg_1Gbps *schema.Empty `protobuf:"bytes,3,opt,name=best_plus_payg_1gbps,json=bestPlusPayg1gbps,proto3,oneof" json:"best_plus_payg_1gbps,omitempty"`
}

func (*AWSMarketPlaceImageTypeAPMaaS_BestPlusPayG200Mbps) isAWSMarketPlaceImageTypeAPMaaS_AmiChoice() {
}
func (*AWSMarketPlaceImageTypeAPMaaS_BestPlusPayg_1Gbps) isAWSMarketPlaceImageTypeAPMaaS_AmiChoice() {
}

func (m *AWSMarketPlaceImageTypeAPMaaS) GetAmiChoice() isAWSMarketPlaceImageTypeAPMaaS_AmiChoice {
	if m != nil {
		return m.AmiChoice
	}
	return nil
}

func (m *AWSMarketPlaceImageTypeAPMaaS) GetBestPlusPayG200Mbps() *schema.Empty {
	if x, ok := m.GetAmiChoice().(*AWSMarketPlaceImageTypeAPMaaS_BestPlusPayG200Mbps); ok {
		return x.BestPlusPayG200Mbps
	}
	return nil
}

func (m *AWSMarketPlaceImageTypeAPMaaS) GetBestPlusPayg_1Gbps() *schema.Empty {
	if x, ok := m.GetAmiChoice().(*AWSMarketPlaceImageTypeAPMaaS_BestPlusPayg_1Gbps); ok {
		return x.BestPlusPayg_1Gbps
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AWSMarketPlaceImageTypeAPMaaS) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AWSMarketPlaceImageTypeAPMaaS_BestPlusPayG200Mbps)(nil),
		(*AWSMarketPlaceImageTypeAPMaaS_BestPlusPayg_1Gbps)(nil),
	}
}

// Endpoint Service
//
// x-displayName: "Endpoint Service"
// Endpoint Service is a type of service where the packets are destined to BIG-IP APM device and service modifies the destination with
// a new destination address
type EndpointServiceType struct {
	// Inside VIP
	//
	// x-displayName: "Inside VIP"
	// x-required
	// Advertise on site local inside network, this will be mainly used for the east-west traffic between spoke/application vpcs
	//
	// Types that are valid to be assigned to InsideVipChoice:
	//	*EndpointServiceType_AutomaticVip
	//	*EndpointServiceType_ConfiguredVip
	InsideVipChoice isEndpointServiceType_InsideVipChoice `protobuf_oneof:"inside_vip_choice"`
	// Outside VIP
	//
	// x-displayName: "Outside VIP"
	// x-required
	// Advertise on site local network
	//
	// Types that are valid to be assigned to ExternalVipChoice:
	//	*EndpointServiceType_DisableAdvertiseOnSloIp
	//	*EndpointServiceType_AdvertiseOnSloIp
	//	*EndpointServiceType_AdvertiseOnSloIpExternal
	ExternalVipChoice isEndpointServiceType_ExternalVipChoice `protobuf_oneof:"external_vip_choice"`
	//  TCP Port Choice
	//
	// x-displayName: "TCP Port Choice"
	// x-required
	// Select TCP ports of this Endpoint Service
	//
	// Types that are valid to be assigned to TcpPortChoice:
	//	*EndpointServiceType_DefaultTcpPorts
	//	*EndpointServiceType_HttpPort
	//	*EndpointServiceType_HttpsPort
	//	*EndpointServiceType_CustomTcpPorts
	//	*EndpointServiceType_NoTcpPorts
	TcpPortChoice isEndpointServiceType_TcpPortChoice `protobuf_oneof:"tcp_port_choice"`
	//  UDP Port Choice
	//
	// x-displayName: "UDP Listen Port Choice"
	// x-required
	// Select UDP ports of this Endpoint Service
	//
	// Types that are valid to be assigned to UdpPortChoice:
	//	*EndpointServiceType_NoUdpPorts
	//	*EndpointServiceType_CustomUdpPorts
	UdpPortChoice isEndpointServiceType_UdpPortChoice `protobuf_oneof:"udp_port_choice"`
}

func (m *EndpointServiceType) Reset()      { *m = EndpointServiceType{} }
func (*EndpointServiceType) ProtoMessage() {}
func (*EndpointServiceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba5f0c12c4d92c49, []int{1}
}
func (m *EndpointServiceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndpointServiceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EndpointServiceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndpointServiceType.Merge(m, src)
}
func (m *EndpointServiceType) XXX_Size() int {
	return m.Size()
}
func (m *EndpointServiceType) XXX_DiscardUnknown() {
	xxx_messageInfo_EndpointServiceType.DiscardUnknown(m)
}

var xxx_messageInfo_EndpointServiceType proto.InternalMessageInfo

type isEndpointServiceType_InsideVipChoice interface {
	isEndpointServiceType_InsideVipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isEndpointServiceType_ExternalVipChoice interface {
	isEndpointServiceType_ExternalVipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isEndpointServiceType_TcpPortChoice interface {
	isEndpointServiceType_TcpPortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isEndpointServiceType_UdpPortChoice interface {
	isEndpointServiceType_UdpPortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type EndpointServiceType_AutomaticVip struct {
	AutomaticVip *schema.Empty `protobuf:"bytes,3,opt,name=automatic_vip,json=automaticVip,proto3,oneof" json:"automatic_vip,omitempty"`
}
type EndpointServiceType_ConfiguredVip struct {
	ConfiguredVip string `protobuf:"bytes,4,opt,name=configured_vip,json=configuredVip,proto3,oneof" json:"configured_vip,omitempty"`
}
type EndpointServiceType_DisableAdvertiseOnSloIp struct {
	DisableAdvertiseOnSloIp *schema.Empty `protobuf:"bytes,6,opt,name=disable_advertise_on_slo_ip,json=disableAdvertiseOnSloIp,proto3,oneof" json:"disable_advertise_on_slo_ip,omitempty"`
}
type EndpointServiceType_AdvertiseOnSloIp struct {
	AdvertiseOnSloIp *schema.Empty `protobuf:"bytes,7,opt,name=advertise_on_slo_ip,json=advertiseOnSloIp,proto3,oneof" json:"advertise_on_slo_ip,omitempty"`
}
type EndpointServiceType_AdvertiseOnSloIpExternal struct {
	AdvertiseOnSloIpExternal *schema.Empty `protobuf:"bytes,8,opt,name=advertise_on_slo_ip_external,json=advertiseOnSloIpExternal,proto3,oneof" json:"advertise_on_slo_ip_external,omitempty"`
}
type EndpointServiceType_DefaultTcpPorts struct {
	DefaultTcpPorts *schema.Empty `protobuf:"bytes,10,opt,name=default_tcp_ports,json=defaultTcpPorts,proto3,oneof" json:"default_tcp_ports,omitempty"`
}
type EndpointServiceType_HttpPort struct {
	HttpPort *schema.Empty `protobuf:"bytes,11,opt,name=http_port,json=httpPort,proto3,oneof" json:"http_port,omitempty"`
}
type EndpointServiceType_HttpsPort struct {
	HttpsPort *schema.Empty `protobuf:"bytes,12,opt,name=https_port,json=httpsPort,proto3,oneof" json:"https_port,omitempty"`
}
type EndpointServiceType_CustomTcpPorts struct {
	CustomTcpPorts *schema.PortRangesType `protobuf:"bytes,13,opt,name=custom_tcp_ports,json=customTcpPorts,proto3,oneof" json:"custom_tcp_ports,omitempty"`
}
type EndpointServiceType_NoTcpPorts struct {
	NoTcpPorts *schema.Empty `protobuf:"bytes,14,opt,name=no_tcp_ports,json=noTcpPorts,proto3,oneof" json:"no_tcp_ports,omitempty"`
}
type EndpointServiceType_NoUdpPorts struct {
	NoUdpPorts *schema.Empty `protobuf:"bytes,16,opt,name=no_udp_ports,json=noUdpPorts,proto3,oneof" json:"no_udp_ports,omitempty"`
}
type EndpointServiceType_CustomUdpPorts struct {
	CustomUdpPorts *schema.PortRangesType `protobuf:"bytes,17,opt,name=custom_udp_ports,json=customUdpPorts,proto3,oneof" json:"custom_udp_ports,omitempty"`
}

func (*EndpointServiceType_AutomaticVip) isEndpointServiceType_InsideVipChoice()               {}
func (*EndpointServiceType_ConfiguredVip) isEndpointServiceType_InsideVipChoice()              {}
func (*EndpointServiceType_DisableAdvertiseOnSloIp) isEndpointServiceType_ExternalVipChoice()  {}
func (*EndpointServiceType_AdvertiseOnSloIp) isEndpointServiceType_ExternalVipChoice()         {}
func (*EndpointServiceType_AdvertiseOnSloIpExternal) isEndpointServiceType_ExternalVipChoice() {}
func (*EndpointServiceType_DefaultTcpPorts) isEndpointServiceType_TcpPortChoice()              {}
func (*EndpointServiceType_HttpPort) isEndpointServiceType_TcpPortChoice()                     {}
func (*EndpointServiceType_HttpsPort) isEndpointServiceType_TcpPortChoice()                    {}
func (*EndpointServiceType_CustomTcpPorts) isEndpointServiceType_TcpPortChoice()               {}
func (*EndpointServiceType_NoTcpPorts) isEndpointServiceType_TcpPortChoice()                   {}
func (*EndpointServiceType_NoUdpPorts) isEndpointServiceType_UdpPortChoice()                   {}
func (*EndpointServiceType_CustomUdpPorts) isEndpointServiceType_UdpPortChoice()               {}

func (m *EndpointServiceType) GetInsideVipChoice() isEndpointServiceType_InsideVipChoice {
	if m != nil {
		return m.InsideVipChoice
	}
	return nil
}
func (m *EndpointServiceType) GetExternalVipChoice() isEndpointServiceType_ExternalVipChoice {
	if m != nil {
		return m.ExternalVipChoice
	}
	return nil
}
func (m *EndpointServiceType) GetTcpPortChoice() isEndpointServiceType_TcpPortChoice {
	if m != nil {
		return m.TcpPortChoice
	}
	return nil
}
func (m *EndpointServiceType) GetUdpPortChoice() isEndpointServiceType_UdpPortChoice {
	if m != nil {
		return m.UdpPortChoice
	}
	return nil
}

func (m *EndpointServiceType) GetAutomaticVip() *schema.Empty {
	if x, ok := m.GetInsideVipChoice().(*EndpointServiceType_AutomaticVip); ok {
		return x.AutomaticVip
	}
	return nil
}

func (m *EndpointServiceType) GetConfiguredVip() string {
	if x, ok := m.GetInsideVipChoice().(*EndpointServiceType_ConfiguredVip); ok {
		return x.ConfiguredVip
	}
	return ""
}

func (m *EndpointServiceType) GetDisableAdvertiseOnSloIp() *schema.Empty {
	if x, ok := m.GetExternalVipChoice().(*EndpointServiceType_DisableAdvertiseOnSloIp); ok {
		return x.DisableAdvertiseOnSloIp
	}
	return nil
}

func (m *EndpointServiceType) GetAdvertiseOnSloIp() *schema.Empty {
	if x, ok := m.GetExternalVipChoice().(*EndpointServiceType_AdvertiseOnSloIp); ok {
		return x.AdvertiseOnSloIp
	}
	return nil
}

func (m *EndpointServiceType) GetAdvertiseOnSloIpExternal() *schema.Empty {
	if x, ok := m.GetExternalVipChoice().(*EndpointServiceType_AdvertiseOnSloIpExternal); ok {
		return x.AdvertiseOnSloIpExternal
	}
	return nil
}

func (m *EndpointServiceType) GetDefaultTcpPorts() *schema.Empty {
	if x, ok := m.GetTcpPortChoice().(*EndpointServiceType_DefaultTcpPorts); ok {
		return x.DefaultTcpPorts
	}
	return nil
}

func (m *EndpointServiceType) GetHttpPort() *schema.Empty {
	if x, ok := m.GetTcpPortChoice().(*EndpointServiceType_HttpPort); ok {
		return x.HttpPort
	}
	return nil
}

func (m *EndpointServiceType) GetHttpsPort() *schema.Empty {
	if x, ok := m.GetTcpPortChoice().(*EndpointServiceType_HttpsPort); ok {
		return x.HttpsPort
	}
	return nil
}

func (m *EndpointServiceType) GetCustomTcpPorts() *schema.PortRangesType {
	if x, ok := m.GetTcpPortChoice().(*EndpointServiceType_CustomTcpPorts); ok {
		return x.CustomTcpPorts
	}
	return nil
}

func (m *EndpointServiceType) GetNoTcpPorts() *schema.Empty {
	if x, ok := m.GetTcpPortChoice().(*EndpointServiceType_NoTcpPorts); ok {
		return x.NoTcpPorts
	}
	return nil
}

func (m *EndpointServiceType) GetNoUdpPorts() *schema.Empty {
	if x, ok := m.GetUdpPortChoice().(*EndpointServiceType_NoUdpPorts); ok {
		return x.NoUdpPorts
	}
	return nil
}

func (m *EndpointServiceType) GetCustomUdpPorts() *schema.PortRangesType {
	if x, ok := m.GetUdpPortChoice().(*EndpointServiceType_CustomUdpPorts); ok {
		return x.CustomUdpPorts
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EndpointServiceType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EndpointServiceType_AutomaticVip)(nil),
		(*EndpointServiceType_ConfiguredVip)(nil),
		(*EndpointServiceType_DisableAdvertiseOnSloIp)(nil),
		(*EndpointServiceType_AdvertiseOnSloIp)(nil),
		(*EndpointServiceType_AdvertiseOnSloIpExternal)(nil),
		(*EndpointServiceType_DefaultTcpPorts)(nil),
		(*EndpointServiceType_HttpPort)(nil),
		(*EndpointServiceType_HttpsPort)(nil),
		(*EndpointServiceType_CustomTcpPorts)(nil),
		(*EndpointServiceType_NoTcpPorts)(nil),
		(*EndpointServiceType_NoUdpPorts)(nil),
		(*EndpointServiceType_CustomUdpPorts)(nil),
	}
}

// Virtual F5 BIG-IP on AWS TGW Site
//
// x-displayName: "Virtual F5 BIG-IP APM configuration on AWS TGW Site"
// Virtual F5 BIG-IP configuration for AWS TGW Site using BIG-IP APM service
type APMBigIpAWSType struct {
	// AWS Transit Gateway Site
	//
	// x-displayName: "AWS Transit Gateway Site"
	// x-required
	// Reference to AWS transit gateway site
	AwsTgwSite *nfv_service.F5BigIpAWSTGWSiteType `protobuf:"bytes,1,opt,name=aws_tgw_site,json=awsTgwSite,proto3" json:"aws_tgw_site,omitempty"`
	// Admin Password
	//
	// x-displayName: "Admin Password"
	// x-required
	// Secret admin password for BIG-IP
	AdminPassword *schema.SecretType `protobuf:"bytes,2,opt,name=admin_password,json=adminPassword,proto3" json:"admin_password,omitempty"`
	// Admin Username
	//
	// x-displayName: "Admin Username"
	// x-example: "admin"
	// x-required
	// Admin Username for BIG-IP
	AdminUsername string `protobuf:"bytes,3,opt,name=admin_username,json=adminUsername,proto3" json:"admin_username,omitempty"`
	// Public SSH key
	//
	// x-displayName: "Public SSH key"
	// x-example: "ssh-rsa AAAAB..."
	// x-required
	// Public SSH key for accessing the BIG-IP nodes.
	SshKey string `protobuf:"bytes,4,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	// Service Nodes
	//
	// x-displayName: "Service Nodes"
	// x-required
	// Specify how and where the service nodes are spawned
	Nodes []*nfv_service.ServiceNodesAWSType `protobuf:"bytes,9,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// AWS Tags
	//
	// x-displayName: "AWS Tags"
	// x-example: "dev: staging"
	// AWS Tags is a label consisting of a user-defined key and value.
	// It helps to manage, identify, organize, search for, and filter resources in AWS console.
	Tags map[string]string `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Endpoint Service
	//
	// x-displayName: "Endpoint Service"
	// External service type is Endpoint service
	EndpointService *EndpointServiceType `protobuf:"bytes,13,opt,name=endpoint_service,json=endpointService,proto3" json:"endpoint_service,omitempty"`
}

func (m *APMBigIpAWSType) Reset()      { *m = APMBigIpAWSType{} }
func (*APMBigIpAWSType) ProtoMessage() {}
func (*APMBigIpAWSType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba5f0c12c4d92c49, []int{2}
}
func (m *APMBigIpAWSType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APMBigIpAWSType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *APMBigIpAWSType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APMBigIpAWSType.Merge(m, src)
}
func (m *APMBigIpAWSType) XXX_Size() int {
	return m.Size()
}
func (m *APMBigIpAWSType) XXX_DiscardUnknown() {
	xxx_messageInfo_APMBigIpAWSType.DiscardUnknown(m)
}

var xxx_messageInfo_APMBigIpAWSType proto.InternalMessageInfo

func (m *APMBigIpAWSType) GetAwsTgwSite() *nfv_service.F5BigIpAWSTGWSiteType {
	if m != nil {
		return m.AwsTgwSite
	}
	return nil
}

func (m *APMBigIpAWSType) GetAdminPassword() *schema.SecretType {
	if m != nil {
		return m.AdminPassword
	}
	return nil
}

func (m *APMBigIpAWSType) GetAdminUsername() string {
	if m != nil {
		return m.AdminUsername
	}
	return ""
}

func (m *APMBigIpAWSType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *APMBigIpAWSType) GetNodes() []*nfv_service.ServiceNodesAWSType {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *APMBigIpAWSType) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *APMBigIpAWSType) GetEndpointService() *EndpointServiceType {
	if m != nil {
		return m.EndpointService
	}
	return nil
}

// AWS Transit Gateway Site choice
//
// x-displayName: "AWS Transit Gateway Site choice"
// Virtual F5 BIG-IP APM service to be deployed as external service on AWS Transit Gateway Site
type AWSSiteTypeChoice struct {
	// License Type
	//
	// x-displayName: "License Type"
	// x-required
	// Select License Type for your Image
	//
	// Types that are valid to be assigned to LicenseType:
	//	*AWSSiteTypeChoice_MarketPlaceImage
	LicenseType isAWSSiteTypeChoice_LicenseType `protobuf_oneof:"license_type"`
	// BIG-IP on AWS TGW Site
	//
	// x-displayName: "BIG-IP on AWS TGW Site"
	// x-required
	// Virtual F5 BIG-IP service to be deployed on AWS
	ApmAwsSite *APMBigIpAWSType `protobuf:"bytes,3,opt,name=apm_aws_site,json=apmAwsSite,proto3" json:"apm_aws_site,omitempty"`
}

func (m *AWSSiteTypeChoice) Reset()      { *m = AWSSiteTypeChoice{} }
func (*AWSSiteTypeChoice) ProtoMessage() {}
func (*AWSSiteTypeChoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba5f0c12c4d92c49, []int{3}
}
func (m *AWSSiteTypeChoice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSSiteTypeChoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSSiteTypeChoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSSiteTypeChoice.Merge(m, src)
}
func (m *AWSSiteTypeChoice) XXX_Size() int {
	return m.Size()
}
func (m *AWSSiteTypeChoice) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSSiteTypeChoice.DiscardUnknown(m)
}

var xxx_messageInfo_AWSSiteTypeChoice proto.InternalMessageInfo

type isAWSSiteTypeChoice_LicenseType interface {
	isAWSSiteTypeChoice_LicenseType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AWSSiteTypeChoice_MarketPlaceImage struct {
	MarketPlaceImage *AWSMarketPlaceImageTypeAPMaaS `protobuf:"bytes,2,opt,name=market_place_image,json=marketPlaceImage,proto3,oneof" json:"market_place_image,omitempty"`
}

func (*AWSSiteTypeChoice_MarketPlaceImage) isAWSSiteTypeChoice_LicenseType() {}

func (m *AWSSiteTypeChoice) GetLicenseType() isAWSSiteTypeChoice_LicenseType {
	if m != nil {
		return m.LicenseType
	}
	return nil
}

func (m *AWSSiteTypeChoice) GetMarketPlaceImage() *AWSMarketPlaceImageTypeAPMaaS {
	if x, ok := m.GetLicenseType().(*AWSSiteTypeChoice_MarketPlaceImage); ok {
		return x.MarketPlaceImage
	}
	return nil
}

func (m *AWSSiteTypeChoice) GetApmAwsSite() *APMBigIpAWSType {
	if m != nil {
		return m.ApmAwsSite
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AWSSiteTypeChoice) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AWSSiteTypeChoice_MarketPlaceImage)(nil),
	}
}

// Virtual BIG-IP on App Stack Bare Metal Site
//
// x-displayName: "Virtual BIG-IP on App Stack Bare Metal Site"
// Virtual BIG-IP specification for App Stack Bare Metal Site
type F5BigIpAppStackBareMetalTypeChoice struct {
	// Virtual BIG-IP on App Stack Bare Metal Site
	//
	// x-displayName: "Virtual BIG-IP on App Stack Bare Metal Site"
	// x-required
	// Virtual BIG-IP specification for App Stack Bare Metal Site
	F5BareMetalSite *nfv_service.F5BigIpAppStackBareMetalType `protobuf:"bytes,1,opt,name=f5_bare_metal_site,json=f5BareMetalSite,proto3" json:"f5_bare_metal_site,omitempty"`
}

func (m *F5BigIpAppStackBareMetalTypeChoice) Reset()      { *m = F5BigIpAppStackBareMetalTypeChoice{} }
func (*F5BigIpAppStackBareMetalTypeChoice) ProtoMessage() {}
func (*F5BigIpAppStackBareMetalTypeChoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba5f0c12c4d92c49, []int{4}
}
func (m *F5BigIpAppStackBareMetalTypeChoice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *F5BigIpAppStackBareMetalTypeChoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *F5BigIpAppStackBareMetalTypeChoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_F5BigIpAppStackBareMetalTypeChoice.Merge(m, src)
}
func (m *F5BigIpAppStackBareMetalTypeChoice) XXX_Size() int {
	return m.Size()
}
func (m *F5BigIpAppStackBareMetalTypeChoice) XXX_DiscardUnknown() {
	xxx_messageInfo_F5BigIpAppStackBareMetalTypeChoice.DiscardUnknown(m)
}

var xxx_messageInfo_F5BigIpAppStackBareMetalTypeChoice proto.InternalMessageInfo

func (m *F5BigIpAppStackBareMetalTypeChoice) GetF5BareMetalSite() *nfv_service.F5BigIpAppStackBareMetalType {
	if m != nil {
		return m.F5BareMetalSite
	}
	return nil
}

// BIG-IP APM Service specification
//
// x-displayName: "Specification"
// Desired state for BIG-IP APM Service
type GlobalSpecType struct {
	// Site type choices
	//
	// x-displayName: "Site Type"
	// x-required
	// Select Distributed Cloud Site to deploy BIG-IP
	//
	// Types that are valid to be assigned to SiteTypeChoice:
	//	*GlobalSpecType_AwsSiteTypeChoice
	//	*GlobalSpecType_BaremetalSiteTypeChoice
	SiteTypeChoice isGlobalSpecType_SiteTypeChoice `protobuf_oneof:"site_type_choice"`
	// BIG-IP Console Access Management
	//
	// x-displayName: "BIG-IP Console Access Management"
	// x-required
	//
	// Types that are valid to be assigned to HttpManagementChoice:
	//	*GlobalSpecType_HttpsManagement
	HttpManagementChoice isGlobalSpecType_HttpManagementChoice `protobuf_oneof:"http_management_choice"`
	// Reference to nfv service object
	//
	// x-displayName: "nfv_service object"
	// Reference to nfv service object
	NfvServiceRef []*schema.ObjectRefType `protobuf:"bytes,1000,rep,name=nfv_service_ref,json=nfvServiceRef,proto3" json:"nfv_service_ref,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,2000,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba5f0c12c4d92c49, []int{5}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_SiteTypeChoice interface {
	isGlobalSpecType_SiteTypeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_HttpManagementChoice interface {
	isGlobalSpecType_HttpManagementChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_AwsSiteTypeChoice struct {
	AwsSiteTypeChoice *AWSSiteTypeChoice `protobuf:"bytes,2,opt,name=aws_site_type_choice,json=awsSiteTypeChoice,proto3,oneof" json:"aws_site_type_choice,omitempty"`
}
type GlobalSpecType_BaremetalSiteTypeChoice struct {
	BaremetalSiteTypeChoice *F5BigIpAppStackBareMetalTypeChoice `protobuf:"bytes,3,opt,name=baremetal_site_type_choice,json=baremetalSiteTypeChoice,proto3,oneof" json:"baremetal_site_type_choice,omitempty"`
}
type GlobalSpecType_HttpsManagement struct {
	HttpsManagement *nfv_service.ServiceHttpsManagementType `protobuf:"bytes,6,opt,name=https_management,json=httpsManagement,proto3,oneof" json:"https_management,omitempty"`
}

func (*GlobalSpecType_AwsSiteTypeChoice) isGlobalSpecType_SiteTypeChoice()       {}
func (*GlobalSpecType_BaremetalSiteTypeChoice) isGlobalSpecType_SiteTypeChoice() {}
func (*GlobalSpecType_HttpsManagement) isGlobalSpecType_HttpManagementChoice()   {}

func (m *GlobalSpecType) GetSiteTypeChoice() isGlobalSpecType_SiteTypeChoice {
	if m != nil {
		return m.SiteTypeChoice
	}
	return nil
}
func (m *GlobalSpecType) GetHttpManagementChoice() isGlobalSpecType_HttpManagementChoice {
	if m != nil {
		return m.HttpManagementChoice
	}
	return nil
}

func (m *GlobalSpecType) GetAwsSiteTypeChoice() *AWSSiteTypeChoice {
	if x, ok := m.GetSiteTypeChoice().(*GlobalSpecType_AwsSiteTypeChoice); ok {
		return x.AwsSiteTypeChoice
	}
	return nil
}

func (m *GlobalSpecType) GetBaremetalSiteTypeChoice() *F5BigIpAppStackBareMetalTypeChoice {
	if x, ok := m.GetSiteTypeChoice().(*GlobalSpecType_BaremetalSiteTypeChoice); ok {
		return x.BaremetalSiteTypeChoice
	}
	return nil
}

func (m *GlobalSpecType) GetHttpsManagement() *nfv_service.ServiceHttpsManagementType {
	if x, ok := m.GetHttpManagementChoice().(*GlobalSpecType_HttpsManagement); ok {
		return x.HttpsManagement
	}
	return nil
}

func (m *GlobalSpecType) GetNfvServiceRef() []*schema.ObjectRefType {
	if m != nil {
		return m.NfvServiceRef
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_AwsSiteTypeChoice)(nil),
		(*GlobalSpecType_BaremetalSiteTypeChoice)(nil),
		(*GlobalSpecType_HttpsManagement)(nil),
	}
}

// Create APM Service
//
// x-displayName: "Create APM Service"
// Creates a new APM as a service with configured parameters
type CreateSpecType struct {
	// Types that are valid to be assigned to SiteTypeChoice:
	//	*CreateSpecType_AwsSiteTypeChoice
	//	*CreateSpecType_BaremetalSiteTypeChoice
	SiteTypeChoice isCreateSpecType_SiteTypeChoice `protobuf_oneof:"site_type_choice"`
	// Types that are valid to be assigned to HttpManagementChoice:
	//	*CreateSpecType_HttpsManagement
	HttpManagementChoice isCreateSpecType_HttpManagementChoice `protobuf_oneof:"http_management_choice"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba5f0c12c4d92c49, []int{6}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_SiteTypeChoice interface {
	isCreateSpecType_SiteTypeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_HttpManagementChoice interface {
	isCreateSpecType_HttpManagementChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_AwsSiteTypeChoice struct {
	AwsSiteTypeChoice *AWSSiteTypeChoice `protobuf:"bytes,2,opt,name=aws_site_type_choice,json=awsSiteTypeChoice,proto3,oneof" json:"aws_site_type_choice,omitempty"`
}
type CreateSpecType_BaremetalSiteTypeChoice struct {
	BaremetalSiteTypeChoice *F5BigIpAppStackBareMetalTypeChoice `protobuf:"bytes,3,opt,name=baremetal_site_type_choice,json=baremetalSiteTypeChoice,proto3,oneof" json:"baremetal_site_type_choice,omitempty"`
}
type CreateSpecType_HttpsManagement struct {
	HttpsManagement *nfv_service.ServiceHttpsManagementType `protobuf:"bytes,6,opt,name=https_management,json=httpsManagement,proto3,oneof" json:"https_management,omitempty"`
}

func (*CreateSpecType_AwsSiteTypeChoice) isCreateSpecType_SiteTypeChoice()       {}
func (*CreateSpecType_BaremetalSiteTypeChoice) isCreateSpecType_SiteTypeChoice() {}
func (*CreateSpecType_HttpsManagement) isCreateSpecType_HttpManagementChoice()   {}

func (m *CreateSpecType) GetSiteTypeChoice() isCreateSpecType_SiteTypeChoice {
	if m != nil {
		return m.SiteTypeChoice
	}
	return nil
}
func (m *CreateSpecType) GetHttpManagementChoice() isCreateSpecType_HttpManagementChoice {
	if m != nil {
		return m.HttpManagementChoice
	}
	return nil
}

func (m *CreateSpecType) GetAwsSiteTypeChoice() *AWSSiteTypeChoice {
	if x, ok := m.GetSiteTypeChoice().(*CreateSpecType_AwsSiteTypeChoice); ok {
		return x.AwsSiteTypeChoice
	}
	return nil
}

func (m *CreateSpecType) GetBaremetalSiteTypeChoice() *F5BigIpAppStackBareMetalTypeChoice {
	if x, ok := m.GetSiteTypeChoice().(*CreateSpecType_BaremetalSiteTypeChoice); ok {
		return x.BaremetalSiteTypeChoice
	}
	return nil
}

func (m *CreateSpecType) GetHttpsManagement() *nfv_service.ServiceHttpsManagementType {
	if x, ok := m.GetHttpManagementChoice().(*CreateSpecType_HttpsManagement); ok {
		return x.HttpsManagement
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_AwsSiteTypeChoice)(nil),
		(*CreateSpecType_BaremetalSiteTypeChoice)(nil),
		(*CreateSpecType_HttpsManagement)(nil),
	}
}

// Endpoint Service
//
// x-displayName: "Endpoint Service"
// Endpoint Service is a type of NFV service where the packets are destined to NFV and service modifies the destination with
// a new destination address
type EndpointServiceReplaceType struct {
	// Outside VIP
	//
	// x-displayName: "Outside VIP"
	// x-required
	// Advertise on site local network
	//
	// Types that are valid to be assigned to ExternalVipChoice:
	//	*EndpointServiceReplaceType_DisableAdvertiseOnSloIp
	//	*EndpointServiceReplaceType_AdvertiseOnSloIp
	//	*EndpointServiceReplaceType_AdvertiseOnSloIpExternal
	ExternalVipChoice isEndpointServiceReplaceType_ExternalVipChoice `protobuf_oneof:"external_vip_choice"`
	//  TCP Port Choice
	//
	// x-displayName: "TCP Port Choice"
	// x-required
	// Select TCP ports of this endpoint service
	//
	// Types that are valid to be assigned to TcpPortChoice:
	//	*EndpointServiceReplaceType_DefaultTcpPorts
	//	*EndpointServiceReplaceType_HttpPort
	//	*EndpointServiceReplaceType_HttpsPort
	//	*EndpointServiceReplaceType_CustomTcpPorts
	//	*EndpointServiceReplaceType_NoTcpPorts
	TcpPortChoice isEndpointServiceReplaceType_TcpPortChoice `protobuf_oneof:"tcp_port_choice"`
	//  UDP Port Choice
	//
	// x-displayName: "UDP Listen Port Choice"
	// x-required
	// Select UDP ports of this endpoint_service
	//
	// Types that are valid to be assigned to UdpPortChoice:
	//	*EndpointServiceReplaceType_NoUdpPorts
	//	*EndpointServiceReplaceType_CustomUdpPorts
	UdpPortChoice isEndpointServiceReplaceType_UdpPortChoice `protobuf_oneof:"udp_port_choice"`
}

func (m *EndpointServiceReplaceType) Reset()      { *m = EndpointServiceReplaceType{} }
func (*EndpointServiceReplaceType) ProtoMessage() {}
func (*EndpointServiceReplaceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba5f0c12c4d92c49, []int{7}
}
func (m *EndpointServiceReplaceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndpointServiceReplaceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EndpointServiceReplaceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndpointServiceReplaceType.Merge(m, src)
}
func (m *EndpointServiceReplaceType) XXX_Size() int {
	return m.Size()
}
func (m *EndpointServiceReplaceType) XXX_DiscardUnknown() {
	xxx_messageInfo_EndpointServiceReplaceType.DiscardUnknown(m)
}

var xxx_messageInfo_EndpointServiceReplaceType proto.InternalMessageInfo

type isEndpointServiceReplaceType_ExternalVipChoice interface {
	isEndpointServiceReplaceType_ExternalVipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isEndpointServiceReplaceType_TcpPortChoice interface {
	isEndpointServiceReplaceType_TcpPortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isEndpointServiceReplaceType_UdpPortChoice interface {
	isEndpointServiceReplaceType_UdpPortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type EndpointServiceReplaceType_DisableAdvertiseOnSloIp struct {
	DisableAdvertiseOnSloIp *schema.Empty `protobuf:"bytes,6,opt,name=disable_advertise_on_slo_ip,json=disableAdvertiseOnSloIp,proto3,oneof" json:"disable_advertise_on_slo_ip,omitempty"`
}
type EndpointServiceReplaceType_AdvertiseOnSloIp struct {
	AdvertiseOnSloIp *schema.Empty `protobuf:"bytes,7,opt,name=advertise_on_slo_ip,json=advertiseOnSloIp,proto3,oneof" json:"advertise_on_slo_ip,omitempty"`
}
type EndpointServiceReplaceType_AdvertiseOnSloIpExternal struct {
	AdvertiseOnSloIpExternal *schema.Empty `protobuf:"bytes,8,opt,name=advertise_on_slo_ip_external,json=advertiseOnSloIpExternal,proto3,oneof" json:"advertise_on_slo_ip_external,omitempty"`
}
type EndpointServiceReplaceType_DefaultTcpPorts struct {
	DefaultTcpPorts *schema.Empty `protobuf:"bytes,10,opt,name=default_tcp_ports,json=defaultTcpPorts,proto3,oneof" json:"default_tcp_ports,omitempty"`
}
type EndpointServiceReplaceType_HttpPort struct {
	HttpPort *schema.Empty `protobuf:"bytes,11,opt,name=http_port,json=httpPort,proto3,oneof" json:"http_port,omitempty"`
}
type EndpointServiceReplaceType_HttpsPort struct {
	HttpsPort *schema.Empty `protobuf:"bytes,12,opt,name=https_port,json=httpsPort,proto3,oneof" json:"https_port,omitempty"`
}
type EndpointServiceReplaceType_CustomTcpPorts struct {
	CustomTcpPorts *schema.PortRangesType `protobuf:"bytes,13,opt,name=custom_tcp_ports,json=customTcpPorts,proto3,oneof" json:"custom_tcp_ports,omitempty"`
}
type EndpointServiceReplaceType_NoTcpPorts struct {
	NoTcpPorts *schema.Empty `protobuf:"bytes,14,opt,name=no_tcp_ports,json=noTcpPorts,proto3,oneof" json:"no_tcp_ports,omitempty"`
}
type EndpointServiceReplaceType_NoUdpPorts struct {
	NoUdpPorts *schema.Empty `protobuf:"bytes,16,opt,name=no_udp_ports,json=noUdpPorts,proto3,oneof" json:"no_udp_ports,omitempty"`
}
type EndpointServiceReplaceType_CustomUdpPorts struct {
	CustomUdpPorts *schema.PortRangesType `protobuf:"bytes,17,opt,name=custom_udp_ports,json=customUdpPorts,proto3,oneof" json:"custom_udp_ports,omitempty"`
}

func (*EndpointServiceReplaceType_DisableAdvertiseOnSloIp) isEndpointServiceReplaceType_ExternalVipChoice() {
}
func (*EndpointServiceReplaceType_AdvertiseOnSloIp) isEndpointServiceReplaceType_ExternalVipChoice() {
}
func (*EndpointServiceReplaceType_AdvertiseOnSloIpExternal) isEndpointServiceReplaceType_ExternalVipChoice() {
}
func (*EndpointServiceReplaceType_DefaultTcpPorts) isEndpointServiceReplaceType_TcpPortChoice() {}
func (*EndpointServiceReplaceType_HttpPort) isEndpointServiceReplaceType_TcpPortChoice()        {}
func (*EndpointServiceReplaceType_HttpsPort) isEndpointServiceReplaceType_TcpPortChoice()       {}
func (*EndpointServiceReplaceType_CustomTcpPorts) isEndpointServiceReplaceType_TcpPortChoice()  {}
func (*EndpointServiceReplaceType_NoTcpPorts) isEndpointServiceReplaceType_TcpPortChoice()      {}
func (*EndpointServiceReplaceType_NoUdpPorts) isEndpointServiceReplaceType_UdpPortChoice()      {}
func (*EndpointServiceReplaceType_CustomUdpPorts) isEndpointServiceReplaceType_UdpPortChoice()  {}

func (m *EndpointServiceReplaceType) GetExternalVipChoice() isEndpointServiceReplaceType_ExternalVipChoice {
	if m != nil {
		return m.ExternalVipChoice
	}
	return nil
}
func (m *EndpointServiceReplaceType) GetTcpPortChoice() isEndpointServiceReplaceType_TcpPortChoice {
	if m != nil {
		return m.TcpPortChoice
	}
	return nil
}
func (m *EndpointServiceReplaceType) GetUdpPortChoice() isEndpointServiceReplaceType_UdpPortChoice {
	if m != nil {
		return m.UdpPortChoice
	}
	return nil
}

func (m *EndpointServiceReplaceType) GetDisableAdvertiseOnSloIp() *schema.Empty {
	if x, ok := m.GetExternalVipChoice().(*EndpointServiceReplaceType_DisableAdvertiseOnSloIp); ok {
		return x.DisableAdvertiseOnSloIp
	}
	return nil
}

func (m *EndpointServiceReplaceType) GetAdvertiseOnSloIp() *schema.Empty {
	if x, ok := m.GetExternalVipChoice().(*EndpointServiceReplaceType_AdvertiseOnSloIp); ok {
		return x.AdvertiseOnSloIp
	}
	return nil
}

func (m *EndpointServiceReplaceType) GetAdvertiseOnSloIpExternal() *schema.Empty {
	if x, ok := m.GetExternalVipChoice().(*EndpointServiceReplaceType_AdvertiseOnSloIpExternal); ok {
		return x.AdvertiseOnSloIpExternal
	}
	return nil
}

func (m *EndpointServiceReplaceType) GetDefaultTcpPorts() *schema.Empty {
	if x, ok := m.GetTcpPortChoice().(*EndpointServiceReplaceType_DefaultTcpPorts); ok {
		return x.DefaultTcpPorts
	}
	return nil
}

func (m *EndpointServiceReplaceType) GetHttpPort() *schema.Empty {
	if x, ok := m.GetTcpPortChoice().(*EndpointServiceReplaceType_HttpPort); ok {
		return x.HttpPort
	}
	return nil
}

func (m *EndpointServiceReplaceType) GetHttpsPort() *schema.Empty {
	if x, ok := m.GetTcpPortChoice().(*EndpointServiceReplaceType_HttpsPort); ok {
		return x.HttpsPort
	}
	return nil
}

func (m *EndpointServiceReplaceType) GetCustomTcpPorts() *schema.PortRangesType {
	if x, ok := m.GetTcpPortChoice().(*EndpointServiceReplaceType_CustomTcpPorts); ok {
		return x.CustomTcpPorts
	}
	return nil
}

func (m *EndpointServiceReplaceType) GetNoTcpPorts() *schema.Empty {
	if x, ok := m.GetTcpPortChoice().(*EndpointServiceReplaceType_NoTcpPorts); ok {
		return x.NoTcpPorts
	}
	return nil
}

func (m *EndpointServiceReplaceType) GetNoUdpPorts() *schema.Empty {
	if x, ok := m.GetUdpPortChoice().(*EndpointServiceReplaceType_NoUdpPorts); ok {
		return x.NoUdpPorts
	}
	return nil
}

func (m *EndpointServiceReplaceType) GetCustomUdpPorts() *schema.PortRangesType {
	if x, ok := m.GetUdpPortChoice().(*EndpointServiceReplaceType_CustomUdpPorts); ok {
		return x.CustomUdpPorts
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EndpointServiceReplaceType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EndpointServiceReplaceType_DisableAdvertiseOnSloIp)(nil),
		(*EndpointServiceReplaceType_AdvertiseOnSloIp)(nil),
		(*EndpointServiceReplaceType_AdvertiseOnSloIpExternal)(nil),
		(*EndpointServiceReplaceType_DefaultTcpPorts)(nil),
		(*EndpointServiceReplaceType_HttpPort)(nil),
		(*EndpointServiceReplaceType_HttpsPort)(nil),
		(*EndpointServiceReplaceType_CustomTcpPorts)(nil),
		(*EndpointServiceReplaceType_NoTcpPorts)(nil),
		(*EndpointServiceReplaceType_NoUdpPorts)(nil),
		(*EndpointServiceReplaceType_CustomUdpPorts)(nil),
	}
}

// Virtual F5 BIG-IP on AWS TGW Site
//
// x-displayName: "Virtual F5 BIG-IP on AWS TGW Site"
// Virtual F5 BIG-IP specification for AWS TGW Site
type APMBigIpAWSReplaceType struct {
	// AWS Tags
	//
	// x-displayName: "AWS Tags"
	// x-example: "dev: staging"
	// AWS Tags is a label consisting of a user-defined key and value.
	// It helps to manage, identify, organize, search for, and filter resources in AWS console.
	Tags map[string]string `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Endpoint Service
	//
	// x-displayName: "Endpoint Service"
	// External service type is Endpoint service
	EndpointService *EndpointServiceReplaceType `protobuf:"bytes,13,opt,name=endpoint_service,json=endpointService,proto3" json:"endpoint_service,omitempty"`
}

func (m *APMBigIpAWSReplaceType) Reset()      { *m = APMBigIpAWSReplaceType{} }
func (*APMBigIpAWSReplaceType) ProtoMessage() {}
func (*APMBigIpAWSReplaceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba5f0c12c4d92c49, []int{8}
}
func (m *APMBigIpAWSReplaceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APMBigIpAWSReplaceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *APMBigIpAWSReplaceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APMBigIpAWSReplaceType.Merge(m, src)
}
func (m *APMBigIpAWSReplaceType) XXX_Size() int {
	return m.Size()
}
func (m *APMBigIpAWSReplaceType) XXX_DiscardUnknown() {
	xxx_messageInfo_APMBigIpAWSReplaceType.DiscardUnknown(m)
}

var xxx_messageInfo_APMBigIpAWSReplaceType proto.InternalMessageInfo

func (m *APMBigIpAWSReplaceType) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *APMBigIpAWSReplaceType) GetEndpointService() *EndpointServiceReplaceType {
	if m != nil {
		return m.EndpointService
	}
	return nil
}

// AWS Transit Gateway Site choice
//
// x-displayName: "AWS Transit Gateway Site choice"
// Virtual F5 BIG-IP service to be deployed on AWS Transit Gateway Site
type AWSSiteTypeChoiceReplaceType struct {
	// BIG-IP on AWS TGW Site
	//
	// x-displayName: "BIG-IP on AWS TGW Site"
	// x-required
	// Virtual F5 BIG-IP service to be deployed on AWS
	ApmAwsSite *APMBigIpAWSReplaceType `protobuf:"bytes,3,opt,name=apm_aws_site,json=apmAwsSite,proto3" json:"apm_aws_site,omitempty"`
}

func (m *AWSSiteTypeChoiceReplaceType) Reset()      { *m = AWSSiteTypeChoiceReplaceType{} }
func (*AWSSiteTypeChoiceReplaceType) ProtoMessage() {}
func (*AWSSiteTypeChoiceReplaceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba5f0c12c4d92c49, []int{9}
}
func (m *AWSSiteTypeChoiceReplaceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSSiteTypeChoiceReplaceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSSiteTypeChoiceReplaceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSSiteTypeChoiceReplaceType.Merge(m, src)
}
func (m *AWSSiteTypeChoiceReplaceType) XXX_Size() int {
	return m.Size()
}
func (m *AWSSiteTypeChoiceReplaceType) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSSiteTypeChoiceReplaceType.DiscardUnknown(m)
}

var xxx_messageInfo_AWSSiteTypeChoiceReplaceType proto.InternalMessageInfo

func (m *AWSSiteTypeChoiceReplaceType) GetApmAwsSite() *APMBigIpAWSReplaceType {
	if m != nil {
		return m.ApmAwsSite
	}
	return nil
}

// BIG-IP APM on App Stack Bare Metal Site
//
// x-displayName: "BIG-IP APM on App Stack Bare Metal Site"
// Virtual F5 BIG-IP APM service to be deployed on App Stack Bare Metal Site
type F5BigIpAppStackBareMetalChoiceReplaceType struct {
}

func (m *F5BigIpAppStackBareMetalChoiceReplaceType) Reset() {
	*m = F5BigIpAppStackBareMetalChoiceReplaceType{}
}
func (*F5BigIpAppStackBareMetalChoiceReplaceType) ProtoMessage() {}
func (*F5BigIpAppStackBareMetalChoiceReplaceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba5f0c12c4d92c49, []int{10}
}
func (m *F5BigIpAppStackBareMetalChoiceReplaceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *F5BigIpAppStackBareMetalChoiceReplaceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *F5BigIpAppStackBareMetalChoiceReplaceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_F5BigIpAppStackBareMetalChoiceReplaceType.Merge(m, src)
}
func (m *F5BigIpAppStackBareMetalChoiceReplaceType) XXX_Size() int {
	return m.Size()
}
func (m *F5BigIpAppStackBareMetalChoiceReplaceType) XXX_DiscardUnknown() {
	xxx_messageInfo_F5BigIpAppStackBareMetalChoiceReplaceType.DiscardUnknown(m)
}

var xxx_messageInfo_F5BigIpAppStackBareMetalChoiceReplaceType proto.InternalMessageInfo

// Replace APM Service
//
// x-displayName: "Replace APM Service"
// Replaces configured APM Service with new set of parameters
type ReplaceSpecType struct {
	// Types that are valid to be assigned to SiteTypeChoice:
	//	*ReplaceSpecType_AwsSiteTypeChoice
	//	*ReplaceSpecType_BaremetalSiteTypeChoice
	SiteTypeChoice isReplaceSpecType_SiteTypeChoice `protobuf_oneof:"site_type_choice"`
	// Types that are valid to be assigned to HttpManagementChoice:
	//	*ReplaceSpecType_HttpsManagement
	HttpManagementChoice isReplaceSpecType_HttpManagementChoice `protobuf_oneof:"http_management_choice"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba5f0c12c4d92c49, []int{11}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_SiteTypeChoice interface {
	isReplaceSpecType_SiteTypeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_HttpManagementChoice interface {
	isReplaceSpecType_HttpManagementChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_AwsSiteTypeChoice struct {
	AwsSiteTypeChoice *AWSSiteTypeChoiceReplaceType `protobuf:"bytes,2,opt,name=aws_site_type_choice,json=awsSiteTypeChoice,proto3,oneof" json:"aws_site_type_choice,omitempty"`
}
type ReplaceSpecType_BaremetalSiteTypeChoice struct {
	BaremetalSiteTypeChoice *F5BigIpAppStackBareMetalChoiceReplaceType `protobuf:"bytes,3,opt,name=baremetal_site_type_choice,json=baremetalSiteTypeChoice,proto3,oneof" json:"baremetal_site_type_choice,omitempty"`
}
type ReplaceSpecType_HttpsManagement struct {
	HttpsManagement *nfv_service.ServiceHttpsManagementType `protobuf:"bytes,6,opt,name=https_management,json=httpsManagement,proto3,oneof" json:"https_management,omitempty"`
}

func (*ReplaceSpecType_AwsSiteTypeChoice) isReplaceSpecType_SiteTypeChoice()       {}
func (*ReplaceSpecType_BaremetalSiteTypeChoice) isReplaceSpecType_SiteTypeChoice() {}
func (*ReplaceSpecType_HttpsManagement) isReplaceSpecType_HttpManagementChoice()   {}

func (m *ReplaceSpecType) GetSiteTypeChoice() isReplaceSpecType_SiteTypeChoice {
	if m != nil {
		return m.SiteTypeChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetHttpManagementChoice() isReplaceSpecType_HttpManagementChoice {
	if m != nil {
		return m.HttpManagementChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetAwsSiteTypeChoice() *AWSSiteTypeChoiceReplaceType {
	if x, ok := m.GetSiteTypeChoice().(*ReplaceSpecType_AwsSiteTypeChoice); ok {
		return x.AwsSiteTypeChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetBaremetalSiteTypeChoice() *F5BigIpAppStackBareMetalChoiceReplaceType {
	if x, ok := m.GetSiteTypeChoice().(*ReplaceSpecType_BaremetalSiteTypeChoice); ok {
		return x.BaremetalSiteTypeChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetHttpsManagement() *nfv_service.ServiceHttpsManagementType {
	if x, ok := m.GetHttpManagementChoice().(*ReplaceSpecType_HttpsManagement); ok {
		return x.HttpsManagement
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_AwsSiteTypeChoice)(nil),
		(*ReplaceSpecType_BaremetalSiteTypeChoice)(nil),
		(*ReplaceSpecType_HttpsManagement)(nil),
	}
}

// Get APM Service
//
// x-displayName: "Get APM Service"
// Gets APM Service parameters
type GetSpecType struct {
	// Types that are valid to be assigned to SiteTypeChoice:
	//	*GetSpecType_AwsSiteTypeChoice
	//	*GetSpecType_BaremetalSiteTypeChoice
	SiteTypeChoice isGetSpecType_SiteTypeChoice `protobuf_oneof:"site_type_choice"`
	// Types that are valid to be assigned to HttpManagementChoice:
	//	*GetSpecType_HttpsManagement
	HttpManagementChoice isGetSpecType_HttpManagementChoice `protobuf_oneof:"http_management_choice"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba5f0c12c4d92c49, []int{12}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_SiteTypeChoice interface {
	isGetSpecType_SiteTypeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_HttpManagementChoice interface {
	isGetSpecType_HttpManagementChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_AwsSiteTypeChoice struct {
	AwsSiteTypeChoice *AWSSiteTypeChoice `protobuf:"bytes,2,opt,name=aws_site_type_choice,json=awsSiteTypeChoice,proto3,oneof" json:"aws_site_type_choice,omitempty"`
}
type GetSpecType_BaremetalSiteTypeChoice struct {
	BaremetalSiteTypeChoice *F5BigIpAppStackBareMetalTypeChoice `protobuf:"bytes,3,opt,name=baremetal_site_type_choice,json=baremetalSiteTypeChoice,proto3,oneof" json:"baremetal_site_type_choice,omitempty"`
}
type GetSpecType_HttpsManagement struct {
	HttpsManagement *nfv_service.ServiceHttpsManagementType `protobuf:"bytes,6,opt,name=https_management,json=httpsManagement,proto3,oneof" json:"https_management,omitempty"`
}

func (*GetSpecType_AwsSiteTypeChoice) isGetSpecType_SiteTypeChoice()       {}
func (*GetSpecType_BaremetalSiteTypeChoice) isGetSpecType_SiteTypeChoice() {}
func (*GetSpecType_HttpsManagement) isGetSpecType_HttpManagementChoice()   {}

func (m *GetSpecType) GetSiteTypeChoice() isGetSpecType_SiteTypeChoice {
	if m != nil {
		return m.SiteTypeChoice
	}
	return nil
}
func (m *GetSpecType) GetHttpManagementChoice() isGetSpecType_HttpManagementChoice {
	if m != nil {
		return m.HttpManagementChoice
	}
	return nil
}

func (m *GetSpecType) GetAwsSiteTypeChoice() *AWSSiteTypeChoice {
	if x, ok := m.GetSiteTypeChoice().(*GetSpecType_AwsSiteTypeChoice); ok {
		return x.AwsSiteTypeChoice
	}
	return nil
}

func (m *GetSpecType) GetBaremetalSiteTypeChoice() *F5BigIpAppStackBareMetalTypeChoice {
	if x, ok := m.GetSiteTypeChoice().(*GetSpecType_BaremetalSiteTypeChoice); ok {
		return x.BaremetalSiteTypeChoice
	}
	return nil
}

func (m *GetSpecType) GetHttpsManagement() *nfv_service.ServiceHttpsManagementType {
	if x, ok := m.GetHttpManagementChoice().(*GetSpecType_HttpsManagement); ok {
		return x.HttpsManagement
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_AwsSiteTypeChoice)(nil),
		(*GetSpecType_BaremetalSiteTypeChoice)(nil),
		(*GetSpecType_HttpsManagement)(nil),
	}
}

func init() {
	proto.RegisterType((*AWSMarketPlaceImageTypeAPMaaS)(nil), "ves.io.schema.bigip.apm.AWSMarketPlaceImageTypeAPMaaS")
	golang_proto.RegisterType((*AWSMarketPlaceImageTypeAPMaaS)(nil), "ves.io.schema.bigip.apm.AWSMarketPlaceImageTypeAPMaaS")
	proto.RegisterType((*EndpointServiceType)(nil), "ves.io.schema.bigip.apm.EndpointServiceType")
	golang_proto.RegisterType((*EndpointServiceType)(nil), "ves.io.schema.bigip.apm.EndpointServiceType")
	proto.RegisterType((*APMBigIpAWSType)(nil), "ves.io.schema.bigip.apm.APMBigIpAWSType")
	golang_proto.RegisterType((*APMBigIpAWSType)(nil), "ves.io.schema.bigip.apm.APMBigIpAWSType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.bigip.apm.APMBigIpAWSType.TagsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.bigip.apm.APMBigIpAWSType.TagsEntry")
	proto.RegisterType((*AWSSiteTypeChoice)(nil), "ves.io.schema.bigip.apm.AWSSiteTypeChoice")
	golang_proto.RegisterType((*AWSSiteTypeChoice)(nil), "ves.io.schema.bigip.apm.AWSSiteTypeChoice")
	proto.RegisterType((*F5BigIpAppStackBareMetalTypeChoice)(nil), "ves.io.schema.bigip.apm.F5BigIpAppStackBareMetalTypeChoice")
	golang_proto.RegisterType((*F5BigIpAppStackBareMetalTypeChoice)(nil), "ves.io.schema.bigip.apm.F5BigIpAppStackBareMetalTypeChoice")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.bigip.apm.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.bigip.apm.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.bigip.apm.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.bigip.apm.CreateSpecType")
	proto.RegisterType((*EndpointServiceReplaceType)(nil), "ves.io.schema.bigip.apm.EndpointServiceReplaceType")
	golang_proto.RegisterType((*EndpointServiceReplaceType)(nil), "ves.io.schema.bigip.apm.EndpointServiceReplaceType")
	proto.RegisterType((*APMBigIpAWSReplaceType)(nil), "ves.io.schema.bigip.apm.APMBigIpAWSReplaceType")
	golang_proto.RegisterType((*APMBigIpAWSReplaceType)(nil), "ves.io.schema.bigip.apm.APMBigIpAWSReplaceType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.bigip.apm.APMBigIpAWSReplaceType.TagsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.bigip.apm.APMBigIpAWSReplaceType.TagsEntry")
	proto.RegisterType((*AWSSiteTypeChoiceReplaceType)(nil), "ves.io.schema.bigip.apm.AWSSiteTypeChoiceReplaceType")
	golang_proto.RegisterType((*AWSSiteTypeChoiceReplaceType)(nil), "ves.io.schema.bigip.apm.AWSSiteTypeChoiceReplaceType")
	proto.RegisterType((*F5BigIpAppStackBareMetalChoiceReplaceType)(nil), "ves.io.schema.bigip.apm.F5BigIpAppStackBareMetalChoiceReplaceType")
	golang_proto.RegisterType((*F5BigIpAppStackBareMetalChoiceReplaceType)(nil), "ves.io.schema.bigip.apm.F5BigIpAppStackBareMetalChoiceReplaceType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.bigip.apm.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.bigip.apm.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.bigip.apm.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.bigip.apm.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/bigip/apm/types.proto", fileDescriptor_ba5f0c12c4d92c49)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/bigip/apm/types.proto", fileDescriptor_ba5f0c12c4d92c49)
}

var fileDescriptor_ba5f0c12c4d92c49 = []byte{
	// 1994 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0x4d, 0x6c, 0x1b, 0xc7,
	0x15, 0xe6, 0xf0, 0x47, 0x24, 0x47, 0x3f, 0x5c, 0xad, 0x65, 0x9b, 0x96, 0x1d, 0x56, 0xa5, 0xd3,
	0x56, 0x51, 0x69, 0x52, 0xa4, 0x2c, 0xdb, 0x91, 0x51, 0xb5, 0xda, 0x54, 0xd6, 0x4f, 0xa0, 0x5a,
	0x58, 0x2a, 0x16, 0x60, 0x34, 0x5d, 0x0c, 0xc9, 0xe1, 0x6a, 0x23, 0xee, 0x0f, 0x76, 0x87, 0x54,
	0x14, 0xc0, 0xa8, 0xe3, 0x63, 0x7b, 0x09, 0xda, 0x9b, 0x4f, 0xed, 0x25, 0x28, 0x7c, 0xea, 0xa1,
	0xa7, 0xae, 0x81, 0x0a, 0x02, 0x0a, 0x04, 0x3e, 0xe9, 0x52, 0xc0, 0xc7, 0x98, 0xbe, 0x38, 0x40,
	0x0f, 0x3e, 0x15, 0x81, 0x2f, 0x2d, 0x66, 0xb8, 0x4b, 0x2d, 0x57, 0xa4, 0xcc, 0xc0, 0xec, 0x1f,
	0x10, 0xf0, 0xb2, 0xbb, 0xf3, 0xbe, 0x6f, 0x66, 0xde, 0x9b, 0x79, 0xef, 0x7b, 0x20, 0xbc, 0xdc,
	0xc0, 0x56, 0x56, 0xd1, 0x73, 0x56, 0x79, 0x07, 0xab, 0x28, 0x57, 0x52, 0x64, 0xc5, 0xc8, 0x21,
	0x43, 0xcd, 0x91, 0x7d, 0x03, 0x5b, 0x59, 0xc3, 0xd4, 0x89, 0xce, 0x9f, 0x6f, 0x19, 0x65, 0x5b,
	0x46, 0x59, 0x66, 0x94, 0x45, 0x86, 0x3a, 0x79, 0x45, 0x56, 0xc8, 0x4e, 0xbd, 0x94, 0x2d, 0xeb,
	0x6a, 0x4e, 0xd6, 0x65, 0x3d, 0xc7, 0xec, 0x4b, 0xf5, 0x2a, 0x7b, 0x63, 0x2f, 0xec, 0xa9, 0xc5,
	0x33, 0xf9, 0xbd, 0xce, 0xc9, 0xb4, 0x6a, 0x43, 0xb2, 0xb0, 0xd9, 0x50, 0xca, 0xd8, 0x3b, 0xdd,
	0xe4, 0xc5, 0x4e, 0x33, 0xdd, 0x20, 0x8a, 0xae, 0xb9, 0x83, 0x17, 0x3a, 0x07, 0xbd, 0xb8, 0x4b,
	0x9d, 0x43, 0x0d, 0x54, 0x53, 0x2a, 0x88, 0x60, 0x67, 0x74, 0xca, 0x37, 0xaa, 0xe0, 0x3d, 0xa9,
	0x93, 0xfa, 0x3b, 0x27, 0x2d, 0x2c, 0xef, 0x04, 0xe9, 0xbf, 0x01, 0xf8, 0xd6, 0xd2, 0x76, 0x71,
	0x03, 0x99, 0xbb, 0x98, 0x6c, 0xd6, 0x50, 0x19, 0xaf, 0xa9, 0x48, 0xc6, 0x5b, 0xfb, 0x06, 0x5e,
	0xda, 0xdc, 0x40, 0xa8, 0xc8, 0xaf, 0xc2, 0x33, 0x02, 0xb6, 0xc8, 0x66, 0xad, 0x6e, 0x6d, 0xa2,
	0xfd, 0x95, 0xc2, 0xec, 0xec, 0x46, 0xc9, 0xb0, 0x92, 0xc1, 0x29, 0x30, 0x3d, 0x5c, 0x98, 0xc8,
	0x76, 0xfa, 0x71, 0x59, 0x35, 0xc8, 0xfe, 0x6a, 0x40, 0xec, 0x06, 0xe1, 0x57, 0xe0, 0x44, 0x09,
	0x5b, 0x44, 0x32, 0x6a, 0x75, 0x4b, 0x32, 0xd0, 0xbe, 0x2c, 0xe5, 0x65, 0x4a, 0x15, 0x3a, 0x95,
	0x6a, 0xbc, 0x74, 0x4c, 0x25, 0x33, 0x80, 0x70, 0x11, 0x42, 0xa4, 0x2a, 0x52, 0x79, 0x47, 0x57,
	0xca, 0x98, 0x1f, 0x3d, 0xb0, 0x41, 0xf0, 0xc8, 0x06, 0xa0, 0x69, 0x03, 0x50, 0x58, 0x0f, 0xc7,
	0x00, 0x17, 0x4c, 0xff, 0x29, 0x06, 0xcf, 0x2c, 0x6b, 0x15, 0x43, 0x57, 0x34, 0x52, 0x6c, 0x05,
	0x84, 0xee, 0x89, 0xbf, 0x09, 0x47, 0x51, 0x9d, 0xe8, 0x2a, 0x22, 0x4a, 0x59, 0x6a, 0x28, 0xc6,
	0x6b, 0x26, 0x1f, 0x69, 0x1b, 0xdf, 0x51, 0x0c, 0x5e, 0x80, 0x63, 0x65, 0x5d, 0xab, 0x2a, 0x72,
	0xdd, 0xc4, 0x15, 0x86, 0x0e, 0x4f, 0x81, 0xe9, 0xb8, 0x70, 0xe1, 0xcf, 0x5f, 0x1d, 0x84, 0xc2,
	0x66, 0xd0, 0x00, 0xf4, 0x61, 0xd8, 0x8c, 0xdf, 0x8d, 0xce, 0x66, 0xd9, 0x6f, 0x35, 0x20, 0x8e,
	0x1e, 0x43, 0x28, 0xc7, 0x16, 0xbc, 0x58, 0x51, 0x2c, 0x54, 0xaa, 0x61, 0x09, 0x55, 0x1a, 0xd8,
	0x24, 0x8a, 0x85, 0x25, 0x5d, 0x93, 0xac, 0x9a, 0x2e, 0x29, 0x46, 0x72, 0xe8, 0x94, 0xe5, 0x00,
	0xf1, 0xbc, 0x03, 0x5d, 0x72, 0x91, 0xb7, 0xb5, 0x62, 0x4d, 0x5f, 0x33, 0xf8, 0x65, 0x78, 0xa6,
	0x1b, 0x5b, 0xf4, 0x54, 0x36, 0x0e, 0xf9, 0x69, 0xee, 0xc0, 0x4b, 0x5d, 0x68, 0x24, 0xfc, 0x31,
	0xc1, 0xa6, 0x86, 0x6a, 0xc9, 0xd8, 0xa9, 0x7c, 0x49, 0x3f, 0xdf, 0xb2, 0x83, 0xe3, 0x57, 0xe1,
	0x78, 0x05, 0x57, 0x51, 0xbd, 0x46, 0x24, 0x52, 0x36, 0x24, 0x43, 0x37, 0x89, 0x95, 0x84, 0xbd,
	0xc9, 0x84, 0xf0, 0x81, 0x0d, 0xc0, 0x6a, 0x50, 0x4c, 0x38, 0xb0, 0xad, 0xb2, 0xb1, 0x49, 0x41,
	0xfc, 0xbb, 0x30, 0xbe, 0x43, 0x48, 0x8b, 0x22, 0x39, 0xdc, 0x07, 0x43, 0x8c, 0x9a, 0x53, 0x2c,
	0x7f, 0x13, 0x42, 0xfa, 0x6c, 0xb5, 0xb0, 0x23, 0x7d, 0x60, 0xd9, 0x54, 0x16, 0x03, 0xdf, 0x86,
	0x5c, 0xb9, 0x6e, 0x11, 0x5d, 0xf5, 0x6c, 0x60, 0x94, 0x51, 0xbc, 0xe5, 0xa3, 0xa0, 0xe6, 0x22,
	0xd2, 0x64, 0x6c, 0xd1, 0x03, 0xd7, 0xe6, 0x1a, 0x6b, 0xc1, 0xdb, 0x1b, 0x59, 0x84, 0x23, 0x9a,
	0xee, 0x21, 0x1b, 0xeb, 0x63, 0x3d, 0x50, 0xd3, 0x7d, 0xf8, 0x7a, 0xc5, 0xc5, 0x73, 0xaf, 0xc5,
	0x87, 0x28, 0xfe, 0x83, 0x8a, 0x83, 0x3f, 0xde, 0xd0, 0x31, 0xc7, 0x78, 0xff, 0x1b, 0x0a, 0xb9,
	0x1b, 0x72, 0x09, 0x85, 0xb7, 0xe1, 0xb8, 0xa2, 0x59, 0x4a, 0x05, 0xd3, 0x8b, 0xe1, 0xde, 0xcd,
	0xc4, 0x81, 0x0d, 0x42, 0xce, 0xdd, 0x0c, 0xcd, 0x65, 0xae, 0x0a, 0xd3, 0xf0, 0x8c, 0x7b, 0x9a,
	0xbc, 0x76, 0xe3, 0x07, 0x36, 0x88, 0x1d, 0xd9, 0x20, 0xd2, 0xb4, 0x41, 0xe4, 0x46, 0xe6, 0x5a,
	0xe6, 0xba, 0x90, 0x87, 0x09, 0xd7, 0x3b, 0xae, 0x55, 0xea, 0xc0, 0x06, 0xf0, 0x0b, 0x1b, 0x80,
	0x23, 0x1b, 0xc4, 0x9b, 0x36, 0x18, 0xcb, 0xcf, 0x66, 0xf2, 0xf9, 0x4c, 0xbe, 0x90, 0xc9, 0xcf,
	0x65, 0xf2, 0x94, 0x3c, 0xe1, 0x6e, 0xc6, 0x85, 0x9c, 0x3d, 0xb0, 0x01, 0xe7, 0x40, 0x12, 0x94,
	0x3c, 0x7f, 0x2d, 0x93, 0xbf, 0xde, 0x4a, 0x12, 0xeb, 0xe1, 0x58, 0x84, 0x1b, 0x5a, 0x0f, 0xc7,
	0xe2, 0x1c, 0x5c, 0x0f, 0xc7, 0x12, 0x1c, 0x97, 0x3e, 0x8c, 0xc0, 0xc4, 0xd2, 0xe6, 0x86, 0xa0,
	0xc8, 0x6b, 0xc6, 0xd2, 0x76, 0x91, 0xa5, 0x0c, 0x11, 0x8e, 0xa0, 0x3d, 0x4b, 0x22, 0xf2, 0x9e,
	0x64, 0x29, 0x04, 0x27, 0x01, 0xf3, 0xd2, 0xac, 0xcf, 0x4b, 0x9e, 0xcc, 0x9f, 0xbd, 0x35, 0xdf,
	0x26, 0x58, 0xd9, 0x2e, 0x2a, 0x84, 0xa5, 0x1e, 0x11, 0xa2, 0x3d, 0x6b, 0x4b, 0xde, 0xa3, 0xef,
	0xfc, 0x2d, 0x38, 0x86, 0x2a, 0xaa, 0xa2, 0x49, 0x06, 0xb2, 0xac, 0x3d, 0xdd, 0xac, 0x38, 0xf9,
	0xf4, 0x82, 0x8f, 0xb5, 0x88, 0xcb, 0x26, 0x26, 0x2d, 0xbf, 0x53, 0x37, 0x8a, 0xa3, 0x0c, 0xb6,
	0xe9, 0xa0, 0xf8, 0x79, 0x97, 0xa7, 0x6e, 0x51, 0x9f, 0xaa, 0x98, 0xe5, 0xb3, 0xb8, 0x30, 0xf6,
	0xb5, 0x0d, 0x02, 0x34, 0x19, 0x45, 0xcc, 0x50, 0xf2, 0x7e, 0xd0, 0x81, 0x7d, 0xe0, 0x18, 0xf1,
	0xef, 0xc0, 0xa8, 0x65, 0xed, 0x48, 0xbb, 0x78, 0xdf, 0xc9, 0x60, 0xdc, 0xd7, 0x36, 0x08, 0x51,
	0xfb, 0xa8, 0x19, 0xe1, 0x40, 0xf2, 0xfe, 0x4f, 0xc4, 0x21, 0xcb, 0xda, 0x79, 0x1f, 0xef, 0xf3,
	0x77, 0x61, 0x44, 0xd3, 0x2b, 0xd8, 0x4a, 0xc6, 0xa7, 0x42, 0xd3, 0xc3, 0x85, 0xec, 0x29, 0xdb,
	0x76, 0xf2, 0xec, 0xcf, 0xa8, 0xb9, 0xe3, 0x3c, 0x61, 0x82, 0x2d, 0xe2, 0x37, 0x20, 0xc8, 0x05,
	0xdd, 0xa7, 0x18, 0x10, 0x5b, 0x94, 0xfc, 0x27, 0x30, 0x4c, 0x90, 0x6c, 0x25, 0x47, 0x18, 0x75,
	0x21, 0xdb, 0xa3, 0x26, 0x67, 0x7d, 0x11, 0xc9, 0x6e, 0x21, 0xd9, 0x5a, 0xd6, 0x88, 0xb9, 0x2f,
	0x14, 0x28, 0x69, 0xfc, 0x21, 0x18, 0x4a, 0x87, 0xcd, 0x60, 0xf2, 0x97, 0x6c, 0x8a, 0x87, 0x20,
	0xc8, 0x45, 0xe8, 0x13, 0x7c, 0x08, 0xa2, 0x33, 0xd4, 0x01, 0xff, 0x04, 0xcd, 0x2f, 0xff, 0x1a,
	0x1a, 0xfa, 0xd5, 0x63, 0x10, 0x8c, 0x05, 0x44, 0x36, 0x27, 0xff, 0x21, 0xe4, 0xb0, 0x53, 0x1f,
	0xdc, 0x0d, 0x38, 0x17, 0x3a, 0xd3, 0x73, 0x1d, 0x5d, 0x0a, 0x8a, 0x10, 0x7e, 0x49, 0xc3, 0x92,
	0xc0, 0x9d, 0x43, 0x93, 0xd7, 0x61, 0xbc, 0xbd, 0x4a, 0x9e, 0x83, 0x21, 0xea, 0x6a, 0x7a, 0x70,
	0xe2, 0x22, 0x7d, 0xe4, 0x27, 0x60, 0xa4, 0x81, 0x6a, 0x75, 0xcc, 0xc2, 0x1e, 0x17, 0x5b, 0x2f,
	0x0b, 0xc1, 0x1b, 0x60, 0x61, 0xe9, 0xd0, 0x06, 0x3f, 0x82, 0x97, 0xe1, 0xd9, 0x3b, 0x8a, 0x49,
	0xea, 0xa8, 0x36, 0x75, 0x6b, 0x7e, 0x4a, 0x58, 0x5b, 0xb9, 0xb2, 0xb6, 0x39, 0xb5, 0xb4, 0x5d,
	0xe4, 0x61, 0x3e, 0x33, 0x97, 0xb9, 0x9a, 0x29, 0x64, 0xf2, 0x05, 0x78, 0x0e, 0x72, 0xee, 0x8a,
	0xa6, 0x9c, 0x79, 0xf9, 0x60, 0x7e, 0x2e, 0xfd, 0x0f, 0x00, 0xc7, 0x97, 0xb6, 0x8b, 0xee, 0xc1,
	0x7b, 0xaf, 0x75, 0x13, 0xaa, 0x90, 0x57, 0x59, 0x95, 0x97, 0x0c, 0x5a, 0xe6, 0x25, 0x85, 0xd6,
	0x79, 0xe7, 0xd8, 0x5d, 0xeb, 0xed, 0xfa, 0xd3, 0xb4, 0xc1, 0x6a, 0x40, 0xe4, 0x54, 0xdf, 0x28,
	0xbf, 0x09, 0x47, 0x90, 0xa1, 0x4a, 0xf4, 0xca, 0xb0, 0xeb, 0xd2, 0x2a, 0xb0, 0xd3, 0xfd, 0x06,
	0xd7, 0x39, 0xe7, 0x10, 0x19, 0xea, 0xd2, 0x9e, 0x45, 0xf7, 0x20, 0x7c, 0x17, 0x8e, 0xd4, 0x94,
	0x32, 0xd6, 0x2c, 0x2c, 0x51, 0xe9, 0xc2, 0x92, 0xc5, 0x71, 0xc1, 0xff, 0xdd, 0x63, 0x00, 0x9c,
	0xa2, 0xff, 0x19, 0x80, 0x69, 0xf7, 0xee, 0x19, 0x46, 0x91, 0xa0, 0xf2, 0xae, 0x80, 0x4c, 0xbc,
	0x81, 0x09, 0xaa, 0x79, 0x3c, 0xf1, 0x11, 0xe4, 0xab, 0xf3, 0x52, 0x09, 0x99, 0x58, 0x52, 0xe9,
	0x90, 0xf7, 0x5a, 0x5f, 0xef, 0xe3, 0x5a, 0x77, 0xa3, 0x76, 0x96, 0x9d, 0xa8, 0xce, 0xb7, 0x3f,
	0xd3, 0xb5, 0xa7, 0x7f, 0x1f, 0x81, 0x63, 0x2b, 0x35, 0xbd, 0x84, 0x6a, 0x45, 0x03, 0x97, 0x59,
	0x3e, 0xf9, 0x10, 0x4e, 0xb8, 0xce, 0x61, 0xfb, 0x71, 0x52, 0x95, 0x13, 0x8a, 0x99, 0xd3, 0x42,
	0xd1, 0x19, 0x52, 0x2a, 0x8e, 0x50, 0xcb, 0x47, 0x9e, 0xdd, 0x7d, 0x0e, 0xe0, 0x24, 0xdd, 0xdb,
	0xf1, 0xd6, 0x3a, 0x66, 0x69, 0x85, 0xe3, 0x66, 0xcf, 0x59, 0x5e, 0xef, 0x3f, 0x61, 0xe6, 0xd1,
	0x63, 0xf0, 0xfd, 0x99, 0xa8, 0x45, 0x90, 0xac, 0x68, 0xf2, 0x4c, 0xd8, 0x30, 0xf5, 0xca, 0xcc,
	0x88, 0xa5, 0x57, 0x49, 0x09, 0x69, 0xbb, 0x92, 0x8a, 0xcb, 0x33, 0xd1, 0x2a, 0xae, 0x98, 0x48,
	0x35, 0x56, 0x03, 0xe2, 0xf9, 0xf6, 0x62, 0x7c, 0x0b, 0x2d, 0x41, 0xae, 0x55, 0x8f, 0x55, 0xa4,
	0x21, 0x19, 0xab, 0x58, 0x23, 0x8e, 0xfc, 0x99, 0x7f, 0x7d, 0x92, 0x59, 0xa5, 0xc8, 0x8d, 0x36,
	0x90, 0xd2, 0xae, 0x02, 0x31, 0xb1, 0xd3, 0xf9, 0x99, 0xff, 0x39, 0x4c, 0x78, 0xc0, 0x92, 0x89,
	0xab, 0xc9, 0x17, 0x51, 0x96, 0x6d, 0x2e, 0xf9, 0xe6, 0xb8, 0x5d, 0xfa, 0x08, 0x97, 0x89, 0x88,
	0xab, 0x2c, 0x9a, 0x67, 0x1f, 0xdd, 0x1b, 0xf6, 0x00, 0x9f, 0xde, 0x03, 0x2f, 0x58, 0xf6, 0xd5,
	0xaa, 0x0d, 0x67, 0x01, 0x22, 0xae, 0xf2, 0xbf, 0x80, 0xa3, 0x4c, 0x73, 0x2b, 0x9a, 0xa3, 0x8f,
	0x8e, 0x12, 0x6c, 0xfd, 0x69, 0x1f, 0x37, 0x93, 0xdd, 0xbe, 0x19, 0x26, 0x1e, 0xdd, 0xeb, 0x04,
	0xb3, 0x09, 0x46, 0xe8, 0xa7, 0x35, 0xe7, 0xcb, 0xc2, 0xf0, 0xa1, 0x0d, 0xa2, 0x30, 0xc2, 0x83,
	0xfc, 0x34, 0x10, 0x2e, 0x43, 0xce, 0x1f, 0x4c, 0x56, 0x5e, 0xdd, 0x9b, 0x10, 0x2a, 0x64, 0xe6,
	0x84, 0x1f, 0xc0, 0x73, 0x4c, 0x1e, 0x1d, 0xbb, 0xd4, 0xab, 0x92, 0x87, 0x8e, 0x6c, 0x10, 0xa6,
	0x97, 0xe6, 0x5a, 0xbb, 0x00, 0x86, 0xb9, 0x48, 0xfa, 0x30, 0x04, 0xc7, 0xde, 0x33, 0x31, 0x22,
	0xf8, 0x3f, 0x75, 0x46, 0x3f, 0xf9, 0x37, 0x1f, 0xd1, 0xff, 0xf2, 0xb1, 0x5b, 0x18, 0x7f, 0xb2,
	0xe8, 0xbb, 0xf5, 0xc2, 0x74, 0x97, 0xf0, 0x4d, 0x3c, 0x78, 0x05, 0x4e, 0x7c, 0x15, 0xae, 0xf6,
	0x8c, 0xe1, 0xe4, 0x83, 0x57, 0xa0, 0xc7, 0x58, 0xfa, 0xab, 0x28, 0x9c, 0xf4, 0xd5, 0x27, 0x11,
	0xb3, 0x4c, 0xcf, 0x02, 0xfa, 0x06, 0x6d, 0x47, 0x60, 0xa0, 0x6d, 0x47, 0x60, 0xc0, 0x6d, 0x47,
	0x60, 0xf0, 0x6d, 0x07, 0x78, 0xe3, 0xb6, 0x03, 0xbc, 0x41, 0xdb, 0x01, 0x06, 0xd8, 0x76, 0x80,
	0x01, 0xb4, 0x1d, 0xe0, 0x0d, 0xdb, 0x8e, 0xe0, 0x20, 0xdb, 0x8e, 0xa0, 0xbf, 0xed, 0x58, 0x38,
	0xf7, 0x64, 0xb1, 0x5b, 0xa3, 0x2f, 0xfc, 0xb8, 0x7b, 0xa3, 0x31, 0x7d, 0xa2, 0xd1, 0x78, 0xf0,
	0x0a, 0x74, 0xb3, 0x14, 0x7e, 0x7a, 0xb2, 0xff, 0xc8, 0x9f, 0xde, 0x7f, 0x3c, 0x78, 0x05, 0xfc,
	0x10, 0xe1, 0xe6, 0xc9, 0x96, 0x64, 0xba, 0x6b, 0x4b, 0x42, 0xc1, 0x3e, 0xcb, 0x9e, 0x5d, 0xca,
	0xe7, 0x21, 0x78, 0xce, 0x23, 0x9b, 0xbc, 0xf7, 0xfc, 0x53, 0xd0, 0xa1, 0xa9, 0xdf, 0xed, 0x47,
	0x76, 0x79, 0xf0, 0x03, 0x91, 0xd6, 0x95, 0x9e, 0xd2, 0x7a, 0xae, 0x5f, 0x69, 0xed, 0x59, 0x92,
	0x10, 0xfe, 0xe3, 0xe3, 0x81, 0x2a, 0xec, 0xf7, 0x9f, 0x2c, 0xfa, 0x7b, 0xbc, 0x43, 0x1b, 0xcc,
	0xc3, 0x8b, 0xbd, 0x34, 0x77, 0xb0, 0xb7, 0xd6, 0x6e, 0x87, 0x28, 0xc8, 0x85, 0xd6, 0xc3, 0xb1,
	0x10, 0x17, 0x6e, 0xd5, 0xd4, 0x56, 0xb8, 0xd2, 0xbf, 0x05, 0xf0, 0xd2, 0x89, 0x92, 0xe8, 0x0d,
	0xd7, 0x76, 0x57, 0xb1, 0x9c, 0xfb, 0x86, 0x51, 0x3b, 0xa9, 0x99, 0x17, 0x26, 0x9e, 0x2c, 0x9e,
	0xec, 0x01, 0x1c, 0x99, 0xfc, 0x43, 0xf8, 0x4e, 0xaf, 0x12, 0x7a, 0x62, 0x85, 0xe9, 0xbf, 0x87,
	0x60, 0xc2, 0x79, 0x6f, 0xab, 0x83, 0x9d, 0x53, 0xd5, 0xc1, 0x7c, 0xff, 0xea, 0xc0, 0x33, 0x51,
	0x77, 0xa1, 0xf0, 0x69, 0x3f, 0x62, 0x56, 0xf8, 0xc6, 0x4a, 0xa1, 0xdb, 0xec, 0xff, 0x6b, 0x82,
	0xe1, 0x46, 0x17, 0xc1, 0xf0, 0xb6, 0x47, 0xef, 0x85, 0x0b, 0x99, 0xa9, 0xb9, 0xc1, 0x09, 0x08,
	0xe7, 0x6c, 0xfc, 0x25, 0x04, 0x87, 0x57, 0x30, 0xf9, 0x56, 0x08, 0xfe, 0xbf, 0x0a, 0x41, 0xe1,
	0xd7, 0xe0, 0xe8, 0x59, 0x2a, 0xf0, 0xf4, 0x59, 0x2a, 0xf0, 0xf2, 0x59, 0x0a, 0xdc, 0x6f, 0xa6,
	0xc0, 0x1f, 0x9a, 0x29, 0xf0, 0x45, 0x33, 0x05, 0x8e, 0x9a, 0x29, 0xf0, 0xb4, 0x99, 0x02, 0x5f,
	0x36, 0x53, 0xe0, 0x45, 0x33, 0x15, 0x78, 0xd9, 0x4c, 0x81, 0xcf, 0x9e, 0xa7, 0x02, 0x07, 0xcf,
	0x53, 0xe0, 0xe8, 0x79, 0x2a, 0xf0, 0xf4, 0x79, 0x2a, 0x70, 0x77, 0x43, 0xd6, 0x8d, 0x5d, 0x39,
	0xdb, 0xd0, 0x6b, 0x04, 0x9b, 0x26, 0xca, 0xd6, 0xad, 0x1c, 0x7b, 0xa8, 0xea, 0xa6, 0x7a, 0xc5,
	0x30, 0xf5, 0x86, 0x52, 0xc1, 0xe6, 0x15, 0x77, 0x38, 0x67, 0x94, 0x64, 0x3d, 0x87, 0x3f, 0x26,
	0xce, 0x1f, 0x0c, 0xfe, 0xff, 0x5c, 0x4a, 0x43, 0xec, 0x6f, 0x86, 0xb9, 0x7f, 0x05, 0x00, 0x00,
	0xff, 0xff, 0xb2, 0x6e, 0x93, 0x1d, 0x95, 0x19, 0x00, 0x00,
}

func (this *AWSMarketPlaceImageTypeAPMaaS) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSMarketPlaceImageTypeAPMaaS)
	if !ok {
		that2, ok := that.(AWSMarketPlaceImageTypeAPMaaS)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AmiChoice == nil {
		if this.AmiChoice != nil {
			return false
		}
	} else if this.AmiChoice == nil {
		return false
	} else if !this.AmiChoice.Equal(that1.AmiChoice) {
		return false
	}
	return true
}
func (this *AWSMarketPlaceImageTypeAPMaaS_BestPlusPayG200Mbps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSMarketPlaceImageTypeAPMaaS_BestPlusPayG200Mbps)
	if !ok {
		that2, ok := that.(AWSMarketPlaceImageTypeAPMaaS_BestPlusPayG200Mbps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BestPlusPayG200Mbps.Equal(that1.BestPlusPayG200Mbps) {
		return false
	}
	return true
}
func (this *AWSMarketPlaceImageTypeAPMaaS_BestPlusPayg_1Gbps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSMarketPlaceImageTypeAPMaaS_BestPlusPayg_1Gbps)
	if !ok {
		that2, ok := that.(AWSMarketPlaceImageTypeAPMaaS_BestPlusPayg_1Gbps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BestPlusPayg_1Gbps.Equal(that1.BestPlusPayg_1Gbps) {
		return false
	}
	return true
}
func (this *EndpointServiceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType)
	if !ok {
		that2, ok := that.(EndpointServiceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.InsideVipChoice == nil {
		if this.InsideVipChoice != nil {
			return false
		}
	} else if this.InsideVipChoice == nil {
		return false
	} else if !this.InsideVipChoice.Equal(that1.InsideVipChoice) {
		return false
	}
	if that1.ExternalVipChoice == nil {
		if this.ExternalVipChoice != nil {
			return false
		}
	} else if this.ExternalVipChoice == nil {
		return false
	} else if !this.ExternalVipChoice.Equal(that1.ExternalVipChoice) {
		return false
	}
	if that1.TcpPortChoice == nil {
		if this.TcpPortChoice != nil {
			return false
		}
	} else if this.TcpPortChoice == nil {
		return false
	} else if !this.TcpPortChoice.Equal(that1.TcpPortChoice) {
		return false
	}
	if that1.UdpPortChoice == nil {
		if this.UdpPortChoice != nil {
			return false
		}
	} else if this.UdpPortChoice == nil {
		return false
	} else if !this.UdpPortChoice.Equal(that1.UdpPortChoice) {
		return false
	}
	return true
}
func (this *EndpointServiceType_AutomaticVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_AutomaticVip)
	if !ok {
		that2, ok := that.(EndpointServiceType_AutomaticVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AutomaticVip.Equal(that1.AutomaticVip) {
		return false
	}
	return true
}
func (this *EndpointServiceType_ConfiguredVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_ConfiguredVip)
	if !ok {
		that2, ok := that.(EndpointServiceType_ConfiguredVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfiguredVip != that1.ConfiguredVip {
		return false
	}
	return true
}
func (this *EndpointServiceType_DisableAdvertiseOnSloIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_DisableAdvertiseOnSloIp)
	if !ok {
		that2, ok := that.(EndpointServiceType_DisableAdvertiseOnSloIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableAdvertiseOnSloIp.Equal(that1.DisableAdvertiseOnSloIp) {
		return false
	}
	return true
}
func (this *EndpointServiceType_AdvertiseOnSloIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_AdvertiseOnSloIp)
	if !ok {
		that2, ok := that.(EndpointServiceType_AdvertiseOnSloIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnSloIp.Equal(that1.AdvertiseOnSloIp) {
		return false
	}
	return true
}
func (this *EndpointServiceType_AdvertiseOnSloIpExternal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_AdvertiseOnSloIpExternal)
	if !ok {
		that2, ok := that.(EndpointServiceType_AdvertiseOnSloIpExternal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnSloIpExternal.Equal(that1.AdvertiseOnSloIpExternal) {
		return false
	}
	return true
}
func (this *EndpointServiceType_DefaultTcpPorts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_DefaultTcpPorts)
	if !ok {
		that2, ok := that.(EndpointServiceType_DefaultTcpPorts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultTcpPorts.Equal(that1.DefaultTcpPorts) {
		return false
	}
	return true
}
func (this *EndpointServiceType_HttpPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_HttpPort)
	if !ok {
		that2, ok := that.(EndpointServiceType_HttpPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpPort.Equal(that1.HttpPort) {
		return false
	}
	return true
}
func (this *EndpointServiceType_HttpsPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_HttpsPort)
	if !ok {
		that2, ok := that.(EndpointServiceType_HttpsPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsPort.Equal(that1.HttpsPort) {
		return false
	}
	return true
}
func (this *EndpointServiceType_CustomTcpPorts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_CustomTcpPorts)
	if !ok {
		that2, ok := that.(EndpointServiceType_CustomTcpPorts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomTcpPorts.Equal(that1.CustomTcpPorts) {
		return false
	}
	return true
}
func (this *EndpointServiceType_NoTcpPorts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_NoTcpPorts)
	if !ok {
		that2, ok := that.(EndpointServiceType_NoTcpPorts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoTcpPorts.Equal(that1.NoTcpPorts) {
		return false
	}
	return true
}
func (this *EndpointServiceType_NoUdpPorts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_NoUdpPorts)
	if !ok {
		that2, ok := that.(EndpointServiceType_NoUdpPorts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoUdpPorts.Equal(that1.NoUdpPorts) {
		return false
	}
	return true
}
func (this *EndpointServiceType_CustomUdpPorts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_CustomUdpPorts)
	if !ok {
		that2, ok := that.(EndpointServiceType_CustomUdpPorts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomUdpPorts.Equal(that1.CustomUdpPorts) {
		return false
	}
	return true
}
func (this *APMBigIpAWSType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APMBigIpAWSType)
	if !ok {
		that2, ok := that.(APMBigIpAWSType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsTgwSite.Equal(that1.AwsTgwSite) {
		return false
	}
	if !this.AdminPassword.Equal(that1.AdminPassword) {
		return false
	}
	if this.AdminUsername != that1.AdminUsername {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if !this.EndpointService.Equal(that1.EndpointService) {
		return false
	}
	return true
}
func (this *AWSSiteTypeChoice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSSiteTypeChoice)
	if !ok {
		that2, ok := that.(AWSSiteTypeChoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.LicenseType == nil {
		if this.LicenseType != nil {
			return false
		}
	} else if this.LicenseType == nil {
		return false
	} else if !this.LicenseType.Equal(that1.LicenseType) {
		return false
	}
	if !this.ApmAwsSite.Equal(that1.ApmAwsSite) {
		return false
	}
	return true
}
func (this *AWSSiteTypeChoice_MarketPlaceImage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSSiteTypeChoice_MarketPlaceImage)
	if !ok {
		that2, ok := that.(AWSSiteTypeChoice_MarketPlaceImage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MarketPlaceImage.Equal(that1.MarketPlaceImage) {
		return false
	}
	return true
}
func (this *F5BigIpAppStackBareMetalTypeChoice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*F5BigIpAppStackBareMetalTypeChoice)
	if !ok {
		that2, ok := that.(F5BigIpAppStackBareMetalTypeChoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.F5BareMetalSite.Equal(that1.F5BareMetalSite) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SiteTypeChoice == nil {
		if this.SiteTypeChoice != nil {
			return false
		}
	} else if this.SiteTypeChoice == nil {
		return false
	} else if !this.SiteTypeChoice.Equal(that1.SiteTypeChoice) {
		return false
	}
	if that1.HttpManagementChoice == nil {
		if this.HttpManagementChoice != nil {
			return false
		}
	} else if this.HttpManagementChoice == nil {
		return false
	} else if !this.HttpManagementChoice.Equal(that1.HttpManagementChoice) {
		return false
	}
	if len(this.NfvServiceRef) != len(that1.NfvServiceRef) {
		return false
	}
	for i := range this.NfvServiceRef {
		if !this.NfvServiceRef[i].Equal(that1.NfvServiceRef[i]) {
			return false
		}
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AwsSiteTypeChoice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AwsSiteTypeChoice)
	if !ok {
		that2, ok := that.(GlobalSpecType_AwsSiteTypeChoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsSiteTypeChoice.Equal(that1.AwsSiteTypeChoice) {
		return false
	}
	return true
}
func (this *GlobalSpecType_BaremetalSiteTypeChoice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_BaremetalSiteTypeChoice)
	if !ok {
		that2, ok := that.(GlobalSpecType_BaremetalSiteTypeChoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BaremetalSiteTypeChoice.Equal(that1.BaremetalSiteTypeChoice) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HttpsManagement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HttpsManagement)
	if !ok {
		that2, ok := that.(GlobalSpecType_HttpsManagement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsManagement.Equal(that1.HttpsManagement) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SiteTypeChoice == nil {
		if this.SiteTypeChoice != nil {
			return false
		}
	} else if this.SiteTypeChoice == nil {
		return false
	} else if !this.SiteTypeChoice.Equal(that1.SiteTypeChoice) {
		return false
	}
	if that1.HttpManagementChoice == nil {
		if this.HttpManagementChoice != nil {
			return false
		}
	} else if this.HttpManagementChoice == nil {
		return false
	} else if !this.HttpManagementChoice.Equal(that1.HttpManagementChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_AwsSiteTypeChoice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AwsSiteTypeChoice)
	if !ok {
		that2, ok := that.(CreateSpecType_AwsSiteTypeChoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsSiteTypeChoice.Equal(that1.AwsSiteTypeChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_BaremetalSiteTypeChoice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_BaremetalSiteTypeChoice)
	if !ok {
		that2, ok := that.(CreateSpecType_BaremetalSiteTypeChoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BaremetalSiteTypeChoice.Equal(that1.BaremetalSiteTypeChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_HttpsManagement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HttpsManagement)
	if !ok {
		that2, ok := that.(CreateSpecType_HttpsManagement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsManagement.Equal(that1.HttpsManagement) {
		return false
	}
	return true
}
func (this *EndpointServiceReplaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceReplaceType)
	if !ok {
		that2, ok := that.(EndpointServiceReplaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ExternalVipChoice == nil {
		if this.ExternalVipChoice != nil {
			return false
		}
	} else if this.ExternalVipChoice == nil {
		return false
	} else if !this.ExternalVipChoice.Equal(that1.ExternalVipChoice) {
		return false
	}
	if that1.TcpPortChoice == nil {
		if this.TcpPortChoice != nil {
			return false
		}
	} else if this.TcpPortChoice == nil {
		return false
	} else if !this.TcpPortChoice.Equal(that1.TcpPortChoice) {
		return false
	}
	if that1.UdpPortChoice == nil {
		if this.UdpPortChoice != nil {
			return false
		}
	} else if this.UdpPortChoice == nil {
		return false
	} else if !this.UdpPortChoice.Equal(that1.UdpPortChoice) {
		return false
	}
	return true
}
func (this *EndpointServiceReplaceType_DisableAdvertiseOnSloIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceReplaceType_DisableAdvertiseOnSloIp)
	if !ok {
		that2, ok := that.(EndpointServiceReplaceType_DisableAdvertiseOnSloIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableAdvertiseOnSloIp.Equal(that1.DisableAdvertiseOnSloIp) {
		return false
	}
	return true
}
func (this *EndpointServiceReplaceType_AdvertiseOnSloIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceReplaceType_AdvertiseOnSloIp)
	if !ok {
		that2, ok := that.(EndpointServiceReplaceType_AdvertiseOnSloIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnSloIp.Equal(that1.AdvertiseOnSloIp) {
		return false
	}
	return true
}
func (this *EndpointServiceReplaceType_AdvertiseOnSloIpExternal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceReplaceType_AdvertiseOnSloIpExternal)
	if !ok {
		that2, ok := that.(EndpointServiceReplaceType_AdvertiseOnSloIpExternal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnSloIpExternal.Equal(that1.AdvertiseOnSloIpExternal) {
		return false
	}
	return true
}
func (this *EndpointServiceReplaceType_DefaultTcpPorts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceReplaceType_DefaultTcpPorts)
	if !ok {
		that2, ok := that.(EndpointServiceReplaceType_DefaultTcpPorts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultTcpPorts.Equal(that1.DefaultTcpPorts) {
		return false
	}
	return true
}
func (this *EndpointServiceReplaceType_HttpPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceReplaceType_HttpPort)
	if !ok {
		that2, ok := that.(EndpointServiceReplaceType_HttpPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpPort.Equal(that1.HttpPort) {
		return false
	}
	return true
}
func (this *EndpointServiceReplaceType_HttpsPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceReplaceType_HttpsPort)
	if !ok {
		that2, ok := that.(EndpointServiceReplaceType_HttpsPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsPort.Equal(that1.HttpsPort) {
		return false
	}
	return true
}
func (this *EndpointServiceReplaceType_CustomTcpPorts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceReplaceType_CustomTcpPorts)
	if !ok {
		that2, ok := that.(EndpointServiceReplaceType_CustomTcpPorts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomTcpPorts.Equal(that1.CustomTcpPorts) {
		return false
	}
	return true
}
func (this *EndpointServiceReplaceType_NoTcpPorts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceReplaceType_NoTcpPorts)
	if !ok {
		that2, ok := that.(EndpointServiceReplaceType_NoTcpPorts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoTcpPorts.Equal(that1.NoTcpPorts) {
		return false
	}
	return true
}
func (this *EndpointServiceReplaceType_NoUdpPorts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceReplaceType_NoUdpPorts)
	if !ok {
		that2, ok := that.(EndpointServiceReplaceType_NoUdpPorts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoUdpPorts.Equal(that1.NoUdpPorts) {
		return false
	}
	return true
}
func (this *EndpointServiceReplaceType_CustomUdpPorts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceReplaceType_CustomUdpPorts)
	if !ok {
		that2, ok := that.(EndpointServiceReplaceType_CustomUdpPorts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomUdpPorts.Equal(that1.CustomUdpPorts) {
		return false
	}
	return true
}
func (this *APMBigIpAWSReplaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APMBigIpAWSReplaceType)
	if !ok {
		that2, ok := that.(APMBigIpAWSReplaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if !this.EndpointService.Equal(that1.EndpointService) {
		return false
	}
	return true
}
func (this *AWSSiteTypeChoiceReplaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSSiteTypeChoiceReplaceType)
	if !ok {
		that2, ok := that.(AWSSiteTypeChoiceReplaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApmAwsSite.Equal(that1.ApmAwsSite) {
		return false
	}
	return true
}
func (this *F5BigIpAppStackBareMetalChoiceReplaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*F5BigIpAppStackBareMetalChoiceReplaceType)
	if !ok {
		that2, ok := that.(F5BigIpAppStackBareMetalChoiceReplaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SiteTypeChoice == nil {
		if this.SiteTypeChoice != nil {
			return false
		}
	} else if this.SiteTypeChoice == nil {
		return false
	} else if !this.SiteTypeChoice.Equal(that1.SiteTypeChoice) {
		return false
	}
	if that1.HttpManagementChoice == nil {
		if this.HttpManagementChoice != nil {
			return false
		}
	} else if this.HttpManagementChoice == nil {
		return false
	} else if !this.HttpManagementChoice.Equal(that1.HttpManagementChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AwsSiteTypeChoice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AwsSiteTypeChoice)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AwsSiteTypeChoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsSiteTypeChoice.Equal(that1.AwsSiteTypeChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_BaremetalSiteTypeChoice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_BaremetalSiteTypeChoice)
	if !ok {
		that2, ok := that.(ReplaceSpecType_BaremetalSiteTypeChoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BaremetalSiteTypeChoice.Equal(that1.BaremetalSiteTypeChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HttpsManagement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HttpsManagement)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HttpsManagement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsManagement.Equal(that1.HttpsManagement) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SiteTypeChoice == nil {
		if this.SiteTypeChoice != nil {
			return false
		}
	} else if this.SiteTypeChoice == nil {
		return false
	} else if !this.SiteTypeChoice.Equal(that1.SiteTypeChoice) {
		return false
	}
	if that1.HttpManagementChoice == nil {
		if this.HttpManagementChoice != nil {
			return false
		}
	} else if this.HttpManagementChoice == nil {
		return false
	} else if !this.HttpManagementChoice.Equal(that1.HttpManagementChoice) {
		return false
	}
	return true
}
func (this *GetSpecType_AwsSiteTypeChoice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AwsSiteTypeChoice)
	if !ok {
		that2, ok := that.(GetSpecType_AwsSiteTypeChoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsSiteTypeChoice.Equal(that1.AwsSiteTypeChoice) {
		return false
	}
	return true
}
func (this *GetSpecType_BaremetalSiteTypeChoice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_BaremetalSiteTypeChoice)
	if !ok {
		that2, ok := that.(GetSpecType_BaremetalSiteTypeChoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BaremetalSiteTypeChoice.Equal(that1.BaremetalSiteTypeChoice) {
		return false
	}
	return true
}
func (this *GetSpecType_HttpsManagement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HttpsManagement)
	if !ok {
		that2, ok := that.(GetSpecType_HttpsManagement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsManagement.Equal(that1.HttpsManagement) {
		return false
	}
	return true
}
func (this *AWSMarketPlaceImageTypeAPMaaS) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apm.AWSMarketPlaceImageTypeAPMaaS{")
	if this.AmiChoice != nil {
		s = append(s, "AmiChoice: "+fmt.Sprintf("%#v", this.AmiChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSMarketPlaceImageTypeAPMaaS_BestPlusPayG200Mbps) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.AWSMarketPlaceImageTypeAPMaaS_BestPlusPayG200Mbps{` +
		`BestPlusPayG200Mbps:` + fmt.Sprintf("%#v", this.BestPlusPayG200Mbps) + `}`}, ", ")
	return s
}
func (this *AWSMarketPlaceImageTypeAPMaaS_BestPlusPayg_1Gbps) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.AWSMarketPlaceImageTypeAPMaaS_BestPlusPayg_1Gbps{` +
		`BestPlusPayg_1Gbps:` + fmt.Sprintf("%#v", this.BestPlusPayg_1Gbps) + `}`}, ", ")
	return s
}
func (this *EndpointServiceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&apm.EndpointServiceType{")
	if this.InsideVipChoice != nil {
		s = append(s, "InsideVipChoice: "+fmt.Sprintf("%#v", this.InsideVipChoice)+",\n")
	}
	if this.ExternalVipChoice != nil {
		s = append(s, "ExternalVipChoice: "+fmt.Sprintf("%#v", this.ExternalVipChoice)+",\n")
	}
	if this.TcpPortChoice != nil {
		s = append(s, "TcpPortChoice: "+fmt.Sprintf("%#v", this.TcpPortChoice)+",\n")
	}
	if this.UdpPortChoice != nil {
		s = append(s, "UdpPortChoice: "+fmt.Sprintf("%#v", this.UdpPortChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EndpointServiceType_AutomaticVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.EndpointServiceType_AutomaticVip{` +
		`AutomaticVip:` + fmt.Sprintf("%#v", this.AutomaticVip) + `}`}, ", ")
	return s
}
func (this *EndpointServiceType_ConfiguredVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.EndpointServiceType_ConfiguredVip{` +
		`ConfiguredVip:` + fmt.Sprintf("%#v", this.ConfiguredVip) + `}`}, ", ")
	return s
}
func (this *EndpointServiceType_DisableAdvertiseOnSloIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.EndpointServiceType_DisableAdvertiseOnSloIp{` +
		`DisableAdvertiseOnSloIp:` + fmt.Sprintf("%#v", this.DisableAdvertiseOnSloIp) + `}`}, ", ")
	return s
}
func (this *EndpointServiceType_AdvertiseOnSloIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.EndpointServiceType_AdvertiseOnSloIp{` +
		`AdvertiseOnSloIp:` + fmt.Sprintf("%#v", this.AdvertiseOnSloIp) + `}`}, ", ")
	return s
}
func (this *EndpointServiceType_AdvertiseOnSloIpExternal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.EndpointServiceType_AdvertiseOnSloIpExternal{` +
		`AdvertiseOnSloIpExternal:` + fmt.Sprintf("%#v", this.AdvertiseOnSloIpExternal) + `}`}, ", ")
	return s
}
func (this *EndpointServiceType_DefaultTcpPorts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.EndpointServiceType_DefaultTcpPorts{` +
		`DefaultTcpPorts:` + fmt.Sprintf("%#v", this.DefaultTcpPorts) + `}`}, ", ")
	return s
}
func (this *EndpointServiceType_HttpPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.EndpointServiceType_HttpPort{` +
		`HttpPort:` + fmt.Sprintf("%#v", this.HttpPort) + `}`}, ", ")
	return s
}
func (this *EndpointServiceType_HttpsPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.EndpointServiceType_HttpsPort{` +
		`HttpsPort:` + fmt.Sprintf("%#v", this.HttpsPort) + `}`}, ", ")
	return s
}
func (this *EndpointServiceType_CustomTcpPorts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.EndpointServiceType_CustomTcpPorts{` +
		`CustomTcpPorts:` + fmt.Sprintf("%#v", this.CustomTcpPorts) + `}`}, ", ")
	return s
}
func (this *EndpointServiceType_NoTcpPorts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.EndpointServiceType_NoTcpPorts{` +
		`NoTcpPorts:` + fmt.Sprintf("%#v", this.NoTcpPorts) + `}`}, ", ")
	return s
}
func (this *EndpointServiceType_NoUdpPorts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.EndpointServiceType_NoUdpPorts{` +
		`NoUdpPorts:` + fmt.Sprintf("%#v", this.NoUdpPorts) + `}`}, ", ")
	return s
}
func (this *EndpointServiceType_CustomUdpPorts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.EndpointServiceType_CustomUdpPorts{` +
		`CustomUdpPorts:` + fmt.Sprintf("%#v", this.CustomUdpPorts) + `}`}, ", ")
	return s
}
func (this *APMBigIpAWSType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&apm.APMBigIpAWSType{")
	if this.AwsTgwSite != nil {
		s = append(s, "AwsTgwSite: "+fmt.Sprintf("%#v", this.AwsTgwSite)+",\n")
	}
	if this.AdminPassword != nil {
		s = append(s, "AdminPassword: "+fmt.Sprintf("%#v", this.AdminPassword)+",\n")
	}
	s = append(s, "AdminUsername: "+fmt.Sprintf("%#v", this.AdminUsername)+",\n")
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	if this.Nodes != nil {
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	if this.EndpointService != nil {
		s = append(s, "EndpointService: "+fmt.Sprintf("%#v", this.EndpointService)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSSiteTypeChoice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apm.AWSSiteTypeChoice{")
	if this.LicenseType != nil {
		s = append(s, "LicenseType: "+fmt.Sprintf("%#v", this.LicenseType)+",\n")
	}
	if this.ApmAwsSite != nil {
		s = append(s, "ApmAwsSite: "+fmt.Sprintf("%#v", this.ApmAwsSite)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSSiteTypeChoice_MarketPlaceImage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.AWSSiteTypeChoice_MarketPlaceImage{` +
		`MarketPlaceImage:` + fmt.Sprintf("%#v", this.MarketPlaceImage) + `}`}, ", ")
	return s
}
func (this *F5BigIpAppStackBareMetalTypeChoice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&apm.F5BigIpAppStackBareMetalTypeChoice{")
	if this.F5BareMetalSite != nil {
		s = append(s, "F5BareMetalSite: "+fmt.Sprintf("%#v", this.F5BareMetalSite)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&apm.GlobalSpecType{")
	if this.SiteTypeChoice != nil {
		s = append(s, "SiteTypeChoice: "+fmt.Sprintf("%#v", this.SiteTypeChoice)+",\n")
	}
	if this.HttpManagementChoice != nil {
		s = append(s, "HttpManagementChoice: "+fmt.Sprintf("%#v", this.HttpManagementChoice)+",\n")
	}
	if this.NfvServiceRef != nil {
		s = append(s, "NfvServiceRef: "+fmt.Sprintf("%#v", this.NfvServiceRef)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_AwsSiteTypeChoice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.GlobalSpecType_AwsSiteTypeChoice{` +
		`AwsSiteTypeChoice:` + fmt.Sprintf("%#v", this.AwsSiteTypeChoice) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_BaremetalSiteTypeChoice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.GlobalSpecType_BaremetalSiteTypeChoice{` +
		`BaremetalSiteTypeChoice:` + fmt.Sprintf("%#v", this.BaremetalSiteTypeChoice) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HttpsManagement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.GlobalSpecType_HttpsManagement{` +
		`HttpsManagement:` + fmt.Sprintf("%#v", this.HttpsManagement) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&apm.CreateSpecType{")
	if this.SiteTypeChoice != nil {
		s = append(s, "SiteTypeChoice: "+fmt.Sprintf("%#v", this.SiteTypeChoice)+",\n")
	}
	if this.HttpManagementChoice != nil {
		s = append(s, "HttpManagementChoice: "+fmt.Sprintf("%#v", this.HttpManagementChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_AwsSiteTypeChoice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.CreateSpecType_AwsSiteTypeChoice{` +
		`AwsSiteTypeChoice:` + fmt.Sprintf("%#v", this.AwsSiteTypeChoice) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_BaremetalSiteTypeChoice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.CreateSpecType_BaremetalSiteTypeChoice{` +
		`BaremetalSiteTypeChoice:` + fmt.Sprintf("%#v", this.BaremetalSiteTypeChoice) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_HttpsManagement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.CreateSpecType_HttpsManagement{` +
		`HttpsManagement:` + fmt.Sprintf("%#v", this.HttpsManagement) + `}`}, ", ")
	return s
}
func (this *EndpointServiceReplaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&apm.EndpointServiceReplaceType{")
	if this.ExternalVipChoice != nil {
		s = append(s, "ExternalVipChoice: "+fmt.Sprintf("%#v", this.ExternalVipChoice)+",\n")
	}
	if this.TcpPortChoice != nil {
		s = append(s, "TcpPortChoice: "+fmt.Sprintf("%#v", this.TcpPortChoice)+",\n")
	}
	if this.UdpPortChoice != nil {
		s = append(s, "UdpPortChoice: "+fmt.Sprintf("%#v", this.UdpPortChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EndpointServiceReplaceType_DisableAdvertiseOnSloIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.EndpointServiceReplaceType_DisableAdvertiseOnSloIp{` +
		`DisableAdvertiseOnSloIp:` + fmt.Sprintf("%#v", this.DisableAdvertiseOnSloIp) + `}`}, ", ")
	return s
}
func (this *EndpointServiceReplaceType_AdvertiseOnSloIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.EndpointServiceReplaceType_AdvertiseOnSloIp{` +
		`AdvertiseOnSloIp:` + fmt.Sprintf("%#v", this.AdvertiseOnSloIp) + `}`}, ", ")
	return s
}
func (this *EndpointServiceReplaceType_AdvertiseOnSloIpExternal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.EndpointServiceReplaceType_AdvertiseOnSloIpExternal{` +
		`AdvertiseOnSloIpExternal:` + fmt.Sprintf("%#v", this.AdvertiseOnSloIpExternal) + `}`}, ", ")
	return s
}
func (this *EndpointServiceReplaceType_DefaultTcpPorts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.EndpointServiceReplaceType_DefaultTcpPorts{` +
		`DefaultTcpPorts:` + fmt.Sprintf("%#v", this.DefaultTcpPorts) + `}`}, ", ")
	return s
}
func (this *EndpointServiceReplaceType_HttpPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.EndpointServiceReplaceType_HttpPort{` +
		`HttpPort:` + fmt.Sprintf("%#v", this.HttpPort) + `}`}, ", ")
	return s
}
func (this *EndpointServiceReplaceType_HttpsPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.EndpointServiceReplaceType_HttpsPort{` +
		`HttpsPort:` + fmt.Sprintf("%#v", this.HttpsPort) + `}`}, ", ")
	return s
}
func (this *EndpointServiceReplaceType_CustomTcpPorts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.EndpointServiceReplaceType_CustomTcpPorts{` +
		`CustomTcpPorts:` + fmt.Sprintf("%#v", this.CustomTcpPorts) + `}`}, ", ")
	return s
}
func (this *EndpointServiceReplaceType_NoTcpPorts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.EndpointServiceReplaceType_NoTcpPorts{` +
		`NoTcpPorts:` + fmt.Sprintf("%#v", this.NoTcpPorts) + `}`}, ", ")
	return s
}
func (this *EndpointServiceReplaceType_NoUdpPorts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.EndpointServiceReplaceType_NoUdpPorts{` +
		`NoUdpPorts:` + fmt.Sprintf("%#v", this.NoUdpPorts) + `}`}, ", ")
	return s
}
func (this *EndpointServiceReplaceType_CustomUdpPorts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.EndpointServiceReplaceType_CustomUdpPorts{` +
		`CustomUdpPorts:` + fmt.Sprintf("%#v", this.CustomUdpPorts) + `}`}, ", ")
	return s
}
func (this *APMBigIpAWSReplaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apm.APMBigIpAWSReplaceType{")
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	if this.EndpointService != nil {
		s = append(s, "EndpointService: "+fmt.Sprintf("%#v", this.EndpointService)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSSiteTypeChoiceReplaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&apm.AWSSiteTypeChoiceReplaceType{")
	if this.ApmAwsSite != nil {
		s = append(s, "ApmAwsSite: "+fmt.Sprintf("%#v", this.ApmAwsSite)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *F5BigIpAppStackBareMetalChoiceReplaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&apm.F5BigIpAppStackBareMetalChoiceReplaceType{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&apm.ReplaceSpecType{")
	if this.SiteTypeChoice != nil {
		s = append(s, "SiteTypeChoice: "+fmt.Sprintf("%#v", this.SiteTypeChoice)+",\n")
	}
	if this.HttpManagementChoice != nil {
		s = append(s, "HttpManagementChoice: "+fmt.Sprintf("%#v", this.HttpManagementChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_AwsSiteTypeChoice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.ReplaceSpecType_AwsSiteTypeChoice{` +
		`AwsSiteTypeChoice:` + fmt.Sprintf("%#v", this.AwsSiteTypeChoice) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_BaremetalSiteTypeChoice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.ReplaceSpecType_BaremetalSiteTypeChoice{` +
		`BaremetalSiteTypeChoice:` + fmt.Sprintf("%#v", this.BaremetalSiteTypeChoice) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_HttpsManagement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.ReplaceSpecType_HttpsManagement{` +
		`HttpsManagement:` + fmt.Sprintf("%#v", this.HttpsManagement) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&apm.GetSpecType{")
	if this.SiteTypeChoice != nil {
		s = append(s, "SiteTypeChoice: "+fmt.Sprintf("%#v", this.SiteTypeChoice)+",\n")
	}
	if this.HttpManagementChoice != nil {
		s = append(s, "HttpManagementChoice: "+fmt.Sprintf("%#v", this.HttpManagementChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_AwsSiteTypeChoice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.GetSpecType_AwsSiteTypeChoice{` +
		`AwsSiteTypeChoice:` + fmt.Sprintf("%#v", this.AwsSiteTypeChoice) + `}`}, ", ")
	return s
}
func (this *GetSpecType_BaremetalSiteTypeChoice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.GetSpecType_BaremetalSiteTypeChoice{` +
		`BaremetalSiteTypeChoice:` + fmt.Sprintf("%#v", this.BaremetalSiteTypeChoice) + `}`}, ", ")
	return s
}
func (this *GetSpecType_HttpsManagement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&apm.GetSpecType_HttpsManagement{` +
		`HttpsManagement:` + fmt.Sprintf("%#v", this.HttpsManagement) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AWSMarketPlaceImageTypeAPMaaS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSMarketPlaceImageTypeAPMaaS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSMarketPlaceImageTypeAPMaaS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AmiChoice != nil {
		{
			size := m.AmiChoice.Size()
			i -= size
			if _, err := m.AmiChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AWSMarketPlaceImageTypeAPMaaS_BestPlusPayG200Mbps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSMarketPlaceImageTypeAPMaaS_BestPlusPayG200Mbps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BestPlusPayG200Mbps != nil {
		{
			size, err := m.BestPlusPayG200Mbps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AWSMarketPlaceImageTypeAPMaaS_BestPlusPayg_1Gbps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSMarketPlaceImageTypeAPMaaS_BestPlusPayg_1Gbps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BestPlusPayg_1Gbps != nil {
		{
			size, err := m.BestPlusPayg_1Gbps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointServiceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UdpPortChoice != nil {
		{
			size := m.UdpPortChoice.Size()
			i -= size
			if _, err := m.UdpPortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TcpPortChoice != nil {
		{
			size := m.TcpPortChoice.Size()
			i -= size
			if _, err := m.TcpPortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ExternalVipChoice != nil {
		{
			size := m.ExternalVipChoice.Size()
			i -= size
			if _, err := m.ExternalVipChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InsideVipChoice != nil {
		{
			size := m.InsideVipChoice.Size()
			i -= size
			if _, err := m.InsideVipChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *EndpointServiceType_AutomaticVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_AutomaticVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AutomaticVip != nil {
		{
			size, err := m.AutomaticVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceType_ConfiguredVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_ConfiguredVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ConfiguredVip)
	copy(dAtA[i:], m.ConfiguredVip)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ConfiguredVip)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *EndpointServiceType_DisableAdvertiseOnSloIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_DisableAdvertiseOnSloIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableAdvertiseOnSloIp != nil {
		{
			size, err := m.DisableAdvertiseOnSloIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceType_AdvertiseOnSloIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_AdvertiseOnSloIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnSloIp != nil {
		{
			size, err := m.AdvertiseOnSloIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceType_AdvertiseOnSloIpExternal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_AdvertiseOnSloIpExternal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnSloIpExternal != nil {
		{
			size, err := m.AdvertiseOnSloIpExternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceType_DefaultTcpPorts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_DefaultTcpPorts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultTcpPorts != nil {
		{
			size, err := m.DefaultTcpPorts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceType_HttpPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_HttpPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpPort != nil {
		{
			size, err := m.HttpPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceType_HttpsPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_HttpsPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsPort != nil {
		{
			size, err := m.HttpsPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceType_CustomTcpPorts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_CustomTcpPorts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomTcpPorts != nil {
		{
			size, err := m.CustomTcpPorts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceType_NoTcpPorts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_NoTcpPorts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoTcpPorts != nil {
		{
			size, err := m.NoTcpPorts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceType_NoUdpPorts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_NoUdpPorts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoUdpPorts != nil {
		{
			size, err := m.NoUdpPorts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceType_CustomUdpPorts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_CustomUdpPorts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomUdpPorts != nil {
		{
			size, err := m.CustomUdpPorts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *APMBigIpAWSType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APMBigIpAWSType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APMBigIpAWSType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndpointService != nil {
		{
			size, err := m.EndpointService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.SshKey) > 0 {
		i -= len(m.SshKey)
		copy(dAtA[i:], m.SshKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SshKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AdminUsername) > 0 {
		i -= len(m.AdminUsername)
		copy(dAtA[i:], m.AdminUsername)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AdminUsername)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AdminPassword != nil {
		{
			size, err := m.AdminPassword.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AwsTgwSite != nil {
		{
			size, err := m.AwsTgwSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AWSSiteTypeChoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSSiteTypeChoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSSiteTypeChoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApmAwsSite != nil {
		{
			size, err := m.ApmAwsSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LicenseType != nil {
		{
			size := m.LicenseType.Size()
			i -= size
			if _, err := m.LicenseType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AWSSiteTypeChoice_MarketPlaceImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSSiteTypeChoice_MarketPlaceImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MarketPlaceImage != nil {
		{
			size, err := m.MarketPlaceImage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *F5BigIpAppStackBareMetalTypeChoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *F5BigIpAppStackBareMetalTypeChoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *F5BigIpAppStackBareMetalTypeChoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.F5BareMetalSite != nil {
		{
			size, err := m.F5BareMetalSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7d
		i--
		dAtA[i] = 0x82
	}
	if len(m.NfvServiceRef) > 0 {
		for iNdEx := len(m.NfvServiceRef) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NfvServiceRef[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.HttpManagementChoice != nil {
		{
			size := m.HttpManagementChoice.Size()
			i -= size
			if _, err := m.HttpManagementChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SiteTypeChoice != nil {
		{
			size := m.SiteTypeChoice.Size()
			i -= size
			if _, err := m.SiteTypeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_AwsSiteTypeChoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AwsSiteTypeChoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AwsSiteTypeChoice != nil {
		{
			size, err := m.AwsSiteTypeChoice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_BaremetalSiteTypeChoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_BaremetalSiteTypeChoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BaremetalSiteTypeChoice != nil {
		{
			size, err := m.BaremetalSiteTypeChoice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_HttpsManagement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_HttpsManagement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsManagement != nil {
		{
			size, err := m.HttpsManagement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HttpManagementChoice != nil {
		{
			size := m.HttpManagementChoice.Size()
			i -= size
			if _, err := m.HttpManagementChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SiteTypeChoice != nil {
		{
			size := m.SiteTypeChoice.Size()
			i -= size
			if _, err := m.SiteTypeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_AwsSiteTypeChoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AwsSiteTypeChoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AwsSiteTypeChoice != nil {
		{
			size, err := m.AwsSiteTypeChoice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_BaremetalSiteTypeChoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_BaremetalSiteTypeChoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BaremetalSiteTypeChoice != nil {
		{
			size, err := m.BaremetalSiteTypeChoice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_HttpsManagement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_HttpsManagement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsManagement != nil {
		{
			size, err := m.HttpsManagement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceReplaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointServiceReplaceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceReplaceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UdpPortChoice != nil {
		{
			size := m.UdpPortChoice.Size()
			i -= size
			if _, err := m.UdpPortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TcpPortChoice != nil {
		{
			size := m.TcpPortChoice.Size()
			i -= size
			if _, err := m.TcpPortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ExternalVipChoice != nil {
		{
			size := m.ExternalVipChoice.Size()
			i -= size
			if _, err := m.ExternalVipChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *EndpointServiceReplaceType_DisableAdvertiseOnSloIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceReplaceType_DisableAdvertiseOnSloIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableAdvertiseOnSloIp != nil {
		{
			size, err := m.DisableAdvertiseOnSloIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceReplaceType_AdvertiseOnSloIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceReplaceType_AdvertiseOnSloIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnSloIp != nil {
		{
			size, err := m.AdvertiseOnSloIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceReplaceType_AdvertiseOnSloIpExternal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceReplaceType_AdvertiseOnSloIpExternal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnSloIpExternal != nil {
		{
			size, err := m.AdvertiseOnSloIpExternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceReplaceType_DefaultTcpPorts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceReplaceType_DefaultTcpPorts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultTcpPorts != nil {
		{
			size, err := m.DefaultTcpPorts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceReplaceType_HttpPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceReplaceType_HttpPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpPort != nil {
		{
			size, err := m.HttpPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceReplaceType_HttpsPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceReplaceType_HttpsPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsPort != nil {
		{
			size, err := m.HttpsPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceReplaceType_CustomTcpPorts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceReplaceType_CustomTcpPorts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomTcpPorts != nil {
		{
			size, err := m.CustomTcpPorts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceReplaceType_NoTcpPorts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceReplaceType_NoTcpPorts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoTcpPorts != nil {
		{
			size, err := m.NoTcpPorts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceReplaceType_NoUdpPorts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceReplaceType_NoUdpPorts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoUdpPorts != nil {
		{
			size, err := m.NoUdpPorts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceReplaceType_CustomUdpPorts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceReplaceType_CustomUdpPorts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomUdpPorts != nil {
		{
			size, err := m.CustomUdpPorts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *APMBigIpAWSReplaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APMBigIpAWSReplaceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APMBigIpAWSReplaceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndpointService != nil {
		{
			size, err := m.EndpointService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x62
		}
	}
	return len(dAtA) - i, nil
}

func (m *AWSSiteTypeChoiceReplaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSSiteTypeChoiceReplaceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSSiteTypeChoiceReplaceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApmAwsSite != nil {
		{
			size, err := m.ApmAwsSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *F5BigIpAppStackBareMetalChoiceReplaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *F5BigIpAppStackBareMetalChoiceReplaceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *F5BigIpAppStackBareMetalChoiceReplaceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HttpManagementChoice != nil {
		{
			size := m.HttpManagementChoice.Size()
			i -= size
			if _, err := m.HttpManagementChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SiteTypeChoice != nil {
		{
			size := m.SiteTypeChoice.Size()
			i -= size
			if _, err := m.SiteTypeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_AwsSiteTypeChoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AwsSiteTypeChoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AwsSiteTypeChoice != nil {
		{
			size, err := m.AwsSiteTypeChoice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_BaremetalSiteTypeChoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_BaremetalSiteTypeChoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BaremetalSiteTypeChoice != nil {
		{
			size, err := m.BaremetalSiteTypeChoice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_HttpsManagement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_HttpsManagement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsManagement != nil {
		{
			size, err := m.HttpsManagement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HttpManagementChoice != nil {
		{
			size := m.HttpManagementChoice.Size()
			i -= size
			if _, err := m.HttpManagementChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SiteTypeChoice != nil {
		{
			size := m.SiteTypeChoice.Size()
			i -= size
			if _, err := m.SiteTypeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_AwsSiteTypeChoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AwsSiteTypeChoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AwsSiteTypeChoice != nil {
		{
			size, err := m.AwsSiteTypeChoice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_BaremetalSiteTypeChoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_BaremetalSiteTypeChoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BaremetalSiteTypeChoice != nil {
		{
			size, err := m.BaremetalSiteTypeChoice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_HttpsManagement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_HttpsManagement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsManagement != nil {
		{
			size, err := m.HttpsManagement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AWSMarketPlaceImageTypeAPMaaS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AmiChoice != nil {
		n += m.AmiChoice.Size()
	}
	return n
}

func (m *AWSMarketPlaceImageTypeAPMaaS_BestPlusPayG200Mbps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BestPlusPayG200Mbps != nil {
		l = m.BestPlusPayG200Mbps.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSMarketPlaceImageTypeAPMaaS_BestPlusPayg_1Gbps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BestPlusPayg_1Gbps != nil {
		l = m.BestPlusPayg_1Gbps.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InsideVipChoice != nil {
		n += m.InsideVipChoice.Size()
	}
	if m.ExternalVipChoice != nil {
		n += m.ExternalVipChoice.Size()
	}
	if m.TcpPortChoice != nil {
		n += m.TcpPortChoice.Size()
	}
	if m.UdpPortChoice != nil {
		n += m.UdpPortChoice.Size()
	}
	return n
}

func (m *EndpointServiceType_AutomaticVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutomaticVip != nil {
		l = m.AutomaticVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceType_ConfiguredVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConfiguredVip)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *EndpointServiceType_DisableAdvertiseOnSloIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableAdvertiseOnSloIp != nil {
		l = m.DisableAdvertiseOnSloIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceType_AdvertiseOnSloIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnSloIp != nil {
		l = m.AdvertiseOnSloIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceType_AdvertiseOnSloIpExternal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnSloIpExternal != nil {
		l = m.AdvertiseOnSloIpExternal.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceType_DefaultTcpPorts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultTcpPorts != nil {
		l = m.DefaultTcpPorts.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceType_HttpPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpPort != nil {
		l = m.HttpPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceType_HttpsPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsPort != nil {
		l = m.HttpsPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceType_CustomTcpPorts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomTcpPorts != nil {
		l = m.CustomTcpPorts.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceType_NoTcpPorts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoTcpPorts != nil {
		l = m.NoTcpPorts.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceType_NoUdpPorts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoUdpPorts != nil {
		l = m.NoUdpPorts.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceType_CustomUdpPorts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomUdpPorts != nil {
		l = m.CustomUdpPorts.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *APMBigIpAWSType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AwsTgwSite != nil {
		l = m.AwsTgwSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AdminPassword != nil {
		l = m.AdminPassword.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AdminUsername)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.EndpointService != nil {
		l = m.EndpointService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AWSSiteTypeChoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LicenseType != nil {
		n += m.LicenseType.Size()
	}
	if m.ApmAwsSite != nil {
		l = m.ApmAwsSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AWSSiteTypeChoice_MarketPlaceImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketPlaceImage != nil {
		l = m.MarketPlaceImage.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *F5BigIpAppStackBareMetalTypeChoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F5BareMetalSite != nil {
		l = m.F5BareMetalSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteTypeChoice != nil {
		n += m.SiteTypeChoice.Size()
	}
	if m.HttpManagementChoice != nil {
		n += m.HttpManagementChoice.Size()
	}
	if len(m.NfvServiceRef) > 0 {
		for _, e := range m.NfvServiceRef {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_AwsSiteTypeChoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AwsSiteTypeChoice != nil {
		l = m.AwsSiteTypeChoice.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_BaremetalSiteTypeChoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaremetalSiteTypeChoice != nil {
		l = m.BaremetalSiteTypeChoice.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HttpsManagement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsManagement != nil {
		l = m.HttpsManagement.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteTypeChoice != nil {
		n += m.SiteTypeChoice.Size()
	}
	if m.HttpManagementChoice != nil {
		n += m.HttpManagementChoice.Size()
	}
	return n
}

func (m *CreateSpecType_AwsSiteTypeChoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AwsSiteTypeChoice != nil {
		l = m.AwsSiteTypeChoice.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_BaremetalSiteTypeChoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaremetalSiteTypeChoice != nil {
		l = m.BaremetalSiteTypeChoice.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_HttpsManagement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsManagement != nil {
		l = m.HttpsManagement.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceReplaceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExternalVipChoice != nil {
		n += m.ExternalVipChoice.Size()
	}
	if m.TcpPortChoice != nil {
		n += m.TcpPortChoice.Size()
	}
	if m.UdpPortChoice != nil {
		n += m.UdpPortChoice.Size()
	}
	return n
}

func (m *EndpointServiceReplaceType_DisableAdvertiseOnSloIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableAdvertiseOnSloIp != nil {
		l = m.DisableAdvertiseOnSloIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceReplaceType_AdvertiseOnSloIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnSloIp != nil {
		l = m.AdvertiseOnSloIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceReplaceType_AdvertiseOnSloIpExternal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnSloIpExternal != nil {
		l = m.AdvertiseOnSloIpExternal.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceReplaceType_DefaultTcpPorts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultTcpPorts != nil {
		l = m.DefaultTcpPorts.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceReplaceType_HttpPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpPort != nil {
		l = m.HttpPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceReplaceType_HttpsPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsPort != nil {
		l = m.HttpsPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceReplaceType_CustomTcpPorts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomTcpPorts != nil {
		l = m.CustomTcpPorts.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceReplaceType_NoTcpPorts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoTcpPorts != nil {
		l = m.NoTcpPorts.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceReplaceType_NoUdpPorts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoUdpPorts != nil {
		l = m.NoUdpPorts.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceReplaceType_CustomUdpPorts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomUdpPorts != nil {
		l = m.CustomUdpPorts.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *APMBigIpAWSReplaceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.EndpointService != nil {
		l = m.EndpointService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AWSSiteTypeChoiceReplaceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApmAwsSite != nil {
		l = m.ApmAwsSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *F5BigIpAppStackBareMetalChoiceReplaceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteTypeChoice != nil {
		n += m.SiteTypeChoice.Size()
	}
	if m.HttpManagementChoice != nil {
		n += m.HttpManagementChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_AwsSiteTypeChoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AwsSiteTypeChoice != nil {
		l = m.AwsSiteTypeChoice.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_BaremetalSiteTypeChoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaremetalSiteTypeChoice != nil {
		l = m.BaremetalSiteTypeChoice.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_HttpsManagement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsManagement != nil {
		l = m.HttpsManagement.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteTypeChoice != nil {
		n += m.SiteTypeChoice.Size()
	}
	if m.HttpManagementChoice != nil {
		n += m.HttpManagementChoice.Size()
	}
	return n
}

func (m *GetSpecType_AwsSiteTypeChoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AwsSiteTypeChoice != nil {
		l = m.AwsSiteTypeChoice.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_BaremetalSiteTypeChoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaremetalSiteTypeChoice != nil {
		l = m.BaremetalSiteTypeChoice.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_HttpsManagement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsManagement != nil {
		l = m.HttpsManagement.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AWSMarketPlaceImageTypeAPMaaS) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSMarketPlaceImageTypeAPMaaS{`,
		`AmiChoice:` + fmt.Sprintf("%v", this.AmiChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSMarketPlaceImageTypeAPMaaS_BestPlusPayG200Mbps) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSMarketPlaceImageTypeAPMaaS_BestPlusPayG200Mbps{`,
		`BestPlusPayG200Mbps:` + strings.Replace(fmt.Sprintf("%v", this.BestPlusPayG200Mbps), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSMarketPlaceImageTypeAPMaaS_BestPlusPayg_1Gbps) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSMarketPlaceImageTypeAPMaaS_BestPlusPayg_1Gbps{`,
		`BestPlusPayg_1Gbps:` + strings.Replace(fmt.Sprintf("%v", this.BestPlusPayg_1Gbps), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType{`,
		`InsideVipChoice:` + fmt.Sprintf("%v", this.InsideVipChoice) + `,`,
		`ExternalVipChoice:` + fmt.Sprintf("%v", this.ExternalVipChoice) + `,`,
		`TcpPortChoice:` + fmt.Sprintf("%v", this.TcpPortChoice) + `,`,
		`UdpPortChoice:` + fmt.Sprintf("%v", this.UdpPortChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_AutomaticVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_AutomaticVip{`,
		`AutomaticVip:` + strings.Replace(fmt.Sprintf("%v", this.AutomaticVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_ConfiguredVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_ConfiguredVip{`,
		`ConfiguredVip:` + fmt.Sprintf("%v", this.ConfiguredVip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_DisableAdvertiseOnSloIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_DisableAdvertiseOnSloIp{`,
		`DisableAdvertiseOnSloIp:` + strings.Replace(fmt.Sprintf("%v", this.DisableAdvertiseOnSloIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_AdvertiseOnSloIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_AdvertiseOnSloIp{`,
		`AdvertiseOnSloIp:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnSloIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_AdvertiseOnSloIpExternal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_AdvertiseOnSloIpExternal{`,
		`AdvertiseOnSloIpExternal:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnSloIpExternal), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_DefaultTcpPorts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_DefaultTcpPorts{`,
		`DefaultTcpPorts:` + strings.Replace(fmt.Sprintf("%v", this.DefaultTcpPorts), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_HttpPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_HttpPort{`,
		`HttpPort:` + strings.Replace(fmt.Sprintf("%v", this.HttpPort), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_HttpsPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_HttpsPort{`,
		`HttpsPort:` + strings.Replace(fmt.Sprintf("%v", this.HttpsPort), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_CustomTcpPorts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_CustomTcpPorts{`,
		`CustomTcpPorts:` + strings.Replace(fmt.Sprintf("%v", this.CustomTcpPorts), "PortRangesType", "schema.PortRangesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_NoTcpPorts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_NoTcpPorts{`,
		`NoTcpPorts:` + strings.Replace(fmt.Sprintf("%v", this.NoTcpPorts), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_NoUdpPorts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_NoUdpPorts{`,
		`NoUdpPorts:` + strings.Replace(fmt.Sprintf("%v", this.NoUdpPorts), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_CustomUdpPorts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_CustomUdpPorts{`,
		`CustomUdpPorts:` + strings.Replace(fmt.Sprintf("%v", this.CustomUdpPorts), "PortRangesType", "schema.PortRangesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APMBigIpAWSType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNodes := "[]*ServiceNodesAWSType{"
	for _, f := range this.Nodes {
		repeatedStringForNodes += strings.Replace(fmt.Sprintf("%v", f), "ServiceNodesAWSType", "nfv_service.ServiceNodesAWSType", 1) + ","
	}
	repeatedStringForNodes += "}"
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&APMBigIpAWSType{`,
		`AwsTgwSite:` + strings.Replace(fmt.Sprintf("%v", this.AwsTgwSite), "F5BigIpAWSTGWSiteType", "nfv_service.F5BigIpAWSTGWSiteType", 1) + `,`,
		`AdminPassword:` + strings.Replace(fmt.Sprintf("%v", this.AdminPassword), "SecretType", "schema.SecretType", 1) + `,`,
		`AdminUsername:` + fmt.Sprintf("%v", this.AdminUsername) + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`Nodes:` + repeatedStringForNodes + `,`,
		`Tags:` + mapStringForTags + `,`,
		`EndpointService:` + strings.Replace(this.EndpointService.String(), "EndpointServiceType", "EndpointServiceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSSiteTypeChoice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSSiteTypeChoice{`,
		`LicenseType:` + fmt.Sprintf("%v", this.LicenseType) + `,`,
		`ApmAwsSite:` + strings.Replace(this.ApmAwsSite.String(), "APMBigIpAWSType", "APMBigIpAWSType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSSiteTypeChoice_MarketPlaceImage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSSiteTypeChoice_MarketPlaceImage{`,
		`MarketPlaceImage:` + strings.Replace(fmt.Sprintf("%v", this.MarketPlaceImage), "AWSMarketPlaceImageTypeAPMaaS", "AWSMarketPlaceImageTypeAPMaaS", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *F5BigIpAppStackBareMetalTypeChoice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&F5BigIpAppStackBareMetalTypeChoice{`,
		`F5BareMetalSite:` + strings.Replace(fmt.Sprintf("%v", this.F5BareMetalSite), "F5BigIpAppStackBareMetalType", "nfv_service.F5BigIpAppStackBareMetalType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNfvServiceRef := "[]*ObjectRefType{"
	for _, f := range this.NfvServiceRef {
		repeatedStringForNfvServiceRef += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForNfvServiceRef += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`SiteTypeChoice:` + fmt.Sprintf("%v", this.SiteTypeChoice) + `,`,
		`HttpManagementChoice:` + fmt.Sprintf("%v", this.HttpManagementChoice) + `,`,
		`NfvServiceRef:` + repeatedStringForNfvServiceRef + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AwsSiteTypeChoice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AwsSiteTypeChoice{`,
		`AwsSiteTypeChoice:` + strings.Replace(fmt.Sprintf("%v", this.AwsSiteTypeChoice), "AWSSiteTypeChoice", "AWSSiteTypeChoice", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_BaremetalSiteTypeChoice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_BaremetalSiteTypeChoice{`,
		`BaremetalSiteTypeChoice:` + strings.Replace(fmt.Sprintf("%v", this.BaremetalSiteTypeChoice), "F5BigIpAppStackBareMetalTypeChoice", "F5BigIpAppStackBareMetalTypeChoice", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HttpsManagement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HttpsManagement{`,
		`HttpsManagement:` + strings.Replace(fmt.Sprintf("%v", this.HttpsManagement), "ServiceHttpsManagementType", "nfv_service.ServiceHttpsManagementType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`SiteTypeChoice:` + fmt.Sprintf("%v", this.SiteTypeChoice) + `,`,
		`HttpManagementChoice:` + fmt.Sprintf("%v", this.HttpManagementChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AwsSiteTypeChoice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AwsSiteTypeChoice{`,
		`AwsSiteTypeChoice:` + strings.Replace(fmt.Sprintf("%v", this.AwsSiteTypeChoice), "AWSSiteTypeChoice", "AWSSiteTypeChoice", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_BaremetalSiteTypeChoice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_BaremetalSiteTypeChoice{`,
		`BaremetalSiteTypeChoice:` + strings.Replace(fmt.Sprintf("%v", this.BaremetalSiteTypeChoice), "F5BigIpAppStackBareMetalTypeChoice", "F5BigIpAppStackBareMetalTypeChoice", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HttpsManagement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HttpsManagement{`,
		`HttpsManagement:` + strings.Replace(fmt.Sprintf("%v", this.HttpsManagement), "ServiceHttpsManagementType", "nfv_service.ServiceHttpsManagementType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceReplaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceReplaceType{`,
		`ExternalVipChoice:` + fmt.Sprintf("%v", this.ExternalVipChoice) + `,`,
		`TcpPortChoice:` + fmt.Sprintf("%v", this.TcpPortChoice) + `,`,
		`UdpPortChoice:` + fmt.Sprintf("%v", this.UdpPortChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceReplaceType_DisableAdvertiseOnSloIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceReplaceType_DisableAdvertiseOnSloIp{`,
		`DisableAdvertiseOnSloIp:` + strings.Replace(fmt.Sprintf("%v", this.DisableAdvertiseOnSloIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceReplaceType_AdvertiseOnSloIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceReplaceType_AdvertiseOnSloIp{`,
		`AdvertiseOnSloIp:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnSloIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceReplaceType_AdvertiseOnSloIpExternal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceReplaceType_AdvertiseOnSloIpExternal{`,
		`AdvertiseOnSloIpExternal:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnSloIpExternal), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceReplaceType_DefaultTcpPorts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceReplaceType_DefaultTcpPorts{`,
		`DefaultTcpPorts:` + strings.Replace(fmt.Sprintf("%v", this.DefaultTcpPorts), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceReplaceType_HttpPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceReplaceType_HttpPort{`,
		`HttpPort:` + strings.Replace(fmt.Sprintf("%v", this.HttpPort), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceReplaceType_HttpsPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceReplaceType_HttpsPort{`,
		`HttpsPort:` + strings.Replace(fmt.Sprintf("%v", this.HttpsPort), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceReplaceType_CustomTcpPorts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceReplaceType_CustomTcpPorts{`,
		`CustomTcpPorts:` + strings.Replace(fmt.Sprintf("%v", this.CustomTcpPorts), "PortRangesType", "schema.PortRangesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceReplaceType_NoTcpPorts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceReplaceType_NoTcpPorts{`,
		`NoTcpPorts:` + strings.Replace(fmt.Sprintf("%v", this.NoTcpPorts), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceReplaceType_NoUdpPorts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceReplaceType_NoUdpPorts{`,
		`NoUdpPorts:` + strings.Replace(fmt.Sprintf("%v", this.NoUdpPorts), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceReplaceType_CustomUdpPorts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceReplaceType_CustomUdpPorts{`,
		`CustomUdpPorts:` + strings.Replace(fmt.Sprintf("%v", this.CustomUdpPorts), "PortRangesType", "schema.PortRangesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APMBigIpAWSReplaceType) String() string {
	if this == nil {
		return "nil"
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&APMBigIpAWSReplaceType{`,
		`Tags:` + mapStringForTags + `,`,
		`EndpointService:` + strings.Replace(this.EndpointService.String(), "EndpointServiceReplaceType", "EndpointServiceReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSSiteTypeChoiceReplaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSSiteTypeChoiceReplaceType{`,
		`ApmAwsSite:` + strings.Replace(this.ApmAwsSite.String(), "APMBigIpAWSReplaceType", "APMBigIpAWSReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *F5BigIpAppStackBareMetalChoiceReplaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&F5BigIpAppStackBareMetalChoiceReplaceType{`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`SiteTypeChoice:` + fmt.Sprintf("%v", this.SiteTypeChoice) + `,`,
		`HttpManagementChoice:` + fmt.Sprintf("%v", this.HttpManagementChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AwsSiteTypeChoice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AwsSiteTypeChoice{`,
		`AwsSiteTypeChoice:` + strings.Replace(fmt.Sprintf("%v", this.AwsSiteTypeChoice), "AWSSiteTypeChoiceReplaceType", "AWSSiteTypeChoiceReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_BaremetalSiteTypeChoice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_BaremetalSiteTypeChoice{`,
		`BaremetalSiteTypeChoice:` + strings.Replace(fmt.Sprintf("%v", this.BaremetalSiteTypeChoice), "F5BigIpAppStackBareMetalChoiceReplaceType", "F5BigIpAppStackBareMetalChoiceReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HttpsManagement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HttpsManagement{`,
		`HttpsManagement:` + strings.Replace(fmt.Sprintf("%v", this.HttpsManagement), "ServiceHttpsManagementType", "nfv_service.ServiceHttpsManagementType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`SiteTypeChoice:` + fmt.Sprintf("%v", this.SiteTypeChoice) + `,`,
		`HttpManagementChoice:` + fmt.Sprintf("%v", this.HttpManagementChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AwsSiteTypeChoice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AwsSiteTypeChoice{`,
		`AwsSiteTypeChoice:` + strings.Replace(fmt.Sprintf("%v", this.AwsSiteTypeChoice), "AWSSiteTypeChoice", "AWSSiteTypeChoice", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_BaremetalSiteTypeChoice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_BaremetalSiteTypeChoice{`,
		`BaremetalSiteTypeChoice:` + strings.Replace(fmt.Sprintf("%v", this.BaremetalSiteTypeChoice), "F5BigIpAppStackBareMetalTypeChoice", "F5BigIpAppStackBareMetalTypeChoice", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HttpsManagement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HttpsManagement{`,
		`HttpsManagement:` + strings.Replace(fmt.Sprintf("%v", this.HttpsManagement), "ServiceHttpsManagementType", "nfv_service.ServiceHttpsManagementType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AWSMarketPlaceImageTypeAPMaaS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSMarketPlaceImageTypeAPMaaS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSMarketPlaceImageTypeAPMaaS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestPlusPayG200Mbps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AmiChoice = &AWSMarketPlaceImageTypeAPMaaS_BestPlusPayG200Mbps{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestPlusPayg_1Gbps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AmiChoice = &AWSMarketPlaceImageTypeAPMaaS_BestPlusPayg_1Gbps{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointServiceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointServiceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointServiceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutomaticVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideVipChoice = &EndpointServiceType_AutomaticVip{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfiguredVip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsideVipChoice = &EndpointServiceType_ConfiguredVip{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableAdvertiseOnSloIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ExternalVipChoice = &EndpointServiceType_DisableAdvertiseOnSloIp{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnSloIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ExternalVipChoice = &EndpointServiceType_AdvertiseOnSloIp{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnSloIpExternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ExternalVipChoice = &EndpointServiceType_AdvertiseOnSloIpExternal{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTcpPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TcpPortChoice = &EndpointServiceType_DefaultTcpPorts{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TcpPortChoice = &EndpointServiceType_HttpPort{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TcpPortChoice = &EndpointServiceType_HttpsPort{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomTcpPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PortRangesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TcpPortChoice = &EndpointServiceType_CustomTcpPorts{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoTcpPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TcpPortChoice = &EndpointServiceType_NoTcpPorts{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoUdpPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UdpPortChoice = &EndpointServiceType_NoUdpPorts{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomUdpPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PortRangesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UdpPortChoice = &EndpointServiceType_CustomUdpPorts{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APMBigIpAWSType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APMBigIpAWSType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APMBigIpAWSType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsTgwSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwsTgwSite == nil {
				m.AwsTgwSite = &nfv_service.F5BigIpAWSTGWSiteType{}
			}
			if err := m.AwsTgwSite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminPassword", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminPassword == nil {
				m.AdminPassword = &schema.SecretType{}
			}
			if err := m.AdminPassword.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &nfv_service.ServiceNodesAWSType{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndpointService == nil {
				m.EndpointService = &EndpointServiceType{}
			}
			if err := m.EndpointService.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSSiteTypeChoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSSiteTypeChoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSSiteTypeChoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketPlaceImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSMarketPlaceImageTypeAPMaaS{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LicenseType = &AWSSiteTypeChoice_MarketPlaceImage{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApmAwsSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApmAwsSite == nil {
				m.ApmAwsSite = &APMBigIpAWSType{}
			}
			if err := m.ApmAwsSite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *F5BigIpAppStackBareMetalTypeChoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: F5BigIpAppStackBareMetalTypeChoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: F5BigIpAppStackBareMetalTypeChoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5BareMetalSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.F5BareMetalSite == nil {
				m.F5BareMetalSite = &nfv_service.F5BigIpAppStackBareMetalType{}
			}
			if err := m.F5BareMetalSite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsSiteTypeChoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSSiteTypeChoice{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteTypeChoice = &GlobalSpecType_AwsSiteTypeChoice{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaremetalSiteTypeChoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &F5BigIpAppStackBareMetalTypeChoice{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteTypeChoice = &GlobalSpecType_BaremetalSiteTypeChoice{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsManagement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &nfv_service.ServiceHttpsManagementType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HttpManagementChoice = &GlobalSpecType_HttpsManagement{v}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NfvServiceRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NfvServiceRef = append(m.NfvServiceRef, &schema.ObjectRefType{})
			if err := m.NfvServiceRef[len(m.NfvServiceRef)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsSiteTypeChoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSSiteTypeChoice{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteTypeChoice = &CreateSpecType_AwsSiteTypeChoice{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaremetalSiteTypeChoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &F5BigIpAppStackBareMetalTypeChoice{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteTypeChoice = &CreateSpecType_BaremetalSiteTypeChoice{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsManagement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &nfv_service.ServiceHttpsManagementType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HttpManagementChoice = &CreateSpecType_HttpsManagement{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointServiceReplaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointServiceReplaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointServiceReplaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableAdvertiseOnSloIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ExternalVipChoice = &EndpointServiceReplaceType_DisableAdvertiseOnSloIp{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnSloIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ExternalVipChoice = &EndpointServiceReplaceType_AdvertiseOnSloIp{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnSloIpExternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ExternalVipChoice = &EndpointServiceReplaceType_AdvertiseOnSloIpExternal{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTcpPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TcpPortChoice = &EndpointServiceReplaceType_DefaultTcpPorts{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TcpPortChoice = &EndpointServiceReplaceType_HttpPort{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TcpPortChoice = &EndpointServiceReplaceType_HttpsPort{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomTcpPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PortRangesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TcpPortChoice = &EndpointServiceReplaceType_CustomTcpPorts{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoTcpPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TcpPortChoice = &EndpointServiceReplaceType_NoTcpPorts{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoUdpPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UdpPortChoice = &EndpointServiceReplaceType_NoUdpPorts{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomUdpPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PortRangesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UdpPortChoice = &EndpointServiceReplaceType_CustomUdpPorts{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APMBigIpAWSReplaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APMBigIpAWSReplaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APMBigIpAWSReplaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndpointService == nil {
				m.EndpointService = &EndpointServiceReplaceType{}
			}
			if err := m.EndpointService.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSSiteTypeChoiceReplaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSSiteTypeChoiceReplaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSSiteTypeChoiceReplaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApmAwsSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApmAwsSite == nil {
				m.ApmAwsSite = &APMBigIpAWSReplaceType{}
			}
			if err := m.ApmAwsSite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *F5BigIpAppStackBareMetalChoiceReplaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: F5BigIpAppStackBareMetalChoiceReplaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: F5BigIpAppStackBareMetalChoiceReplaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsSiteTypeChoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSSiteTypeChoiceReplaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteTypeChoice = &ReplaceSpecType_AwsSiteTypeChoice{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaremetalSiteTypeChoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &F5BigIpAppStackBareMetalChoiceReplaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteTypeChoice = &ReplaceSpecType_BaremetalSiteTypeChoice{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsManagement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &nfv_service.ServiceHttpsManagementType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HttpManagementChoice = &ReplaceSpecType_HttpsManagement{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsSiteTypeChoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSSiteTypeChoice{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteTypeChoice = &GetSpecType_AwsSiteTypeChoice{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaremetalSiteTypeChoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &F5BigIpAppStackBareMetalTypeChoice{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteTypeChoice = &GetSpecType_BaremetalSiteTypeChoice{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsManagement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &nfv_service.ServiceHttpsManagementType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HttpManagementChoice = &GetSpecType_HttpsManagement{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
