// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/signup/public_customapi.proto

// Signup API
//
// x-displayName: "Signup"
// Use this API to signup for F5XC service.
// one can signup to use volterra service as an individual/free account or
// as a team account more suited for enterprise customers.
// for more details on what each type of account features, visit - https://console.ves.volterra.io/signup/usage_plan
// since signup flow includes more complex selections and passing in secure payment processing,
// we recommend using web UI for this process https://console.ves.volterra.io/signup/start

package signup

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	contact "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/contact"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// error code
//
// x-displayName: "Error Code"
// ErrorCode is used to know the specific reason for signup registration failures
type ErrorCode int32

const (
	EUNKNOWN ErrorCode = 0
	// token related codes go here
	ETOKEN_OK       ErrorCode = 1
	ETOKEN_FAILED   ErrorCode = 2
	ETOKEN_NOTFOUND ErrorCode = 3
	ETOKEN_USED     ErrorCode = 4
	ETOKEN_EXPIRED  ErrorCode = 5
	// user related codes go here
	EUSER_OK     ErrorCode = 6
	EUSER_EXISTS ErrorCode = 7
	EUSER_FAILED ErrorCode = 8
	// contact validation codes go here
	// Validation is ok
	ECONTACT_VALIDATE_OK ErrorCode = 9
	// Empty country during validation of a contact
	ECONTACT_EMPTY_COUNTRY ErrorCode = 10
	// Empty zip code during validation of a contact
	ECONTACT_EMPTY_ZIP_CODE ErrorCode = 11
	// A given country is not present in the configured list of country-zipCodeRegexp
	ECONTACT_UNKNOWN_COUNTRY ErrorCode = 12
	// A given zip doesn't match a configured regexp for a given country
	ECONTACT_INVALID_ZIP ErrorCode = 13
	// EOK indicates no error
	EOK ErrorCode = 14
	// ENO_STATES indicates no states in a country
	ENO_STATES ErrorCode = 15
	// ENO_CITIES indicates no cities in country/state
	ENO_CITIES ErrorCode = 16
)

var ErrorCode_name = map[int32]string{
	0:  "EUNKNOWN",
	1:  "ETOKEN_OK",
	2:  "ETOKEN_FAILED",
	3:  "ETOKEN_NOTFOUND",
	4:  "ETOKEN_USED",
	5:  "ETOKEN_EXPIRED",
	6:  "EUSER_OK",
	7:  "EUSER_EXISTS",
	8:  "EUSER_FAILED",
	9:  "ECONTACT_VALIDATE_OK",
	10: "ECONTACT_EMPTY_COUNTRY",
	11: "ECONTACT_EMPTY_ZIP_CODE",
	12: "ECONTACT_UNKNOWN_COUNTRY",
	13: "ECONTACT_INVALID_ZIP",
	14: "EOK",
	15: "ENO_STATES",
	16: "ENO_CITIES",
}

var ErrorCode_value = map[string]int32{
	"EUNKNOWN":                 0,
	"ETOKEN_OK":                1,
	"ETOKEN_FAILED":            2,
	"ETOKEN_NOTFOUND":          3,
	"ETOKEN_USED":              4,
	"ETOKEN_EXPIRED":           5,
	"EUSER_OK":                 6,
	"EUSER_EXISTS":             7,
	"EUSER_FAILED":             8,
	"ECONTACT_VALIDATE_OK":     9,
	"ECONTACT_EMPTY_COUNTRY":   10,
	"ECONTACT_EMPTY_ZIP_CODE":  11,
	"ECONTACT_UNKNOWN_COUNTRY": 12,
	"ECONTACT_INVALID_ZIP":     13,
	"EOK":                      14,
	"ENO_STATES":               15,
	"ENO_CITIES":               16,
}

func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6aefbdd12cf74415, []int{0}
}

// Get request
//
// x-displayName: "Get Signup Request"
// Name of the signup we want to retrieve
type GetRequest struct {
	// Signup name
	//
	// x-displayName: "Name"
	// x-example: "signup-1234-5678-9012-3456"
	// Name of the signup we want to retrieve . The name is returned after a signup object submission.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetRequest) Reset()      { *m = GetRequest{} }
func (*GetRequest) ProtoMessage() {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aefbdd12cf74415, []int{0}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Get response
//
// x-displayName: "Signup Get Response"
// Signup object including its status. Use it when you want to see the progress of the signup flow.
type GetResponse struct {
	// Signup object
	//
	// x-displayName: "Signup Object"
	// Signup object.
	Object *Object `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	// Signup status object
	//
	// x-displayName: "Signup Status Object"
	// Signup object status, including any failures.
	Status []*StatusObject `protobuf:"bytes,20000,rep,name=status,proto3" json:"status,omitempty"`
}

func (m *GetResponse) Reset()      { *m = GetResponse{} }
func (*GetResponse) ProtoMessage() {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aefbdd12cf74415, []int{1}
}
func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(m, src)
}
func (m *GetResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *GetResponse) GetStatus() []*StatusObject {
	if m != nil {
		return m.Status
	}
	return nil
}

// Request to resend password email
//
// x-displayName: "Signup Resend Password Email Request"
// SendPasswordEmailRequest is the request format for resetting the password at the time of on-boarding new customer
type SendPasswordEmailRequest struct {
	// cname
	//
	// x-displayName: "Domain Name"
	// x-example: "volterra"
	// domain under which the tenant belongs to
	Cname string `protobuf:"bytes,1,opt,name=cname,proto3" json:"cname,omitempty"`
	// email of the user
	//
	// x-displayName: "email"
	// x-required
	// x-example: "admin@email.com"
	// email of the user requesting for
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (m *SendPasswordEmailRequest) Reset()      { *m = SendPasswordEmailRequest{} }
func (*SendPasswordEmailRequest) ProtoMessage() {}
func (*SendPasswordEmailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aefbdd12cf74415, []int{2}
}
func (m *SendPasswordEmailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendPasswordEmailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendPasswordEmailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendPasswordEmailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendPasswordEmailRequest.Merge(m, src)
}
func (m *SendPasswordEmailRequest) XXX_Size() int {
	return m.Size()
}
func (m *SendPasswordEmailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendPasswordEmailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendPasswordEmailRequest proto.InternalMessageInfo

func (m *SendPasswordEmailRequest) GetCname() string {
	if m != nil {
		return m.Cname
	}
	return ""
}

func (m *SendPasswordEmailRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// Send password email response
//
// x-displayName: "Send Password Email Response"
// SendPasswordEmailResponse is an empty response after an email had been sent..
type SendPasswordEmailResponse struct {
}

func (m *SendPasswordEmailResponse) Reset()      { *m = SendPasswordEmailResponse{} }
func (*SendPasswordEmailResponse) ProtoMessage() {}
func (*SendPasswordEmailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aefbdd12cf74415, []int{3}
}
func (m *SendPasswordEmailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendPasswordEmailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendPasswordEmailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendPasswordEmailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendPasswordEmailResponse.Merge(m, src)
}
func (m *SendPasswordEmailResponse) XXX_Size() int {
	return m.Size()
}
func (m *SendPasswordEmailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendPasswordEmailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendPasswordEmailResponse proto.InternalMessageInfo

// Request to validate registration
//
// x-displayName: "Request to Validate Registration"
// ValidateRegistrationRequest is the request body parameeters required to validate the registration
type ValidateRegistrationRequest struct {
	// Tenant type
	//
	// x-displayName: "Tenant Type"
	// x-required
	// tenant type of the user (FREEMIUM, ENTERPRISE, ...)
	TenantType schema.TenantType `protobuf:"varint,1,opt,name=tenant_type,json=tenantType,proto3,enum=ves.io.schema.TenantType" json:"tenant_type,omitempty"`
	// email of the user
	//
	// x-displayName: "Email"
	// x-required
	// x-example: "admin@email.com"
	// email of the user requesting for
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// token of the user
	//
	// x-displayName: "Token"
	// x-example: "value"
	// x-required
	// token of the user requesting for
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *ValidateRegistrationRequest) Reset()      { *m = ValidateRegistrationRequest{} }
func (*ValidateRegistrationRequest) ProtoMessage() {}
func (*ValidateRegistrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aefbdd12cf74415, []int{4}
}
func (m *ValidateRegistrationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateRegistrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateRegistrationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateRegistrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateRegistrationRequest.Merge(m, src)
}
func (m *ValidateRegistrationRequest) XXX_Size() int {
	return m.Size()
}
func (m *ValidateRegistrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateRegistrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateRegistrationRequest proto.InternalMessageInfo

func (m *ValidateRegistrationRequest) GetTenantType() schema.TenantType {
	if m != nil {
		return m.TenantType
	}
	return schema.UNKNOWN
}

func (m *ValidateRegistrationRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ValidateRegistrationRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Response to validate registration
//
// x-displayName: "Response to Validate Resistration"
// ValidateRegistrationResponse is the response that indicates if the registration is valid or not.
// For a brand new registration, the valid_registration is set to true that indicates that signup flow can flow through.
// In case of an existing user, the valid_registration is set to false.
type ValidateRegistrationResponse struct {
	// Valid registration
	//
	// x-displayName: "Valid Registration"
	// x-example: "true"
	// valid registration flag indicates if the registration is valid
	ValidRegistration bool `protobuf:"varint,1,opt,name=valid_registration,json=validRegistration,proto3" json:"valid_registration,omitempty"`
	// error code
	//
	// x-displayName : "Error"
	// err gives specific reason for an invalid registration
	Err ErrorCode `protobuf:"varint,2,opt,name=err,proto3,enum=ves.io.schema.signup.ErrorCode" json:"err,omitempty"`
}

func (m *ValidateRegistrationResponse) Reset()      { *m = ValidateRegistrationResponse{} }
func (*ValidateRegistrationResponse) ProtoMessage() {}
func (*ValidateRegistrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aefbdd12cf74415, []int{5}
}
func (m *ValidateRegistrationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateRegistrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateRegistrationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateRegistrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateRegistrationResponse.Merge(m, src)
}
func (m *ValidateRegistrationResponse) XXX_Size() int {
	return m.Size()
}
func (m *ValidateRegistrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateRegistrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateRegistrationResponse proto.InternalMessageInfo

func (m *ValidateRegistrationResponse) GetValidRegistration() bool {
	if m != nil {
		return m.ValidRegistration
	}
	return false
}

func (m *ValidateRegistrationResponse) GetErr() ErrorCode {
	if m != nil {
		return m.Err
	}
	return EUNKNOWN
}

// Request to validate contact
//
// x-displayName: "Validate contact request"
// Validate contacts request
type ValidateContactRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "value"
	// The namespace in which the configuration object is present. Is not used for now.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-example: "value"
	// The name of the configuration object to be fetched. Is not used for now.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Contact specification
	//
	// x-displayName: "Contact Specification"
	// Contact data to be validated.
	Spec *contact.GlobalSpecType `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *ValidateContactRequest) Reset()      { *m = ValidateContactRequest{} }
func (*ValidateContactRequest) ProtoMessage() {}
func (*ValidateContactRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aefbdd12cf74415, []int{6}
}
func (m *ValidateContactRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateContactRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateContactRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateContactRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateContactRequest.Merge(m, src)
}
func (m *ValidateContactRequest) XXX_Size() int {
	return m.Size()
}
func (m *ValidateContactRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateContactRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateContactRequest proto.InternalMessageInfo

func (m *ValidateContactRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ValidateContactRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ValidateContactRequest) GetSpec() *contact.GlobalSpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

// Validation error field
//
// x-displayName: "Validation error field"
// Contains information on a single validation error
type ValidationErrorField struct {
	// Error field
	//
	// x-displayName: "Error field"
	// x-example: "zip_code"
	// path indicates the field that is not valid
	ErrorField string `protobuf:"bytes,1,opt,name=error_field,json=errorField,proto3" json:"error_field,omitempty"`
	// Error message
	//
	// x-displayName: "Error message"
	// x-example: "Zip code should be a 000-00000 format"
	// more descriptive error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (m *ValidationErrorField) Reset()      { *m = ValidationErrorField{} }
func (*ValidationErrorField) ProtoMessage() {}
func (*ValidationErrorField) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aefbdd12cf74415, []int{7}
}
func (m *ValidationErrorField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidationErrorField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidationErrorField.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidationErrorField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidationErrorField.Merge(m, src)
}
func (m *ValidationErrorField) XXX_Size() int {
	return m.Size()
}
func (m *ValidationErrorField) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidationErrorField.DiscardUnknown(m)
}

var xxx_messageInfo_ValidationErrorField proto.InternalMessageInfo

func (m *ValidationErrorField) GetErrorField() string {
	if m != nil {
		return m.ErrorField
	}
	return ""
}

func (m *ValidationErrorField) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

// Response to validate contact
//
// x-displayName: "Validate contact response"
// ValidateRegistrationResponse is the response that indicates if the contact is valid or not.
// If the contact is not valid, a corresponding error code is returned.
// A list of supported validation is provided under Validate rpc call documentation.
type ValidateContactResponse struct {
	// Is a valid contact
	//
	// x-displayName: "Is Contact Valid"
	// x-example: "true"
	// flag indicates if the contact is valid
	IsValid bool `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	// error code
	//
	// x-displayName : "Error"
	// err gives specific reason why a given contact is invalid.
	Err ErrorCode `protobuf:"varint,2,opt,name=err,proto3,enum=ves.io.schema.signup.ErrorCode" json:"err,omitempty"`
	// validation errors
	//
	// x-displayName : "Validation errors"
	// collection of validation errors
	ValidationErrors []*ValidationErrorField `protobuf:"bytes,3,rep,name=validation_errors,json=validationErrors,proto3" json:"validation_errors,omitempty"`
}

func (m *ValidateContactResponse) Reset()      { *m = ValidateContactResponse{} }
func (*ValidateContactResponse) ProtoMessage() {}
func (*ValidateContactResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aefbdd12cf74415, []int{8}
}
func (m *ValidateContactResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateContactResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateContactResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateContactResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateContactResponse.Merge(m, src)
}
func (m *ValidateContactResponse) XXX_Size() int {
	return m.Size()
}
func (m *ValidateContactResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateContactResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateContactResponse proto.InternalMessageInfo

func (m *ValidateContactResponse) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *ValidateContactResponse) GetErr() ErrorCode {
	if m != nil {
		return m.Err
	}
	return EUNKNOWN
}

func (m *ValidateContactResponse) GetValidationErrors() []*ValidationErrorField {
	if m != nil {
		return m.ValidationErrors
	}
	return nil
}

// Request to retrieve list of supported countries
//
// x-displayName: "List countries request"
// ListCountriesRequest returns all supported countries, filtered down by prefix (if provided)
type ListCountriesRequest struct {
	// Prefix
	//
	// x-displayName: "Prefix"
	// x-example: "US for USA"
	// first two or more characters of the country you look for (can be upper or lower case)
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *ListCountriesRequest) Reset()      { *m = ListCountriesRequest{} }
func (*ListCountriesRequest) ProtoMessage() {}
func (*ListCountriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aefbdd12cf74415, []int{9}
}
func (m *ListCountriesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCountriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCountriesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCountriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCountriesRequest.Merge(m, src)
}
func (m *ListCountriesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListCountriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCountriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCountriesRequest proto.InternalMessageInfo

func (m *ListCountriesRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

// Request to retrieve list of supported states in a country
//
// x-displayName: "List states request"
// ListStatesRequest returns list of states in a country optionally filtered down by prefix
type ListStatesRequest struct {
	// Prefix
	//
	// x-displayName: "Prefix"
	// x-example: "AL for Alabama"
	// first two or more characters of the state you look for (can be upper or lower case)
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// country code
	//
	// x-displayName: "Country code"
	// x-example: "US"
	// 2 characters country code as described in https://en.wikipedia.org/wiki/ISO_3166-1, column `alpha-2`
	CountryCode string `protobuf:"bytes,2,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
}

func (m *ListStatesRequest) Reset()      { *m = ListStatesRequest{} }
func (*ListStatesRequest) ProtoMessage() {}
func (*ListStatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aefbdd12cf74415, []int{10}
}
func (m *ListStatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListStatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListStatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListStatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListStatesRequest.Merge(m, src)
}
func (m *ListStatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListStatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListStatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListStatesRequest proto.InternalMessageInfo

func (m *ListStatesRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *ListStatesRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

// Request to retrieve list of supported cities in a country
//
// x-displayName: "List cities request"
// ListCitiesRequest returns list of cities in a country optionally filtered down by prefix
type ListCitiesRequest struct {
	// Prefix
	//
	// x-displayName: "Prefix"
	// x-example: "DE"
	// first two or more characters of the city you look for (can be upper or lower case)
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// country code
	//
	// x-displayName: "Country code"
	// x-example: "US"
	// 2 characters country code as described in https://en.wikipedia.org/wiki/ISO_3166-1, column `alpha-2`
	CountryCode string `protobuf:"bytes,2,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// state code
	//
	// x-displayName: "State"
	// x-example: "TN"
	// 2 characters country code as described in https://en.wikipedia.org/wiki/ISO_3166-2:US/CA/IN, column `code`, excluding the leading country code
	StateCode string `protobuf:"bytes,3,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
}

func (m *ListCitiesRequest) Reset()      { *m = ListCitiesRequest{} }
func (*ListCitiesRequest) ProtoMessage() {}
func (*ListCitiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aefbdd12cf74415, []int{11}
}
func (m *ListCitiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCitiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCitiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCitiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCitiesRequest.Merge(m, src)
}
func (m *ListCitiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListCitiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCitiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCitiesRequest proto.InternalMessageInfo

func (m *ListCitiesRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *ListCitiesRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *ListCitiesRequest) GetStateCode() string {
	if m != nil {
		return m.StateCode
	}
	return ""
}

// Country item
//
// x-displayName: "Country item"
// CountryItem contains a single element of country list response.
type CountryItem struct {
	// country code
	//
	// x-displayName : "Country code"
	// x-example: "US"
	// 2 characters country code as described in https://en.wikipedia.org/wiki/ISO_3166-1, column `alpha-2`
	CountryCode string `protobuf:"bytes,1,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// country name
	//
	// x-displayName: "Country name"
	// x-example: "USA"
	// Name of the country in the human readable form (can be used as a description)
	CountryName string `protobuf:"bytes,2,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty"`
	// additional information
	//
	// x-displayName: "additional information"
	// x-example: "[zip_code_validation:^.{2,}$]"
	// Any additional information related to the country
	AdditionalInfo map[string]string `protobuf:"bytes,3,rep,name=additional_info,json=additionalInfo,proto3" json:"additional_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CountryItem) Reset()      { *m = CountryItem{} }
func (*CountryItem) ProtoMessage() {}
func (*CountryItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aefbdd12cf74415, []int{12}
}
func (m *CountryItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountryItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountryItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountryItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountryItem.Merge(m, src)
}
func (m *CountryItem) XXX_Size() int {
	return m.Size()
}
func (m *CountryItem) XXX_DiscardUnknown() {
	xxx_messageInfo_CountryItem.DiscardUnknown(m)
}

var xxx_messageInfo_CountryItem proto.InternalMessageInfo

func (m *CountryItem) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *CountryItem) GetCountryName() string {
	if m != nil {
		return m.CountryName
	}
	return ""
}

func (m *CountryItem) GetAdditionalInfo() map[string]string {
	if m != nil {
		return m.AdditionalInfo
	}
	return nil
}

// Country list response
//
// x-displayName: "Country response"
// ListCountriesResponse contains a list of countries supported by the platform
type ListCountriesResponse struct {
	// available  countries
	//
	// x-displayName: "Countries"
	// List of all countries supported by the platform
	Countries []*CountryItem `protobuf:"bytes,1,rep,name=countries,proto3" json:"countries,omitempty"`
}

func (m *ListCountriesResponse) Reset()      { *m = ListCountriesResponse{} }
func (*ListCountriesResponse) ProtoMessage() {}
func (*ListCountriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aefbdd12cf74415, []int{13}
}
func (m *ListCountriesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCountriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCountriesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCountriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCountriesResponse.Merge(m, src)
}
func (m *ListCountriesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCountriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCountriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCountriesResponse proto.InternalMessageInfo

func (m *ListCountriesResponse) GetCountries() []*CountryItem {
	if m != nil {
		return m.Countries
	}
	return nil
}

// Country item
//
// x-displayName: "Country item"
// CountryItem contains a single element of country list response.
type StateItem struct {
	// state code
	//
	// x-displayName: "State code"
	// x-example: "TN"
	// 2 characters state code as described in https://en.wikipedia.org/wiki/ISO_3166-2:US/CA/IN, column `code` (excluding the leading country code)
	StateCode string `protobuf:"bytes,1,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	// state name
	//
	// x-displayName: "State name"
	// x-example: "Tamil Nadu"
	// Name of the state in the human readable form (can be used as a description)
	StateName string `protobuf:"bytes,2,opt,name=state_name,json=stateName,proto3" json:"state_name,omitempty"`
	// additional information
	//
	// x-displayName: "additional information"
	// x-example: "[zip_code_validation:^.{2,}$]"
	// Any additional information related to the state
	AdditionalInfo map[string]string `protobuf:"bytes,3,rep,name=additional_info,json=additionalInfo,proto3" json:"additional_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *StateItem) Reset()      { *m = StateItem{} }
func (*StateItem) ProtoMessage() {}
func (*StateItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aefbdd12cf74415, []int{14}
}
func (m *StateItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateItem.Merge(m, src)
}
func (m *StateItem) XXX_Size() int {
	return m.Size()
}
func (m *StateItem) XXX_DiscardUnknown() {
	xxx_messageInfo_StateItem.DiscardUnknown(m)
}

var xxx_messageInfo_StateItem proto.InternalMessageInfo

func (m *StateItem) GetStateCode() string {
	if m != nil {
		return m.StateCode
	}
	return ""
}

func (m *StateItem) GetStateName() string {
	if m != nil {
		return m.StateName
	}
	return ""
}

func (m *StateItem) GetAdditionalInfo() map[string]string {
	if m != nil {
		return m.AdditionalInfo
	}
	return nil
}

// Country list response
//
// x-displayName: "Country response"
// ListStatesResponse contains a list of states supported by the platform
type ListStatesResponse struct {
	// error code
	//
	// x-displayName: "Error Code"
	// Error flag - EOK, ENO_STATES can be returned
	ErrorCode ErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=ves.io.schema.signup.ErrorCode" json:"error_code,omitempty"`
	// available states in a country
	//
	// x-displayName: "States"
	// List of all states of a country supported by the platform
	States []*StateItem `protobuf:"bytes,2,rep,name=states,proto3" json:"states,omitempty"`
}

func (m *ListStatesResponse) Reset()      { *m = ListStatesResponse{} }
func (*ListStatesResponse) ProtoMessage() {}
func (*ListStatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aefbdd12cf74415, []int{15}
}
func (m *ListStatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListStatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListStatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListStatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListStatesResponse.Merge(m, src)
}
func (m *ListStatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListStatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListStatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListStatesResponse proto.InternalMessageInfo

func (m *ListStatesResponse) GetErrorCode() ErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return EUNKNOWN
}

func (m *ListStatesResponse) GetStates() []*StateItem {
	if m != nil {
		return m.States
	}
	return nil
}

// City item
//
// x-displayName: "City item"
// CityItem contains a single element of city list response.
type CityItem struct {
	// city name
	//
	// x-displayName: "City"
	// x-example: "Chennai"
	// Name of the city in the human readable form (can be used as a description)
	CityName string `protobuf:"bytes,1,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`
	// additional information
	//
	// x-displayName: "additional information"
	// x-example: "[alternative_name:Madras]"
	// Any additional information related to the city
	AdditionalInfo map[string]string `protobuf:"bytes,2,rep,name=additional_info,json=additionalInfo,proto3" json:"additional_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CityItem) Reset()      { *m = CityItem{} }
func (*CityItem) ProtoMessage() {}
func (*CityItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aefbdd12cf74415, []int{16}
}
func (m *CityItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CityItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CityItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CityItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CityItem.Merge(m, src)
}
func (m *CityItem) XXX_Size() int {
	return m.Size()
}
func (m *CityItem) XXX_DiscardUnknown() {
	xxx_messageInfo_CityItem.DiscardUnknown(m)
}

var xxx_messageInfo_CityItem proto.InternalMessageInfo

func (m *CityItem) GetCityName() string {
	if m != nil {
		return m.CityName
	}
	return ""
}

func (m *CityItem) GetAdditionalInfo() map[string]string {
	if m != nil {
		return m.AdditionalInfo
	}
	return nil
}

// City list response
//
// x-displayName: "City response"
// ListCitiesResponse contains a list of cities (for a country) supported by the platform
type ListCitiesResponse struct {
	// error code
	//
	// x-displayName: "Error Code"
	// Error flag - EOK, ENO_CITIES can be returned
	ErrorCode ErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=ves.io.schema.signup.ErrorCode" json:"error_code,omitempty"`
	// available cities in the country
	//
	// x-displayName: "Cities"
	// List of all cities in
	Cities []*CityItem `protobuf:"bytes,2,rep,name=cities,proto3" json:"cities,omitempty"`
}

func (m *ListCitiesResponse) Reset()      { *m = ListCitiesResponse{} }
func (*ListCitiesResponse) ProtoMessage() {}
func (*ListCitiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aefbdd12cf74415, []int{17}
}
func (m *ListCitiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCitiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCitiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCitiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCitiesResponse.Merge(m, src)
}
func (m *ListCitiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCitiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCitiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCitiesResponse proto.InternalMessageInfo

func (m *ListCitiesResponse) GetErrorCode() ErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return EUNKNOWN
}

func (m *ListCitiesResponse) GetCities() []*CityItem {
	if m != nil {
		return m.Cities
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.signup.ErrorCode", ErrorCode_name, ErrorCode_value)
	golang_proto.RegisterEnum("ves.io.schema.signup.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterType((*GetRequest)(nil), "ves.io.schema.signup.GetRequest")
	golang_proto.RegisterType((*GetRequest)(nil), "ves.io.schema.signup.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "ves.io.schema.signup.GetResponse")
	golang_proto.RegisterType((*GetResponse)(nil), "ves.io.schema.signup.GetResponse")
	proto.RegisterType((*SendPasswordEmailRequest)(nil), "ves.io.schema.signup.SendPasswordEmailRequest")
	golang_proto.RegisterType((*SendPasswordEmailRequest)(nil), "ves.io.schema.signup.SendPasswordEmailRequest")
	proto.RegisterType((*SendPasswordEmailResponse)(nil), "ves.io.schema.signup.SendPasswordEmailResponse")
	golang_proto.RegisterType((*SendPasswordEmailResponse)(nil), "ves.io.schema.signup.SendPasswordEmailResponse")
	proto.RegisterType((*ValidateRegistrationRequest)(nil), "ves.io.schema.signup.ValidateRegistrationRequest")
	golang_proto.RegisterType((*ValidateRegistrationRequest)(nil), "ves.io.schema.signup.ValidateRegistrationRequest")
	proto.RegisterType((*ValidateRegistrationResponse)(nil), "ves.io.schema.signup.ValidateRegistrationResponse")
	golang_proto.RegisterType((*ValidateRegistrationResponse)(nil), "ves.io.schema.signup.ValidateRegistrationResponse")
	proto.RegisterType((*ValidateContactRequest)(nil), "ves.io.schema.signup.ValidateContactRequest")
	golang_proto.RegisterType((*ValidateContactRequest)(nil), "ves.io.schema.signup.ValidateContactRequest")
	proto.RegisterType((*ValidationErrorField)(nil), "ves.io.schema.signup.ValidationErrorField")
	golang_proto.RegisterType((*ValidationErrorField)(nil), "ves.io.schema.signup.ValidationErrorField")
	proto.RegisterType((*ValidateContactResponse)(nil), "ves.io.schema.signup.ValidateContactResponse")
	golang_proto.RegisterType((*ValidateContactResponse)(nil), "ves.io.schema.signup.ValidateContactResponse")
	proto.RegisterType((*ListCountriesRequest)(nil), "ves.io.schema.signup.ListCountriesRequest")
	golang_proto.RegisterType((*ListCountriesRequest)(nil), "ves.io.schema.signup.ListCountriesRequest")
	proto.RegisterType((*ListStatesRequest)(nil), "ves.io.schema.signup.ListStatesRequest")
	golang_proto.RegisterType((*ListStatesRequest)(nil), "ves.io.schema.signup.ListStatesRequest")
	proto.RegisterType((*ListCitiesRequest)(nil), "ves.io.schema.signup.ListCitiesRequest")
	golang_proto.RegisterType((*ListCitiesRequest)(nil), "ves.io.schema.signup.ListCitiesRequest")
	proto.RegisterType((*CountryItem)(nil), "ves.io.schema.signup.CountryItem")
	golang_proto.RegisterType((*CountryItem)(nil), "ves.io.schema.signup.CountryItem")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.signup.CountryItem.AdditionalInfoEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.signup.CountryItem.AdditionalInfoEntry")
	proto.RegisterType((*ListCountriesResponse)(nil), "ves.io.schema.signup.ListCountriesResponse")
	golang_proto.RegisterType((*ListCountriesResponse)(nil), "ves.io.schema.signup.ListCountriesResponse")
	proto.RegisterType((*StateItem)(nil), "ves.io.schema.signup.StateItem")
	golang_proto.RegisterType((*StateItem)(nil), "ves.io.schema.signup.StateItem")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.signup.StateItem.AdditionalInfoEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.signup.StateItem.AdditionalInfoEntry")
	proto.RegisterType((*ListStatesResponse)(nil), "ves.io.schema.signup.ListStatesResponse")
	golang_proto.RegisterType((*ListStatesResponse)(nil), "ves.io.schema.signup.ListStatesResponse")
	proto.RegisterType((*CityItem)(nil), "ves.io.schema.signup.CityItem")
	golang_proto.RegisterType((*CityItem)(nil), "ves.io.schema.signup.CityItem")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.signup.CityItem.AdditionalInfoEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.signup.CityItem.AdditionalInfoEntry")
	proto.RegisterType((*ListCitiesResponse)(nil), "ves.io.schema.signup.ListCitiesResponse")
	golang_proto.RegisterType((*ListCitiesResponse)(nil), "ves.io.schema.signup.ListCitiesResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/signup/public_customapi.proto", fileDescriptor_6aefbdd12cf74415)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/signup/public_customapi.proto", fileDescriptor_6aefbdd12cf74415)
}

var fileDescriptor_6aefbdd12cf74415 = []byte{
	// 1803 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x4d, 0x6c, 0x1b, 0xc7,
	0x15, 0xd6, 0x90, 0x8e, 0x2c, 0x3e, 0xea, 0x67, 0x3d, 0x56, 0x1d, 0x8a, 0x52, 0x69, 0x69, 0x9d,
	0xa2, 0x92, 0xe3, 0x25, 0x1d, 0x06, 0x69, 0x62, 0x17, 0x88, 0x41, 0x53, 0x2b, 0x83, 0x95, 0x4d,
	0x0a, 0x24, 0x9d, 0xf8, 0x27, 0x2e, 0xbb, 0x5a, 0x8e, 0xe8, 0xad, 0xc9, 0xdd, 0xed, 0xee, 0x50,
	0xb1, 0x62, 0x08, 0x08, 0x82, 0xb6, 0x40, 0xd1, 0x14, 0x28, 0x50, 0xa0, 0xa7, 0x1e, 0x7a, 0x6c,
	0xd1, 0x63, 0x51, 0xa0, 0x40, 0x80, 0xc2, 0x97, 0x42, 0x39, 0x15, 0x6e, 0x7b, 0x09, 0xd0, 0x1e,
	0x6a, 0xba, 0x87, 0x22, 0xa7, 0x1c, 0xda, 0x9e, 0x83, 0x9d, 0x99, 0x5d, 0x72, 0xa5, 0x25, 0x4d,
	0x1b, 0x81, 0x6f, 0x3b, 0x6f, 0xbe, 0x79, 0xef, 0x7b, 0xdf, 0x7b, 0xb3, 0xfb, 0x48, 0x78, 0x75,
	0x97, 0xb8, 0x59, 0xc3, 0xca, 0xb9, 0xfa, 0x5d, 0xd2, 0xd1, 0x72, 0xae, 0xd1, 0x32, 0xbb, 0x76,
	0xce, 0xee, 0x6e, 0xb7, 0x0d, 0xbd, 0xa1, 0x77, 0x5d, 0x6a, 0x75, 0x34, 0xdb, 0xc8, 0xda, 0x8e,
	0x45, 0x2d, 0x3c, 0xcf, 0xc1, 0x59, 0x0e, 0xce, 0x72, 0x70, 0x5a, 0x69, 0x19, 0xf4, 0x6e, 0x77,
	0x3b, 0xab, 0x5b, 0x9d, 0x5c, 0xcb, 0x6a, 0x59, 0x39, 0x06, 0xde, 0xee, 0xee, 0xb0, 0x15, 0x5b,
	0xb0, 0x27, 0xee, 0x24, 0xbd, 0xd4, 0xb2, 0xac, 0x56, 0x9b, 0xe4, 0x34, 0xdb, 0xc8, 0x69, 0xa6,
	0x69, 0x51, 0x8d, 0x1a, 0x96, 0xe9, 0x8a, 0xdd, 0xd3, 0x62, 0x37, 0xf0, 0x41, 0x8d, 0x0e, 0x71,
	0xa9, 0xd6, 0xb1, 0x05, 0x60, 0x25, 0x4c, 0x58, 0xb7, 0x4c, 0xaa, 0xe9, 0x34, 0x47, 0xf7, 0x6c,
	0xe2, 0xfb, 0x58, 0x0c, 0x43, 0x2c, 0x7b, 0x30, 0xc0, 0x4a, 0x64, 0xc2, 0xd6, 0xf6, 0xf7, 0x89,
	0x4e, 0x05, 0x64, 0x39, 0x12, 0x32, 0x18, 0x61, 0x21, 0x8c, 0x18, 0xdc, 0x92, 0xc3, 0x5b, 0xbb,
	0xc4, 0x25, 0xe6, 0x6e, 0x98, 0x83, 0xbc, 0x0c, 0x70, 0x85, 0xd0, 0x2a, 0xf9, 0x41, 0x97, 0xb8,
	0x14, 0x63, 0x38, 0x66, 0x6a, 0x1d, 0x92, 0x42, 0xcb, 0x68, 0x35, 0x51, 0x65, 0xcf, 0xf2, 0x4f,
	0x11, 0x24, 0x19, 0xc4, 0xb5, 0x2d, 0xd3, 0x25, 0xf8, 0x02, 0x4c, 0x72, 0x8a, 0x0c, 0x95, 0xcc,
	0x2f, 0x65, 0xa3, 0x4a, 0x91, 0xad, 0x30, 0xcc, 0xe5, 0xf8, 0xc3, 0x7d, 0x54, 0x15, 0x07, 0x70,
	0x01, 0x26, 0x5d, 0xaa, 0xd1, 0xae, 0x9b, 0xfa, 0xf5, 0xaf, 0xd0, 0x72, 0x7c, 0x35, 0x99, 0x97,
	0xa3, 0x0f, 0xd7, 0x18, 0x2a, 0xe4, 0x82, 0x1f, 0x94, 0x37, 0x20, 0x55, 0x23, 0x66, 0x73, 0x4b,
	0x73, 0xdd, 0xf7, 0x2d, 0xa7, 0xa9, 0x76, 0x34, 0xa3, 0xed, 0xb3, 0x9f, 0x87, 0x97, 0xf4, 0x01,
	0xfa, 0x7c, 0xe1, 0x59, 0x89, 0x87, 0x4a, 0xc5, 0xb8, 0x95, 0x2d, 0xe4, 0x45, 0x58, 0x88, 0xf0,
	0xc3, 0x53, 0x94, 0x7f, 0x84, 0x60, 0xf1, 0x1d, 0xad, 0x6d, 0x34, 0x35, 0x4a, 0xaa, 0xa4, 0x65,
	0xb8, 0xd4, 0x61, 0x9d, 0xe1, 0x07, 0xba, 0x08, 0x49, 0x4a, 0x4c, 0xcd, 0xa4, 0x0d, 0x4f, 0x6e,
	0x16, 0x6e, 0x36, 0xbf, 0x70, 0x28, 0x95, 0x3a, 0x43, 0xd4, 0xf7, 0x6c, 0x52, 0x05, 0x1a, 0x3c,
	0x47, 0xd3, 0xf1, 0xac, 0xd4, 0xba, 0x47, 0xcc, 0x54, 0x9c, 0x5b, 0xd9, 0x42, 0xfe, 0x10, 0xc1,
	0x52, 0x34, 0x0f, 0x51, 0x0b, 0x05, 0xf0, 0xae, 0xb7, 0xdf, 0x70, 0x06, 0x76, 0x19, 0x9f, 0xa9,
	0xea, 0x09, 0xb6, 0x33, 0x78, 0x0c, 0xbf, 0x06, 0x71, 0xe2, 0x38, 0x2c, 0xf2, 0x6c, 0xfe, 0x74,
	0xb4, 0xf4, 0xaa, 0xe3, 0x58, 0x4e, 0xd1, 0x6a, 0x92, 0xaa, 0x87, 0xf5, 0xa4, 0x38, 0xe5, 0x53,
	0x28, 0xf2, 0x06, 0xf7, 0x55, 0x58, 0x82, 0x84, 0x27, 0xb0, 0x6b, 0x6b, 0xba, 0x2f, 0x79, 0xdf,
	0x10, 0xb4, 0x52, 0xac, 0xdf, 0x4a, 0xf8, 0x02, 0x1c, 0x73, 0x6d, 0xa2, 0xb3, 0x24, 0x93, 0xf9,
	0x6f, 0x1c, 0x22, 0x20, 0xee, 0x4f, 0xf6, 0x4a, 0xdb, 0xda, 0xd6, 0xda, 0x35, 0x9b, 0xe8, 0x4c,
	0x3c, 0x76, 0x44, 0x7e, 0x0f, 0xe6, 0x05, 0x0d, 0xc3, 0x32, 0x19, 0xc7, 0x0d, 0x83, 0xb4, 0x9b,
	0xf8, 0x34, 0x24, 0x89, 0xb7, 0x6a, 0xec, 0x78, 0x4b, 0x41, 0x03, 0x48, 0x1f, 0x70, 0x06, 0x66,
	0x38, 0xa0, 0x43, 0x5c, 0x57, 0x6b, 0xf9, 0x84, 0xa6, 0x99, 0xf1, 0x1a, 0xb7, 0xc9, 0x0f, 0x11,
	0xbc, 0x7c, 0x24, 0x4b, 0xa1, 0xf1, 0x02, 0x4c, 0x19, 0x6e, 0x83, 0x89, 0x29, 0x94, 0x3d, 0x6e,
	0xb8, 0x0c, 0xfc, 0x1c, 0x7a, 0xe2, 0x77, 0x81, 0xd7, 0x85, 0xe5, 0xd1, 0x60, 0x24, 0xdc, 0x54,
	0x9c, 0xdd, 0x85, 0xb3, 0xd1, 0x0e, 0xa2, 0xd2, 0xae, 0x4a, 0xbb, 0x61, 0xab, 0x2b, 0x67, 0x61,
	0xfe, 0xaa, 0xe1, 0xd2, 0xa2, 0xd5, 0x35, 0xa9, 0x63, 0x10, 0xd7, 0xaf, 0xd2, 0x29, 0x98, 0xb4,
	0x1d, 0xb2, 0x63, 0xdc, 0x17, 0xda, 0x88, 0x95, 0x5c, 0x86, 0x13, 0x1e, 0xde, 0xbb, 0x69, 0x4f,
	0x05, 0xe3, 0x15, 0x98, 0xd6, 0x99, 0xe3, 0xbd, 0x86, 0x6e, 0x35, 0x7d, 0x0d, 0x93, 0xc2, 0xe6,
	0x65, 0x27, 0x77, 0xb8, 0xbf, 0xa2, 0x41, 0x8d, 0xaf, 0xc2, 0x1f, 0xfe, 0x3a, 0x80, 0x77, 0xe5,
	0x09, 0x07, 0xf0, 0x6b, 0x91, 0x60, 0x16, 0x16, 0xee, 0xff, 0x08, 0x92, 0x3c, 0xd7, 0xbd, 0x12,
	0x25, 0x9d, 0x23, 0x1e, 0xd1, 0x51, 0x8f, 0x03, 0x90, 0x81, 0xce, 0xf4, 0x21, 0x65, 0xaf, 0x41,
	0xbf, 0x0b, 0x73, 0x5a, 0xb3, 0x69, 0x78, 0xb2, 0x6a, 0xed, 0x86, 0x61, 0xee, 0x58, 0xa2, 0x36,
	0x6f, 0x44, 0xd7, 0x66, 0x80, 0x41, 0xb6, 0x10, 0x1c, 0x2c, 0x99, 0x3b, 0x96, 0xea, 0xd9, 0xab,
	0xb3, 0x5a, 0xc8, 0x98, 0x2e, 0xc0, 0xc9, 0x08, 0x18, 0x96, 0x20, 0x7e, 0x8f, 0xec, 0x09, 0xce,
	0xde, 0xa3, 0xf7, 0x3e, 0xd8, 0xd5, 0xda, 0x5d, 0x9f, 0x24, 0x5f, 0x5c, 0x8c, 0xbd, 0x85, 0xe4,
	0x1b, 0xf0, 0xb5, 0x43, 0x75, 0x16, 0x7d, 0x7a, 0x09, 0x12, 0xba, 0x6f, 0x4c, 0xf1, 0xb7, 0xeb,
	0xca, 0x53, 0x59, 0x57, 0xfb, 0x67, 0xe4, 0xcf, 0x11, 0x24, 0x58, 0x3b, 0x30, 0x41, 0xc3, 0xfa,
	0xa3, 0x43, 0xfa, 0xf7, 0xb7, 0x07, 0xa4, 0xe4, 0xdb, 0x4c, 0xc8, 0xf7, 0x86, 0x09, 0xf9, 0xfa,
	0xf0, 0x17, 0x3e, 0x79, 0x91, 0x32, 0xfe, 0x0c, 0x01, 0x1e, 0xec, 0x7f, 0x21, 0xe2, 0xdb, 0xc0,
	0xdf, 0x1d, 0xfd, 0xac, 0xc7, 0xb8, 0xd8, 0x09, 0xe2, 0x3f, 0xe2, 0x37, 0xf9, 0x17, 0x8e, 0xb8,
	0xa9, 0x18, 0x4b, 0xf7, 0xf4, 0x53, 0xd2, 0xad, 0x0a, 0xb8, 0x7c, 0x80, 0x60, 0xaa, 0x68, 0x50,
	0xde, 0xcc, 0x8b, 0x90, 0xd0, 0x0d, 0x2a, 0xda, 0x94, 0xa7, 0x33, 0xe5, 0x19, 0x98, 0xb4, 0xb7,
	0x8f, 0x4a, 0xcb, 0x63, 0xe5, 0x87, 0x54, 0x5b, 0x78, 0x7d, 0x51, 0xca, 0x7e, 0x2c, 0x94, 0xf5,
	0xdf, 0x04, 0x5f, 0x91, 0xb2, 0xdf, 0x82, 0x49, 0x9d, 0x79, 0x14, 0xd9, 0x66, 0x46, 0x67, 0x5b,
	0x15, 0xe8, 0xb3, 0xff, 0x88, 0x41, 0x22, 0x70, 0x88, 0xa7, 0x61, 0x4a, 0xbd, 0x5e, 0xde, 0x2c,
	0x57, 0xde, 0x2d, 0x4b, 0x13, 0x78, 0x06, 0x12, 0x6a, 0xbd, 0xb2, 0xa9, 0x96, 0x1b, 0x95, 0x4d,
	0x09, 0xe1, 0x13, 0x30, 0x23, 0x96, 0x1b, 0x85, 0xd2, 0x55, 0x75, 0x5d, 0x8a, 0xe1, 0x93, 0x30,
	0x27, 0x4c, 0xe5, 0x4a, 0x7d, 0xa3, 0x72, 0xbd, 0xbc, 0x2e, 0xc5, 0xf1, 0x1c, 0x24, 0x85, 0xf1,
	0x7a, 0x4d, 0x5d, 0x97, 0x8e, 0x61, 0x0c, 0xb3, 0xc2, 0xa0, 0xde, 0xd8, 0x2a, 0x55, 0xd5, 0x75,
	0xe9, 0x25, 0x1e, 0xa9, 0xa6, 0x56, 0x3d, 0xd7, 0x93, 0x58, 0x82, 0x69, 0xbe, 0x52, 0x6f, 0x94,
	0x6a, 0xf5, 0x9a, 0x74, 0xbc, 0x6f, 0x11, 0xb1, 0xa6, 0x70, 0x0a, 0xe6, 0xd5, 0x62, 0xa5, 0x5c,
	0x2f, 0x14, 0xeb, 0x8d, 0x77, 0x0a, 0x57, 0x4b, 0xeb, 0x85, 0xba, 0xea, 0x9d, 0x4e, 0xe0, 0x34,
	0x9c, 0x0a, 0x76, 0xd4, 0x6b, 0x5b, 0xf5, 0x9b, 0x8d, 0x62, 0xe5, 0x7a, 0xb9, 0x5e, 0xbd, 0x29,
	0x01, 0x5e, 0x84, 0x97, 0x0f, 0xed, 0xdd, 0x2a, 0x6d, 0x35, 0x8a, 0x95, 0x75, 0x55, 0x4a, 0xe2,
	0x25, 0x48, 0x05, 0x9b, 0x22, 0xed, 0xe0, 0xe8, 0x74, 0x28, 0x60, 0xa9, 0xcc, 0x42, 0x7a, 0x87,
	0xa5, 0x19, 0x7c, 0x1c, 0xe2, 0x6a, 0x65, 0x53, 0x9a, 0xc5, 0xb3, 0x00, 0x6a, 0xb9, 0xd2, 0xa8,
	0xd5, 0x0b, 0x75, 0xb5, 0x26, 0xcd, 0xf9, 0xeb, 0x62, 0xa9, 0x5e, 0x52, 0x6b, 0x92, 0x94, 0xff,
	0xab, 0x04, 0x89, 0x22, 0x1b, 0xcd, 0x0b, 0x5b, 0x25, 0xfc, 0x63, 0x04, 0xf1, 0x2b, 0x84, 0xe2,
	0xe5, 0xe8, 0xda, 0xf4, 0x07, 0xcd, 0xf4, 0xca, 0x08, 0x84, 0x18, 0xc2, 0x2e, 0x7e, 0xfa, 0xc7,
	0x18, 0xea, 0x1d, 0xa4, 0xbc, 0x49, 0x5f, 0x31, 0x2c, 0xa5, 0x45, 0x4c, 0xe2, 0x68, 0x6d, 0xe5,
	0x7d, 0xc7, 0xa0, 0xe4, 0xa3, 0xbf, 0xff, 0xfb, 0x17, 0xb1, 0x14, 0x3e, 0x95, 0x33, 0xad, 0x86,
	0xd6, 0xa5, 0x77, 0xfd, 0xc9, 0xf8, 0x81, 0x77, 0x65, 0xf6, 0xf1, 0x1f, 0x10, 0x9c, 0x38, 0x32,
	0xde, 0xe1, 0xec, 0x90, 0xcb, 0x38, 0x64, 0x9e, 0x4c, 0xe7, 0xc6, 0xc6, 0x0b, 0xca, 0x97, 0x46,
	0xd2, 0x5d, 0x91, 0x97, 0xfa, 0x74, 0x89, 0xd9, 0x6c, 0xd8, 0xc2, 0x49, 0x83, 0xcd, 0x80, 0x17,
	0xd1, 0x59, 0xfc, 0x67, 0x14, 0x8c, 0x39, 0x24, 0x3c, 0xb9, 0x8d, 0x9c, 0x0d, 0xa2, 0x86, 0xd4,
	0x74, 0xfe, 0x59, 0x8e, 0x88, 0x04, 0x36, 0x7a, 0x07, 0xa9, 0x93, 0x87, 0x12, 0x70, 0x88, 0xd6,
	0x64, 0xfc, 0xd7, 0xe4, 0x57, 0x02, 0xfe, 0x6d, 0xab, 0x65, 0x98, 0x39, 0x31, 0x84, 0x90, 0xd0,
	0xf8, 0xe9, 0xe5, 0xf1, 0x3b, 0x04, 0x73, 0x87, 0xe6, 0x29, 0x7c, 0x6e, 0x34, 0x9f, 0xf0, 0x70,
	0x99, 0x56, 0xc6, 0x44, 0x0b, 0xe2, 0xdf, 0x1e, 0x45, 0x3c, 0x23, 0x2f, 0x04, 0xc4, 0x03, 0xca,
	0x62, 0xda, 0xf4, 0xd8, 0xfe, 0x37, 0x06, 0x33, 0xa1, 0x6f, 0x2a, 0x1e, 0x32, 0x8a, 0x45, 0x0d,
	0x58, 0xe9, 0x57, 0xc7, 0xc2, 0x0a, 0x9e, 0x3f, 0x89, 0x89, 0xae, 0x5e, 0xdd, 0x79, 0xe3, 0xbe,
	0xae, 0x34, 0xc9, 0x8e, 0xd6, 0x6d, 0x53, 0x45, 0xd3, 0x75, 0xe2, 0xba, 0xe7, 0x96, 0x23, 0x32,
	0xf8, 0xfc, 0x20, 0xf5, 0x31, 0x82, 0x73, 0x62, 0x87, 0xc7, 0x50, 0x78, 0x0c, 0x25, 0xf8, 0x51,
	0xac, 0xb4, 0x0d, 0x97, 0xea, 0x7d, 0xfa, 0x10, 0x6f, 0x11, 0x8a, 0xcf, 0x04, 0x59, 0x07, 0x5b,
	0xb9, 0xd5, 0xdb, 0x9a, 0xf2, 0x41, 0x41, 0xb9, 0x75, 0xe7, 0xc1, 0xf9, 0x73, 0xf9, 0xfd, 0xb5,
	0x57, 0xf0, 0x79, 0x8e, 0x5d, 0x13, 0x3f, 0xb4, 0x73, 0xdc, 0xe7, 0x88, 0x13, 0x4c, 0xd2, 0xcb,
	0x78, 0x31, 0xc2, 0xf9, 0x03, 0x3e, 0xde, 0xed, 0xdf, 0x3a, 0x83, 0x57, 0x86, 0xfa, 0xf3, 0x41,
	0xf8, 0x4f, 0x71, 0x80, 0xfe, 0x27, 0x18, 0x7f, 0x73, 0xb8, 0x8e, 0xa1, 0x21, 0x35, 0xbd, 0xfa,
	0x74, 0xa0, 0x50, 0xfb, 0x9f, 0xcf, 0xa3, 0xf6, 0xef, 0x11, 0xac, 0x8d, 0xa1, 0x36, 0xff, 0x6e,
	0xe3, 0x4b, 0x5c, 0xbe, 0xb7, 0x46, 0x4a, 0x9d, 0xdf, 0x5f, 0xcb, 0x71, 0xfc, 0x51, 0xfd, 0x55,
	0xee, 0xe0, 0xed, 0x31, 0xf4, 0x1f, 0xe1, 0x86, 0x15, 0xc5, 0xc4, 0xaf, 0x45, 0x15, 0x65, 0x70,
	0x2e, 0xde, 0xf7, 0x1d, 0x04, 0xa5, 0xba, 0x80, 0xdf, 0x1c, 0x5e, 0xaa, 0x91, 0x47, 0xf1, 0x6f,
	0x8f, 0xf1, 0x02, 0xf2, 0x2f, 0xfd, 0xa8, 0x02, 0x86, 0x7e, 0x15, 0x8c, 0x2a, 0x60, 0x78, 0x68,
	0x90, 0x0f, 0xe2, 0xcf, 0x51, 0xc0, 0xff, 0x8d, 0x57, 0x40, 0x3e, 0x1f, 0xe0, 0xef, 0x71, 0xfd,
	0x6f, 0x3e, 0x7b, 0x01, 0x3d, 0x23, 0x77, 0xc2, 0x8d, 0x77, 0x56, 0x6f, 0x2b, 0x9a, 0xf2, 0xc1,
	0x79, 0xe5, 0xc2, 0x9d, 0xb3, 0xb7, 0xc5, 0xc3, 0xda, 0xa5, 0x35, 0xbc, 0xc3, 0x23, 0x34, 0x9e,
	0xb7, 0xc2, 0x63, 0xc6, 0x61, 0x2d, 0xf0, 0x4b, 0x84, 0xd5, 0xf1, 0x7b, 0xa0, 0x3f, 0xe0, 0xef,
	0xfb, 0x11, 0x82, 0xbe, 0xb8, 0x86, 0x37, 0x9f, 0xb5, 0x2f, 0x46, 0xb8, 0x4b, 0xaf, 0x3d, 0xfc,
	0x04, 0xc5, 0xff, 0xf6, 0x09, 0x5a, 0x1c, 0xf1, 0x67, 0xd1, 0x47, 0x7f, 0x49, 0xc5, 0xee, 0xa2,
	0xcb, 0x3f, 0x44, 0x8f, 0x1e, 0x67, 0x26, 0x3e, 0x7b, 0x9c, 0x99, 0xf8, 0xe2, 0x71, 0x06, 0x7d,
	0xd8, 0xcb, 0xa0, 0xdf, 0xf4, 0x32, 0xe8, 0xd3, 0x5e, 0x06, 0x3d, 0xea, 0x65, 0xd0, 0xbf, 0x7a,
	0x19, 0xf4, 0x9f, 0x5e, 0x66, 0xe2, 0x8b, 0x5e, 0x06, 0xfd, 0xfc, 0x49, 0x66, 0xe2, 0xe1, 0x93,
	0x0c, 0x7a, 0xf4, 0x24, 0x33, 0xf1, 0xd9, 0x93, 0xcc, 0xc4, 0xad, 0xef, 0xb4, 0x2c, 0xfb, 0x5e,
	0x2b, 0xbb, 0x6b, 0xb5, 0x29, 0x71, 0x1c, 0x2d, 0xdb, 0x75, 0x73, 0xec, 0x61, 0xc7, 0x72, 0x3a,
	0x8a, 0xed, 0x58, 0xbb, 0x46, 0x93, 0x38, 0x8a, 0xbf, 0x9d, 0xb3, 0xb7, 0x5b, 0x56, 0x8e, 0xdc,
	0xa7, 0xfe, 0xbf, 0x6b, 0x83, 0x7f, 0xb2, 0x6d, 0x4f, 0xb2, 0x3f, 0xc8, 0x5e, 0xff, 0x32, 0x00,
	0x00, 0xff, 0xff, 0xb3, 0xad, 0x31, 0xd5, 0x97, 0x14, 0x00, 0x00,
}

func (x ErrorCode) String() string {
	s, ok := ErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRequest)
	if !ok {
		that2, ok := that.(GetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetResponse)
	if !ok {
		that2, ok := that.(GetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Object.Equal(that1.Object) {
		return false
	}
	if len(this.Status) != len(that1.Status) {
		return false
	}
	for i := range this.Status {
		if !this.Status[i].Equal(that1.Status[i]) {
			return false
		}
	}
	return true
}
func (this *SendPasswordEmailRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SendPasswordEmailRequest)
	if !ok {
		that2, ok := that.(SendPasswordEmailRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cname != that1.Cname {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	return true
}
func (this *SendPasswordEmailResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SendPasswordEmailResponse)
	if !ok {
		that2, ok := that.(SendPasswordEmailResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ValidateRegistrationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateRegistrationRequest)
	if !ok {
		that2, ok := that.(ValidateRegistrationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TenantType != that1.TenantType {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *ValidateRegistrationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateRegistrationResponse)
	if !ok {
		that2, ok := that.(ValidateRegistrationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ValidRegistration != that1.ValidRegistration {
		return false
	}
	if this.Err != that1.Err {
		return false
	}
	return true
}
func (this *ValidateContactRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateContactRequest)
	if !ok {
		that2, ok := that.(ValidateContactRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *ValidationErrorField) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidationErrorField)
	if !ok {
		that2, ok := that.(ValidationErrorField)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ErrorField != that1.ErrorField {
		return false
	}
	if this.ErrorMessage != that1.ErrorMessage {
		return false
	}
	return true
}
func (this *ValidateContactResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateContactResponse)
	if !ok {
		that2, ok := that.(ValidateContactResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsValid != that1.IsValid {
		return false
	}
	if this.Err != that1.Err {
		return false
	}
	if len(this.ValidationErrors) != len(that1.ValidationErrors) {
		return false
	}
	for i := range this.ValidationErrors {
		if !this.ValidationErrors[i].Equal(that1.ValidationErrors[i]) {
			return false
		}
	}
	return true
}
func (this *ListCountriesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListCountriesRequest)
	if !ok {
		that2, ok := that.(ListCountriesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	return true
}
func (this *ListStatesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListStatesRequest)
	if !ok {
		that2, ok := that.(ListStatesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	if this.CountryCode != that1.CountryCode {
		return false
	}
	return true
}
func (this *ListCitiesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListCitiesRequest)
	if !ok {
		that2, ok := that.(ListCitiesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	if this.CountryCode != that1.CountryCode {
		return false
	}
	if this.StateCode != that1.StateCode {
		return false
	}
	return true
}
func (this *CountryItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CountryItem)
	if !ok {
		that2, ok := that.(CountryItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CountryCode != that1.CountryCode {
		return false
	}
	if this.CountryName != that1.CountryName {
		return false
	}
	if len(this.AdditionalInfo) != len(that1.AdditionalInfo) {
		return false
	}
	for i := range this.AdditionalInfo {
		if this.AdditionalInfo[i] != that1.AdditionalInfo[i] {
			return false
		}
	}
	return true
}
func (this *ListCountriesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListCountriesResponse)
	if !ok {
		that2, ok := that.(ListCountriesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Countries) != len(that1.Countries) {
		return false
	}
	for i := range this.Countries {
		if !this.Countries[i].Equal(that1.Countries[i]) {
			return false
		}
	}
	return true
}
func (this *StateItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StateItem)
	if !ok {
		that2, ok := that.(StateItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StateCode != that1.StateCode {
		return false
	}
	if this.StateName != that1.StateName {
		return false
	}
	if len(this.AdditionalInfo) != len(that1.AdditionalInfo) {
		return false
	}
	for i := range this.AdditionalInfo {
		if this.AdditionalInfo[i] != that1.AdditionalInfo[i] {
			return false
		}
	}
	return true
}
func (this *ListStatesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListStatesResponse)
	if !ok {
		that2, ok := that.(ListStatesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ErrorCode != that1.ErrorCode {
		return false
	}
	if len(this.States) != len(that1.States) {
		return false
	}
	for i := range this.States {
		if !this.States[i].Equal(that1.States[i]) {
			return false
		}
	}
	return true
}
func (this *CityItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CityItem)
	if !ok {
		that2, ok := that.(CityItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CityName != that1.CityName {
		return false
	}
	if len(this.AdditionalInfo) != len(that1.AdditionalInfo) {
		return false
	}
	for i := range this.AdditionalInfo {
		if this.AdditionalInfo[i] != that1.AdditionalInfo[i] {
			return false
		}
	}
	return true
}
func (this *ListCitiesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListCitiesResponse)
	if !ok {
		that2, ok := that.(ListCitiesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ErrorCode != that1.ErrorCode {
		return false
	}
	if len(this.Cities) != len(that1.Cities) {
		return false
	}
	for i := range this.Cities {
		if !this.Cities[i].Equal(that1.Cities[i]) {
			return false
		}
	}
	return true
}
func (this *GetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&signup.GetRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&signup.GetResponse{")
	if this.Object != nil {
		s = append(s, "Object: "+fmt.Sprintf("%#v", this.Object)+",\n")
	}
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SendPasswordEmailRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&signup.SendPasswordEmailRequest{")
	s = append(s, "Cname: "+fmt.Sprintf("%#v", this.Cname)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SendPasswordEmailResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&signup.SendPasswordEmailResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidateRegistrationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&signup.ValidateRegistrationRequest{")
	s = append(s, "TenantType: "+fmt.Sprintf("%#v", this.TenantType)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidateRegistrationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&signup.ValidateRegistrationResponse{")
	s = append(s, "ValidRegistration: "+fmt.Sprintf("%#v", this.ValidRegistration)+",\n")
	s = append(s, "Err: "+fmt.Sprintf("%#v", this.Err)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidateContactRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&signup.ValidateContactRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidationErrorField) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&signup.ValidationErrorField{")
	s = append(s, "ErrorField: "+fmt.Sprintf("%#v", this.ErrorField)+",\n")
	s = append(s, "ErrorMessage: "+fmt.Sprintf("%#v", this.ErrorMessage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidateContactResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&signup.ValidateContactResponse{")
	s = append(s, "IsValid: "+fmt.Sprintf("%#v", this.IsValid)+",\n")
	s = append(s, "Err: "+fmt.Sprintf("%#v", this.Err)+",\n")
	if this.ValidationErrors != nil {
		s = append(s, "ValidationErrors: "+fmt.Sprintf("%#v", this.ValidationErrors)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListCountriesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&signup.ListCountriesRequest{")
	s = append(s, "Prefix: "+fmt.Sprintf("%#v", this.Prefix)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListStatesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&signup.ListStatesRequest{")
	s = append(s, "Prefix: "+fmt.Sprintf("%#v", this.Prefix)+",\n")
	s = append(s, "CountryCode: "+fmt.Sprintf("%#v", this.CountryCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListCitiesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&signup.ListCitiesRequest{")
	s = append(s, "Prefix: "+fmt.Sprintf("%#v", this.Prefix)+",\n")
	s = append(s, "CountryCode: "+fmt.Sprintf("%#v", this.CountryCode)+",\n")
	s = append(s, "StateCode: "+fmt.Sprintf("%#v", this.StateCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CountryItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&signup.CountryItem{")
	s = append(s, "CountryCode: "+fmt.Sprintf("%#v", this.CountryCode)+",\n")
	s = append(s, "CountryName: "+fmt.Sprintf("%#v", this.CountryName)+",\n")
	keysForAdditionalInfo := make([]string, 0, len(this.AdditionalInfo))
	for k, _ := range this.AdditionalInfo {
		keysForAdditionalInfo = append(keysForAdditionalInfo, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAdditionalInfo)
	mapStringForAdditionalInfo := "map[string]string{"
	for _, k := range keysForAdditionalInfo {
		mapStringForAdditionalInfo += fmt.Sprintf("%#v: %#v,", k, this.AdditionalInfo[k])
	}
	mapStringForAdditionalInfo += "}"
	if this.AdditionalInfo != nil {
		s = append(s, "AdditionalInfo: "+mapStringForAdditionalInfo+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListCountriesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&signup.ListCountriesResponse{")
	if this.Countries != nil {
		s = append(s, "Countries: "+fmt.Sprintf("%#v", this.Countries)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StateItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&signup.StateItem{")
	s = append(s, "StateCode: "+fmt.Sprintf("%#v", this.StateCode)+",\n")
	s = append(s, "StateName: "+fmt.Sprintf("%#v", this.StateName)+",\n")
	keysForAdditionalInfo := make([]string, 0, len(this.AdditionalInfo))
	for k, _ := range this.AdditionalInfo {
		keysForAdditionalInfo = append(keysForAdditionalInfo, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAdditionalInfo)
	mapStringForAdditionalInfo := "map[string]string{"
	for _, k := range keysForAdditionalInfo {
		mapStringForAdditionalInfo += fmt.Sprintf("%#v: %#v,", k, this.AdditionalInfo[k])
	}
	mapStringForAdditionalInfo += "}"
	if this.AdditionalInfo != nil {
		s = append(s, "AdditionalInfo: "+mapStringForAdditionalInfo+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListStatesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&signup.ListStatesResponse{")
	s = append(s, "ErrorCode: "+fmt.Sprintf("%#v", this.ErrorCode)+",\n")
	if this.States != nil {
		s = append(s, "States: "+fmt.Sprintf("%#v", this.States)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CityItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&signup.CityItem{")
	s = append(s, "CityName: "+fmt.Sprintf("%#v", this.CityName)+",\n")
	keysForAdditionalInfo := make([]string, 0, len(this.AdditionalInfo))
	for k, _ := range this.AdditionalInfo {
		keysForAdditionalInfo = append(keysForAdditionalInfo, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAdditionalInfo)
	mapStringForAdditionalInfo := "map[string]string{"
	for _, k := range keysForAdditionalInfo {
		mapStringForAdditionalInfo += fmt.Sprintf("%#v: %#v,", k, this.AdditionalInfo[k])
	}
	mapStringForAdditionalInfo += "}"
	if this.AdditionalInfo != nil {
		s = append(s, "AdditionalInfo: "+mapStringForAdditionalInfo+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListCitiesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&signup.ListCitiesResponse{")
	s = append(s, "ErrorCode: "+fmt.Sprintf("%#v", this.ErrorCode)+",\n")
	if this.Cities != nil {
		s = append(s, "Cities: "+fmt.Sprintf("%#v", this.Cities)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// Signup get
	//
	// x-displayName: "Read Signup"
	// Get allows users to query signup and its status. Use this to query for a status of a submitted signup object.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Send password email
	//
	// x-displayName: "Send Password Email"
	// SendPasswordEmail enables resetting the password at the time of on-boarding new customer
	SendPasswordEmail(ctx context.Context, in *SendPasswordEmailRequest, opts ...grpc.CallOption) (*SendPasswordEmailResponse, error)
	// Validate registration
	//
	// x-displayName: "Validate Registration"
	// ValidateRegistration validates if the signup registration request is valid when a new customer attempts to signup
	ValidateRegistration(ctx context.Context, in *ValidateRegistrationRequest, opts ...grpc.CallOption) (*ValidateRegistrationResponse, error)
	// Validate contact
	//
	// x-displayName: "Validate contact"
	// It validates that:
	// * the provided country and zip code are not empty
	// * the provided country is in the configured list of countries
	// * a provided zip code matches a regexp for a given country
	ValidateContact(ctx context.Context, in *ValidateContactRequest, opts ...grpc.CallOption) (*ValidateContactResponse, error)
	// List countries
	//
	// x-displayName: "List countries"
	// Returns a list of supported countries along with with additional information such as address validation rules
	ListCountries(ctx context.Context, in *ListCountriesRequest, opts ...grpc.CallOption) (*ListCountriesResponse, error)
	// List states
	//
	// x-displayName: "List states"
	// Returns a list of known states of a country. List will be empty if country has no states.
	ListStates(ctx context.Context, in *ListStatesRequest, opts ...grpc.CallOption) (*ListStatesResponse, error)
	// List cities
	//
	// x-displayName: "List cities"
	// Returns a list of known cities of a country/state.
	ListCities(ctx context.Context, in *ListCitiesRequest, opts ...grpc.CallOption) (*ListCitiesResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.signup.CustomAPI/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) SendPasswordEmail(ctx context.Context, in *SendPasswordEmailRequest, opts ...grpc.CallOption) (*SendPasswordEmailResponse, error) {
	out := new(SendPasswordEmailResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.signup.CustomAPI/SendPasswordEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) ValidateRegistration(ctx context.Context, in *ValidateRegistrationRequest, opts ...grpc.CallOption) (*ValidateRegistrationResponse, error) {
	out := new(ValidateRegistrationResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.signup.CustomAPI/ValidateRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) ValidateContact(ctx context.Context, in *ValidateContactRequest, opts ...grpc.CallOption) (*ValidateContactResponse, error) {
	out := new(ValidateContactResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.signup.CustomAPI/ValidateContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) ListCountries(ctx context.Context, in *ListCountriesRequest, opts ...grpc.CallOption) (*ListCountriesResponse, error) {
	out := new(ListCountriesResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.signup.CustomAPI/ListCountries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) ListStates(ctx context.Context, in *ListStatesRequest, opts ...grpc.CallOption) (*ListStatesResponse, error) {
	out := new(ListStatesResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.signup.CustomAPI/ListStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) ListCities(ctx context.Context, in *ListCitiesRequest, opts ...grpc.CallOption) (*ListCitiesResponse, error) {
	out := new(ListCitiesResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.signup.CustomAPI/ListCities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// Signup get
	//
	// x-displayName: "Read Signup"
	// Get allows users to query signup and its status. Use this to query for a status of a submitted signup object.
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Send password email
	//
	// x-displayName: "Send Password Email"
	// SendPasswordEmail enables resetting the password at the time of on-boarding new customer
	SendPasswordEmail(context.Context, *SendPasswordEmailRequest) (*SendPasswordEmailResponse, error)
	// Validate registration
	//
	// x-displayName: "Validate Registration"
	// ValidateRegistration validates if the signup registration request is valid when a new customer attempts to signup
	ValidateRegistration(context.Context, *ValidateRegistrationRequest) (*ValidateRegistrationResponse, error)
	// Validate contact
	//
	// x-displayName: "Validate contact"
	// It validates that:
	// * the provided country and zip code are not empty
	// * the provided country is in the configured list of countries
	// * a provided zip code matches a regexp for a given country
	ValidateContact(context.Context, *ValidateContactRequest) (*ValidateContactResponse, error)
	// List countries
	//
	// x-displayName: "List countries"
	// Returns a list of supported countries along with with additional information such as address validation rules
	ListCountries(context.Context, *ListCountriesRequest) (*ListCountriesResponse, error)
	// List states
	//
	// x-displayName: "List states"
	// Returns a list of known states of a country. List will be empty if country has no states.
	ListStates(context.Context, *ListStatesRequest) (*ListStatesResponse, error)
	// List cities
	//
	// x-displayName: "List cities"
	// Returns a list of known cities of a country/state.
	ListCities(context.Context, *ListCitiesRequest) (*ListCitiesResponse, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCustomAPIServer) SendPasswordEmail(ctx context.Context, req *SendPasswordEmailRequest) (*SendPasswordEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPasswordEmail not implemented")
}
func (*UnimplementedCustomAPIServer) ValidateRegistration(ctx context.Context, req *ValidateRegistrationRequest) (*ValidateRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateRegistration not implemented")
}
func (*UnimplementedCustomAPIServer) ValidateContact(ctx context.Context, req *ValidateContactRequest) (*ValidateContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateContact not implemented")
}
func (*UnimplementedCustomAPIServer) ListCountries(ctx context.Context, req *ListCountriesRequest) (*ListCountriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCountries not implemented")
}
func (*UnimplementedCustomAPIServer) ListStates(ctx context.Context, req *ListStatesRequest) (*ListStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStates not implemented")
}
func (*UnimplementedCustomAPIServer) ListCities(ctx context.Context, req *ListCitiesRequest) (*ListCitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCities not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.signup.CustomAPI/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_SendPasswordEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPasswordEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).SendPasswordEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.signup.CustomAPI/SendPasswordEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).SendPasswordEmail(ctx, req.(*SendPasswordEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_ValidateRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).ValidateRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.signup.CustomAPI/ValidateRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).ValidateRegistration(ctx, req.(*ValidateRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_ValidateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).ValidateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.signup.CustomAPI/ValidateContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).ValidateContact(ctx, req.(*ValidateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_ListCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCountriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).ListCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.signup.CustomAPI/ListCountries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).ListCountries(ctx, req.(*ListCountriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_ListStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).ListStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.signup.CustomAPI/ListStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).ListStates(ctx, req.(*ListStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_ListCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).ListCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.signup.CustomAPI/ListCities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).ListCities(ctx, req.(*ListCitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.signup.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _CustomAPI_Get_Handler,
		},
		{
			MethodName: "SendPasswordEmail",
			Handler:    _CustomAPI_SendPasswordEmail_Handler,
		},
		{
			MethodName: "ValidateRegistration",
			Handler:    _CustomAPI_ValidateRegistration_Handler,
		},
		{
			MethodName: "ValidateContact",
			Handler:    _CustomAPI_ValidateContact_Handler,
		},
		{
			MethodName: "ListCountries",
			Handler:    _CustomAPI_ListCountries_Handler,
		},
		{
			MethodName: "ListStates",
			Handler:    _CustomAPI_ListStates_Handler,
		},
		{
			MethodName: "ListCities",
			Handler:    _CustomAPI_ListCities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/signup/public_customapi.proto",
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		for iNdEx := len(m.Status) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Status[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xe2
			i--
			dAtA[i] = 0x82
		}
	}
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendPasswordEmailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendPasswordEmailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendPasswordEmailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cname) > 0 {
		i -= len(m.Cname)
		copy(dAtA[i:], m.Cname)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Cname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendPasswordEmailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendPasswordEmailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendPasswordEmailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ValidateRegistrationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateRegistrationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateRegistrationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x12
	}
	if m.TenantType != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.TenantType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidateRegistrationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateRegistrationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateRegistrationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Err != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Err))
		i--
		dAtA[i] = 0x10
	}
	if m.ValidRegistration {
		i--
		if m.ValidRegistration {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidateContactRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateContactRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateContactRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidationErrorField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidationErrorField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidationErrorField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ErrorField) > 0 {
		i -= len(m.ErrorField)
		copy(dAtA[i:], m.ErrorField)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ErrorField)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidateContactResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateContactResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateContactResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidationErrors) > 0 {
		for iNdEx := len(m.ValidationErrors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidationErrors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Err != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Err))
		i--
		dAtA[i] = 0x10
	}
	if m.IsValid {
		i--
		if m.IsValid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListCountriesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCountriesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCountriesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListStatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListStatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListStatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCitiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCitiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCitiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StateCode) > 0 {
		i -= len(m.StateCode)
		copy(dAtA[i:], m.StateCode)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.StateCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CountryItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountryItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountryItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdditionalInfo) > 0 {
		for k := range m.AdditionalInfo {
			v := m.AdditionalInfo[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CountryName) > 0 {
		i -= len(m.CountryName)
		copy(dAtA[i:], m.CountryName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.CountryName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCountriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCountriesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCountriesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Countries) > 0 {
		for iNdEx := len(m.Countries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Countries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StateItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdditionalInfo) > 0 {
		for k := range m.AdditionalInfo {
			v := m.AdditionalInfo[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.StateName) > 0 {
		i -= len(m.StateName)
		copy(dAtA[i:], m.StateName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.StateName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StateCode) > 0 {
		i -= len(m.StateCode)
		copy(dAtA[i:], m.StateCode)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.StateCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListStatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListStatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListStatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.States) > 0 {
		for iNdEx := len(m.States) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.States[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ErrorCode != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CityItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CityItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CityItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdditionalInfo) > 0 {
		for k := range m.AdditionalInfo {
			v := m.AdditionalInfo[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CityName) > 0 {
		i -= len(m.CityName)
		copy(dAtA[i:], m.CityName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.CityName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCitiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCitiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCitiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cities) > 0 {
		for iNdEx := len(m.Cities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ErrorCode != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *GetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.Status) > 0 {
		for _, e := range m.Status {
			l = e.Size()
			n += 3 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *SendPasswordEmailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cname)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *SendPasswordEmailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ValidateRegistrationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TenantType != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.TenantType))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ValidateRegistrationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidRegistration {
		n += 2
	}
	if m.Err != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Err))
	}
	return n
}

func (m *ValidateContactRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ValidationErrorField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErrorField)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ValidateContactResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsValid {
		n += 2
	}
	if m.Err != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Err))
	}
	if len(m.ValidationErrors) > 0 {
		for _, e := range m.ValidationErrors {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *ListCountriesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ListStatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ListCitiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.StateCode)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *CountryItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.CountryName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.AdditionalInfo) > 0 {
		for k, v := range m.AdditionalInfo {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPublicCustomapi(uint64(len(k))) + 1 + len(v) + sovPublicCustomapi(uint64(len(v)))
			n += mapEntrySize + 1 + sovPublicCustomapi(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ListCountriesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Countries) > 0 {
		for _, e := range m.Countries {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *StateItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StateCode)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.StateName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.AdditionalInfo) > 0 {
		for k, v := range m.AdditionalInfo {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPublicCustomapi(uint64(len(k))) + 1 + len(v) + sovPublicCustomapi(uint64(len(v)))
			n += mapEntrySize + 1 + sovPublicCustomapi(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ListStatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.ErrorCode))
	}
	if len(m.States) > 0 {
		for _, e := range m.States {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *CityItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CityName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.AdditionalInfo) > 0 {
		for k, v := range m.AdditionalInfo {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPublicCustomapi(uint64(len(k))) + 1 + len(v) + sovPublicCustomapi(uint64(len(v)))
			n += mapEntrySize + 1 + sovPublicCustomapi(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ListCitiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.ErrorCode))
	}
	if len(m.Cities) > 0 {
		for _, e := range m.Cities {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStatus := "[]*StatusObject{"
	for _, f := range this.Status {
		repeatedStringForStatus += strings.Replace(fmt.Sprintf("%v", f), "StatusObject", "StatusObject", 1) + ","
	}
	repeatedStringForStatus += "}"
	s := strings.Join([]string{`&GetResponse{`,
		`Object:` + strings.Replace(fmt.Sprintf("%v", this.Object), "Object", "Object", 1) + `,`,
		`Status:` + repeatedStringForStatus + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendPasswordEmailRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendPasswordEmailRequest{`,
		`Cname:` + fmt.Sprintf("%v", this.Cname) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendPasswordEmailResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendPasswordEmailResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ValidateRegistrationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidateRegistrationRequest{`,
		`TenantType:` + fmt.Sprintf("%v", this.TenantType) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidateRegistrationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidateRegistrationResponse{`,
		`ValidRegistration:` + fmt.Sprintf("%v", this.ValidRegistration) + `,`,
		`Err:` + fmt.Sprintf("%v", this.Err) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidateContactRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidateContactRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "GlobalSpecType", "contact.GlobalSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidationErrorField) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidationErrorField{`,
		`ErrorField:` + fmt.Sprintf("%v", this.ErrorField) + `,`,
		`ErrorMessage:` + fmt.Sprintf("%v", this.ErrorMessage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidateContactResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValidationErrors := "[]*ValidationErrorField{"
	for _, f := range this.ValidationErrors {
		repeatedStringForValidationErrors += strings.Replace(f.String(), "ValidationErrorField", "ValidationErrorField", 1) + ","
	}
	repeatedStringForValidationErrors += "}"
	s := strings.Join([]string{`&ValidateContactResponse{`,
		`IsValid:` + fmt.Sprintf("%v", this.IsValid) + `,`,
		`Err:` + fmt.Sprintf("%v", this.Err) + `,`,
		`ValidationErrors:` + repeatedStringForValidationErrors + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListCountriesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListCountriesRequest{`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListStatesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListStatesRequest{`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`CountryCode:` + fmt.Sprintf("%v", this.CountryCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListCitiesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListCitiesRequest{`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`CountryCode:` + fmt.Sprintf("%v", this.CountryCode) + `,`,
		`StateCode:` + fmt.Sprintf("%v", this.StateCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CountryItem) String() string {
	if this == nil {
		return "nil"
	}
	keysForAdditionalInfo := make([]string, 0, len(this.AdditionalInfo))
	for k, _ := range this.AdditionalInfo {
		keysForAdditionalInfo = append(keysForAdditionalInfo, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAdditionalInfo)
	mapStringForAdditionalInfo := "map[string]string{"
	for _, k := range keysForAdditionalInfo {
		mapStringForAdditionalInfo += fmt.Sprintf("%v: %v,", k, this.AdditionalInfo[k])
	}
	mapStringForAdditionalInfo += "}"
	s := strings.Join([]string{`&CountryItem{`,
		`CountryCode:` + fmt.Sprintf("%v", this.CountryCode) + `,`,
		`CountryName:` + fmt.Sprintf("%v", this.CountryName) + `,`,
		`AdditionalInfo:` + mapStringForAdditionalInfo + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListCountriesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCountries := "[]*CountryItem{"
	for _, f := range this.Countries {
		repeatedStringForCountries += strings.Replace(f.String(), "CountryItem", "CountryItem", 1) + ","
	}
	repeatedStringForCountries += "}"
	s := strings.Join([]string{`&ListCountriesResponse{`,
		`Countries:` + repeatedStringForCountries + `,`,
		`}`,
	}, "")
	return s
}
func (this *StateItem) String() string {
	if this == nil {
		return "nil"
	}
	keysForAdditionalInfo := make([]string, 0, len(this.AdditionalInfo))
	for k, _ := range this.AdditionalInfo {
		keysForAdditionalInfo = append(keysForAdditionalInfo, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAdditionalInfo)
	mapStringForAdditionalInfo := "map[string]string{"
	for _, k := range keysForAdditionalInfo {
		mapStringForAdditionalInfo += fmt.Sprintf("%v: %v,", k, this.AdditionalInfo[k])
	}
	mapStringForAdditionalInfo += "}"
	s := strings.Join([]string{`&StateItem{`,
		`StateCode:` + fmt.Sprintf("%v", this.StateCode) + `,`,
		`StateName:` + fmt.Sprintf("%v", this.StateName) + `,`,
		`AdditionalInfo:` + mapStringForAdditionalInfo + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListStatesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStates := "[]*StateItem{"
	for _, f := range this.States {
		repeatedStringForStates += strings.Replace(f.String(), "StateItem", "StateItem", 1) + ","
	}
	repeatedStringForStates += "}"
	s := strings.Join([]string{`&ListStatesResponse{`,
		`ErrorCode:` + fmt.Sprintf("%v", this.ErrorCode) + `,`,
		`States:` + repeatedStringForStates + `,`,
		`}`,
	}, "")
	return s
}
func (this *CityItem) String() string {
	if this == nil {
		return "nil"
	}
	keysForAdditionalInfo := make([]string, 0, len(this.AdditionalInfo))
	for k, _ := range this.AdditionalInfo {
		keysForAdditionalInfo = append(keysForAdditionalInfo, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAdditionalInfo)
	mapStringForAdditionalInfo := "map[string]string{"
	for _, k := range keysForAdditionalInfo {
		mapStringForAdditionalInfo += fmt.Sprintf("%v: %v,", k, this.AdditionalInfo[k])
	}
	mapStringForAdditionalInfo += "}"
	s := strings.Join([]string{`&CityItem{`,
		`CityName:` + fmt.Sprintf("%v", this.CityName) + `,`,
		`AdditionalInfo:` + mapStringForAdditionalInfo + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListCitiesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCities := "[]*CityItem{"
	for _, f := range this.Cities {
		repeatedStringForCities += strings.Replace(f.String(), "CityItem", "CityItem", 1) + ","
	}
	repeatedStringForCities += "}"
	s := strings.Join([]string{`&ListCitiesResponse{`,
		`ErrorCode:` + fmt.Sprintf("%v", this.ErrorCode) + `,`,
		`Cities:` + repeatedStringForCities + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = append(m.Status, &StatusObject{})
			if err := m.Status[len(m.Status)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendPasswordEmailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendPasswordEmailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendPasswordEmailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendPasswordEmailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendPasswordEmailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendPasswordEmailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateRegistrationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateRegistrationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateRegistrationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantType", wireType)
			}
			m.TenantType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TenantType |= schema.TenantType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateRegistrationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateRegistrationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateRegistrationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidRegistration", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ValidRegistration = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateContactRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateContactRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateContactRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &contact.GlobalSpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidationErrorField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidationErrorField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidationErrorField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorField = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateContactResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateContactResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateContactResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsValid = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationErrors = append(m.ValidationErrors, &ValidationErrorField{})
			if err := m.ValidationErrors[len(m.ValidationErrors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCountriesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCountriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCountriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListStatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListStatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListStatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCitiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCitiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCitiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountryItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountryItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountryItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdditionalInfo == nil {
				m.AdditionalInfo = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AdditionalInfo[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCountriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCountriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCountriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Countries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Countries = append(m.Countries, &CountryItem{})
			if err := m.Countries[len(m.Countries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdditionalInfo == nil {
				m.AdditionalInfo = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AdditionalInfo[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListStatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListStatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListStatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field States", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.States = append(m.States, &StateItem{})
			if err := m.States[len(m.States)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CityItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CityItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CityItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdditionalInfo == nil {
				m.AdditionalInfo = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AdditionalInfo[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCitiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCitiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCitiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cities = append(m.Cities, &CityItem{})
			if err := m.Cities[len(m.Cities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)
