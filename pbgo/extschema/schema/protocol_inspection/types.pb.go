// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/protocol_inspection/types.proto

package protocol_inspection

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Action
//
// x-displayName: "Action"
// Action after inspection
type Action int32

const (
	// Allow
	//
	// x-displayName: "ALLOW"
	// Allow traffic
	ALLOW Action = 0
	// Deny
	//
	// x-displayName: "DENY"
	// Throw RST error for TCP and ICMP error for UDP
	DENY Action = 1
	// DROP
	//
	// x-displayName: "DROP"
	// Silently drop traffic
	DROP Action = 2
)

var Action_name = map[int32]string{
	0: "ALLOW",
	1: "DENY",
	2: "DROP",
}

var Action_value = map[string]int32{
	"ALLOW": 0,
	"DENY":  1,
	"DROP":  2,
}

func (Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c27c2db54a5cb7a, []int{0}
}

// GlobalSpecType
//
// x-displayName: "View Specification"
// Desired state of Protocol Inspection specification
type GlobalSpecType struct {
	// Enable/Disable Compliance Checks
	//
	// x-displayName: "Enable/Disable Compliance Checks"
	// x-required
	// Enable or Disable Compliance Checks
	EnableDisableComplianceChecks *EnableDisableComplianceChecks `protobuf:"bytes,1,opt,name=enable_disable_compliance_checks,json=enableDisableComplianceChecks,proto3" json:"enable_disable_compliance_checks,omitempty"`
	// enable_disable_signatures
	//
	// x-displayName: "Enable/Disable Signatures"
	// x-required
	// Confirmation of applying IPS
	EnableDisableSignatures *EnableDisableSignatures `protobuf:"bytes,2,opt,name=enable_disable_signatures,json=enableDisableSignatures,proto3" json:"enable_disable_signatures,omitempty"`
	// Action
	//
	// x-displayName: "Action"
	// Action to take based on inspection
	Action Action `protobuf:"varint,3,opt,name=action,proto3,enum=ves.io.schema.protocol_inspection.Action" json:"action,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c27c2db54a5cb7a, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetEnableDisableComplianceChecks() *EnableDisableComplianceChecks {
	if m != nil {
		return m.EnableDisableComplianceChecks
	}
	return nil
}

func (m *GlobalSpecType) GetEnableDisableSignatures() *EnableDisableSignatures {
	if m != nil {
		return m.EnableDisableSignatures
	}
	return nil
}

func (m *GlobalSpecType) GetAction() Action {
	if m != nil {
		return m.Action
	}
	return ALLOW
}

// Enable Disable Signatures
//
// x-displayName: "Enable/Disable Signatures Choice"
// x-required
// Enable Disable Signature Choice
type EnableDisableSignatures struct {
	// Enable Signature
	//
	// x-displayName: "Signature Choice"
	// x-required
	//
	// Types that are valid to be assigned to SignatureChoice:
	//	*EnableDisableSignatures_EnableSignature
	//	*EnableDisableSignatures_DisableSignature
	SignatureChoice isEnableDisableSignatures_SignatureChoice `protobuf_oneof:"signature_choice"`
}

func (m *EnableDisableSignatures) Reset()      { *m = EnableDisableSignatures{} }
func (*EnableDisableSignatures) ProtoMessage() {}
func (*EnableDisableSignatures) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c27c2db54a5cb7a, []int{1}
}
func (m *EnableDisableSignatures) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnableDisableSignatures) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EnableDisableSignatures) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableDisableSignatures.Merge(m, src)
}
func (m *EnableDisableSignatures) XXX_Size() int {
	return m.Size()
}
func (m *EnableDisableSignatures) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableDisableSignatures.DiscardUnknown(m)
}

var xxx_messageInfo_EnableDisableSignatures proto.InternalMessageInfo

type isEnableDisableSignatures_SignatureChoice interface {
	isEnableDisableSignatures_SignatureChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type EnableDisableSignatures_EnableSignature struct {
	EnableSignature *schema.Empty `protobuf:"bytes,2,opt,name=enable_signature,json=enableSignature,proto3,oneof" json:"enable_signature,omitempty"`
}
type EnableDisableSignatures_DisableSignature struct {
	DisableSignature *schema.Empty `protobuf:"bytes,3,opt,name=disable_signature,json=disableSignature,proto3,oneof" json:"disable_signature,omitempty"`
}

func (*EnableDisableSignatures_EnableSignature) isEnableDisableSignatures_SignatureChoice()  {}
func (*EnableDisableSignatures_DisableSignature) isEnableDisableSignatures_SignatureChoice() {}

func (m *EnableDisableSignatures) GetSignatureChoice() isEnableDisableSignatures_SignatureChoice {
	if m != nil {
		return m.SignatureChoice
	}
	return nil
}

func (m *EnableDisableSignatures) GetEnableSignature() *schema.Empty {
	if x, ok := m.GetSignatureChoice().(*EnableDisableSignatures_EnableSignature); ok {
		return x.EnableSignature
	}
	return nil
}

func (m *EnableDisableSignatures) GetDisableSignature() *schema.Empty {
	if x, ok := m.GetSignatureChoice().(*EnableDisableSignatures_DisableSignature); ok {
		return x.DisableSignature
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EnableDisableSignatures) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EnableDisableSignatures_EnableSignature)(nil),
		(*EnableDisableSignatures_DisableSignature)(nil),
	}
}

// Enable Disable Compliance Checks
//
// x-displayName: "Enable/Disable Compliance Checks"
// x-required
// Enable Disable Compliance Checks Choice
type EnableDisableComplianceChecks struct {
	// Enable Compliance Check
	//
	// x-displayName: "Compliance Choice"
	// x-required
	//
	// Types that are valid to be assigned to ComplianceCheckChoice:
	//	*EnableDisableComplianceChecks_EnableComplianceChecks
	//	*EnableDisableComplianceChecks_DisableComplianceChecks
	ComplianceCheckChoice isEnableDisableComplianceChecks_ComplianceCheckChoice `protobuf_oneof:"compliance_check_choice"`
}

func (m *EnableDisableComplianceChecks) Reset()      { *m = EnableDisableComplianceChecks{} }
func (*EnableDisableComplianceChecks) ProtoMessage() {}
func (*EnableDisableComplianceChecks) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c27c2db54a5cb7a, []int{2}
}
func (m *EnableDisableComplianceChecks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnableDisableComplianceChecks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EnableDisableComplianceChecks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableDisableComplianceChecks.Merge(m, src)
}
func (m *EnableDisableComplianceChecks) XXX_Size() int {
	return m.Size()
}
func (m *EnableDisableComplianceChecks) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableDisableComplianceChecks.DiscardUnknown(m)
}

var xxx_messageInfo_EnableDisableComplianceChecks proto.InternalMessageInfo

type isEnableDisableComplianceChecks_ComplianceCheckChoice interface {
	isEnableDisableComplianceChecks_ComplianceCheckChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type EnableDisableComplianceChecks_EnableComplianceChecks struct {
	EnableComplianceChecks *views.ObjectRefType `protobuf:"bytes,2,opt,name=enable_compliance_checks,json=enableComplianceChecks,proto3,oneof" json:"enable_compliance_checks,omitempty"`
}
type EnableDisableComplianceChecks_DisableComplianceChecks struct {
	DisableComplianceChecks *schema.Empty `protobuf:"bytes,3,opt,name=disable_compliance_checks,json=disableComplianceChecks,proto3,oneof" json:"disable_compliance_checks,omitempty"`
}

func (*EnableDisableComplianceChecks_EnableComplianceChecks) isEnableDisableComplianceChecks_ComplianceCheckChoice() {
}
func (*EnableDisableComplianceChecks_DisableComplianceChecks) isEnableDisableComplianceChecks_ComplianceCheckChoice() {
}

func (m *EnableDisableComplianceChecks) GetComplianceCheckChoice() isEnableDisableComplianceChecks_ComplianceCheckChoice {
	if m != nil {
		return m.ComplianceCheckChoice
	}
	return nil
}

func (m *EnableDisableComplianceChecks) GetEnableComplianceChecks() *views.ObjectRefType {
	if x, ok := m.GetComplianceCheckChoice().(*EnableDisableComplianceChecks_EnableComplianceChecks); ok {
		return x.EnableComplianceChecks
	}
	return nil
}

func (m *EnableDisableComplianceChecks) GetDisableComplianceChecks() *schema.Empty {
	if x, ok := m.GetComplianceCheckChoice().(*EnableDisableComplianceChecks_DisableComplianceChecks); ok {
		return x.DisableComplianceChecks
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EnableDisableComplianceChecks) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EnableDisableComplianceChecks_EnableComplianceChecks)(nil),
		(*EnableDisableComplianceChecks_DisableComplianceChecks)(nil),
	}
}

// Create Protocol Inspection
//
// x-displayName: "Create Protocol Inspection"
// Create Protocol Inspection Specification in a given namespace. If one already exists it will give an error.
type CreateSpecType struct {
	EnableDisableComplianceChecks *EnableDisableComplianceChecks `protobuf:"bytes,1,opt,name=enable_disable_compliance_checks,json=enableDisableComplianceChecks,proto3" json:"enable_disable_compliance_checks,omitempty"`
	EnableDisableSignatures       *EnableDisableSignatures       `protobuf:"bytes,2,opt,name=enable_disable_signatures,json=enableDisableSignatures,proto3" json:"enable_disable_signatures,omitempty"`
	Action                        Action                         `protobuf:"varint,3,opt,name=action,proto3,enum=ves.io.schema.protocol_inspection.Action" json:"action,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c27c2db54a5cb7a, []int{3}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetEnableDisableComplianceChecks() *EnableDisableComplianceChecks {
	if m != nil {
		return m.EnableDisableComplianceChecks
	}
	return nil
}

func (m *CreateSpecType) GetEnableDisableSignatures() *EnableDisableSignatures {
	if m != nil {
		return m.EnableDisableSignatures
	}
	return nil
}

func (m *CreateSpecType) GetAction() Action {
	if m != nil {
		return m.Action
	}
	return ALLOW
}

// Replace Protocol Inspection
//
// x-displayName: "Replace Protocol Inspection "
// Replace Protocol Inspection specification in a given namespace.
type ReplaceSpecType struct {
	EnableDisableComplianceChecks *EnableDisableComplianceChecks `protobuf:"bytes,1,opt,name=enable_disable_compliance_checks,json=enableDisableComplianceChecks,proto3" json:"enable_disable_compliance_checks,omitempty"`
	EnableDisableSignatures       *EnableDisableSignatures       `protobuf:"bytes,2,opt,name=enable_disable_signatures,json=enableDisableSignatures,proto3" json:"enable_disable_signatures,omitempty"`
	Action                        Action                         `protobuf:"varint,3,opt,name=action,proto3,enum=ves.io.schema.protocol_inspection.Action" json:"action,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c27c2db54a5cb7a, []int{4}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetEnableDisableComplianceChecks() *EnableDisableComplianceChecks {
	if m != nil {
		return m.EnableDisableComplianceChecks
	}
	return nil
}

func (m *ReplaceSpecType) GetEnableDisableSignatures() *EnableDisableSignatures {
	if m != nil {
		return m.EnableDisableSignatures
	}
	return nil
}

func (m *ReplaceSpecType) GetAction() Action {
	if m != nil {
		return m.Action
	}
	return ALLOW
}

// Get Protocol Inspection
//
// x-displayName: "Get Protocol Inspection "
// Get Protocol Inspection details.
type GetSpecType struct {
	EnableDisableComplianceChecks *EnableDisableComplianceChecks `protobuf:"bytes,1,opt,name=enable_disable_compliance_checks,json=enableDisableComplianceChecks,proto3" json:"enable_disable_compliance_checks,omitempty"`
	EnableDisableSignatures       *EnableDisableSignatures       `protobuf:"bytes,2,opt,name=enable_disable_signatures,json=enableDisableSignatures,proto3" json:"enable_disable_signatures,omitempty"`
	Action                        Action                         `protobuf:"varint,3,opt,name=action,proto3,enum=ves.io.schema.protocol_inspection.Action" json:"action,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c27c2db54a5cb7a, []int{5}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetEnableDisableComplianceChecks() *EnableDisableComplianceChecks {
	if m != nil {
		return m.EnableDisableComplianceChecks
	}
	return nil
}

func (m *GetSpecType) GetEnableDisableSignatures() *EnableDisableSignatures {
	if m != nil {
		return m.EnableDisableSignatures
	}
	return nil
}

func (m *GetSpecType) GetAction() Action {
	if m != nil {
		return m.Action
	}
	return ALLOW
}

func init() {
	proto.RegisterEnum("ves.io.schema.protocol_inspection.Action", Action_name, Action_value)
	golang_proto.RegisterEnum("ves.io.schema.protocol_inspection.Action", Action_name, Action_value)
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.protocol_inspection.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.protocol_inspection.GlobalSpecType")
	proto.RegisterType((*EnableDisableSignatures)(nil), "ves.io.schema.protocol_inspection.EnableDisableSignatures")
	golang_proto.RegisterType((*EnableDisableSignatures)(nil), "ves.io.schema.protocol_inspection.EnableDisableSignatures")
	proto.RegisterType((*EnableDisableComplianceChecks)(nil), "ves.io.schema.protocol_inspection.EnableDisableComplianceChecks")
	golang_proto.RegisterType((*EnableDisableComplianceChecks)(nil), "ves.io.schema.protocol_inspection.EnableDisableComplianceChecks")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.protocol_inspection.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.protocol_inspection.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.protocol_inspection.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.protocol_inspection.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.protocol_inspection.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.protocol_inspection.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/protocol_inspection/types.proto", fileDescriptor_3c27c2db54a5cb7a)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/protocol_inspection/types.proto", fileDescriptor_3c27c2db54a5cb7a)
}

var fileDescriptor_3c27c2db54a5cb7a = []byte{
	// 695 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xcf, 0x4f, 0xd3, 0x60,
	0x18, 0xee, 0x57, 0x90, 0xe0, 0x47, 0x02, 0xa3, 0x51, 0xf7, 0x43, 0xf8, 0xa8, 0x33, 0x26, 0x68,
	0xb2, 0x36, 0xc2, 0x8d, 0x83, 0x91, 0x8d, 0x05, 0x62, 0x88, 0x98, 0x42, 0x82, 0x7a, 0x59, 0xda,
	0xee, 0xa5, 0xab, 0xb4, 0xfb, 0x9a, 0xf6, 0xdb, 0x84, 0x83, 0x89, 0x57, 0x6f, 0x5e, 0x4c, 0xfc,
	0x13, 0x8c, 0x37, 0xcf, 0xbb, 0x10, 0x13, 0x13, 0xe3, 0x69, 0x47, 0x8e, 0xd2, 0x1d, 0x34, 0x7a,
	0xe1, 0x4f, 0x30, 0x7c, 0xad, 0x83, 0x75, 0x0c, 0x35, 0x91, 0x1b, 0xa7, 0x7e, 0xdd, 0xf3, 0xbc,
	0xcf, 0xfb, 0xbc, 0x4f, 0xde, 0xae, 0xc5, 0x85, 0x26, 0x04, 0x8a, 0x4d, 0xd5, 0xc0, 0xac, 0x81,
	0xab, 0xab, 0x9e, 0x4f, 0x19, 0x35, 0xa9, 0x53, 0xb1, 0xeb, 0x81, 0x07, 0x26, 0xb3, 0x69, 0x5d,
	0x65, 0xbb, 0x1e, 0x04, 0x0a, 0x47, 0xa4, 0x1b, 0x11, 0x5d, 0x89, 0xe8, 0xca, 0x29, 0xf4, 0x5c,
	0xc1, 0xb2, 0x59, 0xad, 0x61, 0x28, 0x26, 0x75, 0x55, 0x8b, 0x5a, 0x34, 0xd2, 0x34, 0x1a, 0x5b,
	0xfc, 0x8e, 0xdf, 0xf0, 0x53, 0x54, 0x9c, 0x9b, 0xb1, 0x28, 0xb5, 0x1c, 0x38, 0x66, 0x31, 0xdb,
	0x85, 0x80, 0xe9, 0xae, 0x17, 0x13, 0xae, 0xf7, 0x3a, 0xa4, 0xde, 0x51, 0x97, 0xd8, 0x4f, 0x2e,
	0xdb, 0x0b, 0x9e, 0xb0, 0x9a, 0x9b, 0xea, 0x85, 0x9a, 0xba, 0x63, 0x57, 0x75, 0x06, 0x31, 0x2a,
	0x27, 0x50, 0x1b, 0x9e, 0x57, 0x7a, 0xa5, 0x67, 0xfa, 0x19, 0xc1, 0xc9, 0x06, 0xf9, 0x0f, 0x43,
	0x78, 0x7c, 0xd9, 0xa1, 0x86, 0xee, 0xac, 0x7b, 0x60, 0x6e, 0xec, 0x7a, 0x20, 0xbd, 0x42, 0x58,
	0x86, 0xba, 0x6e, 0x38, 0x50, 0xa9, 0xda, 0x01, 0xbf, 0x9a, 0xd4, 0xf5, 0x1c, 0x5b, 0xaf, 0x9b,
	0x50, 0x31, 0x6b, 0x60, 0x6e, 0x07, 0x19, 0x24, 0xa3, 0xd9, 0xb1, 0xb9, 0xfb, 0xca, 0x1f, 0xa3,
	0x54, 0xca, 0x5c, 0x6a, 0x29, 0x52, 0x2a, 0x75, 0x85, 0x4a, 0x5c, 0x47, 0x9b, 0x86, 0xb3, 0x60,
	0xa9, 0x89, 0xb3, 0x09, 0x2b, 0x81, 0x6d, 0xd5, 0x75, 0xd6, 0xf0, 0x21, 0xc8, 0x88, 0xdc, 0xc3,
	0xc2, 0xbf, 0x7a, 0x58, 0xef, 0x2a, 0x68, 0x69, 0x38, 0x1d, 0x90, 0x16, 0xf1, 0x88, 0xce, 0x4b,
	0x33, 0x43, 0x32, 0x9a, 0x1d, 0x9f, 0xbb, 0xfd, 0x17, 0x4d, 0x16, 0xf9, 0x45, 0x8b, 0x0b, 0x17,
	0x1e, 0x7f, 0x6c, 0xa1, 0x0d, 0x7c, 0x0b, 0xcb, 0x51, 0x73, 0x35, 0x6e, 0x22, 0x1f, 0xcf, 0x28,
	0xc7, 0x43, 0xa2, 0xbb, 0x98, 0xe0, 0x6c, 0x82, 0x76, 0xc2, 0x0c, 0x9a, 0xc3, 0x63, 0x78, 0x24,
	0x92, 0x97, 0xd0, 0x7c, 0xfe, 0x13, 0xc2, 0xe9, 0xf2, 0x40, 0xe3, 0xa9, 0x38, 0xb0, 0x6e, 0x50,
	0x71, 0x4e, 0x57, 0x12, 0x23, 0x94, 0x5d, 0x8f, 0xed, 0xae, 0x08, 0xda, 0x44, 0xc4, 0xef, 0x6a,
	0x48, 0x25, 0x3c, 0xd9, 0x17, 0x36, 0x8f, 0x61, 0xb0, 0x46, 0xaa, 0x9a, 0x30, 0x52, 0x9c, 0xc2,
	0xa9, 0x6e, 0x71, 0xc5, 0xac, 0x51, 0xdb, 0x04, 0x69, 0x74, 0xaf, 0x85, 0xc4, 0x76, 0x0b, 0xa1,
	0x07, 0xc3, 0xa3, 0x28, 0x25, 0xe6, 0xdf, 0x8a, 0x78, 0xfa, 0xcc, 0xed, 0x90, 0x76, 0x70, 0x26,
	0x9e, 0xa6, 0x7f, 0x03, 0xa3, 0xa9, 0xf2, 0x09, 0x47, 0x7c, 0xc3, 0x95, 0x35, 0xe3, 0x19, 0x98,
	0x4c, 0x83, 0xad, 0xa3, 0x85, 0x2e, 0x66, 0xde, 0xbf, 0xb8, 0x5a, 0xad, 0x07, 0xfd, 0x1a, 0x2b,
	0x82, 0x76, 0x2d, 0xd2, 0xef, 0xeb, 0xac, 0xe1, 0xec, 0xe0, 0xe5, 0x3f, 0x3b, 0x8c, 0x74, 0xf5,
	0xf4, 0x69, 0x8a, 0x37, 0x71, 0x3a, 0xa9, 0x35, 0x28, 0x9a, 0x1f, 0x22, 0x1e, 0x2f, 0xf9, 0xa0,
	0x33, 0xb8, 0x78, 0x2c, 0xff, 0xef, 0x63, 0x39, 0xf9, 0xe5, 0x5e, 0xe2, 0x0f, 0x2f, 0xff, 0x53,
	0xc4, 0x13, 0x1a, 0x78, 0x8e, 0x6e, 0x5e, 0xa4, 0x7d, 0xfe, 0x69, 0x7f, 0x13, 0xf1, 0xd8, 0x32,
	0xb0, 0x8b, 0xa4, 0xcf, 0x3b, 0xe9, 0x3b, 0x85, 0xee, 0x4b, 0xe3, 0x32, 0xbe, 0xb4, 0xb8, 0xba,
	0xba, 0xb6, 0x99, 0x12, 0xa4, 0x51, 0x3c, 0xbc, 0x54, 0x7e, 0xf8, 0x24, 0x85, 0xf8, 0x49, 0x5b,
	0x7b, 0x94, 0x12, 0x73, 0xc3, 0x7b, 0x2d, 0x24, 0x14, 0xdf, 0xa0, 0xf6, 0x01, 0x11, 0xf6, 0x0f,
	0x88, 0x70, 0x78, 0x40, 0xd0, 0xcb, 0x90, 0xa0, 0x77, 0x21, 0x41, 0x9f, 0x43, 0x82, 0xda, 0x21,
	0x41, 0xfb, 0x21, 0x41, 0x5f, 0x43, 0x82, 0xbe, 0x87, 0x44, 0x38, 0x0c, 0x09, 0x7a, 0xdd, 0x21,
	0xc2, 0x5e, 0x87, 0xa0, 0x76, 0x87, 0x08, 0xfb, 0x1d, 0x22, 0x3c, 0xdd, 0xb4, 0xa8, 0xb7, 0x6d,
	0x29, 0x4d, 0xea, 0x30, 0xf0, 0x7d, 0x5d, 0x69, 0x04, 0x2a, 0x3f, 0x6c, 0x51, 0xdf, 0x2d, 0x78,
	0x3e, 0x6d, 0xda, 0x55, 0xf0, 0x0b, 0xbf, 0x61, 0xd5, 0x33, 0x2c, 0xaa, 0xc2, 0x0e, 0x8b, 0xbf,
	0x4c, 0x06, 0x7f, 0xba, 0x19, 0x23, 0xfc, 0xc7, 0xf9, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2a,
	0x57, 0xe5, 0xef, 0xe6, 0x09, 0x00, 0x00,
}

func (x Action) String() string {
	s, ok := Action_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableDisableComplianceChecks.Equal(that1.EnableDisableComplianceChecks) {
		return false
	}
	if !this.EnableDisableSignatures.Equal(that1.EnableDisableSignatures) {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	return true
}
func (this *EnableDisableSignatures) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnableDisableSignatures)
	if !ok {
		that2, ok := that.(EnableDisableSignatures)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SignatureChoice == nil {
		if this.SignatureChoice != nil {
			return false
		}
	} else if this.SignatureChoice == nil {
		return false
	} else if !this.SignatureChoice.Equal(that1.SignatureChoice) {
		return false
	}
	return true
}
func (this *EnableDisableSignatures_EnableSignature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnableDisableSignatures_EnableSignature)
	if !ok {
		that2, ok := that.(EnableDisableSignatures_EnableSignature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableSignature.Equal(that1.EnableSignature) {
		return false
	}
	return true
}
func (this *EnableDisableSignatures_DisableSignature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnableDisableSignatures_DisableSignature)
	if !ok {
		that2, ok := that.(EnableDisableSignatures_DisableSignature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableSignature.Equal(that1.DisableSignature) {
		return false
	}
	return true
}
func (this *EnableDisableComplianceChecks) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnableDisableComplianceChecks)
	if !ok {
		that2, ok := that.(EnableDisableComplianceChecks)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ComplianceCheckChoice == nil {
		if this.ComplianceCheckChoice != nil {
			return false
		}
	} else if this.ComplianceCheckChoice == nil {
		return false
	} else if !this.ComplianceCheckChoice.Equal(that1.ComplianceCheckChoice) {
		return false
	}
	return true
}
func (this *EnableDisableComplianceChecks_EnableComplianceChecks) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnableDisableComplianceChecks_EnableComplianceChecks)
	if !ok {
		that2, ok := that.(EnableDisableComplianceChecks_EnableComplianceChecks)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableComplianceChecks.Equal(that1.EnableComplianceChecks) {
		return false
	}
	return true
}
func (this *EnableDisableComplianceChecks_DisableComplianceChecks) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnableDisableComplianceChecks_DisableComplianceChecks)
	if !ok {
		that2, ok := that.(EnableDisableComplianceChecks_DisableComplianceChecks)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableComplianceChecks.Equal(that1.DisableComplianceChecks) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableDisableComplianceChecks.Equal(that1.EnableDisableComplianceChecks) {
		return false
	}
	if !this.EnableDisableSignatures.Equal(that1.EnableDisableSignatures) {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableDisableComplianceChecks.Equal(that1.EnableDisableComplianceChecks) {
		return false
	}
	if !this.EnableDisableSignatures.Equal(that1.EnableDisableSignatures) {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableDisableComplianceChecks.Equal(that1.EnableDisableComplianceChecks) {
		return false
	}
	if !this.EnableDisableSignatures.Equal(that1.EnableDisableSignatures) {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&protocol_inspection.GlobalSpecType{")
	if this.EnableDisableComplianceChecks != nil {
		s = append(s, "EnableDisableComplianceChecks: "+fmt.Sprintf("%#v", this.EnableDisableComplianceChecks)+",\n")
	}
	if this.EnableDisableSignatures != nil {
		s = append(s, "EnableDisableSignatures: "+fmt.Sprintf("%#v", this.EnableDisableSignatures)+",\n")
	}
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnableDisableSignatures) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protocol_inspection.EnableDisableSignatures{")
	if this.SignatureChoice != nil {
		s = append(s, "SignatureChoice: "+fmt.Sprintf("%#v", this.SignatureChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnableDisableSignatures_EnableSignature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&protocol_inspection.EnableDisableSignatures_EnableSignature{` +
		`EnableSignature:` + fmt.Sprintf("%#v", this.EnableSignature) + `}`}, ", ")
	return s
}
func (this *EnableDisableSignatures_DisableSignature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&protocol_inspection.EnableDisableSignatures_DisableSignature{` +
		`DisableSignature:` + fmt.Sprintf("%#v", this.DisableSignature) + `}`}, ", ")
	return s
}
func (this *EnableDisableComplianceChecks) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protocol_inspection.EnableDisableComplianceChecks{")
	if this.ComplianceCheckChoice != nil {
		s = append(s, "ComplianceCheckChoice: "+fmt.Sprintf("%#v", this.ComplianceCheckChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnableDisableComplianceChecks_EnableComplianceChecks) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&protocol_inspection.EnableDisableComplianceChecks_EnableComplianceChecks{` +
		`EnableComplianceChecks:` + fmt.Sprintf("%#v", this.EnableComplianceChecks) + `}`}, ", ")
	return s
}
func (this *EnableDisableComplianceChecks_DisableComplianceChecks) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&protocol_inspection.EnableDisableComplianceChecks_DisableComplianceChecks{` +
		`DisableComplianceChecks:` + fmt.Sprintf("%#v", this.DisableComplianceChecks) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&protocol_inspection.CreateSpecType{")
	if this.EnableDisableComplianceChecks != nil {
		s = append(s, "EnableDisableComplianceChecks: "+fmt.Sprintf("%#v", this.EnableDisableComplianceChecks)+",\n")
	}
	if this.EnableDisableSignatures != nil {
		s = append(s, "EnableDisableSignatures: "+fmt.Sprintf("%#v", this.EnableDisableSignatures)+",\n")
	}
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&protocol_inspection.ReplaceSpecType{")
	if this.EnableDisableComplianceChecks != nil {
		s = append(s, "EnableDisableComplianceChecks: "+fmt.Sprintf("%#v", this.EnableDisableComplianceChecks)+",\n")
	}
	if this.EnableDisableSignatures != nil {
		s = append(s, "EnableDisableSignatures: "+fmt.Sprintf("%#v", this.EnableDisableSignatures)+",\n")
	}
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&protocol_inspection.GetSpecType{")
	if this.EnableDisableComplianceChecks != nil {
		s = append(s, "EnableDisableComplianceChecks: "+fmt.Sprintf("%#v", this.EnableDisableComplianceChecks)+",\n")
	}
	if this.EnableDisableSignatures != nil {
		s = append(s, "EnableDisableSignatures: "+fmt.Sprintf("%#v", this.EnableDisableSignatures)+",\n")
	}
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x18
	}
	if m.EnableDisableSignatures != nil {
		{
			size, err := m.EnableDisableSignatures.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EnableDisableComplianceChecks != nil {
		{
			size, err := m.EnableDisableComplianceChecks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnableDisableSignatures) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnableDisableSignatures) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableDisableSignatures) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignatureChoice != nil {
		{
			size := m.SignatureChoice.Size()
			i -= size
			if _, err := m.SignatureChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *EnableDisableSignatures_EnableSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableDisableSignatures_EnableSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableSignature != nil {
		{
			size, err := m.EnableSignature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *EnableDisableSignatures_DisableSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableDisableSignatures_DisableSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableSignature != nil {
		{
			size, err := m.DisableSignature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *EnableDisableComplianceChecks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnableDisableComplianceChecks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableDisableComplianceChecks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ComplianceCheckChoice != nil {
		{
			size := m.ComplianceCheckChoice.Size()
			i -= size
			if _, err := m.ComplianceCheckChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *EnableDisableComplianceChecks_EnableComplianceChecks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableDisableComplianceChecks_EnableComplianceChecks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableComplianceChecks != nil {
		{
			size, err := m.EnableComplianceChecks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *EnableDisableComplianceChecks_DisableComplianceChecks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableDisableComplianceChecks_DisableComplianceChecks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableComplianceChecks != nil {
		{
			size, err := m.DisableComplianceChecks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x18
	}
	if m.EnableDisableSignatures != nil {
		{
			size, err := m.EnableDisableSignatures.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EnableDisableComplianceChecks != nil {
		{
			size, err := m.EnableDisableComplianceChecks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x18
	}
	if m.EnableDisableSignatures != nil {
		{
			size, err := m.EnableDisableSignatures.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EnableDisableComplianceChecks != nil {
		{
			size, err := m.EnableDisableComplianceChecks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x18
	}
	if m.EnableDisableSignatures != nil {
		{
			size, err := m.EnableDisableSignatures.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EnableDisableComplianceChecks != nil {
		{
			size, err := m.EnableDisableComplianceChecks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableDisableComplianceChecks != nil {
		l = m.EnableDisableComplianceChecks.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EnableDisableSignatures != nil {
		l = m.EnableDisableSignatures.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovTypes(uint64(m.Action))
	}
	return n
}

func (m *EnableDisableSignatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignatureChoice != nil {
		n += m.SignatureChoice.Size()
	}
	return n
}

func (m *EnableDisableSignatures_EnableSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableSignature != nil {
		l = m.EnableSignature.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnableDisableSignatures_DisableSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableSignature != nil {
		l = m.DisableSignature.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnableDisableComplianceChecks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ComplianceCheckChoice != nil {
		n += m.ComplianceCheckChoice.Size()
	}
	return n
}

func (m *EnableDisableComplianceChecks_EnableComplianceChecks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableComplianceChecks != nil {
		l = m.EnableComplianceChecks.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EnableDisableComplianceChecks_DisableComplianceChecks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableComplianceChecks != nil {
		l = m.DisableComplianceChecks.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableDisableComplianceChecks != nil {
		l = m.EnableDisableComplianceChecks.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EnableDisableSignatures != nil {
		l = m.EnableDisableSignatures.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovTypes(uint64(m.Action))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableDisableComplianceChecks != nil {
		l = m.EnableDisableComplianceChecks.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EnableDisableSignatures != nil {
		l = m.EnableDisableSignatures.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovTypes(uint64(m.Action))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableDisableComplianceChecks != nil {
		l = m.EnableDisableComplianceChecks.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EnableDisableSignatures != nil {
		l = m.EnableDisableSignatures.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovTypes(uint64(m.Action))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`EnableDisableComplianceChecks:` + strings.Replace(this.EnableDisableComplianceChecks.String(), "EnableDisableComplianceChecks", "EnableDisableComplianceChecks", 1) + `,`,
		`EnableDisableSignatures:` + strings.Replace(this.EnableDisableSignatures.String(), "EnableDisableSignatures", "EnableDisableSignatures", 1) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnableDisableSignatures) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnableDisableSignatures{`,
		`SignatureChoice:` + fmt.Sprintf("%v", this.SignatureChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnableDisableSignatures_EnableSignature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnableDisableSignatures_EnableSignature{`,
		`EnableSignature:` + strings.Replace(fmt.Sprintf("%v", this.EnableSignature), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnableDisableSignatures_DisableSignature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnableDisableSignatures_DisableSignature{`,
		`DisableSignature:` + strings.Replace(fmt.Sprintf("%v", this.DisableSignature), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnableDisableComplianceChecks) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnableDisableComplianceChecks{`,
		`ComplianceCheckChoice:` + fmt.Sprintf("%v", this.ComplianceCheckChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnableDisableComplianceChecks_EnableComplianceChecks) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnableDisableComplianceChecks_EnableComplianceChecks{`,
		`EnableComplianceChecks:` + strings.Replace(fmt.Sprintf("%v", this.EnableComplianceChecks), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnableDisableComplianceChecks_DisableComplianceChecks) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnableDisableComplianceChecks_DisableComplianceChecks{`,
		`DisableComplianceChecks:` + strings.Replace(fmt.Sprintf("%v", this.DisableComplianceChecks), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`EnableDisableComplianceChecks:` + strings.Replace(this.EnableDisableComplianceChecks.String(), "EnableDisableComplianceChecks", "EnableDisableComplianceChecks", 1) + `,`,
		`EnableDisableSignatures:` + strings.Replace(this.EnableDisableSignatures.String(), "EnableDisableSignatures", "EnableDisableSignatures", 1) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`EnableDisableComplianceChecks:` + strings.Replace(this.EnableDisableComplianceChecks.String(), "EnableDisableComplianceChecks", "EnableDisableComplianceChecks", 1) + `,`,
		`EnableDisableSignatures:` + strings.Replace(this.EnableDisableSignatures.String(), "EnableDisableSignatures", "EnableDisableSignatures", 1) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`EnableDisableComplianceChecks:` + strings.Replace(this.EnableDisableComplianceChecks.String(), "EnableDisableComplianceChecks", "EnableDisableComplianceChecks", 1) + `,`,
		`EnableDisableSignatures:` + strings.Replace(this.EnableDisableSignatures.String(), "EnableDisableSignatures", "EnableDisableSignatures", 1) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDisableComplianceChecks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnableDisableComplianceChecks == nil {
				m.EnableDisableComplianceChecks = &EnableDisableComplianceChecks{}
			}
			if err := m.EnableDisableComplianceChecks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDisableSignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnableDisableSignatures == nil {
				m.EnableDisableSignatures = &EnableDisableSignatures{}
			}
			if err := m.EnableDisableSignatures.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnableDisableSignatures) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnableDisableSignatures: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnableDisableSignatures: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SignatureChoice = &EnableDisableSignatures_EnableSignature{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SignatureChoice = &EnableDisableSignatures_DisableSignature{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnableDisableComplianceChecks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnableDisableComplianceChecks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnableDisableComplianceChecks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableComplianceChecks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ComplianceCheckChoice = &EnableDisableComplianceChecks_EnableComplianceChecks{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableComplianceChecks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ComplianceCheckChoice = &EnableDisableComplianceChecks_DisableComplianceChecks{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDisableComplianceChecks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnableDisableComplianceChecks == nil {
				m.EnableDisableComplianceChecks = &EnableDisableComplianceChecks{}
			}
			if err := m.EnableDisableComplianceChecks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDisableSignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnableDisableSignatures == nil {
				m.EnableDisableSignatures = &EnableDisableSignatures{}
			}
			if err := m.EnableDisableSignatures.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDisableComplianceChecks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnableDisableComplianceChecks == nil {
				m.EnableDisableComplianceChecks = &EnableDisableComplianceChecks{}
			}
			if err := m.EnableDisableComplianceChecks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDisableSignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnableDisableSignatures == nil {
				m.EnableDisableSignatures = &EnableDisableSignatures{}
			}
			if err := m.EnableDisableSignatures.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDisableComplianceChecks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnableDisableComplianceChecks == nil {
				m.EnableDisableComplianceChecks = &EnableDisableComplianceChecks{}
			}
			if err := m.EnableDisableComplianceChecks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDisableSignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnableDisableSignatures == nil {
				m.EnableDisableSignatures = &EnableDisableSignatures{}
			}
			if err := m.EnableDisableSignatures.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
