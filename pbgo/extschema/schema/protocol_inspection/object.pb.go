// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/protocol_inspection/object.proto

package protocol_inspection

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PROTOCOL INSPECTION Deployment Status
//
// x-displayName: "Protocol Inspection Deployment Status"
// Deployment Status of Protocol Inspection
type ProtocolInspectionDeploymentStatus int32

const (
	// x-displayName: "Protocol Inspection Active"
	// Protocol Inspection is successfully deployed and active
	PROTOCOL_INSPECTION_CONFIG_ACTIVE ProtocolInspectionDeploymentStatus = 0
	// x-displayName: "Protocol Inspection Pending"
	// Deployment of Protocol Inspection is pending
	PROTOCOL_INSPECTION_CONFIG_PENDING ProtocolInspectionDeploymentStatus = 1
	// x-displayName: "Protocol Inspection Disabled"
	// Protocol Inspection has been disabled.
	PROTOCOL_INSPECTION_CONFIG_DISABLED ProtocolInspectionDeploymentStatus = 2
	// x-displayName: "Protocol Inspection Deployment Failed"
	// Protocol Inspection deployment encountered an error.
	PROTOCOL_INSPECTION_CONFIG_FAILED ProtocolInspectionDeploymentStatus = 3
)

var ProtocolInspectionDeploymentStatus_name = map[int32]string{
	0: "PROTOCOL_INSPECTION_CONFIG_ACTIVE",
	1: "PROTOCOL_INSPECTION_CONFIG_PENDING",
	2: "PROTOCOL_INSPECTION_CONFIG_DISABLED",
	3: "PROTOCOL_INSPECTION_CONFIG_FAILED",
}

var ProtocolInspectionDeploymentStatus_value = map[string]int32{
	"PROTOCOL_INSPECTION_CONFIG_ACTIVE":   0,
	"PROTOCOL_INSPECTION_CONFIG_PENDING":  1,
	"PROTOCOL_INSPECTION_CONFIG_DISABLED": 2,
	"PROTOCOL_INSPECTION_CONFIG_FAILED":   3,
}

func (ProtocolInspectionDeploymentStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a5962992a9a7e2f1, []int{0}
}

// Protocol Inspection
//
// x-displayName: "Protocol Inspection"
// Protocol Inspection object
type Object struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// Standard object's metadata
	Metadata *schema.ObjectMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// system_metadata
	//
	// x-displayName: "System Metadata"
	// System generated object's metadata
	SystemMetadata *schema.SystemObjectMetaType `protobuf:"bytes,2,opt,name=system_metadata,json=systemMetadata,proto3" json:"system_metadata,omitempty"`
	// spec
	//
	// x-displayName: "Spec"
	// Specification of the desired behavior of the Protocol Inspection
	Spec *SpecType `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *Object) Reset()      { *m = Object{} }
func (*Object) ProtoMessage() {}
func (*Object) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5962992a9a7e2f1, []int{0}
}
func (m *Object) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Object) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Object) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Object.Merge(m, src)
}
func (m *Object) XXX_Size() int {
	return m.Size()
}
func (m *Object) XXX_DiscardUnknown() {
	xxx_messageInfo_Object.DiscardUnknown(m)
}

var xxx_messageInfo_Object proto.InternalMessageInfo

func (m *Object) GetMetadata() *schema.ObjectMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Object) GetSystemMetadata() *schema.SystemObjectMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *Object) GetSpec() *SpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

// Protocol Inspection specification
//
// x-displayName: "Specification"
// Protocol Inspection specification
type SpecType struct {
	// gc_spec
	//
	// x-displayName: "GC Spec"
	GcSpec *GlobalSpecType `protobuf:"bytes,2,opt,name=gc_spec,json=gcSpec,proto3" json:"gc_spec,omitempty"`
}

func (m *SpecType) Reset()      { *m = SpecType{} }
func (*SpecType) ProtoMessage() {}
func (*SpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5962992a9a7e2f1, []int{1}
}
func (m *SpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecType.Merge(m, src)
}
func (m *SpecType) XXX_Size() int {
	return m.Size()
}
func (m *SpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecType.DiscardUnknown(m)
}

var xxx_messageInfo_SpecType proto.InternalMessageInfo

func (m *SpecType) GetGcSpec() *GlobalSpecType {
	if m != nil {
		return m.GcSpec
	}
	return nil
}

// Protocol Inspection Status
//
// x-displayName: "Protocol Inspection Status"
// Status Protocol Inspection
type ProtocolInspectionStatus struct {
	// Protocol Inspection Deployment Status
	//
	// x-displayName: "Protocol Inspection Deployment Status"
	// Status of Protocol Inspection Deployment
	DeploymentStatus ProtocolInspectionDeploymentStatus `protobuf:"varint,2,opt,name=deployment_status,json=deploymentStatus,proto3,enum=ves.io.schema.protocol_inspection.ProtocolInspectionDeploymentStatus" json:"deployment_status,omitempty"`
}

func (m *ProtocolInspectionStatus) Reset()      { *m = ProtocolInspectionStatus{} }
func (*ProtocolInspectionStatus) ProtoMessage() {}
func (*ProtocolInspectionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5962992a9a7e2f1, []int{2}
}
func (m *ProtocolInspectionStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtocolInspectionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtocolInspectionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolInspectionStatus.Merge(m, src)
}
func (m *ProtocolInspectionStatus) XXX_Size() int {
	return m.Size()
}
func (m *ProtocolInspectionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolInspectionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolInspectionStatus proto.InternalMessageInfo

func (m *ProtocolInspectionStatus) GetDeploymentStatus() ProtocolInspectionDeploymentStatus {
	if m != nil {
		return m.DeploymentStatus
	}
	return PROTOCOL_INSPECTION_CONFIG_ACTIVE
}

// Status of PROTOCOL INSPECTION
//
// x-displayName: "Status"
// Most recently observed status of object
type StatusObject struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// Standard status's metadata
	Metadata *schema.StatusMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// object_refs
	//
	// x-displayName: "Config Object"
	// Reference to object for current status
	ObjectRefs []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=object_refs,json=objectRefs,proto3" json:"object_refs,omitempty"`
	// conditions
	//
	// x-displayName: "Conditions"
	// Conditions reported by various component of the system
	Conditions []*schema.ConditionType `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// Verification Status
	//
	// x-displayName: "Verification Status"
	// Verification Status of the PROTOCOL INSPECTION
	VerificationStatus *ProtocolInspectionStatus `protobuf:"bytes,4,opt,name=verification_status,json=verificationStatus,proto3" json:"verification_status,omitempty"`
}

func (m *StatusObject) Reset()      { *m = StatusObject{} }
func (*StatusObject) ProtoMessage() {}
func (*StatusObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5962992a9a7e2f1, []int{3}
}
func (m *StatusObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StatusObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusObject.Merge(m, src)
}
func (m *StatusObject) XXX_Size() int {
	return m.Size()
}
func (m *StatusObject) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusObject.DiscardUnknown(m)
}

var xxx_messageInfo_StatusObject proto.InternalMessageInfo

func (m *StatusObject) GetMetadata() *schema.StatusMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *StatusObject) GetObjectRefs() []*schema.ObjectRefType {
	if m != nil {
		return m.ObjectRefs
	}
	return nil
}

func (m *StatusObject) GetConditions() []*schema.ConditionType {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *StatusObject) GetVerificationStatus() *ProtocolInspectionStatus {
	if m != nil {
		return m.VerificationStatus
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.protocol_inspection.ProtocolInspectionDeploymentStatus", ProtocolInspectionDeploymentStatus_name, ProtocolInspectionDeploymentStatus_value)
	golang_proto.RegisterEnum("ves.io.schema.protocol_inspection.ProtocolInspectionDeploymentStatus", ProtocolInspectionDeploymentStatus_name, ProtocolInspectionDeploymentStatus_value)
	proto.RegisterType((*Object)(nil), "ves.io.schema.protocol_inspection.Object")
	golang_proto.RegisterType((*Object)(nil), "ves.io.schema.protocol_inspection.Object")
	proto.RegisterType((*SpecType)(nil), "ves.io.schema.protocol_inspection.SpecType")
	golang_proto.RegisterType((*SpecType)(nil), "ves.io.schema.protocol_inspection.SpecType")
	proto.RegisterType((*ProtocolInspectionStatus)(nil), "ves.io.schema.protocol_inspection.ProtocolInspectionStatus")
	golang_proto.RegisterType((*ProtocolInspectionStatus)(nil), "ves.io.schema.protocol_inspection.ProtocolInspectionStatus")
	proto.RegisterType((*StatusObject)(nil), "ves.io.schema.protocol_inspection.StatusObject")
	golang_proto.RegisterType((*StatusObject)(nil), "ves.io.schema.protocol_inspection.StatusObject")
}

func init() {
	proto.RegisterFile("ves.io/schema/protocol_inspection/object.proto", fileDescriptor_a5962992a9a7e2f1)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/protocol_inspection/object.proto", fileDescriptor_a5962992a9a7e2f1)
}

var fileDescriptor_a5962992a9a7e2f1 = []byte{
	// 676 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xbd, 0x49, 0x55, 0xaa, 0x6d, 0x55, 0x82, 0x2b, 0x50, 0x28, 0xb0, 0xb4, 0xae, 0x80,
	0x0a, 0x14, 0x5b, 0x94, 0x13, 0x05, 0x81, 0xda, 0x24, 0xad, 0x8c, 0xda, 0x24, 0x4a, 0x42, 0x91,
	0xb8, 0x58, 0x8e, 0xb3, 0x71, 0x0d, 0x49, 0xd6, 0xf2, 0xae, 0x0d, 0x39, 0x20, 0xf1, 0x04, 0x88,
	0x0b, 0xef, 0x80, 0x78, 0x0a, 0x0a, 0x17, 0xc4, 0xa9, 0xe2, 0xd4, 0x23, 0x71, 0x2e, 0x1c, 0x2b,
	0xf1, 0x02, 0xc8, 0xbb, 0x71, 0xd4, 0x84, 0xd0, 0x54, 0xdc, 0xd6, 0x33, 0xdf, 0xfc, 0xff, 0x78,
	0xc6, 0x5e, 0xa8, 0x06, 0x98, 0xaa, 0x0e, 0xd1, 0xa8, 0xb5, 0x8f, 0x5b, 0xa6, 0xe6, 0x7a, 0x84,
	0x11, 0x8b, 0x34, 0x0d, 0xa7, 0x4d, 0x5d, 0x6c, 0x31, 0x87, 0xb4, 0x35, 0x52, 0x7b, 0x81, 0x2d,
	0xa6, 0xf2, 0x94, 0xbc, 0x2c, 0x78, 0x55, 0xf0, 0xea, 0x18, 0x7e, 0x31, 0x63, 0x3b, 0x6c, 0xdf,
	0xaf, 0xa9, 0x16, 0x69, 0x69, 0x36, 0xb1, 0x89, 0x10, 0xad, 0xf9, 0x0d, 0xfe, 0xc4, 0x1f, 0xf8,
	0x49, 0x14, 0x2f, 0x5e, 0x19, 0xee, 0x80, 0xb8, 0x91, 0x08, 0xed, 0x27, 0x33, 0x93, 0xdb, 0x63,
	0x1d, 0x17, 0xc7, 0xf8, 0xe5, 0x61, 0xfc, 0x64, 0x4a, 0x19, 0x4e, 0x05, 0x98, 0xe2, 0x76, 0x30,
	0xe2, 0xb6, 0x34, 0xc2, 0x38, 0xf8, 0x95, 0x31, 0x44, 0x28, 0xbf, 0x01, 0x9c, 0x2e, 0xf2, 0x79,
	0xc8, 0xf7, 0xe1, 0x4c, 0x0b, 0x33, 0xb3, 0x6e, 0x32, 0x33, 0x0d, 0x96, 0xc0, 0xea, 0xec, 0xda,
	0x35, 0x75, 0x78, 0x38, 0x02, 0xdc, 0xc5, 0xcc, 0xac, 0x76, 0x5c, 0x5c, 0x1e, 0xe0, 0xf2, 0x0e,
	0x3c, 0x4f, 0x3b, 0x94, 0xe1, 0x96, 0x31, 0x50, 0x48, 0x70, 0x85, 0x95, 0x11, 0x85, 0x0a, 0xa7,
	0x46, 0x74, 0xe6, 0x45, 0xed, 0x6e, 0xac, 0xf6, 0x18, 0x4e, 0x45, 0xc3, 0x48, 0x27, 0xb9, 0xc4,
	0x1d, 0x75, 0xe2, 0x86, 0xd4, 0x8a, 0x8b, 0x2d, 0x2e, 0xc5, 0x0b, 0xd7, 0xaf, 0x7f, 0x39, 0x48,
	0x27, 0x52, 0xe0, 0xfb, 0x41, 0xfa, 0x62, 0x80, 0x69, 0xc6, 0x21, 0x19, 0xa7, 0xdd, 0xf0, 0x4c,
	0xca, 0x3c, 0xdf, 0x62, 0xbe, 0x87, 0x95, 0x3d, 0x38, 0x13, 0x97, 0xc8, 0x4f, 0xe0, 0x39, 0xdb,
	0x32, 0xb8, 0xa1, 0xe8, 0xf9, 0xee, 0x19, 0x0c, 0xb7, 0x9b, 0xa4, 0x66, 0x36, 0x07, 0xb6, 0xd3,
	0xb6, 0x15, 0x9d, 0x95, 0x77, 0x00, 0xa6, 0x4b, 0x7d, 0x5c, 0x1f, 0xd0, 0x15, 0x66, 0x32, 0x9f,
	0xca, 0x1e, 0xbc, 0x50, 0xc7, 0x6e, 0x93, 0x74, 0x5a, 0xb8, 0xcd, 0x0c, 0xca, 0x83, 0xdc, 0x72,
	0x7e, 0x2d, 0x7f, 0x06, 0xcb, 0xbf, 0x75, 0x73, 0x03, 0x35, 0xe1, 0x50, 0x4e, 0xd5, 0x47, 0x22,
	0x4a, 0x37, 0x01, 0xe7, 0xc4, 0xf1, 0xcc, 0x4b, 0x16, 0xf8, 0x98, 0x25, 0x3f, 0x85, 0xb3, 0xe2,
	0xcf, 0x31, 0x3c, 0xdc, 0x88, 0x3a, 0x4f, 0xae, 0xce, 0xae, 0x5d, 0x1d, 0xfb, 0x89, 0x94, 0x71,
	0x23, 0x2a, 0xde, 0xbc, 0xf4, 0xe9, 0xcd, 0xc2, 0x98, 0x77, 0x29, 0x43, 0x12, 0x63, 0x54, 0x7e,
	0x08, 0xa1, 0x45, 0xda, 0x75, 0x87, 0x7f, 0x95, 0xe9, 0xe4, 0x58, 0xd5, 0x6c, 0x0c, 0xf0, 0x96,
	0x4e, 0xf0, 0x72, 0x13, 0x2e, 0x04, 0xd8, 0x73, 0x1a, 0x8e, 0x65, 0x46, 0x81, 0x78, 0xac, 0x53,
	0xfc, 0xd5, 0x1e, 0xfc, 0xd7, 0x58, 0xfb, 0xc3, 0x94, 0x4f, 0xea, 0x8a, 0xd8, 0xfa, 0xc2, 0x8f,
	0x47, 0x29, 0x38, 0x0f, 0xe7, 0xe2, 0x99, 0xa8, 0xbe, 0x53, 0xbf, 0xfd, 0x15, 0x40, 0x65, 0xf2,
	0x72, 0xe4, 0x1b, 0x70, 0xb9, 0x54, 0x2e, 0x56, 0x8b, 0xd9, 0xe2, 0x8e, 0xa1, 0x17, 0x2a, 0xa5,
	0x7c, 0xb6, 0xaa, 0x17, 0x0b, 0x46, 0xb6, 0x58, 0xd8, 0xd2, 0xb7, 0x8d, 0x8d, 0x6c, 0x55, 0xdf,
	0xcb, 0xa7, 0x24, 0xf9, 0x26, 0x54, 0x4e, 0xc1, 0x4a, 0xf9, 0x42, 0x4e, 0x2f, 0x6c, 0xa7, 0x80,
	0x7c, 0x0b, 0xae, 0x9c, 0xc2, 0xe5, 0xf4, 0xca, 0xc6, 0xe6, 0x4e, 0x3e, 0x97, 0x4a, 0x4c, 0xf0,
	0xdd, 0xda, 0xd0, 0x23, 0x2c, 0xb9, 0xf9, 0x01, 0x1c, 0x76, 0x91, 0x74, 0xd4, 0x45, 0xd2, 0x71,
	0x17, 0x81, 0xb7, 0x21, 0x02, 0x1f, 0x43, 0x04, 0xbe, 0x85, 0x08, 0x1c, 0x86, 0x08, 0x1c, 0x85,
	0x08, 0xfc, 0x0c, 0x11, 0xf8, 0x15, 0x22, 0xe9, 0x38, 0x44, 0xe0, 0x7d, 0x0f, 0x49, 0x9f, 0x7b,
	0x08, 0x1c, 0xf6, 0x90, 0x74, 0xd4, 0x43, 0xd2, 0xf3, 0x67, 0x36, 0x71, 0x5f, 0xda, 0x6a, 0x40,
	0x9a, 0x0c, 0x7b, 0x9e, 0xa9, 0xfa, 0x54, 0xe3, 0x87, 0x06, 0xf1, 0x5a, 0x19, 0xd7, 0x23, 0x81,
	0x53, 0xc7, 0x5e, 0x26, 0x4e, 0x6b, 0x6e, 0xcd, 0x26, 0x1a, 0x7e, 0xcd, 0xfa, 0x17, 0xd3, 0xbf,
	0x6f, 0xc3, 0xda, 0x34, 0x0f, 0xde, 0xfb, 0x13, 0x00, 0x00, 0xff, 0xff, 0xeb, 0xb6, 0xdd, 0x75,
	0xd8, 0x05, 0x00, 0x00,
}

func (x ProtocolInspectionDeploymentStatus) String() string {
	s, ok := ProtocolInspectionDeploymentStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Object) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Object)
	if !ok {
		that2, ok := that.(Object)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *SpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SpecType)
	if !ok {
		that2, ok := that.(SpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GcSpec.Equal(that1.GcSpec) {
		return false
	}
	return true
}
func (this *ProtocolInspectionStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtocolInspectionStatus)
	if !ok {
		that2, ok := that.(ProtocolInspectionStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DeploymentStatus != that1.DeploymentStatus {
		return false
	}
	return true
}
func (this *StatusObject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusObject)
	if !ok {
		that2, ok := that.(StatusObject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if len(this.ObjectRefs) != len(that1.ObjectRefs) {
		return false
	}
	for i := range this.ObjectRefs {
		if !this.ObjectRefs[i].Equal(that1.ObjectRefs[i]) {
			return false
		}
	}
	if len(this.Conditions) != len(that1.Conditions) {
		return false
	}
	for i := range this.Conditions {
		if !this.Conditions[i].Equal(that1.Conditions[i]) {
			return false
		}
	}
	if !this.VerificationStatus.Equal(that1.VerificationStatus) {
		return false
	}
	return true
}
func (this *Object) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&protocol_inspection.Object{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protocol_inspection.SpecType{")
	if this.GcSpec != nil {
		s = append(s, "GcSpec: "+fmt.Sprintf("%#v", this.GcSpec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtocolInspectionStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protocol_inspection.ProtocolInspectionStatus{")
	s = append(s, "DeploymentStatus: "+fmt.Sprintf("%#v", this.DeploymentStatus)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StatusObject) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&protocol_inspection.StatusObject{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.ObjectRefs != nil {
		s = append(s, "ObjectRefs: "+fmt.Sprintf("%#v", this.ObjectRefs)+",\n")
	}
	if this.Conditions != nil {
		s = append(s, "Conditions: "+fmt.Sprintf("%#v", this.Conditions)+",\n")
	}
	if this.VerificationStatus != nil {
		s = append(s, "VerificationStatus: "+fmt.Sprintf("%#v", this.VerificationStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringObject(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Object) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Object) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Object) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SystemMetadata != nil {
		{
			size, err := m.SystemMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GcSpec != nil {
		{
			size, err := m.GcSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ProtocolInspectionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtocolInspectionStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtocolInspectionStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeploymentStatus != 0 {
		i = encodeVarintObject(dAtA, i, uint64(m.DeploymentStatus))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *StatusObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VerificationStatus != nil {
		{
			size, err := m.VerificationStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintObject(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ObjectRefs) > 0 {
		for iNdEx := len(m.ObjectRefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ObjectRefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintObject(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintObject(dAtA []byte, offset int, v uint64) int {
	offset -= sovObject(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Object) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func (m *SpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GcSpec != nil {
		l = m.GcSpec.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func (m *ProtocolInspectionStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeploymentStatus != 0 {
		n += 1 + sovObject(uint64(m.DeploymentStatus))
	}
	return n
}

func (m *StatusObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if len(m.ObjectRefs) > 0 {
		for _, e := range m.ObjectRefs {
			l = e.Size()
			n += 1 + l + sovObject(uint64(l))
		}
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovObject(uint64(l))
		}
	}
	if m.VerificationStatus != nil {
		l = m.VerificationStatus.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func sovObject(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozObject(x uint64) (n int) {
	return sovObject(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Object) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Object{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectMetaType", "schema.ObjectMetaType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectMetaType", "schema.SystemObjectMetaType", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "SpecType", "SpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpecType{`,
		`GcSpec:` + strings.Replace(fmt.Sprintf("%v", this.GcSpec), "GlobalSpecType", "GlobalSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProtocolInspectionStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProtocolInspectionStatus{`,
		`DeploymentStatus:` + fmt.Sprintf("%v", this.DeploymentStatus) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatusObject) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForObjectRefs := "[]*ObjectRefType{"
	for _, f := range this.ObjectRefs {
		repeatedStringForObjectRefs += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForObjectRefs += "}"
	repeatedStringForConditions := "[]*ConditionType{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += strings.Replace(fmt.Sprintf("%v", f), "ConditionType", "schema.ConditionType", 1) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&StatusObject{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "StatusMetaType", "schema.StatusMetaType", 1) + `,`,
		`ObjectRefs:` + repeatedStringForObjectRefs + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`VerificationStatus:` + strings.Replace(this.VerificationStatus.String(), "ProtocolInspectionStatus", "ProtocolInspectionStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringObject(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Object) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Object: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Object: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &schema.SystemObjectMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &SpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GcSpec == nil {
				m.GcSpec = &GlobalSpecType{}
			}
			if err := m.GcSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtocolInspectionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtocolInspectionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtocolInspectionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentStatus", wireType)
			}
			m.DeploymentStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeploymentStatus |= ProtocolInspectionDeploymentStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.StatusMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectRefs = append(m.ObjectRefs, &schema.ObjectRefType{})
			if err := m.ObjectRefs[len(m.ObjectRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, &schema.ConditionType{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VerificationStatus == nil {
				m.VerificationStatus = &ProtocolInspectionStatus{}
			}
			if err := m.VerificationStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipObject(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowObject
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthObject
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupObject
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthObject
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthObject        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowObject          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupObject = fmt.Errorf("proto: unexpected end of group")
)
