// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/infraprotect_asn_prefix/types.proto

package infraprotect_asn_prefix

import (
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GlobalSpecType
//
// x-displayName: "DDos Transit ASN Prefix"
// DDos Transit ASN Prefix spec
type GlobalSpecType struct {
	// ASN
	//
	// x-displayName: "ASN"
	// x-example: "12345"
	// x-required
	// ASN
	Asn *views.ObjectRefType `protobuf:"bytes,1,opt,name=asn,proto3" json:"asn,omitempty"`
	// Prefix
	//
	// x-displayName: "Prefix"
	// x-example: "10.10.10.0/24"
	// Prefix
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// ReviewStatus
	//
	// x-displayName: "Review Status"
	// x-required
	// x-example: "approved"
	// Review for Prefix
	//
	// Types that are valid to be assigned to ReviewType:
	//	*GlobalSpecType_ReviewTypePending
	//	*GlobalSpecType_ReviewTypeApproved
	//	*GlobalSpecType_ReviewTypeRejected
	ReviewType isGlobalSpecType_ReviewType `protobuf_oneof:"review_type"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbbc0fe7d928a277, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_ReviewType interface {
	isGlobalSpecType_ReviewType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_ReviewTypePending struct {
	ReviewTypePending *schema.Empty `protobuf:"bytes,4,opt,name=review_type_pending,json=reviewTypePending,proto3,oneof" json:"review_type_pending,omitempty"`
}
type GlobalSpecType_ReviewTypeApproved struct {
	ReviewTypeApproved *schema.Empty `protobuf:"bytes,5,opt,name=review_type_approved,json=reviewTypeApproved,proto3,oneof" json:"review_type_approved,omitempty"`
}
type GlobalSpecType_ReviewTypeRejected struct {
	ReviewTypeRejected *schema.Empty `protobuf:"bytes,6,opt,name=review_type_rejected,json=reviewTypeRejected,proto3,oneof" json:"review_type_rejected,omitempty"`
}

func (*GlobalSpecType_ReviewTypePending) isGlobalSpecType_ReviewType()  {}
func (*GlobalSpecType_ReviewTypeApproved) isGlobalSpecType_ReviewType() {}
func (*GlobalSpecType_ReviewTypeRejected) isGlobalSpecType_ReviewType() {}

func (m *GlobalSpecType) GetReviewType() isGlobalSpecType_ReviewType {
	if m != nil {
		return m.ReviewType
	}
	return nil
}

func (m *GlobalSpecType) GetAsn() *views.ObjectRefType {
	if m != nil {
		return m.Asn
	}
	return nil
}

func (m *GlobalSpecType) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *GlobalSpecType) GetReviewTypePending() *schema.Empty {
	if x, ok := m.GetReviewType().(*GlobalSpecType_ReviewTypePending); ok {
		return x.ReviewTypePending
	}
	return nil
}

func (m *GlobalSpecType) GetReviewTypeApproved() *schema.Empty {
	if x, ok := m.GetReviewType().(*GlobalSpecType_ReviewTypeApproved); ok {
		return x.ReviewTypeApproved
	}
	return nil
}

func (m *GlobalSpecType) GetReviewTypeRejected() *schema.Empty {
	if x, ok := m.GetReviewType().(*GlobalSpecType_ReviewTypeRejected); ok {
		return x.ReviewTypeRejected
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_ReviewTypePending)(nil),
		(*GlobalSpecType_ReviewTypeApproved)(nil),
		(*GlobalSpecType_ReviewTypeRejected)(nil),
	}
}

// DDoS transit ASN Prefix
//
// x-displayName: "Create DDoS transit ASN Prefix"
// Creates a DDoS transit ASN Prefix
type CreateSpecType struct {
	Asn    *views.ObjectRefType `protobuf:"bytes,1,opt,name=asn,proto3" json:"asn,omitempty"`
	Prefix string               `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbbc0fe7d928a277, []int{1}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetAsn() *views.ObjectRefType {
	if m != nil {
		return m.Asn
	}
	return nil
}

func (m *CreateSpecType) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

// DDoS transit ASN
//
// x-displayName: "Replace DDoS transit ASN Prefix"
// Amends a DDoS transit ASN Prefix
type ReplaceSpecType struct {
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbbc0fe7d928a277, []int{2}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

// Get DDoS transit ASN Prefix
//
// x-displayName: "Get Infraprotect ASN Prefix"
// Get DDoS transit ASN Prefix
type GetSpecType struct {
	Asn    *views.ObjectRefType `protobuf:"bytes,1,opt,name=asn,proto3" json:"asn,omitempty"`
	Prefix string               `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Types that are valid to be assigned to ReviewType:
	//	*GetSpecType_ReviewTypePending
	//	*GetSpecType_ReviewTypeApproved
	//	*GetSpecType_ReviewTypeRejected
	ReviewType isGetSpecType_ReviewType `protobuf_oneof:"review_type"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbbc0fe7d928a277, []int{3}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_ReviewType interface {
	isGetSpecType_ReviewType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_ReviewTypePending struct {
	ReviewTypePending *schema.Empty `protobuf:"bytes,4,opt,name=review_type_pending,json=reviewTypePending,proto3,oneof" json:"review_type_pending,omitempty"`
}
type GetSpecType_ReviewTypeApproved struct {
	ReviewTypeApproved *schema.Empty `protobuf:"bytes,5,opt,name=review_type_approved,json=reviewTypeApproved,proto3,oneof" json:"review_type_approved,omitempty"`
}
type GetSpecType_ReviewTypeRejected struct {
	ReviewTypeRejected *schema.Empty `protobuf:"bytes,6,opt,name=review_type_rejected,json=reviewTypeRejected,proto3,oneof" json:"review_type_rejected,omitempty"`
}

func (*GetSpecType_ReviewTypePending) isGetSpecType_ReviewType()  {}
func (*GetSpecType_ReviewTypeApproved) isGetSpecType_ReviewType() {}
func (*GetSpecType_ReviewTypeRejected) isGetSpecType_ReviewType() {}

func (m *GetSpecType) GetReviewType() isGetSpecType_ReviewType {
	if m != nil {
		return m.ReviewType
	}
	return nil
}

func (m *GetSpecType) GetAsn() *views.ObjectRefType {
	if m != nil {
		return m.Asn
	}
	return nil
}

func (m *GetSpecType) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *GetSpecType) GetReviewTypePending() *schema.Empty {
	if x, ok := m.GetReviewType().(*GetSpecType_ReviewTypePending); ok {
		return x.ReviewTypePending
	}
	return nil
}

func (m *GetSpecType) GetReviewTypeApproved() *schema.Empty {
	if x, ok := m.GetReviewType().(*GetSpecType_ReviewTypeApproved); ok {
		return x.ReviewTypeApproved
	}
	return nil
}

func (m *GetSpecType) GetReviewTypeRejected() *schema.Empty {
	if x, ok := m.GetReviewType().(*GetSpecType_ReviewTypeRejected); ok {
		return x.ReviewTypeRejected
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_ReviewTypePending)(nil),
		(*GetSpecType_ReviewTypeApproved)(nil),
		(*GetSpecType_ReviewTypeRejected)(nil),
	}
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.infraprotect_asn_prefix.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.infraprotect_asn_prefix.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.infraprotect_asn_prefix.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.infraprotect_asn_prefix.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.infraprotect_asn_prefix.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.infraprotect_asn_prefix.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.infraprotect_asn_prefix.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.infraprotect_asn_prefix.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/infraprotect_asn_prefix/types.proto", fileDescriptor_cbbc0fe7d928a277)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/infraprotect_asn_prefix/types.proto", fileDescriptor_cbbc0fe7d928a277)
}

var fileDescriptor_cbbc0fe7d928a277 = []byte{
	// 571 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x94, 0x3f, 0x6f, 0xd3, 0x4e,
	0x18, 0xc7, 0x7d, 0x75, 0x1a, 0xf5, 0xe7, 0x48, 0x69, 0xeb, 0x5f, 0x45, 0x43, 0xa8, 0x8e, 0x28,
	0x02, 0xd4, 0x25, 0xb6, 0xf8, 0x33, 0x31, 0x20, 0x11, 0x04, 0xad, 0x90, 0x10, 0xc8, 0x30, 0xc1,
	0x10, 0x9d, 0x9d, 0x27, 0xee, 0x81, 0xe3, 0x3b, 0xce, 0x97, 0xd0, 0x0c, 0x48, 0xa8, 0xaf, 0x80,
	0x95, 0x77, 0x80, 0x78, 0x05, 0x88, 0x2c, 0x19, 0x11, 0x53, 0xc6, 0x8c, 0xc4, 0x59, 0x80, 0xa9,
	0x23, 0x62, 0x42, 0xfe, 0xd3, 0x10, 0x9b, 0x52, 0xc1, 0xc0, 0xc2, 0x76, 0xe7, 0xef, 0x7d, 0x3f,
	0xf7, 0x3c, 0xdf, 0xc7, 0x3a, 0xed, 0x62, 0x1f, 0x02, 0x83, 0x32, 0x33, 0x70, 0xf6, 0xa0, 0x4b,
	0x4c, 0xea, 0x77, 0x04, 0xe1, 0x82, 0x49, 0x70, 0x64, 0x8b, 0x04, 0x7e, 0x8b, 0x0b, 0xe8, 0xd0,
	0x7d, 0x53, 0x0e, 0x38, 0x04, 0x46, 0x24, 0x30, 0xfd, 0x7c, 0x62, 0x31, 0x12, 0x8b, 0xf1, 0x0b,
	0x4b, 0xb5, 0xe1, 0x52, 0xb9, 0xd7, 0xb3, 0x0d, 0x87, 0x75, 0x4d, 0x97, 0xb9, 0xcc, 0x8c, 0xdd,
	0x76, 0xaf, 0x13, 0xef, 0xe2, 0x4d, 0xbc, 0x4a, 0xa8, 0xd5, 0x2d, 0x97, 0x31, 0xd7, 0x03, 0x93,
	0x70, 0x6a, 0x12, 0xdf, 0x67, 0x92, 0x48, 0xca, 0xfc, 0xf4, 0xce, 0xea, 0xe9, 0x54, 0x9d, 0x33,
	0x88, 0x3f, 0x48, 0xa5, 0x33, 0xd9, 0x0e, 0x18, 0xcf, 0xf8, 0xb2, 0xe2, 0x42, 0x1b, 0xd5, 0xad,
	0xac, 0xd4, 0x27, 0x1e, 0x6d, 0x13, 0x09, 0xa9, 0x5a, 0xcb, 0xa9, 0x14, 0x9e, 0xb5, 0xb2, 0xe8,
	0xb3, 0x3f, 0x9f, 0x08, 0x16, 0x2f, 0xa8, 0x1f, 0xa8, 0x5a, 0x79, 0xc7, 0x63, 0x36, 0xf1, 0xee,
	0x73, 0x70, 0x1e, 0x0c, 0x38, 0xe8, 0x77, 0x34, 0x95, 0x04, 0x7e, 0x05, 0xd5, 0xd0, 0x76, 0xe9,
	0x52, 0xdd, 0xc8, 0x06, 0x19, 0x13, 0x8c, 0xbb, 0xf6, 0x63, 0x70, 0xa4, 0x05, 0x9d, 0xc8, 0xd0,
	0xdc, 0x7c, 0xf3, 0x7c, 0x2d, 0x1f, 0xf0, 0xd7, 0x21, 0x52, 0xac, 0x88, 0xa3, 0x5f, 0xd0, 0x8a,
	0x49, 0xd8, 0x95, 0xa5, 0x1a, 0xda, 0xfe, 0xaf, 0x59, 0x8e, 0xa4, 0x77, 0x9f, 0x47, 0xea, 0xb2,
	0x50, 0xdf, 0x16, 0x90, 0x95, 0xaa, 0xfa, 0x2d, 0xed, 0x7f, 0x01, 0x71, 0x0b, 0x51, 0x7d, 0x2d,
	0x0e, 0x7e, 0x9b, 0xfa, 0x6e, 0xa5, 0x10, 0x97, 0xb1, 0x91, 0x2b, 0xe3, 0x66, 0x97, 0xcb, 0xc1,
	0xae, 0x62, 0xad, 0x27, 0x96, 0xa8, 0x8c, 0x7b, 0x89, 0x41, 0xdf, 0xd5, 0x36, 0x16, 0x39, 0x84,
	0x73, 0xc1, 0xfa, 0xd0, 0xae, 0x2c, 0x9f, 0x08, 0xd2, 0x7f, 0x80, 0xae, 0xa7, 0x8e, 0x3c, 0x49,
	0x40, 0xd4, 0x34, 0xb4, 0x2b, 0xc5, 0xdf, 0x25, 0x59, 0xa9, 0xa3, 0xb9, 0xa9, 0x95, 0x16, 0x48,
	0xfa, 0xca, 0x68, 0x88, 0x0a, 0xe3, 0x21, 0x52, 0x6f, 0x17, 0x56, 0xd4, 0xb5, 0x42, 0xfd, 0xa9,
	0x56, 0xbe, 0x21, 0x80, 0x48, 0x98, 0xcf, 0xe0, 0xca, 0x1f, 0xce, 0x20, 0x89, 0xfa, 0x54, 0x36,
	0xea, 0xa3, 0x68, 0xaf, 0xae, 0x7f, 0xb8, 0x96, 0x1b, 0x72, 0xfd, 0x9c, 0xb6, 0x6a, 0x01, 0xf7,
	0x88, 0x33, 0xbf, 0xf3, 0xb8, 0x53, 0x5f, 0x96, 0xb4, 0xd2, 0x0e, 0xc8, 0xbf, 0x53, 0xd6, 0xbf,
	0x3c, 0xf1, 0x63, 0xc2, 0x6c, 0xe2, 0xec, 0x4f, 0xb0, 0x7a, 0xf0, 0x0d, 0x2d, 0x7e, 0x68, 0xbe,
	0x42, 0xe3, 0x29, 0x56, 0x26, 0x53, 0xac, 0x1c, 0x4e, 0x31, 0x7a, 0x11, 0x62, 0xf4, 0x3a, 0xc4,
	0xe8, 0x7d, 0x88, 0xd1, 0x38, 0xc4, 0x68, 0x12, 0x62, 0xf4, 0x31, 0xc4, 0xe8, 0x53, 0x88, 0x95,
	0xc3, 0x10, 0xa3, 0x97, 0x33, 0xac, 0x8c, 0x66, 0x18, 0x8d, 0x67, 0x58, 0x99, 0xcc, 0xb0, 0xf2,
	0xf0, 0x91, 0xcb, 0xf8, 0x13, 0xd7, 0xe8, 0x33, 0x4f, 0x82, 0x10, 0xc4, 0xe8, 0x05, 0x66, 0xbc,
	0xe8, 0x30, 0xd1, 0x6d, 0x44, 0xfd, 0xd1, 0x36, 0x88, 0xc6, 0x91, 0x6c, 0x72, 0xdb, 0x65, 0x26,
	0xec, 0xcb, 0xf4, 0x65, 0x38, 0xf9, 0x69, 0xb5, 0x8b, 0xf1, 0x6b, 0x71, 0xf9, 0x7b, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x3a, 0x9f, 0xbb, 0xd3, 0x8a, 0x05, 0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Asn.Equal(that1.Asn) {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	if that1.ReviewType == nil {
		if this.ReviewType != nil {
			return false
		}
	} else if this.ReviewType == nil {
		return false
	} else if !this.ReviewType.Equal(that1.ReviewType) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ReviewTypePending) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ReviewTypePending)
	if !ok {
		that2, ok := that.(GlobalSpecType_ReviewTypePending)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReviewTypePending.Equal(that1.ReviewTypePending) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ReviewTypeApproved) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ReviewTypeApproved)
	if !ok {
		that2, ok := that.(GlobalSpecType_ReviewTypeApproved)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReviewTypeApproved.Equal(that1.ReviewTypeApproved) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ReviewTypeRejected) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ReviewTypeRejected)
	if !ok {
		that2, ok := that.(GlobalSpecType_ReviewTypeRejected)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReviewTypeRejected.Equal(that1.ReviewTypeRejected) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Asn.Equal(that1.Asn) {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Asn.Equal(that1.Asn) {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	if that1.ReviewType == nil {
		if this.ReviewType != nil {
			return false
		}
	} else if this.ReviewType == nil {
		return false
	} else if !this.ReviewType.Equal(that1.ReviewType) {
		return false
	}
	return true
}
func (this *GetSpecType_ReviewTypePending) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ReviewTypePending)
	if !ok {
		that2, ok := that.(GetSpecType_ReviewTypePending)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReviewTypePending.Equal(that1.ReviewTypePending) {
		return false
	}
	return true
}
func (this *GetSpecType_ReviewTypeApproved) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ReviewTypeApproved)
	if !ok {
		that2, ok := that.(GetSpecType_ReviewTypeApproved)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReviewTypeApproved.Equal(that1.ReviewTypeApproved) {
		return false
	}
	return true
}
func (this *GetSpecType_ReviewTypeRejected) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ReviewTypeRejected)
	if !ok {
		that2, ok := that.(GetSpecType_ReviewTypeRejected)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReviewTypeRejected.Equal(that1.ReviewTypeRejected) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&infraprotect_asn_prefix.GlobalSpecType{")
	if this.Asn != nil {
		s = append(s, "Asn: "+fmt.Sprintf("%#v", this.Asn)+",\n")
	}
	s = append(s, "Prefix: "+fmt.Sprintf("%#v", this.Prefix)+",\n")
	if this.ReviewType != nil {
		s = append(s, "ReviewType: "+fmt.Sprintf("%#v", this.ReviewType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_ReviewTypePending) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_asn_prefix.GlobalSpecType_ReviewTypePending{` +
		`ReviewTypePending:` + fmt.Sprintf("%#v", this.ReviewTypePending) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ReviewTypeApproved) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_asn_prefix.GlobalSpecType_ReviewTypeApproved{` +
		`ReviewTypeApproved:` + fmt.Sprintf("%#v", this.ReviewTypeApproved) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ReviewTypeRejected) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_asn_prefix.GlobalSpecType_ReviewTypeRejected{` +
		`ReviewTypeRejected:` + fmt.Sprintf("%#v", this.ReviewTypeRejected) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&infraprotect_asn_prefix.CreateSpecType{")
	if this.Asn != nil {
		s = append(s, "Asn: "+fmt.Sprintf("%#v", this.Asn)+",\n")
	}
	s = append(s, "Prefix: "+fmt.Sprintf("%#v", this.Prefix)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&infraprotect_asn_prefix.ReplaceSpecType{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&infraprotect_asn_prefix.GetSpecType{")
	if this.Asn != nil {
		s = append(s, "Asn: "+fmt.Sprintf("%#v", this.Asn)+",\n")
	}
	s = append(s, "Prefix: "+fmt.Sprintf("%#v", this.Prefix)+",\n")
	if this.ReviewType != nil {
		s = append(s, "ReviewType: "+fmt.Sprintf("%#v", this.ReviewType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_ReviewTypePending) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_asn_prefix.GetSpecType_ReviewTypePending{` +
		`ReviewTypePending:` + fmt.Sprintf("%#v", this.ReviewTypePending) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ReviewTypeApproved) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_asn_prefix.GetSpecType_ReviewTypeApproved{` +
		`ReviewTypeApproved:` + fmt.Sprintf("%#v", this.ReviewTypeApproved) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ReviewTypeRejected) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_asn_prefix.GetSpecType_ReviewTypeRejected{` +
		`ReviewTypeRejected:` + fmt.Sprintf("%#v", this.ReviewTypeRejected) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReviewType != nil {
		{
			size := m.ReviewType.Size()
			i -= size
			if _, err := m.ReviewType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if m.Asn != nil {
		{
			size, err := m.Asn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_ReviewTypePending) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ReviewTypePending) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReviewTypePending != nil {
		{
			size, err := m.ReviewTypePending.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ReviewTypeApproved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ReviewTypeApproved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReviewTypeApproved != nil {
		{
			size, err := m.ReviewTypeApproved.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ReviewTypeRejected) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ReviewTypeRejected) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReviewTypeRejected != nil {
		{
			size, err := m.ReviewTypeRejected.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if m.Asn != nil {
		{
			size, err := m.Asn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReviewType != nil {
		{
			size := m.ReviewType.Size()
			i -= size
			if _, err := m.ReviewType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if m.Asn != nil {
		{
			size, err := m.Asn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_ReviewTypePending) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ReviewTypePending) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReviewTypePending != nil {
		{
			size, err := m.ReviewTypePending.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ReviewTypeApproved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ReviewTypeApproved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReviewTypeApproved != nil {
		{
			size, err := m.ReviewTypeApproved.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ReviewTypeRejected) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ReviewTypeRejected) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReviewTypeRejected != nil {
		{
			size, err := m.ReviewTypeRejected.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Asn != nil {
		l = m.Asn.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ReviewType != nil {
		n += m.ReviewType.Size()
	}
	return n
}

func (m *GlobalSpecType_ReviewTypePending) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReviewTypePending != nil {
		l = m.ReviewTypePending.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ReviewTypeApproved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReviewTypeApproved != nil {
		l = m.ReviewTypeApproved.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ReviewTypeRejected) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReviewTypeRejected != nil {
		l = m.ReviewTypeRejected.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Asn != nil {
		l = m.Asn.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Asn != nil {
		l = m.Asn.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ReviewType != nil {
		n += m.ReviewType.Size()
	}
	return n
}

func (m *GetSpecType_ReviewTypePending) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReviewTypePending != nil {
		l = m.ReviewTypePending.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ReviewTypeApproved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReviewTypeApproved != nil {
		l = m.ReviewTypeApproved.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ReviewTypeRejected) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReviewTypeRejected != nil {
		l = m.ReviewTypeRejected.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Asn:` + strings.Replace(fmt.Sprintf("%v", this.Asn), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`ReviewType:` + fmt.Sprintf("%v", this.ReviewType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ReviewTypePending) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ReviewTypePending{`,
		`ReviewTypePending:` + strings.Replace(fmt.Sprintf("%v", this.ReviewTypePending), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ReviewTypeApproved) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ReviewTypeApproved{`,
		`ReviewTypeApproved:` + strings.Replace(fmt.Sprintf("%v", this.ReviewTypeApproved), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ReviewTypeRejected) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ReviewTypeRejected{`,
		`ReviewTypeRejected:` + strings.Replace(fmt.Sprintf("%v", this.ReviewTypeRejected), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`Asn:` + strings.Replace(fmt.Sprintf("%v", this.Asn), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Asn:` + strings.Replace(fmt.Sprintf("%v", this.Asn), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`ReviewType:` + fmt.Sprintf("%v", this.ReviewType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ReviewTypePending) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ReviewTypePending{`,
		`ReviewTypePending:` + strings.Replace(fmt.Sprintf("%v", this.ReviewTypePending), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ReviewTypeApproved) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ReviewTypeApproved{`,
		`ReviewTypeApproved:` + strings.Replace(fmt.Sprintf("%v", this.ReviewTypeApproved), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ReviewTypeRejected) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ReviewTypeRejected{`,
		`ReviewTypeRejected:` + strings.Replace(fmt.Sprintf("%v", this.ReviewTypeRejected), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Asn == nil {
				m.Asn = &views.ObjectRefType{}
			}
			if err := m.Asn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviewTypePending", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ReviewType = &GlobalSpecType_ReviewTypePending{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviewTypeApproved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ReviewType = &GlobalSpecType_ReviewTypeApproved{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviewTypeRejected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ReviewType = &GlobalSpecType_ReviewTypeRejected{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Asn == nil {
				m.Asn = &views.ObjectRefType{}
			}
			if err := m.Asn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Asn == nil {
				m.Asn = &views.ObjectRefType{}
			}
			if err := m.Asn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviewTypePending", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ReviewType = &GetSpecType_ReviewTypePending{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviewTypeApproved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ReviewType = &GetSpecType_ReviewTypeApproved{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviewTypeRejected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ReviewType = &GetSpecType_ReviewTypeRejected{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
