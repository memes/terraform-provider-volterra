// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package dns_lb_health_check

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) HealthCheckValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for health_check")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["health_check"]; exists {
		val := m.GetHealthCheck()
		vOpts := append(opts,
			db.WithValidateField("health_check"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHealthCheck().(type) {
	case *CreateSpecType_HttpHealthCheck:
		if fv, exists := v.FldValidators["health_check.http_health_check"]; exists {
			val := m.GetHealthCheck().(*CreateSpecType_HttpHealthCheck).HttpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("http_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_TcpHealthCheck:
		if fv, exists := v.FldValidators["health_check.tcp_health_check"]; exists {
			val := m.GetHealthCheck().(*CreateSpecType_TcpHealthCheck).TcpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("tcp_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_UdpHealthCheck:
		if fv, exists := v.FldValidators["health_check.udp_health_check"]; exists {
			val := m.GetHealthCheck().(*CreateSpecType_UdpHealthCheck).UdpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("udp_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_IcmpHealthCheck:
		if fv, exists := v.FldValidators["health_check.icmp_health_check"]; exists {
			val := m.GetHealthCheck().(*CreateSpecType_IcmpHealthCheck).IcmpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("icmp_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_HttpsHealthCheck:
		if fv, exists := v.FldValidators["health_check.https_health_check"]; exists {
			val := m.GetHealthCheck().(*CreateSpecType_HttpsHealthCheck).HttpsHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("https_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_TcpHexHealthCheck:
		if fv, exists := v.FldValidators["health_check.tcp_hex_health_check"]; exists {
			val := m.GetHealthCheck().(*CreateSpecType_TcpHexHealthCheck).TcpHexHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("tcp_hex_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHealthCheck := v.HealthCheckValidationRuleHandler
	rulesHealthCheck := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHealthCheck(rulesHealthCheck)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.health_check: %s", err)
		panic(errMsg)
	}
	v.FldValidators["health_check"] = vFn

	v.FldValidators["health_check.http_health_check"] = HttpHealthCheckValidator().Validate
	v.FldValidators["health_check.tcp_health_check"] = TcpHealthCheckValidator().Validate
	v.FldValidators["health_check.udp_health_check"] = UdpHealthCheckValidator().Validate
	v.FldValidators["health_check.https_health_check"] = HttpHealthCheckValidator().Validate
	v.FldValidators["health_check.tcp_hex_health_check"] = TcpHexHealthCheckValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetDnsLbPoolsDRefInfo()

}

func (m *GetSpecType) GetDnsLbPoolsDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetDnsLbPools()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("GetSpecType.dns_lb_pools[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dns_lb_pool.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "dns_lb_pool.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dns_lb_pools",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetDnsLbPoolsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetDnsLbPoolsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "dns_lb_pool.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: dns_lb_pool")
	}
	for i, vref := range m.GetDnsLbPools() {
		if vref == nil {
			return nil, fmt.Errorf("GetSpecType.dns_lb_pools[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dns_lb_pool.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) HealthCheckValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for health_check")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dns_lb_pools"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_lb_pools"))
		for idx, item := range m.GetDnsLbPools() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["health_check"]; exists {
		val := m.GetHealthCheck()
		vOpts := append(opts,
			db.WithValidateField("health_check"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHealthCheck().(type) {
	case *GetSpecType_HttpHealthCheck:
		if fv, exists := v.FldValidators["health_check.http_health_check"]; exists {
			val := m.GetHealthCheck().(*GetSpecType_HttpHealthCheck).HttpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("http_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_TcpHealthCheck:
		if fv, exists := v.FldValidators["health_check.tcp_health_check"]; exists {
			val := m.GetHealthCheck().(*GetSpecType_TcpHealthCheck).TcpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("tcp_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_UdpHealthCheck:
		if fv, exists := v.FldValidators["health_check.udp_health_check"]; exists {
			val := m.GetHealthCheck().(*GetSpecType_UdpHealthCheck).UdpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("udp_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_IcmpHealthCheck:
		if fv, exists := v.FldValidators["health_check.icmp_health_check"]; exists {
			val := m.GetHealthCheck().(*GetSpecType_IcmpHealthCheck).IcmpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("icmp_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_HttpsHealthCheck:
		if fv, exists := v.FldValidators["health_check.https_health_check"]; exists {
			val := m.GetHealthCheck().(*GetSpecType_HttpsHealthCheck).HttpsHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("https_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_TcpHexHealthCheck:
		if fv, exists := v.FldValidators["health_check.tcp_hex_health_check"]; exists {
			val := m.GetHealthCheck().(*GetSpecType_TcpHexHealthCheck).TcpHexHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("tcp_hex_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHealthCheck := v.HealthCheckValidationRuleHandler
	rulesHealthCheck := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHealthCheck(rulesHealthCheck)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.health_check: %s", err)
		panic(errMsg)
	}
	v.FldValidators["health_check"] = vFn

	v.FldValidators["health_check.http_health_check"] = HttpHealthCheckValidator().Validate
	v.FldValidators["health_check.tcp_health_check"] = TcpHealthCheckValidator().Validate
	v.FldValidators["health_check.udp_health_check"] = UdpHealthCheckValidator().Validate
	v.FldValidators["health_check.https_health_check"] = HttpHealthCheckValidator().Validate
	v.FldValidators["health_check.tcp_hex_health_check"] = TcpHexHealthCheckValidator().Validate

	v.FldValidators["dns_lb_pools"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetDnsLbPoolsDRefInfo()

}

func (m *GlobalSpecType) GetDnsLbPoolsDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetDnsLbPools()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.dns_lb_pools[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dns_lb_pool.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "dns_lb_pool.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dns_lb_pools",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetDnsLbPoolsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetDnsLbPoolsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "dns_lb_pool.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: dns_lb_pool")
	}
	for i, vref := range m.GetDnsLbPools() {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.dns_lb_pools[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dns_lb_pool.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) HealthCheckValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for health_check")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) TimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for timeout")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) IntervalValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for interval")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dns_lb_pools"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_lb_pools"))
		for idx, item := range m.GetDnsLbPools() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["health_check"]; exists {
		val := m.GetHealthCheck()
		vOpts := append(opts,
			db.WithValidateField("health_check"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHealthCheck().(type) {
	case *GlobalSpecType_HttpHealthCheck:
		if fv, exists := v.FldValidators["health_check.http_health_check"]; exists {
			val := m.GetHealthCheck().(*GlobalSpecType_HttpHealthCheck).HttpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("http_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_TcpHealthCheck:
		if fv, exists := v.FldValidators["health_check.tcp_health_check"]; exists {
			val := m.GetHealthCheck().(*GlobalSpecType_TcpHealthCheck).TcpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("tcp_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_UdpHealthCheck:
		if fv, exists := v.FldValidators["health_check.udp_health_check"]; exists {
			val := m.GetHealthCheck().(*GlobalSpecType_UdpHealthCheck).UdpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("udp_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_IcmpHealthCheck:
		if fv, exists := v.FldValidators["health_check.icmp_health_check"]; exists {
			val := m.GetHealthCheck().(*GlobalSpecType_IcmpHealthCheck).IcmpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("icmp_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_HttpsHealthCheck:
		if fv, exists := v.FldValidators["health_check.https_health_check"]; exists {
			val := m.GetHealthCheck().(*GlobalSpecType_HttpsHealthCheck).HttpsHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("https_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_TcpHexHealthCheck:
		if fv, exists := v.FldValidators["health_check.tcp_hex_health_check"]; exists {
			val := m.GetHealthCheck().(*GlobalSpecType_TcpHexHealthCheck).TcpHexHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("tcp_hex_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["interval"]; exists {

		vOpts := append(opts, db.WithValidateField("interval"))
		if err := fv(ctx, m.GetInterval(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["timeout"]; exists {

		vOpts := append(opts, db.WithValidateField("timeout"))
		if err := fv(ctx, m.GetTimeout(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHealthCheck := v.HealthCheckValidationRuleHandler
	rulesHealthCheck := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHealthCheck(rulesHealthCheck)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.health_check: %s", err)
		panic(errMsg)
	}
	v.FldValidators["health_check"] = vFn

	vrhTimeout := v.TimeoutValidationRuleHandler
	rulesTimeout := map[string]string{
		"ves.io.schema.rules.uint32.gte": "1",
		"ves.io.schema.rules.uint32.lte": "600",
	}
	vFn, err = vrhTimeout(rulesTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["timeout"] = vFn

	vrhInterval := v.IntervalValidationRuleHandler
	rulesInterval := map[string]string{
		"ves.io.schema.rules.uint32.gte": "10",
		"ves.io.schema.rules.uint32.lte": "600",
	}
	vFn, err = vrhInterval(rulesInterval)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.interval: %s", err)
		panic(errMsg)
	}
	v.FldValidators["interval"] = vFn

	v.FldValidators["health_check.http_health_check"] = HttpHealthCheckValidator().Validate
	v.FldValidators["health_check.tcp_health_check"] = TcpHealthCheckValidator().Validate
	v.FldValidators["health_check.udp_health_check"] = UdpHealthCheckValidator().Validate
	v.FldValidators["health_check.https_health_check"] = HttpHealthCheckValidator().Validate
	v.FldValidators["health_check.tcp_hex_health_check"] = TcpHexHealthCheckValidator().Validate

	v.FldValidators["dns_lb_pools"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *HttpHealthCheck) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *HttpHealthCheck) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *HttpHealthCheck) DeepCopy() *HttpHealthCheck {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &HttpHealthCheck{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *HttpHealthCheck) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *HttpHealthCheck) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return HttpHealthCheckValidator().Validate(ctx, m, opts...)
}

type ValidateHttpHealthCheck struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateHttpHealthCheck) SendValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for send")
	}

	return validatorFn, nil
}

func (v *ValidateHttpHealthCheck) ReceiveValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for receive")
	}

	return validatorFn, nil
}

func (v *ValidateHttpHealthCheck) HealthCheckPortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for health_check_port")
	}

	return validatorFn, nil
}

func (v *ValidateHttpHealthCheck) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*HttpHealthCheck)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *HttpHealthCheck got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["health_check_port"]; exists {

		vOpts := append(opts, db.WithValidateField("health_check_port"))
		if err := fv(ctx, m.GetHealthCheckPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["receive"]; exists {

		vOpts := append(opts, db.WithValidateField("receive"))
		if err := fv(ctx, m.GetReceive(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["send"]; exists {

		vOpts := append(opts, db.WithValidateField("send"))
		if err := fv(ctx, m.GetSend(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultHttpHealthCheckValidator = func() *ValidateHttpHealthCheck {
	v := &ValidateHttpHealthCheck{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSend := v.SendValidationRuleHandler
	rulesSend := map[string]string{
		"ves.io.schema.rules.string.max_len": "2048",
	}
	vFn, err = vrhSend(rulesSend)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HttpHealthCheck.send: %s", err)
		panic(errMsg)
	}
	v.FldValidators["send"] = vFn

	vrhReceive := v.ReceiveValidationRuleHandler
	rulesReceive := map[string]string{
		"ves.io.schema.rules.string.max_len": "2048",
		"ves.io.schema.rules.string.regex":   "true",
	}
	vFn, err = vrhReceive(rulesReceive)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HttpHealthCheck.receive: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receive"] = vFn

	vrhHealthCheckPort := v.HealthCheckPortValidationRuleHandler
	rulesHealthCheckPort := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "65535",
	}
	vFn, err = vrhHealthCheckPort(rulesHealthCheckPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HttpHealthCheck.health_check_port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["health_check_port"] = vFn

	return v
}()

func HttpHealthCheckValidator() db.Validator {
	return DefaultHttpHealthCheckValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) HealthCheckValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for health_check")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["health_check"]; exists {
		val := m.GetHealthCheck()
		vOpts := append(opts,
			db.WithValidateField("health_check"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHealthCheck().(type) {
	case *ReplaceSpecType_HttpHealthCheck:
		if fv, exists := v.FldValidators["health_check.http_health_check"]; exists {
			val := m.GetHealthCheck().(*ReplaceSpecType_HttpHealthCheck).HttpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("http_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_TcpHealthCheck:
		if fv, exists := v.FldValidators["health_check.tcp_health_check"]; exists {
			val := m.GetHealthCheck().(*ReplaceSpecType_TcpHealthCheck).TcpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("tcp_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_UdpHealthCheck:
		if fv, exists := v.FldValidators["health_check.udp_health_check"]; exists {
			val := m.GetHealthCheck().(*ReplaceSpecType_UdpHealthCheck).UdpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("udp_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_IcmpHealthCheck:
		if fv, exists := v.FldValidators["health_check.icmp_health_check"]; exists {
			val := m.GetHealthCheck().(*ReplaceSpecType_IcmpHealthCheck).IcmpHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("icmp_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_HttpsHealthCheck:
		if fv, exists := v.FldValidators["health_check.https_health_check"]; exists {
			val := m.GetHealthCheck().(*ReplaceSpecType_HttpsHealthCheck).HttpsHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("https_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_TcpHexHealthCheck:
		if fv, exists := v.FldValidators["health_check.tcp_hex_health_check"]; exists {
			val := m.GetHealthCheck().(*ReplaceSpecType_TcpHexHealthCheck).TcpHexHealthCheck
			vOpts := append(opts,
				db.WithValidateField("health_check"),
				db.WithValidateField("tcp_hex_health_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHealthCheck := v.HealthCheckValidationRuleHandler
	rulesHealthCheck := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHealthCheck(rulesHealthCheck)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.health_check: %s", err)
		panic(errMsg)
	}
	v.FldValidators["health_check"] = vFn

	v.FldValidators["health_check.http_health_check"] = HttpHealthCheckValidator().Validate
	v.FldValidators["health_check.tcp_health_check"] = TcpHealthCheckValidator().Validate
	v.FldValidators["health_check.udp_health_check"] = UdpHealthCheckValidator().Validate
	v.FldValidators["health_check.https_health_check"] = HttpHealthCheckValidator().Validate
	v.FldValidators["health_check.tcp_hex_health_check"] = TcpHexHealthCheckValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *TcpHealthCheck) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *TcpHealthCheck) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *TcpHealthCheck) DeepCopy() *TcpHealthCheck {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &TcpHealthCheck{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *TcpHealthCheck) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *TcpHealthCheck) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return TcpHealthCheckValidator().Validate(ctx, m, opts...)
}

type ValidateTcpHealthCheck struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateTcpHealthCheck) SendValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for send")
	}

	return validatorFn, nil
}

func (v *ValidateTcpHealthCheck) ReceiveValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for receive")
	}

	return validatorFn, nil
}

func (v *ValidateTcpHealthCheck) HealthCheckPortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for health_check_port")
	}

	return validatorFn, nil
}

func (v *ValidateTcpHealthCheck) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*TcpHealthCheck)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *TcpHealthCheck got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["health_check_port"]; exists {

		vOpts := append(opts, db.WithValidateField("health_check_port"))
		if err := fv(ctx, m.GetHealthCheckPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["receive"]; exists {

		vOpts := append(opts, db.WithValidateField("receive"))
		if err := fv(ctx, m.GetReceive(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["send"]; exists {

		vOpts := append(opts, db.WithValidateField("send"))
		if err := fv(ctx, m.GetSend(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultTcpHealthCheckValidator = func() *ValidateTcpHealthCheck {
	v := &ValidateTcpHealthCheck{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSend := v.SendValidationRuleHandler
	rulesSend := map[string]string{
		"ves.io.schema.rules.string.max_len": "2048",
	}
	vFn, err = vrhSend(rulesSend)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TcpHealthCheck.send: %s", err)
		panic(errMsg)
	}
	v.FldValidators["send"] = vFn

	vrhReceive := v.ReceiveValidationRuleHandler
	rulesReceive := map[string]string{
		"ves.io.schema.rules.string.max_len": "2048",
		"ves.io.schema.rules.string.regex":   "true",
	}
	vFn, err = vrhReceive(rulesReceive)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TcpHealthCheck.receive: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receive"] = vFn

	vrhHealthCheckPort := v.HealthCheckPortValidationRuleHandler
	rulesHealthCheckPort := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "65535",
	}
	vFn, err = vrhHealthCheckPort(rulesHealthCheckPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TcpHealthCheck.health_check_port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["health_check_port"] = vFn

	return v
}()

func TcpHealthCheckValidator() db.Validator {
	return DefaultTcpHealthCheckValidator
}

// augmented methods on protoc/std generated struct

func (m *TcpHexHealthCheck) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *TcpHexHealthCheck) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *TcpHexHealthCheck) DeepCopy() *TcpHexHealthCheck {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &TcpHexHealthCheck{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *TcpHexHealthCheck) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *TcpHexHealthCheck) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return TcpHexHealthCheckValidator().Validate(ctx, m, opts...)
}

type ValidateTcpHexHealthCheck struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateTcpHexHealthCheck) SendValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for send")
	}

	return validatorFn, nil
}

func (v *ValidateTcpHexHealthCheck) ReceiveValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for receive")
	}

	return validatorFn, nil
}

func (v *ValidateTcpHexHealthCheck) HealthCheckPortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for health_check_port")
	}

	return validatorFn, nil
}

func (v *ValidateTcpHexHealthCheck) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*TcpHexHealthCheck)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *TcpHexHealthCheck got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["health_check_port"]; exists {

		vOpts := append(opts, db.WithValidateField("health_check_port"))
		if err := fv(ctx, m.GetHealthCheckPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["receive"]; exists {

		vOpts := append(opts, db.WithValidateField("receive"))
		if err := fv(ctx, m.GetReceive(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["send"]; exists {

		vOpts := append(opts, db.WithValidateField("send"))
		if err := fv(ctx, m.GetSend(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultTcpHexHealthCheckValidator = func() *ValidateTcpHexHealthCheck {
	v := &ValidateTcpHexHealthCheck{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSend := v.SendValidationRuleHandler
	rulesSend := map[string]string{
		"ves.io.schema.rules.string.hex":     "true",
		"ves.io.schema.rules.string.max_len": "2048",
	}
	vFn, err = vrhSend(rulesSend)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TcpHexHealthCheck.send: %s", err)
		panic(errMsg)
	}
	v.FldValidators["send"] = vFn

	vrhReceive := v.ReceiveValidationRuleHandler
	rulesReceive := map[string]string{
		"ves.io.schema.rules.string.hex":     "true",
		"ves.io.schema.rules.string.max_len": "2048",
	}
	vFn, err = vrhReceive(rulesReceive)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TcpHexHealthCheck.receive: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receive"] = vFn

	vrhHealthCheckPort := v.HealthCheckPortValidationRuleHandler
	rulesHealthCheckPort := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "65535",
	}
	vFn, err = vrhHealthCheckPort(rulesHealthCheckPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TcpHexHealthCheck.health_check_port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["health_check_port"] = vFn

	return v
}()

func TcpHexHealthCheckValidator() db.Validator {
	return DefaultTcpHexHealthCheckValidator
}

// augmented methods on protoc/std generated struct

func (m *UdpHealthCheck) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *UdpHealthCheck) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *UdpHealthCheck) DeepCopy() *UdpHealthCheck {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &UdpHealthCheck{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *UdpHealthCheck) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *UdpHealthCheck) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return UdpHealthCheckValidator().Validate(ctx, m, opts...)
}

type ValidateUdpHealthCheck struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateUdpHealthCheck) SendValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for send")
	}

	return validatorFn, nil
}

func (v *ValidateUdpHealthCheck) ReceiveValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for receive")
	}

	return validatorFn, nil
}

func (v *ValidateUdpHealthCheck) HealthCheckPortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for health_check_port")
	}

	return validatorFn, nil
}

func (v *ValidateUdpHealthCheck) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*UdpHealthCheck)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *UdpHealthCheck got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["health_check_port"]; exists {

		vOpts := append(opts, db.WithValidateField("health_check_port"))
		if err := fv(ctx, m.GetHealthCheckPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["receive"]; exists {

		vOpts := append(opts, db.WithValidateField("receive"))
		if err := fv(ctx, m.GetReceive(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["send"]; exists {

		vOpts := append(opts, db.WithValidateField("send"))
		if err := fv(ctx, m.GetSend(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultUdpHealthCheckValidator = func() *ValidateUdpHealthCheck {
	v := &ValidateUdpHealthCheck{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSend := v.SendValidationRuleHandler
	rulesSend := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "2048",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhSend(rulesSend)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for UdpHealthCheck.send: %s", err)
		panic(errMsg)
	}
	v.FldValidators["send"] = vFn

	vrhReceive := v.ReceiveValidationRuleHandler
	rulesReceive := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "2048",
		"ves.io.schema.rules.string.min_len":   "1",
		"ves.io.schema.rules.string.regex":     "true",
	}
	vFn, err = vrhReceive(rulesReceive)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for UdpHealthCheck.receive: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receive"] = vFn

	vrhHealthCheckPort := v.HealthCheckPortValidationRuleHandler
	rulesHealthCheckPort := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "65535",
	}
	vFn, err = vrhHealthCheckPort(rulesHealthCheckPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for UdpHealthCheck.health_check_port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["health_check_port"] = vFn

	return v
}()

func UdpHealthCheckValidator() db.Validator {
	return DefaultUdpHealthCheckValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetHealthCheckToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.HealthCheck.(type) {
	case nil:
		o.HealthCheck = nil

	case *CreateSpecType_HttpHealthCheck:
		o.HealthCheck = &GlobalSpecType_HttpHealthCheck{HttpHealthCheck: of.HttpHealthCheck}

	case *CreateSpecType_HttpsHealthCheck:
		o.HealthCheck = &GlobalSpecType_HttpsHealthCheck{HttpsHealthCheck: of.HttpsHealthCheck}

	case *CreateSpecType_IcmpHealthCheck:
		o.HealthCheck = &GlobalSpecType_IcmpHealthCheck{IcmpHealthCheck: of.IcmpHealthCheck}

	case *CreateSpecType_TcpHealthCheck:
		o.HealthCheck = &GlobalSpecType_TcpHealthCheck{TcpHealthCheck: of.TcpHealthCheck}

	case *CreateSpecType_TcpHexHealthCheck:
		o.HealthCheck = &GlobalSpecType_TcpHexHealthCheck{TcpHexHealthCheck: of.TcpHexHealthCheck}

	case *CreateSpecType_UdpHealthCheck:
		o.HealthCheck = &GlobalSpecType_UdpHealthCheck{UdpHealthCheck: of.UdpHealthCheck}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetHealthCheckFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.HealthCheck.(type) {
	case nil:
		r.HealthCheck = nil

	case *GlobalSpecType_HttpHealthCheck:
		r.HealthCheck = &CreateSpecType_HttpHealthCheck{HttpHealthCheck: of.HttpHealthCheck}

	case *GlobalSpecType_HttpsHealthCheck:
		r.HealthCheck = &CreateSpecType_HttpsHealthCheck{HttpsHealthCheck: of.HttpsHealthCheck}

	case *GlobalSpecType_IcmpHealthCheck:
		r.HealthCheck = &CreateSpecType_IcmpHealthCheck{IcmpHealthCheck: of.IcmpHealthCheck}

	case *GlobalSpecType_TcpHealthCheck:
		r.HealthCheck = &CreateSpecType_TcpHealthCheck{TcpHealthCheck: of.TcpHealthCheck}

	case *GlobalSpecType_TcpHexHealthCheck:
		r.HealthCheck = &CreateSpecType_TcpHexHealthCheck{TcpHexHealthCheck: of.TcpHexHealthCheck}

	case *GlobalSpecType_UdpHealthCheck:
		r.HealthCheck = &CreateSpecType_UdpHealthCheck{UdpHealthCheck: of.UdpHealthCheck}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetHealthCheckFromGlobalSpecType(f)
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetHealthCheckToGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetHealthCheckToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.HealthCheck.(type) {
	case nil:
		o.HealthCheck = nil

	case *GetSpecType_HttpHealthCheck:
		o.HealthCheck = &GlobalSpecType_HttpHealthCheck{HttpHealthCheck: of.HttpHealthCheck}

	case *GetSpecType_HttpsHealthCheck:
		o.HealthCheck = &GlobalSpecType_HttpsHealthCheck{HttpsHealthCheck: of.HttpsHealthCheck}

	case *GetSpecType_IcmpHealthCheck:
		o.HealthCheck = &GlobalSpecType_IcmpHealthCheck{IcmpHealthCheck: of.IcmpHealthCheck}

	case *GetSpecType_TcpHealthCheck:
		o.HealthCheck = &GlobalSpecType_TcpHealthCheck{TcpHealthCheck: of.TcpHealthCheck}

	case *GetSpecType_TcpHexHealthCheck:
		o.HealthCheck = &GlobalSpecType_TcpHexHealthCheck{TcpHexHealthCheck: of.TcpHexHealthCheck}

	case *GetSpecType_UdpHealthCheck:
		o.HealthCheck = &GlobalSpecType_UdpHealthCheck{UdpHealthCheck: of.UdpHealthCheck}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetHealthCheckFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.HealthCheck.(type) {
	case nil:
		r.HealthCheck = nil

	case *GlobalSpecType_HttpHealthCheck:
		r.HealthCheck = &GetSpecType_HttpHealthCheck{HttpHealthCheck: of.HttpHealthCheck}

	case *GlobalSpecType_HttpsHealthCheck:
		r.HealthCheck = &GetSpecType_HttpsHealthCheck{HttpsHealthCheck: of.HttpsHealthCheck}

	case *GlobalSpecType_IcmpHealthCheck:
		r.HealthCheck = &GetSpecType_IcmpHealthCheck{IcmpHealthCheck: of.IcmpHealthCheck}

	case *GlobalSpecType_TcpHealthCheck:
		r.HealthCheck = &GetSpecType_TcpHealthCheck{TcpHealthCheck: of.TcpHealthCheck}

	case *GlobalSpecType_TcpHexHealthCheck:
		r.HealthCheck = &GetSpecType_TcpHexHealthCheck{TcpHexHealthCheck: of.TcpHexHealthCheck}

	case *GlobalSpecType_UdpHealthCheck:
		r.HealthCheck = &GetSpecType_UdpHealthCheck{UdpHealthCheck: of.UdpHealthCheck}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.DnsLbPools = f.GetDnsLbPools()
	m.GetHealthCheckFromGlobalSpecType(f)
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.DnsLbPools = m1.DnsLbPools
	m1.SetHealthCheckToGlobalSpecType(f)
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetHealthCheckToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.HealthCheck.(type) {
	case nil:
		o.HealthCheck = nil

	case *ReplaceSpecType_HttpHealthCheck:
		o.HealthCheck = &GlobalSpecType_HttpHealthCheck{HttpHealthCheck: of.HttpHealthCheck}

	case *ReplaceSpecType_HttpsHealthCheck:
		o.HealthCheck = &GlobalSpecType_HttpsHealthCheck{HttpsHealthCheck: of.HttpsHealthCheck}

	case *ReplaceSpecType_IcmpHealthCheck:
		o.HealthCheck = &GlobalSpecType_IcmpHealthCheck{IcmpHealthCheck: of.IcmpHealthCheck}

	case *ReplaceSpecType_TcpHealthCheck:
		o.HealthCheck = &GlobalSpecType_TcpHealthCheck{TcpHealthCheck: of.TcpHealthCheck}

	case *ReplaceSpecType_TcpHexHealthCheck:
		o.HealthCheck = &GlobalSpecType_TcpHexHealthCheck{TcpHexHealthCheck: of.TcpHexHealthCheck}

	case *ReplaceSpecType_UdpHealthCheck:
		o.HealthCheck = &GlobalSpecType_UdpHealthCheck{UdpHealthCheck: of.UdpHealthCheck}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetHealthCheckFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.HealthCheck.(type) {
	case nil:
		r.HealthCheck = nil

	case *GlobalSpecType_HttpHealthCheck:
		r.HealthCheck = &ReplaceSpecType_HttpHealthCheck{HttpHealthCheck: of.HttpHealthCheck}

	case *GlobalSpecType_HttpsHealthCheck:
		r.HealthCheck = &ReplaceSpecType_HttpsHealthCheck{HttpsHealthCheck: of.HttpsHealthCheck}

	case *GlobalSpecType_IcmpHealthCheck:
		r.HealthCheck = &ReplaceSpecType_IcmpHealthCheck{IcmpHealthCheck: of.IcmpHealthCheck}

	case *GlobalSpecType_TcpHealthCheck:
		r.HealthCheck = &ReplaceSpecType_TcpHealthCheck{TcpHealthCheck: of.TcpHealthCheck}

	case *GlobalSpecType_TcpHexHealthCheck:
		r.HealthCheck = &ReplaceSpecType_TcpHexHealthCheck{TcpHexHealthCheck: of.TcpHexHealthCheck}

	case *GlobalSpecType_UdpHealthCheck:
		r.HealthCheck = &ReplaceSpecType_UdpHealthCheck{UdpHealthCheck: of.UdpHealthCheck}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetHealthCheckFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetHealthCheckToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}
