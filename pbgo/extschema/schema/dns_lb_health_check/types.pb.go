// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/dns_lb_health_check/types.proto

package dns_lb_health_check

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DNS Load Balancer Health Check specification
//
// x-displayName: "Specification"
// Desired state of DNS Load Balancer Health Check specification
type GlobalSpecType struct {
	// Type of Health Check
	//
	// x-displayName: "Health Check Type"
	// x-required
	// Select type of health check
	//
	// Types that are valid to be assigned to HealthCheck:
	//	*GlobalSpecType_HttpHealthCheck
	//	*GlobalSpecType_TcpHealthCheck
	//	*GlobalSpecType_UdpHealthCheck
	//	*GlobalSpecType_IcmpHealthCheck
	//	*GlobalSpecType_HttpsHealthCheck
	HealthCheck isGlobalSpecType_HealthCheck `protobuf_oneof:"health_check"`
	// timeout
	//
	// x-displayName: "Timeout"
	// x-example: "1"
	// Timeout in seconds to wait for successful response. In other words, it is
	// the time to wait for a health check response. If the timeout is reached the
	// health check attempt will be considered a failure.
	Timeout uint32 `protobuf:"varint,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// interval
	//
	// x-displayName: "Interval"
	// x-example: "10"
	// Time interval in seconds between two healthcheck requests.
	Interval uint32 `protobuf:"varint,8,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6febe8700ef285c8, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_HealthCheck interface {
	isGlobalSpecType_HealthCheck()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_HttpHealthCheck struct {
	HttpHealthCheck *HttpHealthCheck `protobuf:"bytes,3,opt,name=http_health_check,json=httpHealthCheck,proto3,oneof" json:"http_health_check,omitempty"`
}
type GlobalSpecType_TcpHealthCheck struct {
	TcpHealthCheck *TcpHealthCheck `protobuf:"bytes,4,opt,name=tcp_health_check,json=tcpHealthCheck,proto3,oneof" json:"tcp_health_check,omitempty"`
}
type GlobalSpecType_UdpHealthCheck struct {
	UdpHealthCheck *UdpHealthCheck `protobuf:"bytes,5,opt,name=udp_health_check,json=udpHealthCheck,proto3,oneof" json:"udp_health_check,omitempty"`
}
type GlobalSpecType_IcmpHealthCheck struct {
	IcmpHealthCheck *schema.Empty `protobuf:"bytes,6,opt,name=icmp_health_check,json=icmpHealthCheck,proto3,oneof" json:"icmp_health_check,omitempty"`
}
type GlobalSpecType_HttpsHealthCheck struct {
	HttpsHealthCheck *HttpHealthCheck `protobuf:"bytes,9,opt,name=https_health_check,json=httpsHealthCheck,proto3,oneof" json:"https_health_check,omitempty"`
}

func (*GlobalSpecType_HttpHealthCheck) isGlobalSpecType_HealthCheck()  {}
func (*GlobalSpecType_TcpHealthCheck) isGlobalSpecType_HealthCheck()   {}
func (*GlobalSpecType_UdpHealthCheck) isGlobalSpecType_HealthCheck()   {}
func (*GlobalSpecType_IcmpHealthCheck) isGlobalSpecType_HealthCheck()  {}
func (*GlobalSpecType_HttpsHealthCheck) isGlobalSpecType_HealthCheck() {}

func (m *GlobalSpecType) GetHealthCheck() isGlobalSpecType_HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *GlobalSpecType) GetHttpHealthCheck() *HttpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GlobalSpecType_HttpHealthCheck); ok {
		return x.HttpHealthCheck
	}
	return nil
}

func (m *GlobalSpecType) GetTcpHealthCheck() *TcpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GlobalSpecType_TcpHealthCheck); ok {
		return x.TcpHealthCheck
	}
	return nil
}

func (m *GlobalSpecType) GetUdpHealthCheck() *UdpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GlobalSpecType_UdpHealthCheck); ok {
		return x.UdpHealthCheck
	}
	return nil
}

func (m *GlobalSpecType) GetIcmpHealthCheck() *schema.Empty {
	if x, ok := m.GetHealthCheck().(*GlobalSpecType_IcmpHealthCheck); ok {
		return x.IcmpHealthCheck
	}
	return nil
}

func (m *GlobalSpecType) GetHttpsHealthCheck() *HttpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GlobalSpecType_HttpsHealthCheck); ok {
		return x.HttpsHealthCheck
	}
	return nil
}

func (m *GlobalSpecType) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *GlobalSpecType) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_HttpHealthCheck)(nil),
		(*GlobalSpecType_TcpHealthCheck)(nil),
		(*GlobalSpecType_UdpHealthCheck)(nil),
		(*GlobalSpecType_IcmpHealthCheck)(nil),
		(*GlobalSpecType_HttpsHealthCheck)(nil),
	}
}

// HTTP Health Check
//
// x-displayName: "HTTP Health Check"
type HttpHealthCheck struct {
	// Send String
	//
	// x-displayName: "Send String"
	// x-example: "HEAD / HTTP/1.0"
	// HTTP payload to send to the target
	Send string `protobuf:"bytes,1,opt,name=send,proto3" json:"send,omitempty"`
	// Receive String
	//
	// x-displayName: "Receive String"
	// x-example: "HTTP/1"
	// Regular expression used to match against the response to the health check's request. Mark node up upon receipt of a successful regular expression match. Uses re2 regular expression syntax.
	Receive string `protobuf:"bytes,2,opt,name=receive,proto3" json:"receive,omitempty"`
	// Health check port
	//
	// x-required
	// x-displayName: "Health Check Port"
	// Port used for performing health check
	// x-example: "80"
	HealthCheckPort uint32 `protobuf:"varint,3,opt,name=health_check_port,json=healthCheckPort,proto3" json:"health_check_port,omitempty"`
}

func (m *HttpHealthCheck) Reset()      { *m = HttpHealthCheck{} }
func (*HttpHealthCheck) ProtoMessage() {}
func (*HttpHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_6febe8700ef285c8, []int{1}
}
func (m *HttpHealthCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HttpHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpHealthCheck.Merge(m, src)
}
func (m *HttpHealthCheck) XXX_Size() int {
	return m.Size()
}
func (m *HttpHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HttpHealthCheck proto.InternalMessageInfo

func (m *HttpHealthCheck) GetSend() string {
	if m != nil {
		return m.Send
	}
	return ""
}

func (m *HttpHealthCheck) GetReceive() string {
	if m != nil {
		return m.Receive
	}
	return ""
}

func (m *HttpHealthCheck) GetHealthCheckPort() uint32 {
	if m != nil {
		return m.HealthCheckPort
	}
	return 0
}

// TCP Health Check
//
// x-displayName: "TCP Health Check"
type TcpHealthCheck struct {
	// Send String
	//
	// x-displayName: "Send String"
	// x-example: ""
	// Send this string to target (default empty. When send and receive are both empty, monitor just tests 3WHS)
	Send string `protobuf:"bytes,1,opt,name=send,proto3" json:"send,omitempty"`
	// Receive String
	//
	// x-displayName: "Receive String"
	// x-example: ""
	// Regular expression used to match against the response to the monitor's request. Mark node up upon receipt of a successful regular expression match. Uses re2 regular expression syntax.
	Receive string `protobuf:"bytes,2,opt,name=receive,proto3" json:"receive,omitempty"`
	// Health check port
	//
	// x-required
	// x-displayName: "Health Check Port"
	// Port used for performing health check
	// x-example: "80"
	HealthCheckPort uint32 `protobuf:"varint,3,opt,name=health_check_port,json=healthCheckPort,proto3" json:"health_check_port,omitempty"`
}

func (m *TcpHealthCheck) Reset()      { *m = TcpHealthCheck{} }
func (*TcpHealthCheck) ProtoMessage() {}
func (*TcpHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_6febe8700ef285c8, []int{2}
}
func (m *TcpHealthCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TcpHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TcpHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpHealthCheck.Merge(m, src)
}
func (m *TcpHealthCheck) XXX_Size() int {
	return m.Size()
}
func (m *TcpHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_TcpHealthCheck proto.InternalMessageInfo

func (m *TcpHealthCheck) GetSend() string {
	if m != nil {
		return m.Send
	}
	return ""
}

func (m *TcpHealthCheck) GetReceive() string {
	if m != nil {
		return m.Receive
	}
	return ""
}

func (m *TcpHealthCheck) GetHealthCheckPort() uint32 {
	if m != nil {
		return m.HealthCheckPort
	}
	return 0
}

// UDP Health Check
//
// x-displayName: "UDP Health Check"
type UdpHealthCheck struct {
	// Send String
	//
	// x-required
	// x-displayName: "Send String"
	// x-example: ""
	// UDP payload
	Send string `protobuf:"bytes,1,opt,name=send,proto3" json:"send,omitempty"`
	// Receive String
	//
	// x-required
	// x-displayName: "Receive String"
	// x-example: ""
	// UDP response to be matched. It can be a regex.
	Receive string `protobuf:"bytes,2,opt,name=receive,proto3" json:"receive,omitempty"`
	// Health check port
	//
	// x-required
	// x-displayName: "Health check port"
	// Port used for performing health check
	// x-example: "80"
	HealthCheckPort uint32 `protobuf:"varint,3,opt,name=health_check_port,json=healthCheckPort,proto3" json:"health_check_port,omitempty"`
}

func (m *UdpHealthCheck) Reset()      { *m = UdpHealthCheck{} }
func (*UdpHealthCheck) ProtoMessage() {}
func (*UdpHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_6febe8700ef285c8, []int{3}
}
func (m *UdpHealthCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UdpHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UdpHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UdpHealthCheck.Merge(m, src)
}
func (m *UdpHealthCheck) XXX_Size() int {
	return m.Size()
}
func (m *UdpHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_UdpHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_UdpHealthCheck proto.InternalMessageInfo

func (m *UdpHealthCheck) GetSend() string {
	if m != nil {
		return m.Send
	}
	return ""
}

func (m *UdpHealthCheck) GetReceive() string {
	if m != nil {
		return m.Receive
	}
	return ""
}

func (m *UdpHealthCheck) GetHealthCheckPort() uint32 {
	if m != nil {
		return m.HealthCheckPort
	}
	return 0
}

// Create DNS Load Balancer Health Check
//
// x-displayName: "Create DNS Load Balancer Health Check"
// Create DNS Load Balancer Health Check in a given namespace. If one already exist it will give a error.
type CreateSpecType struct {
	// Types that are valid to be assigned to HealthCheck:
	//	*CreateSpecType_HttpHealthCheck
	//	*CreateSpecType_TcpHealthCheck
	//	*CreateSpecType_UdpHealthCheck
	//	*CreateSpecType_IcmpHealthCheck
	//	*CreateSpecType_HttpsHealthCheck
	HealthCheck isCreateSpecType_HealthCheck `protobuf_oneof:"health_check"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6febe8700ef285c8, []int{4}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_HealthCheck interface {
	isCreateSpecType_HealthCheck()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_HttpHealthCheck struct {
	HttpHealthCheck *HttpHealthCheck `protobuf:"bytes,3,opt,name=http_health_check,json=httpHealthCheck,proto3,oneof" json:"http_health_check,omitempty"`
}
type CreateSpecType_TcpHealthCheck struct {
	TcpHealthCheck *TcpHealthCheck `protobuf:"bytes,4,opt,name=tcp_health_check,json=tcpHealthCheck,proto3,oneof" json:"tcp_health_check,omitempty"`
}
type CreateSpecType_UdpHealthCheck struct {
	UdpHealthCheck *UdpHealthCheck `protobuf:"bytes,5,opt,name=udp_health_check,json=udpHealthCheck,proto3,oneof" json:"udp_health_check,omitempty"`
}
type CreateSpecType_IcmpHealthCheck struct {
	IcmpHealthCheck *schema.Empty `protobuf:"bytes,6,opt,name=icmp_health_check,json=icmpHealthCheck,proto3,oneof" json:"icmp_health_check,omitempty"`
}
type CreateSpecType_HttpsHealthCheck struct {
	HttpsHealthCheck *HttpHealthCheck `protobuf:"bytes,9,opt,name=https_health_check,json=httpsHealthCheck,proto3,oneof" json:"https_health_check,omitempty"`
}

func (*CreateSpecType_HttpHealthCheck) isCreateSpecType_HealthCheck()  {}
func (*CreateSpecType_TcpHealthCheck) isCreateSpecType_HealthCheck()   {}
func (*CreateSpecType_UdpHealthCheck) isCreateSpecType_HealthCheck()   {}
func (*CreateSpecType_IcmpHealthCheck) isCreateSpecType_HealthCheck()  {}
func (*CreateSpecType_HttpsHealthCheck) isCreateSpecType_HealthCheck() {}

func (m *CreateSpecType) GetHealthCheck() isCreateSpecType_HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *CreateSpecType) GetHttpHealthCheck() *HttpHealthCheck {
	if x, ok := m.GetHealthCheck().(*CreateSpecType_HttpHealthCheck); ok {
		return x.HttpHealthCheck
	}
	return nil
}

func (m *CreateSpecType) GetTcpHealthCheck() *TcpHealthCheck {
	if x, ok := m.GetHealthCheck().(*CreateSpecType_TcpHealthCheck); ok {
		return x.TcpHealthCheck
	}
	return nil
}

func (m *CreateSpecType) GetUdpHealthCheck() *UdpHealthCheck {
	if x, ok := m.GetHealthCheck().(*CreateSpecType_UdpHealthCheck); ok {
		return x.UdpHealthCheck
	}
	return nil
}

func (m *CreateSpecType) GetIcmpHealthCheck() *schema.Empty {
	if x, ok := m.GetHealthCheck().(*CreateSpecType_IcmpHealthCheck); ok {
		return x.IcmpHealthCheck
	}
	return nil
}

func (m *CreateSpecType) GetHttpsHealthCheck() *HttpHealthCheck {
	if x, ok := m.GetHealthCheck().(*CreateSpecType_HttpsHealthCheck); ok {
		return x.HttpsHealthCheck
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_HttpHealthCheck)(nil),
		(*CreateSpecType_TcpHealthCheck)(nil),
		(*CreateSpecType_UdpHealthCheck)(nil),
		(*CreateSpecType_IcmpHealthCheck)(nil),
		(*CreateSpecType_HttpsHealthCheck)(nil),
	}
}

// Replace DNS Load Balancer Health Check
//
// x-displayName: "Replace DNS Load Balancer Health Check"
// Replace DNS Load Balancer Health Check in a given namespace.
type ReplaceSpecType struct {
	// Types that are valid to be assigned to HealthCheck:
	//	*ReplaceSpecType_HttpHealthCheck
	//	*ReplaceSpecType_TcpHealthCheck
	//	*ReplaceSpecType_UdpHealthCheck
	//	*ReplaceSpecType_IcmpHealthCheck
	//	*ReplaceSpecType_HttpsHealthCheck
	HealthCheck isReplaceSpecType_HealthCheck `protobuf_oneof:"health_check"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6febe8700ef285c8, []int{5}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_HealthCheck interface {
	isReplaceSpecType_HealthCheck()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_HttpHealthCheck struct {
	HttpHealthCheck *HttpHealthCheck `protobuf:"bytes,3,opt,name=http_health_check,json=httpHealthCheck,proto3,oneof" json:"http_health_check,omitempty"`
}
type ReplaceSpecType_TcpHealthCheck struct {
	TcpHealthCheck *TcpHealthCheck `protobuf:"bytes,4,opt,name=tcp_health_check,json=tcpHealthCheck,proto3,oneof" json:"tcp_health_check,omitempty"`
}
type ReplaceSpecType_UdpHealthCheck struct {
	UdpHealthCheck *UdpHealthCheck `protobuf:"bytes,5,opt,name=udp_health_check,json=udpHealthCheck,proto3,oneof" json:"udp_health_check,omitempty"`
}
type ReplaceSpecType_IcmpHealthCheck struct {
	IcmpHealthCheck *schema.Empty `protobuf:"bytes,6,opt,name=icmp_health_check,json=icmpHealthCheck,proto3,oneof" json:"icmp_health_check,omitempty"`
}
type ReplaceSpecType_HttpsHealthCheck struct {
	HttpsHealthCheck *HttpHealthCheck `protobuf:"bytes,9,opt,name=https_health_check,json=httpsHealthCheck,proto3,oneof" json:"https_health_check,omitempty"`
}

func (*ReplaceSpecType_HttpHealthCheck) isReplaceSpecType_HealthCheck()  {}
func (*ReplaceSpecType_TcpHealthCheck) isReplaceSpecType_HealthCheck()   {}
func (*ReplaceSpecType_UdpHealthCheck) isReplaceSpecType_HealthCheck()   {}
func (*ReplaceSpecType_IcmpHealthCheck) isReplaceSpecType_HealthCheck()  {}
func (*ReplaceSpecType_HttpsHealthCheck) isReplaceSpecType_HealthCheck() {}

func (m *ReplaceSpecType) GetHealthCheck() isReplaceSpecType_HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *ReplaceSpecType) GetHttpHealthCheck() *HttpHealthCheck {
	if x, ok := m.GetHealthCheck().(*ReplaceSpecType_HttpHealthCheck); ok {
		return x.HttpHealthCheck
	}
	return nil
}

func (m *ReplaceSpecType) GetTcpHealthCheck() *TcpHealthCheck {
	if x, ok := m.GetHealthCheck().(*ReplaceSpecType_TcpHealthCheck); ok {
		return x.TcpHealthCheck
	}
	return nil
}

func (m *ReplaceSpecType) GetUdpHealthCheck() *UdpHealthCheck {
	if x, ok := m.GetHealthCheck().(*ReplaceSpecType_UdpHealthCheck); ok {
		return x.UdpHealthCheck
	}
	return nil
}

func (m *ReplaceSpecType) GetIcmpHealthCheck() *schema.Empty {
	if x, ok := m.GetHealthCheck().(*ReplaceSpecType_IcmpHealthCheck); ok {
		return x.IcmpHealthCheck
	}
	return nil
}

func (m *ReplaceSpecType) GetHttpsHealthCheck() *HttpHealthCheck {
	if x, ok := m.GetHealthCheck().(*ReplaceSpecType_HttpsHealthCheck); ok {
		return x.HttpsHealthCheck
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_HttpHealthCheck)(nil),
		(*ReplaceSpecType_TcpHealthCheck)(nil),
		(*ReplaceSpecType_UdpHealthCheck)(nil),
		(*ReplaceSpecType_IcmpHealthCheck)(nil),
		(*ReplaceSpecType_HttpsHealthCheck)(nil),
	}
}

// Get DNS Load Balancer Health Check
//
// x-displayName: "Get DNS Load Balancer Health Check"
// Get DNS Load Balancer Health Check details.
type GetSpecType struct {
	// Types that are valid to be assigned to HealthCheck:
	//	*GetSpecType_HttpHealthCheck
	//	*GetSpecType_TcpHealthCheck
	//	*GetSpecType_UdpHealthCheck
	//	*GetSpecType_IcmpHealthCheck
	//	*GetSpecType_HttpsHealthCheck
	HealthCheck isGetSpecType_HealthCheck `protobuf_oneof:"health_check"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6febe8700ef285c8, []int{6}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_HealthCheck interface {
	isGetSpecType_HealthCheck()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_HttpHealthCheck struct {
	HttpHealthCheck *HttpHealthCheck `protobuf:"bytes,3,opt,name=http_health_check,json=httpHealthCheck,proto3,oneof" json:"http_health_check,omitempty"`
}
type GetSpecType_TcpHealthCheck struct {
	TcpHealthCheck *TcpHealthCheck `protobuf:"bytes,4,opt,name=tcp_health_check,json=tcpHealthCheck,proto3,oneof" json:"tcp_health_check,omitempty"`
}
type GetSpecType_UdpHealthCheck struct {
	UdpHealthCheck *UdpHealthCheck `protobuf:"bytes,5,opt,name=udp_health_check,json=udpHealthCheck,proto3,oneof" json:"udp_health_check,omitempty"`
}
type GetSpecType_IcmpHealthCheck struct {
	IcmpHealthCheck *schema.Empty `protobuf:"bytes,6,opt,name=icmp_health_check,json=icmpHealthCheck,proto3,oneof" json:"icmp_health_check,omitempty"`
}
type GetSpecType_HttpsHealthCheck struct {
	HttpsHealthCheck *HttpHealthCheck `protobuf:"bytes,9,opt,name=https_health_check,json=httpsHealthCheck,proto3,oneof" json:"https_health_check,omitempty"`
}

func (*GetSpecType_HttpHealthCheck) isGetSpecType_HealthCheck()  {}
func (*GetSpecType_TcpHealthCheck) isGetSpecType_HealthCheck()   {}
func (*GetSpecType_UdpHealthCheck) isGetSpecType_HealthCheck()   {}
func (*GetSpecType_IcmpHealthCheck) isGetSpecType_HealthCheck()  {}
func (*GetSpecType_HttpsHealthCheck) isGetSpecType_HealthCheck() {}

func (m *GetSpecType) GetHealthCheck() isGetSpecType_HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *GetSpecType) GetHttpHealthCheck() *HttpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GetSpecType_HttpHealthCheck); ok {
		return x.HttpHealthCheck
	}
	return nil
}

func (m *GetSpecType) GetTcpHealthCheck() *TcpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GetSpecType_TcpHealthCheck); ok {
		return x.TcpHealthCheck
	}
	return nil
}

func (m *GetSpecType) GetUdpHealthCheck() *UdpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GetSpecType_UdpHealthCheck); ok {
		return x.UdpHealthCheck
	}
	return nil
}

func (m *GetSpecType) GetIcmpHealthCheck() *schema.Empty {
	if x, ok := m.GetHealthCheck().(*GetSpecType_IcmpHealthCheck); ok {
		return x.IcmpHealthCheck
	}
	return nil
}

func (m *GetSpecType) GetHttpsHealthCheck() *HttpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GetSpecType_HttpsHealthCheck); ok {
		return x.HttpsHealthCheck
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_HttpHealthCheck)(nil),
		(*GetSpecType_TcpHealthCheck)(nil),
		(*GetSpecType_UdpHealthCheck)(nil),
		(*GetSpecType_IcmpHealthCheck)(nil),
		(*GetSpecType_HttpsHealthCheck)(nil),
	}
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.dns_lb_health_check.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.dns_lb_health_check.GlobalSpecType")
	proto.RegisterType((*HttpHealthCheck)(nil), "ves.io.schema.dns_lb_health_check.HttpHealthCheck")
	golang_proto.RegisterType((*HttpHealthCheck)(nil), "ves.io.schema.dns_lb_health_check.HttpHealthCheck")
	proto.RegisterType((*TcpHealthCheck)(nil), "ves.io.schema.dns_lb_health_check.TcpHealthCheck")
	golang_proto.RegisterType((*TcpHealthCheck)(nil), "ves.io.schema.dns_lb_health_check.TcpHealthCheck")
	proto.RegisterType((*UdpHealthCheck)(nil), "ves.io.schema.dns_lb_health_check.UdpHealthCheck")
	golang_proto.RegisterType((*UdpHealthCheck)(nil), "ves.io.schema.dns_lb_health_check.UdpHealthCheck")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.dns_lb_health_check.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.dns_lb_health_check.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.dns_lb_health_check.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.dns_lb_health_check.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.dns_lb_health_check.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.dns_lb_health_check.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/dns_lb_health_check/types.proto", fileDescriptor_6febe8700ef285c8)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/dns_lb_health_check/types.proto", fileDescriptor_6febe8700ef285c8)
}

var fileDescriptor_6febe8700ef285c8 = []byte{
	// 877 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xc1, 0x6f, 0xdb, 0x54,
	0x18, 0xcf, 0x97, 0x38, 0x4d, 0xfa, 0xb6, 0xa5, 0xae, 0x35, 0x98, 0x29, 0xe8, 0xd5, 0xab, 0x34,
	0x29, 0x9a, 0x5c, 0x3b, 0x4d, 0xd2, 0x2e, 0xad, 0xc4, 0x24, 0x32, 0xa6, 0x45, 0xe5, 0x32, 0x85,
	0x22, 0x24, 0x34, 0x94, 0x39, 0xce, 0x9b, 0x6d, 0xcd, 0xc9, 0xb3, 0xec, 0x97, 0x40, 0x0f, 0x48,
	0x13, 0x27, 0x0e, 0x1c, 0x76, 0x01, 0x09, 0x4e, 0x1c, 0xf9, 0x1b, 0x30, 0x87, 0x1e, 0x11, 0xa7,
	0x1e, 0xa3, 0x9e, 0xa8, 0x7b, 0x19, 0xb7, 0x89, 0x13, 0x20, 0xa1, 0x21, 0xbf, 0xa4, 0x34, 0xf6,
	0x98, 0x98, 0xc4, 0xa9, 0x53, 0x0e, 0xf9, 0xe4, 0xf7, 0xbe, 0xef, 0xf7, 0xfb, 0xbe, 0xef, 0xa7,
	0xef, 0xbd, 0xe8, 0xa1, 0xf5, 0x11, 0x09, 0x34, 0x87, 0xea, 0x81, 0x69, 0x93, 0xbe, 0xa1, 0xf7,
	0x06, 0x41, 0xc7, 0xed, 0x76, 0x6c, 0x62, 0xb8, 0xcc, 0xee, 0x98, 0x36, 0x31, 0x1f, 0xea, 0x6c,
	0xdf, 0x23, 0x81, 0xe6, 0xf9, 0x94, 0x51, 0xe9, 0xea, 0x24, 0x5c, 0x9b, 0x84, 0x6b, 0xff, 0x12,
	0xbe, 0xb2, 0x6e, 0x39, 0xcc, 0x1e, 0x76, 0x35, 0x93, 0xf6, 0x75, 0x8b, 0x5a, 0x54, 0xe7, 0xc8,
	0xee, 0xf0, 0x01, 0x5f, 0xf1, 0x05, 0xff, 0x9a, 0x30, 0xae, 0xac, 0x5a, 0x94, 0x5a, 0x2e, 0x39,
	0x8b, 0x62, 0x4e, 0x9f, 0x04, 0xcc, 0xe8, 0x7b, 0xd3, 0x80, 0x2b, 0xc9, 0x0a, 0x07, 0x84, 0x4d,
	0x1d, 0x6f, 0x26, 0x1d, 0xd4, 0x63, 0x0e, 0x1d, 0x4c, 0x0b, 0x5d, 0x79, 0x23, 0xe9, 0x9c, 0xe9,
	0x61, 0xe5, 0xad, 0xa4, 0x6b, 0x64, 0xb8, 0x4e, 0xcf, 0x60, 0x64, 0xea, 0x55, 0x52, 0x5e, 0x87,
	0x7c, 0xd2, 0x49, 0x52, 0xaf, 0x3e, 0x1f, 0x11, 0xcc, 0x26, 0x58, 0x7b, 0x9c, 0x47, 0xa5, 0x3b,
	0x2e, 0xed, 0x1a, 0xee, 0xfb, 0x1e, 0x31, 0xf7, 0xf6, 0x3d, 0x22, 0xdd, 0x47, 0xcb, 0x36, 0x63,
	0x5e, 0x42, 0x29, 0x39, 0xa7, 0x40, 0xf9, 0x42, 0xb5, 0xaa, 0xfd, 0xa7, 0xa6, 0x5a, 0x8b, 0x31,
	0xaf, 0xc5, 0x37, 0x6e, 0xc5, 0xeb, 0x56, 0xa6, 0xbd, 0x64, 0x27, 0xb7, 0xa4, 0x8f, 0x91, 0xc8,
	0xcc, 0x54, 0x02, 0x81, 0x27, 0xd8, 0x78, 0x89, 0x04, 0x7b, 0x66, 0x8a, 0xbf, 0xc4, 0xcc, 0x34,
	0xfd, 0xb0, 0x97, 0xa2, 0xcf, 0xbf, 0x34, 0xfd, 0x07, 0xbd, 0x34, 0xfd, 0x30, 0xb1, 0x23, 0x35,
	0xd1, 0xb2, 0x63, 0xf6, 0x53, 0xfc, 0x0b, 0x9c, 0xff, 0x72, 0x8a, 0xff, 0x76, 0xdf, 0x63, 0xfb,
	0xb1, 0x02, 0x31, 0x60, 0x96, 0xa3, 0x8b, 0xa4, 0x58, 0x94, 0x20, 0x49, 0xb2, 0xf8, 0x3f, 0x44,
	0x16, 0x39, 0xdf, 0x6c, 0x8e, 0x1d, 0x54, 0x88, 0xe7, 0x93, 0x0e, 0x99, 0x5c, 0x50, 0xa0, 0x7c,
	0xa9, 0xa9, 0x8c, 0x3f, 0x83, 0xa3, 0x10, 0xa0, 0xf6, 0x24, 0x04, 0xf8, 0x3d, 0x84, 0xcc, 0x17,
	0x3f, 0x02, 0xfc, 0xf0, 0xeb, 0x41, 0xae, 0x70, 0x3d, 0x2f, 0x8f, 0x85, 0x32, 0xb4, 0x4f, 0x01,
	0xd2, 0xdb, 0xa8, 0xe8, 0x0c, 0x18, 0xf1, 0x47, 0x86, 0x2b, 0x17, 0x39, 0xf8, 0xea, 0x04, 0x9c,
	0xad, 0x55, 0x5e, 0x80, 0x46, 0xed, 0x7f, 0x20, 0x3b, 0xc5, 0xdf, 0x6e, 0xe6, 0xab, 0xea, 0x0d,
	0xb5, 0xd1, 0xbc, 0x86, 0x2e, 0xce, 0x16, 0x2e, 0xbd, 0x76, 0x10, 0x42, 0xee, 0x30, 0x84, 0x6c,
	0x14, 0xc2, 0x62, 0x4d, 0xdd, 0x56, 0xeb, 0xea, 0xa6, 0xba, 0xb5, 0x2b, 0x14, 0x41, 0xcc, 0xee,
	0x0a, 0xc5, 0xac, 0x98, 0x5b, 0xfb, 0x2e, 0x8b, 0x96, 0x52, 0xfd, 0x49, 0xdb, 0x48, 0x08, 0xc8,
	0xa0, 0x27, 0x83, 0x02, 0xe5, 0xc5, 0xe6, 0xb5, 0xa3, 0x10, 0xae, 0xb4, 0x6e, 0xbf, 0xf3, 0xae,
	0xa2, 0x2b, 0xad, 0xbd, 0xbd, 0xbb, 0xfa, 0x86, 0x56, 0xb9, 0xe7, 0xdf, 0x1b, 0xc4, 0xbf, 0xb8,
	0xa2, 0xbc, 0x9f, 0x93, 0x1f, 0x89, 0x6d, 0x0e, 0x91, 0xb6, 0x51, 0xc1, 0x27, 0x26, 0x71, 0x46,
	0x44, 0xce, 0x72, 0xf4, 0xea, 0x51, 0x08, 0x85, 0x29, 0xec, 0x2c, 0x7a, 0xfa, 0x75, 0x00, 0xd0,
	0x3e, 0x8d, 0x97, 0xbe, 0x04, 0xb4, 0x3c, 0x5b, 0x7d, 0xc7, 0xa3, 0x3e, 0xe3, 0x47, 0xe1, 0x52,
	0xf3, 0x7e, 0x14, 0xc2, 0x7b, 0x28, 0xdb, 0xa8, 0x20, 0xa1, 0x51, 0xe1, 0xb6, 0x11, 0xdb, 0x6a,
	0x65, 0xb3, 0x1a, 0xdb, 0xc6, 0xc4, 0x6e, 0xc5, 0x76, 0x7b, 0x13, 0xe5, 0xea, 0xf5, 0x1a, 0x77,
	0x72, 0xdb, 0x98, 0xd8, 0x1b, 0xdc, 0xb9, 0x85, 0x84, 0x46, 0xbd, 0x5e, 0x8b, 0x15, 0x8d, 0x6b,
	0x28, 0x5e, 0x5f, 0x90, 0x9f, 0x3d, 0xcb, 0x95, 0xa1, 0xbd, 0x64, 0x9f, 0x09, 0x70, 0x97, 0xfa,
	0x8c, 0xab, 0xba, 0xa1, 0x56, 0xd5, 0xda, 0xda, 0x1f, 0x80, 0x4a, 0xc9, 0x63, 0x20, 0xe1, 0x84,
	0x42, 0xe8, 0x39, 0x19, 0xb4, 0xb4, 0x0c, 0x97, 0xcf, 0x69, 0xef, 0x7f, 0x01, 0x2a, 0x25, 0xcf,
	0xa8, 0xa4, 0x24, 0x7a, 0xbf, 0xc8, 0x87, 0xd2, 0xcf, 0x8b, 0x70, 0xd6, 0x7d, 0x25, 0xdd, 0xfd,
	0xeb, 0xb3, 0x41, 0xe7, 0xaa, 0xff, 0x6f, 0x04, 0x54, 0xba, 0xe5, 0x13, 0x83, 0x91, 0xf9, 0x8d,
	0xfd, 0x6a, 0xdd, 0xd8, 0x3b, 0xcb, 0x3f, 0xdf, 0x4c, 0xfd, 0x19, 0x37, 0x95, 0xd4, 0xfd, 0x29,
	0x7e, 0xfe, 0x27, 0x24, 0x76, 0xf8, 0xd5, 0x99, 0xdb, 0x15, 0x8a, 0x05, 0x71, 0x71, 0xed, 0x5b,
	0x01, 0x2d, 0xb5, 0x89, 0xe7, 0x1a, 0xe6, 0x7c, 0x38, 0xe6, 0xc3, 0x91, 0x1a, 0x8e, 0xaf, 0x05,
	0x74, 0xe1, 0x0e, 0x61, 0xf3, 0xc1, 0x98, 0x0f, 0x46, 0x62, 0x30, 0x9a, 0x5f, 0xc1, 0xe1, 0x31,
	0xce, 0x8c, 0x8f, 0x71, 0xe6, 0xe9, 0x31, 0x86, 0x47, 0x11, 0x86, 0xef, 0x23, 0x0c, 0x3f, 0x45,
	0x18, 0x0e, 0x23, 0x0c, 0xe3, 0x08, 0xc3, 0x2f, 0x11, 0x86, 0x27, 0x11, 0xce, 0x3c, 0x8d, 0x30,
	0x3c, 0x3e, 0xc1, 0x99, 0x83, 0x13, 0x0c, 0x87, 0x27, 0x38, 0x33, 0x3e, 0xc1, 0x99, 0x8f, 0x3e,
	0xb4, 0xa8, 0xf7, 0xd0, 0xd2, 0x46, 0xd4, 0x65, 0xc4, 0xf7, 0x0d, 0x6d, 0x18, 0xe8, 0xfc, 0xe3,
	0x01, 0xf5, 0xfb, 0xeb, 0x9e, 0x4f, 0x47, 0x4e, 0x8f, 0xf8, 0xeb, 0xa7, 0x6e, 0xdd, 0xeb, 0x5a,
	0x54, 0x27, 0x9f, 0xb2, 0xe9, 0x93, 0xe4, 0xc5, 0x8f, 0xb9, 0xee, 0x02, 0x7f, 0xa2, 0xd4, 0xfe,
	0x0e, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x0d, 0x81, 0x49, 0xf8, 0x0d, 0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HealthCheck == nil {
		if this.HealthCheck != nil {
			return false
		}
	} else if this.HealthCheck == nil {
		return false
	} else if !this.HealthCheck.Equal(that1.HealthCheck) {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	return true
}
func (this *GlobalSpecType_HttpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HttpHealthCheck)
	if !ok {
		that2, ok := that.(GlobalSpecType_HttpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpHealthCheck.Equal(that1.HttpHealthCheck) {
		return false
	}
	return true
}
func (this *GlobalSpecType_TcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_TcpHealthCheck)
	if !ok {
		that2, ok := that.(GlobalSpecType_TcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpHealthCheck.Equal(that1.TcpHealthCheck) {
		return false
	}
	return true
}
func (this *GlobalSpecType_UdpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_UdpHealthCheck)
	if !ok {
		that2, ok := that.(GlobalSpecType_UdpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UdpHealthCheck.Equal(that1.UdpHealthCheck) {
		return false
	}
	return true
}
func (this *GlobalSpecType_IcmpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_IcmpHealthCheck)
	if !ok {
		that2, ok := that.(GlobalSpecType_IcmpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IcmpHealthCheck.Equal(that1.IcmpHealthCheck) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HttpsHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HttpsHealthCheck)
	if !ok {
		that2, ok := that.(GlobalSpecType_HttpsHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsHealthCheck.Equal(that1.HttpsHealthCheck) {
		return false
	}
	return true
}
func (this *HttpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpHealthCheck)
	if !ok {
		that2, ok := that.(HttpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Send != that1.Send {
		return false
	}
	if this.Receive != that1.Receive {
		return false
	}
	if this.HealthCheckPort != that1.HealthCheckPort {
		return false
	}
	return true
}
func (this *TcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TcpHealthCheck)
	if !ok {
		that2, ok := that.(TcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Send != that1.Send {
		return false
	}
	if this.Receive != that1.Receive {
		return false
	}
	if this.HealthCheckPort != that1.HealthCheckPort {
		return false
	}
	return true
}
func (this *UdpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UdpHealthCheck)
	if !ok {
		that2, ok := that.(UdpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Send != that1.Send {
		return false
	}
	if this.Receive != that1.Receive {
		return false
	}
	if this.HealthCheckPort != that1.HealthCheckPort {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HealthCheck == nil {
		if this.HealthCheck != nil {
			return false
		}
	} else if this.HealthCheck == nil {
		return false
	} else if !this.HealthCheck.Equal(that1.HealthCheck) {
		return false
	}
	return true
}
func (this *CreateSpecType_HttpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HttpHealthCheck)
	if !ok {
		that2, ok := that.(CreateSpecType_HttpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpHealthCheck.Equal(that1.HttpHealthCheck) {
		return false
	}
	return true
}
func (this *CreateSpecType_TcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_TcpHealthCheck)
	if !ok {
		that2, ok := that.(CreateSpecType_TcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpHealthCheck.Equal(that1.TcpHealthCheck) {
		return false
	}
	return true
}
func (this *CreateSpecType_UdpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_UdpHealthCheck)
	if !ok {
		that2, ok := that.(CreateSpecType_UdpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UdpHealthCheck.Equal(that1.UdpHealthCheck) {
		return false
	}
	return true
}
func (this *CreateSpecType_IcmpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_IcmpHealthCheck)
	if !ok {
		that2, ok := that.(CreateSpecType_IcmpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IcmpHealthCheck.Equal(that1.IcmpHealthCheck) {
		return false
	}
	return true
}
func (this *CreateSpecType_HttpsHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HttpsHealthCheck)
	if !ok {
		that2, ok := that.(CreateSpecType_HttpsHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsHealthCheck.Equal(that1.HttpsHealthCheck) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HealthCheck == nil {
		if this.HealthCheck != nil {
			return false
		}
	} else if this.HealthCheck == nil {
		return false
	} else if !this.HealthCheck.Equal(that1.HealthCheck) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HttpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HttpHealthCheck)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HttpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpHealthCheck.Equal(that1.HttpHealthCheck) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_TcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_TcpHealthCheck)
	if !ok {
		that2, ok := that.(ReplaceSpecType_TcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpHealthCheck.Equal(that1.TcpHealthCheck) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_UdpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_UdpHealthCheck)
	if !ok {
		that2, ok := that.(ReplaceSpecType_UdpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UdpHealthCheck.Equal(that1.UdpHealthCheck) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_IcmpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_IcmpHealthCheck)
	if !ok {
		that2, ok := that.(ReplaceSpecType_IcmpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IcmpHealthCheck.Equal(that1.IcmpHealthCheck) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HttpsHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HttpsHealthCheck)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HttpsHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsHealthCheck.Equal(that1.HttpsHealthCheck) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HealthCheck == nil {
		if this.HealthCheck != nil {
			return false
		}
	} else if this.HealthCheck == nil {
		return false
	} else if !this.HealthCheck.Equal(that1.HealthCheck) {
		return false
	}
	return true
}
func (this *GetSpecType_HttpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HttpHealthCheck)
	if !ok {
		that2, ok := that.(GetSpecType_HttpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpHealthCheck.Equal(that1.HttpHealthCheck) {
		return false
	}
	return true
}
func (this *GetSpecType_TcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_TcpHealthCheck)
	if !ok {
		that2, ok := that.(GetSpecType_TcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpHealthCheck.Equal(that1.TcpHealthCheck) {
		return false
	}
	return true
}
func (this *GetSpecType_UdpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_UdpHealthCheck)
	if !ok {
		that2, ok := that.(GetSpecType_UdpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UdpHealthCheck.Equal(that1.UdpHealthCheck) {
		return false
	}
	return true
}
func (this *GetSpecType_IcmpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_IcmpHealthCheck)
	if !ok {
		that2, ok := that.(GetSpecType_IcmpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IcmpHealthCheck.Equal(that1.IcmpHealthCheck) {
		return false
	}
	return true
}
func (this *GetSpecType_HttpsHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HttpsHealthCheck)
	if !ok {
		that2, ok := that.(GetSpecType_HttpsHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsHealthCheck.Equal(that1.HttpsHealthCheck) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dns_lb_health_check.GlobalSpecType{")
	if this.HealthCheck != nil {
		s = append(s, "HealthCheck: "+fmt.Sprintf("%#v", this.HealthCheck)+",\n")
	}
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "Interval: "+fmt.Sprintf("%#v", this.Interval)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_HttpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_lb_health_check.GlobalSpecType_HttpHealthCheck{` +
		`HttpHealthCheck:` + fmt.Sprintf("%#v", this.HttpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_TcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_lb_health_check.GlobalSpecType_TcpHealthCheck{` +
		`TcpHealthCheck:` + fmt.Sprintf("%#v", this.TcpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_UdpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_lb_health_check.GlobalSpecType_UdpHealthCheck{` +
		`UdpHealthCheck:` + fmt.Sprintf("%#v", this.UdpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_IcmpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_lb_health_check.GlobalSpecType_IcmpHealthCheck{` +
		`IcmpHealthCheck:` + fmt.Sprintf("%#v", this.IcmpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HttpsHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_lb_health_check.GlobalSpecType_HttpsHealthCheck{` +
		`HttpsHealthCheck:` + fmt.Sprintf("%#v", this.HttpsHealthCheck) + `}`}, ", ")
	return s
}
func (this *HttpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dns_lb_health_check.HttpHealthCheck{")
	s = append(s, "Send: "+fmt.Sprintf("%#v", this.Send)+",\n")
	s = append(s, "Receive: "+fmt.Sprintf("%#v", this.Receive)+",\n")
	s = append(s, "HealthCheckPort: "+fmt.Sprintf("%#v", this.HealthCheckPort)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dns_lb_health_check.TcpHealthCheck{")
	s = append(s, "Send: "+fmt.Sprintf("%#v", this.Send)+",\n")
	s = append(s, "Receive: "+fmt.Sprintf("%#v", this.Receive)+",\n")
	s = append(s, "HealthCheckPort: "+fmt.Sprintf("%#v", this.HealthCheckPort)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UdpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dns_lb_health_check.UdpHealthCheck{")
	s = append(s, "Send: "+fmt.Sprintf("%#v", this.Send)+",\n")
	s = append(s, "Receive: "+fmt.Sprintf("%#v", this.Receive)+",\n")
	s = append(s, "HealthCheckPort: "+fmt.Sprintf("%#v", this.HealthCheckPort)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dns_lb_health_check.CreateSpecType{")
	if this.HealthCheck != nil {
		s = append(s, "HealthCheck: "+fmt.Sprintf("%#v", this.HealthCheck)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_HttpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_lb_health_check.CreateSpecType_HttpHealthCheck{` +
		`HttpHealthCheck:` + fmt.Sprintf("%#v", this.HttpHealthCheck) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_TcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_lb_health_check.CreateSpecType_TcpHealthCheck{` +
		`TcpHealthCheck:` + fmt.Sprintf("%#v", this.TcpHealthCheck) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_UdpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_lb_health_check.CreateSpecType_UdpHealthCheck{` +
		`UdpHealthCheck:` + fmt.Sprintf("%#v", this.UdpHealthCheck) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_IcmpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_lb_health_check.CreateSpecType_IcmpHealthCheck{` +
		`IcmpHealthCheck:` + fmt.Sprintf("%#v", this.IcmpHealthCheck) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_HttpsHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_lb_health_check.CreateSpecType_HttpsHealthCheck{` +
		`HttpsHealthCheck:` + fmt.Sprintf("%#v", this.HttpsHealthCheck) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dns_lb_health_check.ReplaceSpecType{")
	if this.HealthCheck != nil {
		s = append(s, "HealthCheck: "+fmt.Sprintf("%#v", this.HealthCheck)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_HttpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_lb_health_check.ReplaceSpecType_HttpHealthCheck{` +
		`HttpHealthCheck:` + fmt.Sprintf("%#v", this.HttpHealthCheck) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_TcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_lb_health_check.ReplaceSpecType_TcpHealthCheck{` +
		`TcpHealthCheck:` + fmt.Sprintf("%#v", this.TcpHealthCheck) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_UdpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_lb_health_check.ReplaceSpecType_UdpHealthCheck{` +
		`UdpHealthCheck:` + fmt.Sprintf("%#v", this.UdpHealthCheck) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_IcmpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_lb_health_check.ReplaceSpecType_IcmpHealthCheck{` +
		`IcmpHealthCheck:` + fmt.Sprintf("%#v", this.IcmpHealthCheck) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_HttpsHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_lb_health_check.ReplaceSpecType_HttpsHealthCheck{` +
		`HttpsHealthCheck:` + fmt.Sprintf("%#v", this.HttpsHealthCheck) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dns_lb_health_check.GetSpecType{")
	if this.HealthCheck != nil {
		s = append(s, "HealthCheck: "+fmt.Sprintf("%#v", this.HealthCheck)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_HttpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_lb_health_check.GetSpecType_HttpHealthCheck{` +
		`HttpHealthCheck:` + fmt.Sprintf("%#v", this.HttpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GetSpecType_TcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_lb_health_check.GetSpecType_TcpHealthCheck{` +
		`TcpHealthCheck:` + fmt.Sprintf("%#v", this.TcpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GetSpecType_UdpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_lb_health_check.GetSpecType_UdpHealthCheck{` +
		`UdpHealthCheck:` + fmt.Sprintf("%#v", this.UdpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GetSpecType_IcmpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_lb_health_check.GetSpecType_IcmpHealthCheck{` +
		`IcmpHealthCheck:` + fmt.Sprintf("%#v", this.IcmpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GetSpecType_HttpsHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_lb_health_check.GetSpecType_HttpsHealthCheck{` +
		`HttpsHealthCheck:` + fmt.Sprintf("%#v", this.HttpsHealthCheck) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HealthCheck != nil {
		{
			size := m.HealthCheck.Size()
			i -= size
			if _, err := m.HealthCheck.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Interval != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x40
	}
	if m.Timeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x38
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_HttpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_HttpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpHealthCheck != nil {
		{
			size, err := m.HttpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_TcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_TcpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TcpHealthCheck != nil {
		{
			size, err := m.TcpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_UdpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_UdpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UdpHealthCheck != nil {
		{
			size, err := m.UdpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_IcmpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_IcmpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IcmpHealthCheck != nil {
		{
			size, err := m.IcmpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_HttpsHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_HttpsHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsHealthCheck != nil {
		{
			size, err := m.HttpsHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *HttpHealthCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HealthCheckPort != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HealthCheckPort))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Receive) > 0 {
		i -= len(m.Receive)
		copy(dAtA[i:], m.Receive)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Receive)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Send) > 0 {
		i -= len(m.Send)
		copy(dAtA[i:], m.Send)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Send)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TcpHealthCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TcpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HealthCheckPort != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HealthCheckPort))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Receive) > 0 {
		i -= len(m.Receive)
		copy(dAtA[i:], m.Receive)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Receive)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Send) > 0 {
		i -= len(m.Send)
		copy(dAtA[i:], m.Send)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Send)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UdpHealthCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UdpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UdpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HealthCheckPort != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HealthCheckPort))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Receive) > 0 {
		i -= len(m.Receive)
		copy(dAtA[i:], m.Receive)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Receive)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Send) > 0 {
		i -= len(m.Send)
		copy(dAtA[i:], m.Send)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Send)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HealthCheck != nil {
		{
			size := m.HealthCheck.Size()
			i -= size
			if _, err := m.HealthCheck.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_HttpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_HttpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpHealthCheck != nil {
		{
			size, err := m.HttpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_TcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_TcpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TcpHealthCheck != nil {
		{
			size, err := m.TcpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_UdpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_UdpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UdpHealthCheck != nil {
		{
			size, err := m.UdpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_IcmpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_IcmpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IcmpHealthCheck != nil {
		{
			size, err := m.IcmpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_HttpsHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_HttpsHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsHealthCheck != nil {
		{
			size, err := m.HttpsHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HealthCheck != nil {
		{
			size := m.HealthCheck.Size()
			i -= size
			if _, err := m.HealthCheck.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_HttpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_HttpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpHealthCheck != nil {
		{
			size, err := m.HttpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_TcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_TcpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TcpHealthCheck != nil {
		{
			size, err := m.TcpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_UdpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_UdpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UdpHealthCheck != nil {
		{
			size, err := m.UdpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_IcmpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_IcmpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IcmpHealthCheck != nil {
		{
			size, err := m.IcmpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_HttpsHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_HttpsHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsHealthCheck != nil {
		{
			size, err := m.HttpsHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HealthCheck != nil {
		{
			size := m.HealthCheck.Size()
			i -= size
			if _, err := m.HealthCheck.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_HttpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_HttpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpHealthCheck != nil {
		{
			size, err := m.HttpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_TcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_TcpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TcpHealthCheck != nil {
		{
			size, err := m.TcpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_UdpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_UdpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UdpHealthCheck != nil {
		{
			size, err := m.UdpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_IcmpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_IcmpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IcmpHealthCheck != nil {
		{
			size, err := m.IcmpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_HttpsHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_HttpsHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsHealthCheck != nil {
		{
			size, err := m.HttpsHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HealthCheck != nil {
		n += m.HealthCheck.Size()
	}
	if m.Timeout != 0 {
		n += 1 + sovTypes(uint64(m.Timeout))
	}
	if m.Interval != 0 {
		n += 1 + sovTypes(uint64(m.Interval))
	}
	return n
}

func (m *GlobalSpecType_HttpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpHealthCheck != nil {
		l = m.HttpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_TcpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TcpHealthCheck != nil {
		l = m.TcpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_UdpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UdpHealthCheck != nil {
		l = m.UdpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_IcmpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IcmpHealthCheck != nil {
		l = m.IcmpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HttpsHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsHealthCheck != nil {
		l = m.HttpsHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HttpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Send)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Receive)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HealthCheckPort != 0 {
		n += 1 + sovTypes(uint64(m.HealthCheckPort))
	}
	return n
}

func (m *TcpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Send)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Receive)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HealthCheckPort != 0 {
		n += 1 + sovTypes(uint64(m.HealthCheckPort))
	}
	return n
}

func (m *UdpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Send)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Receive)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HealthCheckPort != 0 {
		n += 1 + sovTypes(uint64(m.HealthCheckPort))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HealthCheck != nil {
		n += m.HealthCheck.Size()
	}
	return n
}

func (m *CreateSpecType_HttpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpHealthCheck != nil {
		l = m.HttpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_TcpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TcpHealthCheck != nil {
		l = m.TcpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_UdpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UdpHealthCheck != nil {
		l = m.UdpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_IcmpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IcmpHealthCheck != nil {
		l = m.IcmpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_HttpsHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsHealthCheck != nil {
		l = m.HttpsHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HealthCheck != nil {
		n += m.HealthCheck.Size()
	}
	return n
}

func (m *ReplaceSpecType_HttpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpHealthCheck != nil {
		l = m.HttpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_TcpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TcpHealthCheck != nil {
		l = m.TcpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_UdpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UdpHealthCheck != nil {
		l = m.UdpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_IcmpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IcmpHealthCheck != nil {
		l = m.IcmpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_HttpsHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsHealthCheck != nil {
		l = m.HttpsHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HealthCheck != nil {
		n += m.HealthCheck.Size()
	}
	return n
}

func (m *GetSpecType_HttpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpHealthCheck != nil {
		l = m.HttpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_TcpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TcpHealthCheck != nil {
		l = m.TcpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_UdpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UdpHealthCheck != nil {
		l = m.UdpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_IcmpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IcmpHealthCheck != nil {
		l = m.IcmpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_HttpsHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsHealthCheck != nil {
		l = m.HttpsHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`HealthCheck:` + fmt.Sprintf("%v", this.HealthCheck) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`Interval:` + fmt.Sprintf("%v", this.Interval) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HttpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HttpHealthCheck{`,
		`HttpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpHealthCheck), "HttpHealthCheck", "HttpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_TcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_TcpHealthCheck{`,
		`TcpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.TcpHealthCheck), "TcpHealthCheck", "TcpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_UdpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_UdpHealthCheck{`,
		`UdpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.UdpHealthCheck), "UdpHealthCheck", "UdpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_IcmpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_IcmpHealthCheck{`,
		`IcmpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.IcmpHealthCheck), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HttpsHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HttpsHealthCheck{`,
		`HttpsHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpsHealthCheck), "HttpHealthCheck", "HttpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HttpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HttpHealthCheck{`,
		`Send:` + fmt.Sprintf("%v", this.Send) + `,`,
		`Receive:` + fmt.Sprintf("%v", this.Receive) + `,`,
		`HealthCheckPort:` + fmt.Sprintf("%v", this.HealthCheckPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TcpHealthCheck{`,
		`Send:` + fmt.Sprintf("%v", this.Send) + `,`,
		`Receive:` + fmt.Sprintf("%v", this.Receive) + `,`,
		`HealthCheckPort:` + fmt.Sprintf("%v", this.HealthCheckPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UdpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UdpHealthCheck{`,
		`Send:` + fmt.Sprintf("%v", this.Send) + `,`,
		`Receive:` + fmt.Sprintf("%v", this.Receive) + `,`,
		`HealthCheckPort:` + fmt.Sprintf("%v", this.HealthCheckPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`HealthCheck:` + fmt.Sprintf("%v", this.HealthCheck) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HttpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HttpHealthCheck{`,
		`HttpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpHealthCheck), "HttpHealthCheck", "HttpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_TcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_TcpHealthCheck{`,
		`TcpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.TcpHealthCheck), "TcpHealthCheck", "TcpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_UdpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_UdpHealthCheck{`,
		`UdpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.UdpHealthCheck), "UdpHealthCheck", "UdpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_IcmpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_IcmpHealthCheck{`,
		`IcmpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.IcmpHealthCheck), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HttpsHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HttpsHealthCheck{`,
		`HttpsHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpsHealthCheck), "HttpHealthCheck", "HttpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`HealthCheck:` + fmt.Sprintf("%v", this.HealthCheck) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HttpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HttpHealthCheck{`,
		`HttpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpHealthCheck), "HttpHealthCheck", "HttpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_TcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_TcpHealthCheck{`,
		`TcpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.TcpHealthCheck), "TcpHealthCheck", "TcpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_UdpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_UdpHealthCheck{`,
		`UdpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.UdpHealthCheck), "UdpHealthCheck", "UdpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_IcmpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_IcmpHealthCheck{`,
		`IcmpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.IcmpHealthCheck), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HttpsHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HttpsHealthCheck{`,
		`HttpsHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpsHealthCheck), "HttpHealthCheck", "HttpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`HealthCheck:` + fmt.Sprintf("%v", this.HealthCheck) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HttpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HttpHealthCheck{`,
		`HttpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpHealthCheck), "HttpHealthCheck", "HttpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_TcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_TcpHealthCheck{`,
		`TcpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.TcpHealthCheck), "TcpHealthCheck", "TcpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_UdpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_UdpHealthCheck{`,
		`UdpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.UdpHealthCheck), "UdpHealthCheck", "UdpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_IcmpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_IcmpHealthCheck{`,
		`IcmpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.IcmpHealthCheck), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HttpsHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HttpsHealthCheck{`,
		`HttpsHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpsHealthCheck), "HttpHealthCheck", "HttpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GlobalSpecType_HttpHealthCheck{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TcpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GlobalSpecType_TcpHealthCheck{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UdpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UdpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GlobalSpecType_UdpHealthCheck{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcmpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GlobalSpecType_IcmpHealthCheck{v}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GlobalSpecType_HttpsHealthCheck{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpHealthCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpHealthCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpHealthCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Send", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Send = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthCheckPort", wireType)
			}
			m.HealthCheckPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HealthCheckPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpHealthCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpHealthCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpHealthCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Send", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Send = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthCheckPort", wireType)
			}
			m.HealthCheckPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HealthCheckPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UdpHealthCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UdpHealthCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UdpHealthCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Send", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Send = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthCheckPort", wireType)
			}
			m.HealthCheckPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HealthCheckPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &CreateSpecType_HttpHealthCheck{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TcpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &CreateSpecType_TcpHealthCheck{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UdpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UdpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &CreateSpecType_UdpHealthCheck{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcmpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &CreateSpecType_IcmpHealthCheck{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &CreateSpecType_HttpsHealthCheck{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &ReplaceSpecType_HttpHealthCheck{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TcpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &ReplaceSpecType_TcpHealthCheck{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UdpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UdpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &ReplaceSpecType_UdpHealthCheck{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcmpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &ReplaceSpecType_IcmpHealthCheck{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &ReplaceSpecType_HttpsHealthCheck{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GetSpecType_HttpHealthCheck{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TcpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GetSpecType_TcpHealthCheck{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UdpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UdpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GetSpecType_UdpHealthCheck{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcmpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GetSpecType_IcmpHealthCheck{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GetSpecType_HttpsHealthCheck{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
