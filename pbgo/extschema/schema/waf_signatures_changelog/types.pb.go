// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/waf_signatures_changelog/types.proto

package waf_signatures_changelog

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_firewall"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GlobalSpecType
//
// x-displayName: "Signatures Changelog Specification"
type GlobalSpecType struct {
	// Release Date
	//
	// x-displayName: "Release Date"
	// x-example: "2022-12-06
	// Changelog release date.
	ReleaseDate string `protobuf:"bytes,1,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	// Added Signatures
	//
	// x-displayName: "Added Signatures"
	// x-example: ["200101852", "200103290"]
	// A list of new signatures in the release.
	AddedSignatures []string `protobuf:"bytes,2,rep,name=added_signatures,json=addedSignatures,proto3" json:"added_signatures,omitempty"`
	// Updated Signatures
	//
	// x-displayName: "Updated Signatures"
	// x-example: ["200101852", "200103290"]
	// A list of updated signatures in the release.
	UpdatedSignatures []string `protobuf:"bytes,3,rep,name=updated_signatures,json=updatedSignatures,proto3" json:"updated_signatures,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_126413124a3f5ee5, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetReleaseDate() string {
	if m != nil {
		return m.ReleaseDate
	}
	return ""
}

func (m *GlobalSpecType) GetAddedSignatures() []string {
	if m != nil {
		return m.AddedSignatures
	}
	return nil
}

func (m *GlobalSpecType) GetUpdatedSignatures() []string {
	if m != nil {
		return m.UpdatedSignatures
	}
	return nil
}

// Create Signatures Changelog
//
// x-displayName: "Create Signatures Changelog"
// Create signatures changelog when signatures are released
type CreateSpecType struct {
	ReleaseDate       string   `protobuf:"bytes,1,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	AddedSignatures   []string `protobuf:"bytes,2,rep,name=added_signatures,json=addedSignatures,proto3" json:"added_signatures,omitempty"`
	UpdatedSignatures []string `protobuf:"bytes,3,rep,name=updated_signatures,json=updatedSignatures,proto3" json:"updated_signatures,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_126413124a3f5ee5, []int{1}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetReleaseDate() string {
	if m != nil {
		return m.ReleaseDate
	}
	return ""
}

func (m *CreateSpecType) GetAddedSignatures() []string {
	if m != nil {
		return m.AddedSignatures
	}
	return nil
}

func (m *CreateSpecType) GetUpdatedSignatures() []string {
	if m != nil {
		return m.UpdatedSignatures
	}
	return nil
}

// Replace Signatures Changelog
//
// x-displayName: "Replace Signatures Changelog"
// Update signatures changelog by replacing the existing spec with the provided one
type ReplaceSpecType struct {
	ReleaseDate       string   `protobuf:"bytes,1,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	AddedSignatures   []string `protobuf:"bytes,2,rep,name=added_signatures,json=addedSignatures,proto3" json:"added_signatures,omitempty"`
	UpdatedSignatures []string `protobuf:"bytes,3,rep,name=updated_signatures,json=updatedSignatures,proto3" json:"updated_signatures,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_126413124a3f5ee5, []int{2}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplaceSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetReleaseDate() string {
	if m != nil {
		return m.ReleaseDate
	}
	return ""
}

func (m *ReplaceSpecType) GetAddedSignatures() []string {
	if m != nil {
		return m.AddedSignatures
	}
	return nil
}

func (m *ReplaceSpecType) GetUpdatedSignatures() []string {
	if m != nil {
		return m.UpdatedSignatures
	}
	return nil
}

// Get Signatures Changelog
//
// x-displayName: "Get Signatures Changelog"
// Get signatures changelog
type GetSpecType struct {
	ReleaseDate       string   `protobuf:"bytes,1,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	AddedSignatures   []string `protobuf:"bytes,2,rep,name=added_signatures,json=addedSignatures,proto3" json:"added_signatures,omitempty"`
	UpdatedSignatures []string `protobuf:"bytes,3,rep,name=updated_signatures,json=updatedSignatures,proto3" json:"updated_signatures,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_126413124a3f5ee5, []int{3}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSpecType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetReleaseDate() string {
	if m != nil {
		return m.ReleaseDate
	}
	return ""
}

func (m *GetSpecType) GetAddedSignatures() []string {
	if m != nil {
		return m.AddedSignatures
	}
	return nil
}

func (m *GetSpecType) GetUpdatedSignatures() []string {
	if m != nil {
		return m.UpdatedSignatures
	}
	return nil
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.waf_signatures_changelog.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.waf_signatures_changelog.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.waf_signatures_changelog.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.waf_signatures_changelog.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/waf_signatures_changelog/types.proto", fileDescriptor_126413124a3f5ee5)
}

var fileDescriptor_126413124a3f5ee5 = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xbd, 0xae, 0xd3, 0x30,
	0x14, 0x8e, 0xb9, 0x12, 0xd2, 0xf5, 0x45, 0xf7, 0xd2, 0x4c, 0xa5, 0x20, 0xab, 0x74, 0xa8, 0xca,
	0x90, 0x58, 0x82, 0x8d, 0x81, 0x01, 0x90, 0xba, 0xb7, 0x4c, 0x08, 0x29, 0x72, 0x92, 0x13, 0xd7,
	0xc2, 0xad, 0x2d, 0xc7, 0x49, 0xe9, 0xc6, 0x0b, 0x20, 0x21, 0x76, 0x24, 0xd8, 0x78, 0x14, 0xc4,
	0xd4, 0xb1, 0x23, 0x4d, 0x17, 0xc6, 0x3e, 0x02, 0xaa, 0x9b, 0x42, 0x53, 0x09, 0xb1, 0x76, 0x3b,
	0xe7, 0x7c, 0x3f, 0xfe, 0x74, 0x64, 0x1b, 0x3f, 0x2e, 0x21, 0x0f, 0x85, 0xa2, 0x79, 0x32, 0x81,
	0x29, 0xa3, 0x73, 0x96, 0x45, 0xb9, 0xe0, 0x33, 0x66, 0x0b, 0x03, 0x79, 0x94, 0x4c, 0xd8, 0x8c,
	0x83, 0x54, 0x9c, 0xda, 0x85, 0x86, 0x3c, 0xd4, 0x46, 0x59, 0xe5, 0xf7, 0xf7, 0x9a, 0x70, 0xaf,
	0x09, 0xff, 0xa5, 0xe9, 0x04, 0x5c, 0xd8, 0x49, 0x11, 0x87, 0x89, 0x9a, 0x52, 0xae, 0xb8, 0xa2,
	0x4e, 0x1e, 0x17, 0x99, 0xeb, 0x5c, 0xe3, 0xaa, 0xbd, 0x6d, 0xa7, 0xdf, 0x8c, 0xc2, 0xb4, 0x8e,
	0x32, 0x61, 0x60, 0xce, 0xa4, 0x3c, 0x3e, 0xbe, 0x73, 0xbf, 0xc9, 0x53, 0xda, 0x0a, 0x35, 0x3b,
	0x80, 0xf7, 0x9a, 0xe0, 0xb1, 0xee, 0x41, 0x13, 0x2a, 0x99, 0x14, 0x29, 0xb3, 0x50, 0xa3, 0xdd,
	0x13, 0x54, 0xc0, 0x3c, 0x6a, 0x58, 0xf7, 0x3e, 0x20, 0x7c, 0x3d, 0x94, 0x2a, 0x66, 0x72, 0xac,
	0x21, 0x79, 0xb5, 0xd0, 0xe0, 0x3f, 0xc4, 0x77, 0x0c, 0x48, 0x60, 0x39, 0x44, 0x3b, 0xab, 0x36,
	0xea, 0xa2, 0xc1, 0xe5, 0xe8, 0xaa, 0x9e, 0xbd, 0x64, 0x16, 0xfc, 0x47, 0xf8, 0x2e, 0x4b, 0x53,
	0x48, 0x8f, 0x56, 0xd4, 0xbe, 0xd5, 0xbd, 0x18, 0x5c, 0x8e, 0x6e, 0xdc, 0x7c, 0xfc, 0x67, 0xec,
	0x07, 0xd8, 0x2f, 0xf4, 0xce, 0xa7, 0x41, 0xbe, 0x70, 0xe4, 0x56, 0x8d, 0xfc, 0xa5, 0xf7, 0xbe,
	0x20, 0x7c, 0xfd, 0xc2, 0x00, 0xb3, 0x70, 0x16, 0x79, 0x9e, 0xb6, 0x7e, 0x3c, 0x3b, 0xd9, 0x4f,
	0xef, 0x2b, 0xc2, 0x37, 0x23, 0xd0, 0x92, 0x25, 0xe7, 0x9b, 0xf1, 0x33, 0xc2, 0x57, 0x43, 0xb0,
	0xe7, 0x9a, 0xef, 0xf9, 0x27, 0xb4, 0x5c, 0x13, 0x6f, 0xb5, 0x26, 0xde, 0x76, 0x4d, 0xd0, 0xfb,
	0x8a, 0xa0, 0x6f, 0x15, 0x41, 0xdf, 0x2b, 0x82, 0x96, 0x15, 0x41, 0x3f, 0x2b, 0x82, 0x7e, 0x55,
	0xc4, 0xdb, 0x56, 0x04, 0x7d, 0xdc, 0x10, 0x6f, 0xb9, 0x21, 0xde, 0x6a, 0x43, 0xbc, 0xd7, 0x6f,
	0xb8, 0xd2, 0x6f, 0x79, 0x58, 0x2a, 0x69, 0xc1, 0x18, 0x16, 0x16, 0x39, 0x75, 0x45, 0xa6, 0xcc,
	0x34, 0xd0, 0x46, 0x95, 0x22, 0x05, 0x13, 0x1c, 0x60, 0xaa, 0x63, 0xae, 0x28, 0xbc, 0xb3, 0xf5,
	0xf5, 0xff, 0xcf, 0x77, 0x10, 0xdf, 0x76, 0x4f, 0xe2, 0xc9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xc6, 0x9e, 0xba, 0xe7, 0x3f, 0x04, 0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ReleaseDate != that1.ReleaseDate {
		return false
	}
	if len(this.AddedSignatures) != len(that1.AddedSignatures) {
		return false
	}
	for i := range this.AddedSignatures {
		if this.AddedSignatures[i] != that1.AddedSignatures[i] {
			return false
		}
	}
	if len(this.UpdatedSignatures) != len(that1.UpdatedSignatures) {
		return false
	}
	for i := range this.UpdatedSignatures {
		if this.UpdatedSignatures[i] != that1.UpdatedSignatures[i] {
			return false
		}
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ReleaseDate != that1.ReleaseDate {
		return false
	}
	if len(this.AddedSignatures) != len(that1.AddedSignatures) {
		return false
	}
	for i := range this.AddedSignatures {
		if this.AddedSignatures[i] != that1.AddedSignatures[i] {
			return false
		}
	}
	if len(this.UpdatedSignatures) != len(that1.UpdatedSignatures) {
		return false
	}
	for i := range this.UpdatedSignatures {
		if this.UpdatedSignatures[i] != that1.UpdatedSignatures[i] {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ReleaseDate != that1.ReleaseDate {
		return false
	}
	if len(this.AddedSignatures) != len(that1.AddedSignatures) {
		return false
	}
	for i := range this.AddedSignatures {
		if this.AddedSignatures[i] != that1.AddedSignatures[i] {
			return false
		}
	}
	if len(this.UpdatedSignatures) != len(that1.UpdatedSignatures) {
		return false
	}
	for i := range this.UpdatedSignatures {
		if this.UpdatedSignatures[i] != that1.UpdatedSignatures[i] {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ReleaseDate != that1.ReleaseDate {
		return false
	}
	if len(this.AddedSignatures) != len(that1.AddedSignatures) {
		return false
	}
	for i := range this.AddedSignatures {
		if this.AddedSignatures[i] != that1.AddedSignatures[i] {
			return false
		}
	}
	if len(this.UpdatedSignatures) != len(that1.UpdatedSignatures) {
		return false
	}
	for i := range this.UpdatedSignatures {
		if this.UpdatedSignatures[i] != that1.UpdatedSignatures[i] {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&waf_signatures_changelog.GlobalSpecType{")
	s = append(s, "ReleaseDate: "+fmt.Sprintf("%#v", this.ReleaseDate)+",\n")
	s = append(s, "AddedSignatures: "+fmt.Sprintf("%#v", this.AddedSignatures)+",\n")
	s = append(s, "UpdatedSignatures: "+fmt.Sprintf("%#v", this.UpdatedSignatures)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&waf_signatures_changelog.CreateSpecType{")
	s = append(s, "ReleaseDate: "+fmt.Sprintf("%#v", this.ReleaseDate)+",\n")
	s = append(s, "AddedSignatures: "+fmt.Sprintf("%#v", this.AddedSignatures)+",\n")
	s = append(s, "UpdatedSignatures: "+fmt.Sprintf("%#v", this.UpdatedSignatures)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&waf_signatures_changelog.ReplaceSpecType{")
	s = append(s, "ReleaseDate: "+fmt.Sprintf("%#v", this.ReleaseDate)+",\n")
	s = append(s, "AddedSignatures: "+fmt.Sprintf("%#v", this.AddedSignatures)+",\n")
	s = append(s, "UpdatedSignatures: "+fmt.Sprintf("%#v", this.UpdatedSignatures)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&waf_signatures_changelog.GetSpecType{")
	s = append(s, "ReleaseDate: "+fmt.Sprintf("%#v", this.ReleaseDate)+",\n")
	s = append(s, "AddedSignatures: "+fmt.Sprintf("%#v", this.AddedSignatures)+",\n")
	s = append(s, "UpdatedSignatures: "+fmt.Sprintf("%#v", this.UpdatedSignatures)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UpdatedSignatures) > 0 {
		for iNdEx := len(m.UpdatedSignatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UpdatedSignatures[iNdEx])
			copy(dAtA[i:], m.UpdatedSignatures[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.UpdatedSignatures[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AddedSignatures) > 0 {
		for iNdEx := len(m.AddedSignatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AddedSignatures[iNdEx])
			copy(dAtA[i:], m.AddedSignatures[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.AddedSignatures[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ReleaseDate) > 0 {
		i -= len(m.ReleaseDate)
		copy(dAtA[i:], m.ReleaseDate)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ReleaseDate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UpdatedSignatures) > 0 {
		for iNdEx := len(m.UpdatedSignatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UpdatedSignatures[iNdEx])
			copy(dAtA[i:], m.UpdatedSignatures[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.UpdatedSignatures[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AddedSignatures) > 0 {
		for iNdEx := len(m.AddedSignatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AddedSignatures[iNdEx])
			copy(dAtA[i:], m.AddedSignatures[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.AddedSignatures[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ReleaseDate) > 0 {
		i -= len(m.ReleaseDate)
		copy(dAtA[i:], m.ReleaseDate)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ReleaseDate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UpdatedSignatures) > 0 {
		for iNdEx := len(m.UpdatedSignatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UpdatedSignatures[iNdEx])
			copy(dAtA[i:], m.UpdatedSignatures[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.UpdatedSignatures[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AddedSignatures) > 0 {
		for iNdEx := len(m.AddedSignatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AddedSignatures[iNdEx])
			copy(dAtA[i:], m.AddedSignatures[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.AddedSignatures[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ReleaseDate) > 0 {
		i -= len(m.ReleaseDate)
		copy(dAtA[i:], m.ReleaseDate)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ReleaseDate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UpdatedSignatures) > 0 {
		for iNdEx := len(m.UpdatedSignatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UpdatedSignatures[iNdEx])
			copy(dAtA[i:], m.UpdatedSignatures[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.UpdatedSignatures[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AddedSignatures) > 0 {
		for iNdEx := len(m.AddedSignatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AddedSignatures[iNdEx])
			copy(dAtA[i:], m.AddedSignatures[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.AddedSignatures[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ReleaseDate) > 0 {
		i -= len(m.ReleaseDate)
		copy(dAtA[i:], m.ReleaseDate)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ReleaseDate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReleaseDate)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AddedSignatures) > 0 {
		for _, s := range m.AddedSignatures {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.UpdatedSignatures) > 0 {
		for _, s := range m.UpdatedSignatures {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReleaseDate)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AddedSignatures) > 0 {
		for _, s := range m.AddedSignatures {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.UpdatedSignatures) > 0 {
		for _, s := range m.UpdatedSignatures {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReleaseDate)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AddedSignatures) > 0 {
		for _, s := range m.AddedSignatures {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.UpdatedSignatures) > 0 {
		for _, s := range m.UpdatedSignatures {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReleaseDate)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AddedSignatures) > 0 {
		for _, s := range m.AddedSignatures {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.UpdatedSignatures) > 0 {
		for _, s := range m.UpdatedSignatures {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`ReleaseDate:` + fmt.Sprintf("%v", this.ReleaseDate) + `,`,
		`AddedSignatures:` + fmt.Sprintf("%v", this.AddedSignatures) + `,`,
		`UpdatedSignatures:` + fmt.Sprintf("%v", this.UpdatedSignatures) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`ReleaseDate:` + fmt.Sprintf("%v", this.ReleaseDate) + `,`,
		`AddedSignatures:` + fmt.Sprintf("%v", this.AddedSignatures) + `,`,
		`UpdatedSignatures:` + fmt.Sprintf("%v", this.UpdatedSignatures) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`ReleaseDate:` + fmt.Sprintf("%v", this.ReleaseDate) + `,`,
		`AddedSignatures:` + fmt.Sprintf("%v", this.AddedSignatures) + `,`,
		`UpdatedSignatures:` + fmt.Sprintf("%v", this.UpdatedSignatures) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`ReleaseDate:` + fmt.Sprintf("%v", this.ReleaseDate) + `,`,
		`AddedSignatures:` + fmt.Sprintf("%v", this.AddedSignatures) + `,`,
		`UpdatedSignatures:` + fmt.Sprintf("%v", this.UpdatedSignatures) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReleaseDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedSignatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddedSignatures = append(m.AddedSignatures, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedSignatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedSignatures = append(m.UpdatedSignatures, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReleaseDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedSignatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddedSignatures = append(m.AddedSignatures, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedSignatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedSignatures = append(m.UpdatedSignatures, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReleaseDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedSignatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddedSignatures = append(m.AddedSignatures, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedSignatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedSignatures = append(m.UpdatedSignatures, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReleaseDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedSignatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddedSignatures = append(m.AddedSignatures, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedSignatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedSignatures = append(m.UpdatedSignatures, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
