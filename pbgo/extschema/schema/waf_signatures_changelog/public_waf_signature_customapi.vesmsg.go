// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
package waf_signatures_changelog

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *StagedSignature) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *StagedSignature) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *StagedSignature) DeepCopy() *StagedSignature {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &StagedSignature{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *StagedSignature) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *StagedSignature) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return StagedSignatureValidator().Validate(ctx, m, opts...)
}

type ValidateStagedSignature struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateStagedSignature) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*StagedSignature)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *StagedSignature got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["accuracy"]; exists {

		vOpts := append(opts, db.WithValidateField("accuracy"))
		if err := fv(ctx, m.GetAccuracy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["attack_type"]; exists {

		vOpts := append(opts, db.WithValidateField("attack_type"))
		if err := fv(ctx, m.GetAttackType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["context"]; exists {

		vOpts := append(opts, db.WithValidateField("context"))
		if err := fv(ctx, m.GetContext(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["count"]; exists {

		vOpts := append(opts, db.WithValidateField("count"))
		if err := fv(ctx, m.GetCount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["id"]; exists {

		vOpts := append(opts, db.WithValidateField("id"))
		if err := fv(ctx, m.GetId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["id_name"]; exists {

		vOpts := append(opts, db.WithValidateField("id_name"))
		if err := fv(ctx, m.GetIdName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["matching_info"]; exists {

		vOpts := append(opts, db.WithValidateField("matching_info"))
		if err := fv(ctx, m.GetMatchingInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["state"]; exists {

		vOpts := append(opts, db.WithValidateField("state"))
		if err := fv(ctx, m.GetState(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultStagedSignatureValidator = func() *ValidateStagedSignature {
	v := &ValidateStagedSignature{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func StagedSignatureValidator() db.Validator {
	return DefaultStagedSignatureValidator
}

// augmented methods on protoc/std generated struct

func (m *StagedSignaturesReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *StagedSignaturesReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *StagedSignaturesReq) DeepCopy() *StagedSignaturesReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &StagedSignaturesReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *StagedSignaturesReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *StagedSignaturesReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return StagedSignaturesReqValidator().Validate(ctx, m, opts...)
}

type ValidateStagedSignaturesReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateStagedSignaturesReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*StagedSignaturesReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *StagedSignaturesReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["end_time"]; exists {

		vOpts := append(opts, db.WithValidateField("end_time"))
		if err := fv(ctx, m.GetEndTime(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["start_time"]; exists {

		vOpts := append(opts, db.WithValidateField("start_time"))
		if err := fv(ctx, m.GetStartTime(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vh_name"]; exists {

		vOpts := append(opts, db.WithValidateField("vh_name"))
		if err := fv(ctx, m.GetVhName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultStagedSignaturesReqValidator = func() *ValidateStagedSignaturesReq {
	v := &ValidateStagedSignaturesReq{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func StagedSignaturesReqValidator() db.Validator {
	return DefaultStagedSignaturesReqValidator
}

// augmented methods on protoc/std generated struct

func (m *StagedSignaturesRsp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *StagedSignaturesRsp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *StagedSignaturesRsp) DeepCopy() *StagedSignaturesRsp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &StagedSignaturesRsp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *StagedSignaturesRsp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *StagedSignaturesRsp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return StagedSignaturesRspValidator().Validate(ctx, m, opts...)
}

type ValidateStagedSignaturesRsp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateStagedSignaturesRsp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*StagedSignaturesRsp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *StagedSignaturesRsp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["staged_signatures"]; exists {

		vOpts := append(opts, db.WithValidateField("staged_signatures"))
		for idx, item := range m.GetStagedSignatures() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultStagedSignaturesRspValidator = func() *ValidateStagedSignaturesRsp {
	v := &ValidateStagedSignaturesRsp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func StagedSignaturesRspValidator() db.Validator {
	return DefaultStagedSignaturesRspValidator
}
