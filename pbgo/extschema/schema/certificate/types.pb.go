// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/certificate/types.proto

package certificate

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Certificate specification
//
// x-displayName: "Specification"
// Desired state for Certificate
type GlobalSpecType struct {
	// certificate_url
	//
	// x-displayName: "Certificate"
	// x-example: "value"
	// x-required
	// Certificate.
	// Certificate or certificate chain in PEM format including the PEM headers.
	CertificateUrl string `protobuf:"bytes,1,opt,name=certificate_url,json=certificateUrl,proto3" json:"certificate_url,omitempty"`
	// private_key
	//
	// x-displayName: "Private Key"
	// x-required
	// Private Key data in unencrypted PEM format including the PEM headers. The data may be optionally secured using BlindFold. Key has to match the accompanying certificate.
	PrivateKey *schema.SecretType `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// OCSP Response choice
	//
	// x-displayName: "OCSP Stapling"
	// OCSP Stapling choice
	//
	// Types that are valid to be assigned to OcspStaplingChoice:
	//	*GlobalSpecType_UseSystemDefaults
	//	*GlobalSpecType_DisableOcspStapling
	//	*GlobalSpecType_CustomHashAlgorithms
	OcspStaplingChoice isGlobalSpecType_OcspStaplingChoice `protobuf_oneof:"ocsp_stapling_choice"`
	// certificate_chain
	//
	// x-displayName: "Intermediate Certificate Chain"
	// Intermediate Certificate Chain is used to establish the chain of trust. Intermediate Certificate Chain contains the list of intermediate certificates, excluding the end-entity certificate.
	CertificateChain *views.ObjectRefType `protobuf:"bytes,7,opt,name=certificate_chain,json=certificateChain,proto3" json:"certificate_chain,omitempty"`
	// HTTP Loadbalancers
	//
	// x-displayName: "HTTP Loadbalancers"
	// HTTP Loadbalancers using this certificate.
	HttpLoadbalancers []*views.ObjectRefType `protobuf:"bytes,1000,rep,name=http_loadbalancers,json=httpLoadbalancers,proto3" json:"http_loadbalancers,omitempty"`
	// TCP Loadbalancers
	//
	// x-displayName: "TCP Loadbalancers"
	// TCP Loadbalancers using this certificate.
	TcpLoadbalancers []*views.ObjectRefType `protobuf:"bytes,1001,rep,name=tcp_loadbalancers,json=tcpLoadbalancers,proto3" json:"tcp_loadbalancers,omitempty"`
	// Information
	//
	// x-displayName: "Certificate Information"
	// Information about this certificate.
	Infos []*schema.CertInfoType `protobuf:"bytes,1002,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_69aed30bcdf1d256, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_OcspStaplingChoice interface {
	isGlobalSpecType_OcspStaplingChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_UseSystemDefaults struct {
	UseSystemDefaults *schema.Empty `protobuf:"bytes,4,opt,name=use_system_defaults,json=useSystemDefaults,proto3,oneof" json:"use_system_defaults,omitempty"`
}
type GlobalSpecType_DisableOcspStapling struct {
	DisableOcspStapling *schema.Empty `protobuf:"bytes,5,opt,name=disable_ocsp_stapling,json=disableOcspStapling,proto3,oneof" json:"disable_ocsp_stapling,omitempty"`
}
type GlobalSpecType_CustomHashAlgorithms struct {
	CustomHashAlgorithms *schema.HashAlgorithms `protobuf:"bytes,6,opt,name=custom_hash_algorithms,json=customHashAlgorithms,proto3,oneof" json:"custom_hash_algorithms,omitempty"`
}

func (*GlobalSpecType_UseSystemDefaults) isGlobalSpecType_OcspStaplingChoice()    {}
func (*GlobalSpecType_DisableOcspStapling) isGlobalSpecType_OcspStaplingChoice()  {}
func (*GlobalSpecType_CustomHashAlgorithms) isGlobalSpecType_OcspStaplingChoice() {}

func (m *GlobalSpecType) GetOcspStaplingChoice() isGlobalSpecType_OcspStaplingChoice {
	if m != nil {
		return m.OcspStaplingChoice
	}
	return nil
}

func (m *GlobalSpecType) GetCertificateUrl() string {
	if m != nil {
		return m.CertificateUrl
	}
	return ""
}

func (m *GlobalSpecType) GetPrivateKey() *schema.SecretType {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *GlobalSpecType) GetUseSystemDefaults() *schema.Empty {
	if x, ok := m.GetOcspStaplingChoice().(*GlobalSpecType_UseSystemDefaults); ok {
		return x.UseSystemDefaults
	}
	return nil
}

func (m *GlobalSpecType) GetDisableOcspStapling() *schema.Empty {
	if x, ok := m.GetOcspStaplingChoice().(*GlobalSpecType_DisableOcspStapling); ok {
		return x.DisableOcspStapling
	}
	return nil
}

func (m *GlobalSpecType) GetCustomHashAlgorithms() *schema.HashAlgorithms {
	if x, ok := m.GetOcspStaplingChoice().(*GlobalSpecType_CustomHashAlgorithms); ok {
		return x.CustomHashAlgorithms
	}
	return nil
}

func (m *GlobalSpecType) GetCertificateChain() *views.ObjectRefType {
	if m != nil {
		return m.CertificateChain
	}
	return nil
}

func (m *GlobalSpecType) GetHttpLoadbalancers() []*views.ObjectRefType {
	if m != nil {
		return m.HttpLoadbalancers
	}
	return nil
}

func (m *GlobalSpecType) GetTcpLoadbalancers() []*views.ObjectRefType {
	if m != nil {
		return m.TcpLoadbalancers
	}
	return nil
}

func (m *GlobalSpecType) GetInfos() []*schema.CertInfoType {
	if m != nil {
		return m.Infos
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_UseSystemDefaults)(nil),
		(*GlobalSpecType_DisableOcspStapling)(nil),
		(*GlobalSpecType_CustomHashAlgorithms)(nil),
	}
}

// Create Certificate
//
// x-displayName: "Create Certificate"
// Shape of the Certificate specification
type CreateSpecType struct {
	CertificateUrl string             `protobuf:"bytes,1,opt,name=certificate_url,json=certificateUrl,proto3" json:"certificate_url,omitempty"`
	PrivateKey     *schema.SecretType `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Types that are valid to be assigned to OcspStaplingChoice:
	//	*CreateSpecType_UseSystemDefaults
	//	*CreateSpecType_DisableOcspStapling
	//	*CreateSpecType_CustomHashAlgorithms
	OcspStaplingChoice isCreateSpecType_OcspStaplingChoice `protobuf_oneof:"ocsp_stapling_choice"`
	CertificateChain   *views.ObjectRefType                `protobuf:"bytes,7,opt,name=certificate_chain,json=certificateChain,proto3" json:"certificate_chain,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_69aed30bcdf1d256, []int{1}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_OcspStaplingChoice interface {
	isCreateSpecType_OcspStaplingChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_UseSystemDefaults struct {
	UseSystemDefaults *schema.Empty `protobuf:"bytes,4,opt,name=use_system_defaults,json=useSystemDefaults,proto3,oneof" json:"use_system_defaults,omitempty"`
}
type CreateSpecType_DisableOcspStapling struct {
	DisableOcspStapling *schema.Empty `protobuf:"bytes,5,opt,name=disable_ocsp_stapling,json=disableOcspStapling,proto3,oneof" json:"disable_ocsp_stapling,omitempty"`
}
type CreateSpecType_CustomHashAlgorithms struct {
	CustomHashAlgorithms *schema.HashAlgorithms `protobuf:"bytes,6,opt,name=custom_hash_algorithms,json=customHashAlgorithms,proto3,oneof" json:"custom_hash_algorithms,omitempty"`
}

func (*CreateSpecType_UseSystemDefaults) isCreateSpecType_OcspStaplingChoice()    {}
func (*CreateSpecType_DisableOcspStapling) isCreateSpecType_OcspStaplingChoice()  {}
func (*CreateSpecType_CustomHashAlgorithms) isCreateSpecType_OcspStaplingChoice() {}

func (m *CreateSpecType) GetOcspStaplingChoice() isCreateSpecType_OcspStaplingChoice {
	if m != nil {
		return m.OcspStaplingChoice
	}
	return nil
}

func (m *CreateSpecType) GetCertificateUrl() string {
	if m != nil {
		return m.CertificateUrl
	}
	return ""
}

func (m *CreateSpecType) GetPrivateKey() *schema.SecretType {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *CreateSpecType) GetUseSystemDefaults() *schema.Empty {
	if x, ok := m.GetOcspStaplingChoice().(*CreateSpecType_UseSystemDefaults); ok {
		return x.UseSystemDefaults
	}
	return nil
}

func (m *CreateSpecType) GetDisableOcspStapling() *schema.Empty {
	if x, ok := m.GetOcspStaplingChoice().(*CreateSpecType_DisableOcspStapling); ok {
		return x.DisableOcspStapling
	}
	return nil
}

func (m *CreateSpecType) GetCustomHashAlgorithms() *schema.HashAlgorithms {
	if x, ok := m.GetOcspStaplingChoice().(*CreateSpecType_CustomHashAlgorithms); ok {
		return x.CustomHashAlgorithms
	}
	return nil
}

func (m *CreateSpecType) GetCertificateChain() *views.ObjectRefType {
	if m != nil {
		return m.CertificateChain
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_UseSystemDefaults)(nil),
		(*CreateSpecType_DisableOcspStapling)(nil),
		(*CreateSpecType_CustomHashAlgorithms)(nil),
	}
}

// Replace Certificate
//
// x-displayName: "Replace Certificate"
// Shape of the Certificate specification
type ReplaceSpecType struct {
	CertificateUrl string             `protobuf:"bytes,1,opt,name=certificate_url,json=certificateUrl,proto3" json:"certificate_url,omitempty"`
	PrivateKey     *schema.SecretType `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Types that are valid to be assigned to OcspStaplingChoice:
	//	*ReplaceSpecType_UseSystemDefaults
	//	*ReplaceSpecType_DisableOcspStapling
	//	*ReplaceSpecType_CustomHashAlgorithms
	OcspStaplingChoice isReplaceSpecType_OcspStaplingChoice `protobuf_oneof:"ocsp_stapling_choice"`
	CertificateChain   *views.ObjectRefType                 `protobuf:"bytes,7,opt,name=certificate_chain,json=certificateChain,proto3" json:"certificate_chain,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_69aed30bcdf1d256, []int{2}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_OcspStaplingChoice interface {
	isReplaceSpecType_OcspStaplingChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_UseSystemDefaults struct {
	UseSystemDefaults *schema.Empty `protobuf:"bytes,4,opt,name=use_system_defaults,json=useSystemDefaults,proto3,oneof" json:"use_system_defaults,omitempty"`
}
type ReplaceSpecType_DisableOcspStapling struct {
	DisableOcspStapling *schema.Empty `protobuf:"bytes,5,opt,name=disable_ocsp_stapling,json=disableOcspStapling,proto3,oneof" json:"disable_ocsp_stapling,omitempty"`
}
type ReplaceSpecType_CustomHashAlgorithms struct {
	CustomHashAlgorithms *schema.HashAlgorithms `protobuf:"bytes,6,opt,name=custom_hash_algorithms,json=customHashAlgorithms,proto3,oneof" json:"custom_hash_algorithms,omitempty"`
}

func (*ReplaceSpecType_UseSystemDefaults) isReplaceSpecType_OcspStaplingChoice()    {}
func (*ReplaceSpecType_DisableOcspStapling) isReplaceSpecType_OcspStaplingChoice()  {}
func (*ReplaceSpecType_CustomHashAlgorithms) isReplaceSpecType_OcspStaplingChoice() {}

func (m *ReplaceSpecType) GetOcspStaplingChoice() isReplaceSpecType_OcspStaplingChoice {
	if m != nil {
		return m.OcspStaplingChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetCertificateUrl() string {
	if m != nil {
		return m.CertificateUrl
	}
	return ""
}

func (m *ReplaceSpecType) GetPrivateKey() *schema.SecretType {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *ReplaceSpecType) GetUseSystemDefaults() *schema.Empty {
	if x, ok := m.GetOcspStaplingChoice().(*ReplaceSpecType_UseSystemDefaults); ok {
		return x.UseSystemDefaults
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableOcspStapling() *schema.Empty {
	if x, ok := m.GetOcspStaplingChoice().(*ReplaceSpecType_DisableOcspStapling); ok {
		return x.DisableOcspStapling
	}
	return nil
}

func (m *ReplaceSpecType) GetCustomHashAlgorithms() *schema.HashAlgorithms {
	if x, ok := m.GetOcspStaplingChoice().(*ReplaceSpecType_CustomHashAlgorithms); ok {
		return x.CustomHashAlgorithms
	}
	return nil
}

func (m *ReplaceSpecType) GetCertificateChain() *views.ObjectRefType {
	if m != nil {
		return m.CertificateChain
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_UseSystemDefaults)(nil),
		(*ReplaceSpecType_DisableOcspStapling)(nil),
		(*ReplaceSpecType_CustomHashAlgorithms)(nil),
	}
}

// Get Certificate
//
// x-displayName: "Get Certificate"
// Shape of the Certificate specification
type GetSpecType struct {
	CertificateUrl string             `protobuf:"bytes,1,opt,name=certificate_url,json=certificateUrl,proto3" json:"certificate_url,omitempty"`
	PrivateKey     *schema.SecretType `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Types that are valid to be assigned to OcspStaplingChoice:
	//	*GetSpecType_UseSystemDefaults
	//	*GetSpecType_DisableOcspStapling
	//	*GetSpecType_CustomHashAlgorithms
	OcspStaplingChoice isGetSpecType_OcspStaplingChoice `protobuf_oneof:"ocsp_stapling_choice"`
	CertificateChain   *views.ObjectRefType             `protobuf:"bytes,7,opt,name=certificate_chain,json=certificateChain,proto3" json:"certificate_chain,omitempty"`
	HttpLoadbalancers  []*views.ObjectRefType           `protobuf:"bytes,1000,rep,name=http_loadbalancers,json=httpLoadbalancers,proto3" json:"http_loadbalancers,omitempty"`
	TcpLoadbalancers   []*views.ObjectRefType           `protobuf:"bytes,1001,rep,name=tcp_loadbalancers,json=tcpLoadbalancers,proto3" json:"tcp_loadbalancers,omitempty"`
	Infos              []*schema.CertInfoType           `protobuf:"bytes,1002,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_69aed30bcdf1d256, []int{3}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_OcspStaplingChoice interface {
	isGetSpecType_OcspStaplingChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_UseSystemDefaults struct {
	UseSystemDefaults *schema.Empty `protobuf:"bytes,4,opt,name=use_system_defaults,json=useSystemDefaults,proto3,oneof" json:"use_system_defaults,omitempty"`
}
type GetSpecType_DisableOcspStapling struct {
	DisableOcspStapling *schema.Empty `protobuf:"bytes,5,opt,name=disable_ocsp_stapling,json=disableOcspStapling,proto3,oneof" json:"disable_ocsp_stapling,omitempty"`
}
type GetSpecType_CustomHashAlgorithms struct {
	CustomHashAlgorithms *schema.HashAlgorithms `protobuf:"bytes,6,opt,name=custom_hash_algorithms,json=customHashAlgorithms,proto3,oneof" json:"custom_hash_algorithms,omitempty"`
}

func (*GetSpecType_UseSystemDefaults) isGetSpecType_OcspStaplingChoice()    {}
func (*GetSpecType_DisableOcspStapling) isGetSpecType_OcspStaplingChoice()  {}
func (*GetSpecType_CustomHashAlgorithms) isGetSpecType_OcspStaplingChoice() {}

func (m *GetSpecType) GetOcspStaplingChoice() isGetSpecType_OcspStaplingChoice {
	if m != nil {
		return m.OcspStaplingChoice
	}
	return nil
}

func (m *GetSpecType) GetCertificateUrl() string {
	if m != nil {
		return m.CertificateUrl
	}
	return ""
}

func (m *GetSpecType) GetPrivateKey() *schema.SecretType {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *GetSpecType) GetUseSystemDefaults() *schema.Empty {
	if x, ok := m.GetOcspStaplingChoice().(*GetSpecType_UseSystemDefaults); ok {
		return x.UseSystemDefaults
	}
	return nil
}

func (m *GetSpecType) GetDisableOcspStapling() *schema.Empty {
	if x, ok := m.GetOcspStaplingChoice().(*GetSpecType_DisableOcspStapling); ok {
		return x.DisableOcspStapling
	}
	return nil
}

func (m *GetSpecType) GetCustomHashAlgorithms() *schema.HashAlgorithms {
	if x, ok := m.GetOcspStaplingChoice().(*GetSpecType_CustomHashAlgorithms); ok {
		return x.CustomHashAlgorithms
	}
	return nil
}

func (m *GetSpecType) GetCertificateChain() *views.ObjectRefType {
	if m != nil {
		return m.CertificateChain
	}
	return nil
}

func (m *GetSpecType) GetHttpLoadbalancers() []*views.ObjectRefType {
	if m != nil {
		return m.HttpLoadbalancers
	}
	return nil
}

func (m *GetSpecType) GetTcpLoadbalancers() []*views.ObjectRefType {
	if m != nil {
		return m.TcpLoadbalancers
	}
	return nil
}

func (m *GetSpecType) GetInfos() []*schema.CertInfoType {
	if m != nil {
		return m.Infos
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_UseSystemDefaults)(nil),
		(*GetSpecType_DisableOcspStapling)(nil),
		(*GetSpecType_CustomHashAlgorithms)(nil),
	}
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.certificate.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.certificate.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.certificate.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.certificate.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.certificate.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.certificate.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.certificate.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.certificate.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/certificate/types.proto", fileDescriptor_69aed30bcdf1d256)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/certificate/types.proto", fileDescriptor_69aed30bcdf1d256)
}

var fileDescriptor_69aed30bcdf1d256 = []byte{
	// 769 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x97, 0xbf, 0x8f, 0xe3, 0x44,
	0x14, 0xc7, 0x3d, 0xe4, 0xc7, 0x2d, 0x8e, 0xb4, 0xb7, 0xf1, 0x06, 0xe4, 0xdd, 0x83, 0x21, 0x5a,
	0x09, 0xb1, 0xa0, 0x5d, 0x1b, 0x1d, 0xc7, 0x15, 0x57, 0x20, 0xc8, 0x02, 0xb7, 0x1c, 0x48, 0x2b,
	0x39, 0x5c, 0x43, 0x63, 0x8d, 0x27, 0x2f, 0xb6, 0x39, 0x3b, 0x33, 0x9a, 0x19, 0x07, 0x52, 0x9c,
	0x14, 0xd1, 0x23, 0x21, 0xe0, 0x2f, 0xa0, 0x42, 0xd7, 0xd0, 0x13, 0x8a, 0x2d, 0x11, 0x55, 0xca,
	0x2d, 0x59, 0xa7, 0xb9, 0xa3, 0xba, 0x12, 0x51, 0xa1, 0x38, 0xd9, 0x93, 0xed, 0x70, 0x88, 0x95,
	0xa0, 0x40, 0x4a, 0xe7, 0x79, 0xef, 0x7d, 0x3f, 0x2f, 0xf1, 0x7c, 0x5f, 0x66, 0xa2, 0xbf, 0x3c,
	0x04, 0x69, 0x85, 0xcc, 0x96, 0x34, 0x80, 0x98, 0xd8, 0x14, 0x84, 0x0a, 0xfb, 0x21, 0x25, 0x0a,
	0x6c, 0x35, 0xe2, 0x20, 0x2d, 0x2e, 0x98, 0x62, 0xc6, 0xce, 0xa2, 0xcc, 0x5a, 0x94, 0x59, 0xb9,
	0xb2, 0xdd, 0x43, 0x3f, 0x54, 0x41, 0xe2, 0x59, 0x94, 0xc5, 0xb6, 0xcf, 0x7c, 0x66, 0x67, 0x0a,
	0x2f, 0xe9, 0x67, 0xab, 0x6c, 0x91, 0x3d, 0x2d, 0x48, 0xbb, 0x78, 0xb5, 0xa1, 0x9b, 0xeb, 0xb4,
	0x7b, 0xad, 0x98, 0x67, 0x5c, 0x85, 0x6c, 0x70, 0x91, 0xdc, 0x29, 0x26, 0xf3, 0xba, 0x17, 0x8a,
	0xa9, 0x21, 0x89, 0xc2, 0x1e, 0x51, 0xb0, 0xcc, 0xb6, 0x4b, 0xd9, 0x10, 0x3e, 0x73, 0x8b, 0xe8,
	0x97, 0x56, 0x2b, 0x64, 0xbe, 0xc1, 0xde, 0x0f, 0x75, 0x7d, 0xf3, 0x76, 0xc4, 0x3c, 0x12, 0x75,
	0x39, 0xd0, 0x8f, 0x47, 0x1c, 0x8c, 0xae, 0x7e, 0x35, 0xf7, 0x26, 0xdc, 0x44, 0x44, 0x26, 0x6a,
	0xa3, 0xfd, 0x67, 0x3b, 0xaf, 0xfd, 0x3e, 0x41, 0xd5, 0xef, 0x7e, 0x42, 0x0d, 0x0e, 0xf1, 0x41,
	0xdb, 0x23, 0x12, 0x6e, 0xde, 0xf8, 0xf1, 0xd1, 0x69, 0x65, 0x43, 0xd4, 0xdb, 0x68, 0x7f, 0x3c,
	0xde, 0x98, 0x2f, 0x6a, 0xa2, 0x32, 0xae, 0x20, 0x67, 0x33, 0x87, 0xb8, 0x2b, 0x22, 0xe3, 0x6d,
	0xbd, 0xc1, 0x45, 0x38, 0x9c, 0x03, 0xef, 0xc1, 0xc8, 0x7c, 0xa6, 0x8d, 0xf6, 0x1b, 0xd7, 0x77,
	0xac, 0xe2, 0x06, 0x74, 0x81, 0x0a, 0x50, 0xf3, 0x0f, 0xd1, 0xa9, 0x4e, 0x27, 0x08, 0x39, 0xfa,
	0x52, 0xf3, 0x21, 0x8c, 0x8c, 0xf7, 0xf5, 0xed, 0x44, 0x82, 0x2b, 0x47, 0x52, 0x41, 0xec, 0xf6,
	0xa0, 0x4f, 0x92, 0x48, 0x49, 0xb3, 0x9a, 0x91, 0x5a, 0x25, 0xd2, 0x7b, 0x31, 0x57, 0xa3, 0x63,
	0xcd, 0x69, 0x26, 0x12, 0xba, 0x99, 0xe2, 0xdd, 0xa5, 0xc0, 0xb8, 0xa3, 0x3f, 0xd7, 0x0b, 0x25,
	0xf1, 0x22, 0x70, 0x19, 0x95, 0xdc, 0x95, 0x8a, 0xf0, 0x28, 0x1c, 0xf8, 0x66, 0xed, 0x6f, 0x49,
	0xdb, 0x4b, 0xd1, 0x09, 0x95, 0xbc, 0xbb, 0x94, 0x18, 0x77, 0xf5, 0xe7, 0x69, 0x22, 0x15, 0x8b,
	0xdd, 0x80, 0xc8, 0xc0, 0x25, 0x91, 0xcf, 0x44, 0xa8, 0x82, 0x58, 0x9a, 0xf5, 0x0c, 0xf6, 0x62,
	0x09, 0x76, 0x4c, 0x64, 0xf0, 0xce, 0x93, 0xa2, 0x63, 0xcd, 0x69, 0x2d, 0xe4, 0xc5, 0xb8, 0x01,
	0x7a, 0x33, 0xbf, 0x03, 0x34, 0x20, 0xe1, 0xc0, 0xbc, 0x92, 0x11, 0xf7, 0x4a, 0xc4, 0x6c, 0x47,
	0xad, 0x13, 0xef, 0x53, 0xa0, 0xca, 0x81, 0x7e, 0xf6, 0xee, 0x5a, 0x0f, 0xee, 0xaf, 0xea, 0x9d,
	0xad, 0x5c, 0xe8, 0x68, 0x1e, 0x31, 0x02, 0xdd, 0x08, 0x94, 0xe2, 0x6e, 0xc4, 0x48, 0xcf, 0x23,
	0x11, 0x19, 0x50, 0x10, 0xd2, 0x7c, 0x78, 0xa5, 0x5d, 0xb9, 0x44, 0xa3, 0x15, 0x82, 0x93, 0x85,
	0x3e, 0xca, 0x33, 0xe7, 0x5f, 0x48, 0xd1, 0x72, 0xa3, 0x47, 0xff, 0xbc, 0xd1, 0xf6, 0x83, 0xfb,
	0x5b, 0x65, 0x80, 0x33, 0x8f, 0x14, 0xdb, 0x5c, 0xd7, 0x6b, 0xe1, 0xa0, 0xcf, 0xa4, 0xf9, 0xdb,
	0x02, 0x7d, 0xad, 0x84, 0x3e, 0x02, 0xa1, 0x3e, 0x18, 0xf4, 0xd9, 0x9c, 0xe9, 0x2c, 0x4a, 0x3b,
	0xaf, 0xea, 0xad, 0x82, 0x0d, 0x5c, 0x1a, 0xb0, 0x90, 0x82, 0xd1, 0x3c, 0x9d, 0xa0, 0xda, 0x74,
	0x82, 0x2a, 0xe9, 0x04, 0xd5, 0x6e, 0x1c, 0xbc, 0x79, 0x70, 0xf3, 0x4e, 0x75, 0xa3, 0xb2, 0x55,
	0xdd, 0xfb, 0xba, 0xaa, 0x6f, 0x1e, 0x09, 0x20, 0x0a, 0x9e, 0x4c, 0xcc, 0x2b, 0x4f, 0x99, 0x98,
	0x95, 0x29, 0xb8, 0x75, 0xb9, 0x29, 0x58, 0xfb, 0xff, 0xbf, 0xf4, 0xff, 0xad, 0xe6, 0x2f, 0x6f,
	0x95, 0x7e, 0xfb, 0x3a, 0xaf, 0x3f, 0xc5, 0x0d, 0xe6, 0x17, 0x7f, 0xa0, 0xbf, 0xcc, 0x2c, 0x4d,
	0xf1, 0x4d, 0x55, 0xbf, 0xea, 0x00, 0x8f, 0x08, 0x5d, 0xbb, 0x62, 0xed, 0x8a, 0x0b, 0x57, 0x7c,
	0x5b, 0xd7, 0x1b, 0xb7, 0x41, 0xad, 0x1d, 0xb1, 0x3e, 0x27, 0xff, 0xef, 0xe7, 0xe4, 0xbf, 0x38,
	0x16, 0x9d, 0x2f, 0xd1, 0xf4, 0x1c, 0x6b, 0x67, 0xe7, 0x58, 0x7b, 0x7c, 0x8e, 0xd1, 0x38, 0xc5,
	0xe8, 0xfb, 0x14, 0xa3, 0x9f, 0x53, 0x8c, 0xa6, 0x29, 0x46, 0x67, 0x29, 0x46, 0xbf, 0xa6, 0x18,
	0x3d, 0x4c, 0xb1, 0xf6, 0x38, 0xc5, 0xe8, 0xab, 0x19, 0xd6, 0x4e, 0x67, 0x18, 0x4d, 0x67, 0x58,
	0x3b, 0x9b, 0x61, 0xed, 0x93, 0x13, 0x9f, 0xf1, 0x7b, 0xbe, 0x35, 0x64, 0x91, 0x02, 0x21, 0x88,
	0x95, 0x48, 0x3b, 0x7b, 0xe8, 0x33, 0x11, 0x1f, 0x72, 0xc1, 0x86, 0x61, 0x0f, 0xc4, 0xe1, 0x45,
	0xda, 0xe6, 0x9e, 0xcf, 0x6c, 0xf8, 0x5c, 0x2d, 0xaf, 0xc0, 0xab, 0x7f, 0x09, 0xbc, 0x7a, 0x76,
	0x15, 0x7e, 0xe3, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc6, 0xe2, 0xb0, 0x0e, 0x36, 0x0c, 0x00,
	0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CertificateUrl != that1.CertificateUrl {
		return false
	}
	if !this.PrivateKey.Equal(that1.PrivateKey) {
		return false
	}
	if that1.OcspStaplingChoice == nil {
		if this.OcspStaplingChoice != nil {
			return false
		}
	} else if this.OcspStaplingChoice == nil {
		return false
	} else if !this.OcspStaplingChoice.Equal(that1.OcspStaplingChoice) {
		return false
	}
	if !this.CertificateChain.Equal(that1.CertificateChain) {
		return false
	}
	if len(this.HttpLoadbalancers) != len(that1.HttpLoadbalancers) {
		return false
	}
	for i := range this.HttpLoadbalancers {
		if !this.HttpLoadbalancers[i].Equal(that1.HttpLoadbalancers[i]) {
			return false
		}
	}
	if len(this.TcpLoadbalancers) != len(that1.TcpLoadbalancers) {
		return false
	}
	for i := range this.TcpLoadbalancers {
		if !this.TcpLoadbalancers[i].Equal(that1.TcpLoadbalancers[i]) {
			return false
		}
	}
	if len(this.Infos) != len(that1.Infos) {
		return false
	}
	for i := range this.Infos {
		if !this.Infos[i].Equal(that1.Infos[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType_UseSystemDefaults) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_UseSystemDefaults)
	if !ok {
		that2, ok := that.(GlobalSpecType_UseSystemDefaults)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseSystemDefaults.Equal(that1.UseSystemDefaults) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableOcspStapling) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableOcspStapling)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableOcspStapling)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableOcspStapling.Equal(that1.DisableOcspStapling) {
		return false
	}
	return true
}
func (this *GlobalSpecType_CustomHashAlgorithms) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_CustomHashAlgorithms)
	if !ok {
		that2, ok := that.(GlobalSpecType_CustomHashAlgorithms)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomHashAlgorithms.Equal(that1.CustomHashAlgorithms) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CertificateUrl != that1.CertificateUrl {
		return false
	}
	if !this.PrivateKey.Equal(that1.PrivateKey) {
		return false
	}
	if that1.OcspStaplingChoice == nil {
		if this.OcspStaplingChoice != nil {
			return false
		}
	} else if this.OcspStaplingChoice == nil {
		return false
	} else if !this.OcspStaplingChoice.Equal(that1.OcspStaplingChoice) {
		return false
	}
	if !this.CertificateChain.Equal(that1.CertificateChain) {
		return false
	}
	return true
}
func (this *CreateSpecType_UseSystemDefaults) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_UseSystemDefaults)
	if !ok {
		that2, ok := that.(CreateSpecType_UseSystemDefaults)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseSystemDefaults.Equal(that1.UseSystemDefaults) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableOcspStapling) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableOcspStapling)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableOcspStapling)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableOcspStapling.Equal(that1.DisableOcspStapling) {
		return false
	}
	return true
}
func (this *CreateSpecType_CustomHashAlgorithms) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_CustomHashAlgorithms)
	if !ok {
		that2, ok := that.(CreateSpecType_CustomHashAlgorithms)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomHashAlgorithms.Equal(that1.CustomHashAlgorithms) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CertificateUrl != that1.CertificateUrl {
		return false
	}
	if !this.PrivateKey.Equal(that1.PrivateKey) {
		return false
	}
	if that1.OcspStaplingChoice == nil {
		if this.OcspStaplingChoice != nil {
			return false
		}
	} else if this.OcspStaplingChoice == nil {
		return false
	} else if !this.OcspStaplingChoice.Equal(that1.OcspStaplingChoice) {
		return false
	}
	if !this.CertificateChain.Equal(that1.CertificateChain) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_UseSystemDefaults) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_UseSystemDefaults)
	if !ok {
		that2, ok := that.(ReplaceSpecType_UseSystemDefaults)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseSystemDefaults.Equal(that1.UseSystemDefaults) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableOcspStapling) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableOcspStapling)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableOcspStapling)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableOcspStapling.Equal(that1.DisableOcspStapling) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_CustomHashAlgorithms) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_CustomHashAlgorithms)
	if !ok {
		that2, ok := that.(ReplaceSpecType_CustomHashAlgorithms)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomHashAlgorithms.Equal(that1.CustomHashAlgorithms) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CertificateUrl != that1.CertificateUrl {
		return false
	}
	if !this.PrivateKey.Equal(that1.PrivateKey) {
		return false
	}
	if that1.OcspStaplingChoice == nil {
		if this.OcspStaplingChoice != nil {
			return false
		}
	} else if this.OcspStaplingChoice == nil {
		return false
	} else if !this.OcspStaplingChoice.Equal(that1.OcspStaplingChoice) {
		return false
	}
	if !this.CertificateChain.Equal(that1.CertificateChain) {
		return false
	}
	if len(this.HttpLoadbalancers) != len(that1.HttpLoadbalancers) {
		return false
	}
	for i := range this.HttpLoadbalancers {
		if !this.HttpLoadbalancers[i].Equal(that1.HttpLoadbalancers[i]) {
			return false
		}
	}
	if len(this.TcpLoadbalancers) != len(that1.TcpLoadbalancers) {
		return false
	}
	for i := range this.TcpLoadbalancers {
		if !this.TcpLoadbalancers[i].Equal(that1.TcpLoadbalancers[i]) {
			return false
		}
	}
	if len(this.Infos) != len(that1.Infos) {
		return false
	}
	for i := range this.Infos {
		if !this.Infos[i].Equal(that1.Infos[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType_UseSystemDefaults) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_UseSystemDefaults)
	if !ok {
		that2, ok := that.(GetSpecType_UseSystemDefaults)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseSystemDefaults.Equal(that1.UseSystemDefaults) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableOcspStapling) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableOcspStapling)
	if !ok {
		that2, ok := that.(GetSpecType_DisableOcspStapling)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableOcspStapling.Equal(that1.DisableOcspStapling) {
		return false
	}
	return true
}
func (this *GetSpecType_CustomHashAlgorithms) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_CustomHashAlgorithms)
	if !ok {
		that2, ok := that.(GetSpecType_CustomHashAlgorithms)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomHashAlgorithms.Equal(that1.CustomHashAlgorithms) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&certificate.GlobalSpecType{")
	s = append(s, "CertificateUrl: "+fmt.Sprintf("%#v", this.CertificateUrl)+",\n")
	if this.PrivateKey != nil {
		s = append(s, "PrivateKey: "+fmt.Sprintf("%#v", this.PrivateKey)+",\n")
	}
	if this.OcspStaplingChoice != nil {
		s = append(s, "OcspStaplingChoice: "+fmt.Sprintf("%#v", this.OcspStaplingChoice)+",\n")
	}
	if this.CertificateChain != nil {
		s = append(s, "CertificateChain: "+fmt.Sprintf("%#v", this.CertificateChain)+",\n")
	}
	if this.HttpLoadbalancers != nil {
		s = append(s, "HttpLoadbalancers: "+fmt.Sprintf("%#v", this.HttpLoadbalancers)+",\n")
	}
	if this.TcpLoadbalancers != nil {
		s = append(s, "TcpLoadbalancers: "+fmt.Sprintf("%#v", this.TcpLoadbalancers)+",\n")
	}
	if this.Infos != nil {
		s = append(s, "Infos: "+fmt.Sprintf("%#v", this.Infos)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_UseSystemDefaults) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&certificate.GlobalSpecType_UseSystemDefaults{` +
		`UseSystemDefaults:` + fmt.Sprintf("%#v", this.UseSystemDefaults) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableOcspStapling) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&certificate.GlobalSpecType_DisableOcspStapling{` +
		`DisableOcspStapling:` + fmt.Sprintf("%#v", this.DisableOcspStapling) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_CustomHashAlgorithms) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&certificate.GlobalSpecType_CustomHashAlgorithms{` +
		`CustomHashAlgorithms:` + fmt.Sprintf("%#v", this.CustomHashAlgorithms) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&certificate.CreateSpecType{")
	s = append(s, "CertificateUrl: "+fmt.Sprintf("%#v", this.CertificateUrl)+",\n")
	if this.PrivateKey != nil {
		s = append(s, "PrivateKey: "+fmt.Sprintf("%#v", this.PrivateKey)+",\n")
	}
	if this.OcspStaplingChoice != nil {
		s = append(s, "OcspStaplingChoice: "+fmt.Sprintf("%#v", this.OcspStaplingChoice)+",\n")
	}
	if this.CertificateChain != nil {
		s = append(s, "CertificateChain: "+fmt.Sprintf("%#v", this.CertificateChain)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_UseSystemDefaults) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&certificate.CreateSpecType_UseSystemDefaults{` +
		`UseSystemDefaults:` + fmt.Sprintf("%#v", this.UseSystemDefaults) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableOcspStapling) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&certificate.CreateSpecType_DisableOcspStapling{` +
		`DisableOcspStapling:` + fmt.Sprintf("%#v", this.DisableOcspStapling) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_CustomHashAlgorithms) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&certificate.CreateSpecType_CustomHashAlgorithms{` +
		`CustomHashAlgorithms:` + fmt.Sprintf("%#v", this.CustomHashAlgorithms) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&certificate.ReplaceSpecType{")
	s = append(s, "CertificateUrl: "+fmt.Sprintf("%#v", this.CertificateUrl)+",\n")
	if this.PrivateKey != nil {
		s = append(s, "PrivateKey: "+fmt.Sprintf("%#v", this.PrivateKey)+",\n")
	}
	if this.OcspStaplingChoice != nil {
		s = append(s, "OcspStaplingChoice: "+fmt.Sprintf("%#v", this.OcspStaplingChoice)+",\n")
	}
	if this.CertificateChain != nil {
		s = append(s, "CertificateChain: "+fmt.Sprintf("%#v", this.CertificateChain)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_UseSystemDefaults) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&certificate.ReplaceSpecType_UseSystemDefaults{` +
		`UseSystemDefaults:` + fmt.Sprintf("%#v", this.UseSystemDefaults) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableOcspStapling) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&certificate.ReplaceSpecType_DisableOcspStapling{` +
		`DisableOcspStapling:` + fmt.Sprintf("%#v", this.DisableOcspStapling) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_CustomHashAlgorithms) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&certificate.ReplaceSpecType_CustomHashAlgorithms{` +
		`CustomHashAlgorithms:` + fmt.Sprintf("%#v", this.CustomHashAlgorithms) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&certificate.GetSpecType{")
	s = append(s, "CertificateUrl: "+fmt.Sprintf("%#v", this.CertificateUrl)+",\n")
	if this.PrivateKey != nil {
		s = append(s, "PrivateKey: "+fmt.Sprintf("%#v", this.PrivateKey)+",\n")
	}
	if this.OcspStaplingChoice != nil {
		s = append(s, "OcspStaplingChoice: "+fmt.Sprintf("%#v", this.OcspStaplingChoice)+",\n")
	}
	if this.CertificateChain != nil {
		s = append(s, "CertificateChain: "+fmt.Sprintf("%#v", this.CertificateChain)+",\n")
	}
	if this.HttpLoadbalancers != nil {
		s = append(s, "HttpLoadbalancers: "+fmt.Sprintf("%#v", this.HttpLoadbalancers)+",\n")
	}
	if this.TcpLoadbalancers != nil {
		s = append(s, "TcpLoadbalancers: "+fmt.Sprintf("%#v", this.TcpLoadbalancers)+",\n")
	}
	if this.Infos != nil {
		s = append(s, "Infos: "+fmt.Sprintf("%#v", this.Infos)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_UseSystemDefaults) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&certificate.GetSpecType_UseSystemDefaults{` +
		`UseSystemDefaults:` + fmt.Sprintf("%#v", this.UseSystemDefaults) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableOcspStapling) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&certificate.GetSpecType_DisableOcspStapling{` +
		`DisableOcspStapling:` + fmt.Sprintf("%#v", this.DisableOcspStapling) + `}`}, ", ")
	return s
}
func (this *GetSpecType_CustomHashAlgorithms) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&certificate.GetSpecType_CustomHashAlgorithms{` +
		`CustomHashAlgorithms:` + fmt.Sprintf("%#v", this.CustomHashAlgorithms) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for iNdEx := len(m.Infos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Infos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.TcpLoadbalancers) > 0 {
		for iNdEx := len(m.TcpLoadbalancers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TcpLoadbalancers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.HttpLoadbalancers) > 0 {
		for iNdEx := len(m.HttpLoadbalancers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HttpLoadbalancers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.CertificateChain != nil {
		{
			size, err := m.CertificateChain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.OcspStaplingChoice != nil {
		{
			size := m.OcspStaplingChoice.Size()
			i -= size
			if _, err := m.OcspStaplingChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PrivateKey != nil {
		{
			size, err := m.PrivateKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CertificateUrl) > 0 {
		i -= len(m.CertificateUrl)
		copy(dAtA[i:], m.CertificateUrl)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CertificateUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_UseSystemDefaults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_UseSystemDefaults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseSystemDefaults != nil {
		{
			size, err := m.UseSystemDefaults.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableOcspStapling) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableOcspStapling) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableOcspStapling != nil {
		{
			size, err := m.DisableOcspStapling.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_CustomHashAlgorithms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_CustomHashAlgorithms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomHashAlgorithms != nil {
		{
			size, err := m.CustomHashAlgorithms.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CertificateChain != nil {
		{
			size, err := m.CertificateChain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.OcspStaplingChoice != nil {
		{
			size := m.OcspStaplingChoice.Size()
			i -= size
			if _, err := m.OcspStaplingChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PrivateKey != nil {
		{
			size, err := m.PrivateKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CertificateUrl) > 0 {
		i -= len(m.CertificateUrl)
		copy(dAtA[i:], m.CertificateUrl)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CertificateUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_UseSystemDefaults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_UseSystemDefaults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseSystemDefaults != nil {
		{
			size, err := m.UseSystemDefaults.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableOcspStapling) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableOcspStapling) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableOcspStapling != nil {
		{
			size, err := m.DisableOcspStapling.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_CustomHashAlgorithms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_CustomHashAlgorithms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomHashAlgorithms != nil {
		{
			size, err := m.CustomHashAlgorithms.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CertificateChain != nil {
		{
			size, err := m.CertificateChain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.OcspStaplingChoice != nil {
		{
			size := m.OcspStaplingChoice.Size()
			i -= size
			if _, err := m.OcspStaplingChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PrivateKey != nil {
		{
			size, err := m.PrivateKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CertificateUrl) > 0 {
		i -= len(m.CertificateUrl)
		copy(dAtA[i:], m.CertificateUrl)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CertificateUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_UseSystemDefaults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_UseSystemDefaults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseSystemDefaults != nil {
		{
			size, err := m.UseSystemDefaults.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableOcspStapling) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableOcspStapling) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableOcspStapling != nil {
		{
			size, err := m.DisableOcspStapling.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_CustomHashAlgorithms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_CustomHashAlgorithms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomHashAlgorithms != nil {
		{
			size, err := m.CustomHashAlgorithms.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for iNdEx := len(m.Infos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Infos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.TcpLoadbalancers) > 0 {
		for iNdEx := len(m.TcpLoadbalancers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TcpLoadbalancers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.HttpLoadbalancers) > 0 {
		for iNdEx := len(m.HttpLoadbalancers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HttpLoadbalancers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.CertificateChain != nil {
		{
			size, err := m.CertificateChain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.OcspStaplingChoice != nil {
		{
			size := m.OcspStaplingChoice.Size()
			i -= size
			if _, err := m.OcspStaplingChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PrivateKey != nil {
		{
			size, err := m.PrivateKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CertificateUrl) > 0 {
		i -= len(m.CertificateUrl)
		copy(dAtA[i:], m.CertificateUrl)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CertificateUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_UseSystemDefaults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_UseSystemDefaults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseSystemDefaults != nil {
		{
			size, err := m.UseSystemDefaults.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableOcspStapling) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableOcspStapling) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableOcspStapling != nil {
		{
			size, err := m.DisableOcspStapling.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_CustomHashAlgorithms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_CustomHashAlgorithms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomHashAlgorithms != nil {
		{
			size, err := m.CustomHashAlgorithms.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CertificateUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PrivateKey != nil {
		l = m.PrivateKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.OcspStaplingChoice != nil {
		n += m.OcspStaplingChoice.Size()
	}
	if m.CertificateChain != nil {
		l = m.CertificateChain.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.HttpLoadbalancers) > 0 {
		for _, e := range m.HttpLoadbalancers {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.TcpLoadbalancers) > 0 {
		for _, e := range m.TcpLoadbalancers {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType_UseSystemDefaults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseSystemDefaults != nil {
		l = m.UseSystemDefaults.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableOcspStapling) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableOcspStapling != nil {
		l = m.DisableOcspStapling.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_CustomHashAlgorithms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomHashAlgorithms != nil {
		l = m.CustomHashAlgorithms.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CertificateUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PrivateKey != nil {
		l = m.PrivateKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.OcspStaplingChoice != nil {
		n += m.OcspStaplingChoice.Size()
	}
	if m.CertificateChain != nil {
		l = m.CertificateChain.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType_UseSystemDefaults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseSystemDefaults != nil {
		l = m.UseSystemDefaults.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableOcspStapling) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableOcspStapling != nil {
		l = m.DisableOcspStapling.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_CustomHashAlgorithms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomHashAlgorithms != nil {
		l = m.CustomHashAlgorithms.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CertificateUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PrivateKey != nil {
		l = m.PrivateKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.OcspStaplingChoice != nil {
		n += m.OcspStaplingChoice.Size()
	}
	if m.CertificateChain != nil {
		l = m.CertificateChain.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType_UseSystemDefaults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseSystemDefaults != nil {
		l = m.UseSystemDefaults.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableOcspStapling) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableOcspStapling != nil {
		l = m.DisableOcspStapling.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_CustomHashAlgorithms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomHashAlgorithms != nil {
		l = m.CustomHashAlgorithms.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CertificateUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PrivateKey != nil {
		l = m.PrivateKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.OcspStaplingChoice != nil {
		n += m.OcspStaplingChoice.Size()
	}
	if m.CertificateChain != nil {
		l = m.CertificateChain.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.HttpLoadbalancers) > 0 {
		for _, e := range m.HttpLoadbalancers {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.TcpLoadbalancers) > 0 {
		for _, e := range m.TcpLoadbalancers {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType_UseSystemDefaults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseSystemDefaults != nil {
		l = m.UseSystemDefaults.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableOcspStapling) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableOcspStapling != nil {
		l = m.DisableOcspStapling.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_CustomHashAlgorithms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomHashAlgorithms != nil {
		l = m.CustomHashAlgorithms.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHttpLoadbalancers := "[]*ObjectRefType{"
	for _, f := range this.HttpLoadbalancers {
		repeatedStringForHttpLoadbalancers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForHttpLoadbalancers += "}"
	repeatedStringForTcpLoadbalancers := "[]*ObjectRefType{"
	for _, f := range this.TcpLoadbalancers {
		repeatedStringForTcpLoadbalancers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForTcpLoadbalancers += "}"
	repeatedStringForInfos := "[]*CertInfoType{"
	for _, f := range this.Infos {
		repeatedStringForInfos += strings.Replace(fmt.Sprintf("%v", f), "CertInfoType", "schema.CertInfoType", 1) + ","
	}
	repeatedStringForInfos += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`CertificateUrl:` + fmt.Sprintf("%v", this.CertificateUrl) + `,`,
		`PrivateKey:` + strings.Replace(fmt.Sprintf("%v", this.PrivateKey), "SecretType", "schema.SecretType", 1) + `,`,
		`OcspStaplingChoice:` + fmt.Sprintf("%v", this.OcspStaplingChoice) + `,`,
		`CertificateChain:` + strings.Replace(fmt.Sprintf("%v", this.CertificateChain), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`HttpLoadbalancers:` + repeatedStringForHttpLoadbalancers + `,`,
		`TcpLoadbalancers:` + repeatedStringForTcpLoadbalancers + `,`,
		`Infos:` + repeatedStringForInfos + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_UseSystemDefaults) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_UseSystemDefaults{`,
		`UseSystemDefaults:` + strings.Replace(fmt.Sprintf("%v", this.UseSystemDefaults), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableOcspStapling) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableOcspStapling{`,
		`DisableOcspStapling:` + strings.Replace(fmt.Sprintf("%v", this.DisableOcspStapling), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_CustomHashAlgorithms) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_CustomHashAlgorithms{`,
		`CustomHashAlgorithms:` + strings.Replace(fmt.Sprintf("%v", this.CustomHashAlgorithms), "HashAlgorithms", "schema.HashAlgorithms", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`CertificateUrl:` + fmt.Sprintf("%v", this.CertificateUrl) + `,`,
		`PrivateKey:` + strings.Replace(fmt.Sprintf("%v", this.PrivateKey), "SecretType", "schema.SecretType", 1) + `,`,
		`OcspStaplingChoice:` + fmt.Sprintf("%v", this.OcspStaplingChoice) + `,`,
		`CertificateChain:` + strings.Replace(fmt.Sprintf("%v", this.CertificateChain), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_UseSystemDefaults) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_UseSystemDefaults{`,
		`UseSystemDefaults:` + strings.Replace(fmt.Sprintf("%v", this.UseSystemDefaults), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableOcspStapling) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableOcspStapling{`,
		`DisableOcspStapling:` + strings.Replace(fmt.Sprintf("%v", this.DisableOcspStapling), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_CustomHashAlgorithms) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_CustomHashAlgorithms{`,
		`CustomHashAlgorithms:` + strings.Replace(fmt.Sprintf("%v", this.CustomHashAlgorithms), "HashAlgorithms", "schema.HashAlgorithms", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`CertificateUrl:` + fmt.Sprintf("%v", this.CertificateUrl) + `,`,
		`PrivateKey:` + strings.Replace(fmt.Sprintf("%v", this.PrivateKey), "SecretType", "schema.SecretType", 1) + `,`,
		`OcspStaplingChoice:` + fmt.Sprintf("%v", this.OcspStaplingChoice) + `,`,
		`CertificateChain:` + strings.Replace(fmt.Sprintf("%v", this.CertificateChain), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_UseSystemDefaults) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_UseSystemDefaults{`,
		`UseSystemDefaults:` + strings.Replace(fmt.Sprintf("%v", this.UseSystemDefaults), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableOcspStapling) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableOcspStapling{`,
		`DisableOcspStapling:` + strings.Replace(fmt.Sprintf("%v", this.DisableOcspStapling), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_CustomHashAlgorithms) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_CustomHashAlgorithms{`,
		`CustomHashAlgorithms:` + strings.Replace(fmt.Sprintf("%v", this.CustomHashAlgorithms), "HashAlgorithms", "schema.HashAlgorithms", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHttpLoadbalancers := "[]*ObjectRefType{"
	for _, f := range this.HttpLoadbalancers {
		repeatedStringForHttpLoadbalancers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForHttpLoadbalancers += "}"
	repeatedStringForTcpLoadbalancers := "[]*ObjectRefType{"
	for _, f := range this.TcpLoadbalancers {
		repeatedStringForTcpLoadbalancers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForTcpLoadbalancers += "}"
	repeatedStringForInfos := "[]*CertInfoType{"
	for _, f := range this.Infos {
		repeatedStringForInfos += strings.Replace(fmt.Sprintf("%v", f), "CertInfoType", "schema.CertInfoType", 1) + ","
	}
	repeatedStringForInfos += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`CertificateUrl:` + fmt.Sprintf("%v", this.CertificateUrl) + `,`,
		`PrivateKey:` + strings.Replace(fmt.Sprintf("%v", this.PrivateKey), "SecretType", "schema.SecretType", 1) + `,`,
		`OcspStaplingChoice:` + fmt.Sprintf("%v", this.OcspStaplingChoice) + `,`,
		`CertificateChain:` + strings.Replace(fmt.Sprintf("%v", this.CertificateChain), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`HttpLoadbalancers:` + repeatedStringForHttpLoadbalancers + `,`,
		`TcpLoadbalancers:` + repeatedStringForTcpLoadbalancers + `,`,
		`Infos:` + repeatedStringForInfos + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_UseSystemDefaults) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_UseSystemDefaults{`,
		`UseSystemDefaults:` + strings.Replace(fmt.Sprintf("%v", this.UseSystemDefaults), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableOcspStapling) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableOcspStapling{`,
		`DisableOcspStapling:` + strings.Replace(fmt.Sprintf("%v", this.DisableOcspStapling), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_CustomHashAlgorithms) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_CustomHashAlgorithms{`,
		`CustomHashAlgorithms:` + strings.Replace(fmt.Sprintf("%v", this.CustomHashAlgorithms), "HashAlgorithms", "schema.HashAlgorithms", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificateUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivateKey == nil {
				m.PrivateKey = &schema.SecretType{}
			}
			if err := m.PrivateKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseSystemDefaults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OcspStaplingChoice = &GlobalSpecType_UseSystemDefaults{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableOcspStapling", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OcspStaplingChoice = &GlobalSpecType_DisableOcspStapling{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomHashAlgorithms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.HashAlgorithms{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OcspStaplingChoice = &GlobalSpecType_CustomHashAlgorithms{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateChain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CertificateChain == nil {
				m.CertificateChain = &views.ObjectRefType{}
			}
			if err := m.CertificateChain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadbalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpLoadbalancers = append(m.HttpLoadbalancers, &views.ObjectRefType{})
			if err := m.HttpLoadbalancers[len(m.HttpLoadbalancers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpLoadbalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TcpLoadbalancers = append(m.TcpLoadbalancers, &views.ObjectRefType{})
			if err := m.TcpLoadbalancers[len(m.TcpLoadbalancers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &schema.CertInfoType{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificateUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivateKey == nil {
				m.PrivateKey = &schema.SecretType{}
			}
			if err := m.PrivateKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseSystemDefaults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OcspStaplingChoice = &CreateSpecType_UseSystemDefaults{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableOcspStapling", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OcspStaplingChoice = &CreateSpecType_DisableOcspStapling{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomHashAlgorithms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.HashAlgorithms{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OcspStaplingChoice = &CreateSpecType_CustomHashAlgorithms{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateChain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CertificateChain == nil {
				m.CertificateChain = &views.ObjectRefType{}
			}
			if err := m.CertificateChain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificateUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivateKey == nil {
				m.PrivateKey = &schema.SecretType{}
			}
			if err := m.PrivateKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseSystemDefaults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OcspStaplingChoice = &ReplaceSpecType_UseSystemDefaults{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableOcspStapling", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OcspStaplingChoice = &ReplaceSpecType_DisableOcspStapling{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomHashAlgorithms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.HashAlgorithms{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OcspStaplingChoice = &ReplaceSpecType_CustomHashAlgorithms{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateChain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CertificateChain == nil {
				m.CertificateChain = &views.ObjectRefType{}
			}
			if err := m.CertificateChain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificateUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivateKey == nil {
				m.PrivateKey = &schema.SecretType{}
			}
			if err := m.PrivateKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseSystemDefaults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OcspStaplingChoice = &GetSpecType_UseSystemDefaults{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableOcspStapling", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OcspStaplingChoice = &GetSpecType_DisableOcspStapling{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomHashAlgorithms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.HashAlgorithms{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OcspStaplingChoice = &GetSpecType_CustomHashAlgorithms{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateChain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CertificateChain == nil {
				m.CertificateChain = &views.ObjectRefType{}
			}
			if err := m.CertificateChain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadbalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpLoadbalancers = append(m.HttpLoadbalancers, &views.ObjectRefType{})
			if err := m.HttpLoadbalancers[len(m.HttpLoadbalancers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpLoadbalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TcpLoadbalancers = append(m.TcpLoadbalancers, &views.ObjectRefType{})
			if err := m.TcpLoadbalancers[len(m.TcpLoadbalancers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &schema.CertInfoType{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
