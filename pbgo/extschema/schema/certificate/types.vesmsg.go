// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package certificate

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetPrivateKey().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.private_key")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCertificateChainDRefInfo()

}

func (m *CreateSpecType) GetCertificateChainDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetCertificateChain()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("certificate_chain.Object")
	dri := db.DRefInfo{
		RefdType:   "certificate_chain.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "certificate_chain",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetCertificateChainDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetCertificateChainDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "certificate_chain.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: certificate_chain")
	}

	vref := m.GetCertificateChain()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "certificate_chain.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) CertificateUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for certificate_url")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) PrivateKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for private_key")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["certificate_chain"]; exists {

		vOpts := append(opts, db.WithValidateField("certificate_chain"))
		if err := fv(ctx, m.GetCertificateChain(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["certificate_url"]; exists {

		vOpts := append(opts, db.WithValidateField("certificate_url"))
		if err := fv(ctx, m.GetCertificateUrl(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetOcspStaplingChoice().(type) {
	case *CreateSpecType_UseSystemDefaults:
		if fv, exists := v.FldValidators["ocsp_stapling_choice.use_system_defaults"]; exists {
			val := m.GetOcspStaplingChoice().(*CreateSpecType_UseSystemDefaults).UseSystemDefaults
			vOpts := append(opts,
				db.WithValidateField("ocsp_stapling_choice"),
				db.WithValidateField("use_system_defaults"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DisableOcspStapling:
		if fv, exists := v.FldValidators["ocsp_stapling_choice.disable_ocsp_stapling"]; exists {
			val := m.GetOcspStaplingChoice().(*CreateSpecType_DisableOcspStapling).DisableOcspStapling
			vOpts := append(opts,
				db.WithValidateField("ocsp_stapling_choice"),
				db.WithValidateField("disable_ocsp_stapling"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_CustomHashAlgorithms:
		if fv, exists := v.FldValidators["ocsp_stapling_choice.custom_hash_algorithms"]; exists {
			val := m.GetOcspStaplingChoice().(*CreateSpecType_CustomHashAlgorithms).CustomHashAlgorithms
			vOpts := append(opts,
				db.WithValidateField("ocsp_stapling_choice"),
				db.WithValidateField("custom_hash_algorithms"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["private_key"]; exists {

		vOpts := append(opts, db.WithValidateField("private_key"))
		if err := fv(ctx, m.GetPrivateKey(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCertificateUrl := v.CertificateUrlValidationRuleHandler
	rulesCertificateUrl := map[string]string{
		"ves.io.schema.rules.message.required":       "true",
		"ves.io.schema.rules.string.certificate_url": "true",
		"ves.io.schema.rules.string.max_bytes":       "131072",
		"ves.io.schema.rules.string.min_bytes":       "1",
	}
	vFn, err = vrhCertificateUrl(rulesCertificateUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.certificate_url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["certificate_url"] = vFn

	vrhPrivateKey := v.PrivateKeyValidationRuleHandler
	rulesPrivateKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPrivateKey(rulesPrivateKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.private_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["private_key"] = vFn

	v.FldValidators["ocsp_stapling_choice.custom_hash_algorithms"] = ves_io_schema.HashAlgorithmsValidator().Validate

	v.FldValidators["certificate_chain"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetPrivateKey().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.private_key")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetCertificateChainDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCertificateChainDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetHttpLoadbalancersDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetHttpLoadbalancersDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetTcpLoadbalancersDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetTcpLoadbalancersDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GetSpecType) GetCertificateChainDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetCertificateChain()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("certificate_chain.Object")
	dri := db.DRefInfo{
		RefdType:   "certificate_chain.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "certificate_chain",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetCertificateChainDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetCertificateChainDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "certificate_chain.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: certificate_chain")
	}

	vref := m.GetCertificateChain()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "certificate_chain.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

func (m *GetSpecType) GetHttpLoadbalancersDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetHttpLoadbalancers()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("GetSpecType.http_loadbalancers[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("http_loadbalancer.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "http_loadbalancer.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "http_loadbalancers",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetHttpLoadbalancersDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetHttpLoadbalancersDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "http_loadbalancer.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: http_loadbalancer")
	}
	for i, vref := range m.GetHttpLoadbalancers() {
		if vref == nil {
			return nil, fmt.Errorf("GetSpecType.http_loadbalancers[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "http_loadbalancer.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *GetSpecType) GetTcpLoadbalancersDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetTcpLoadbalancers()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("GetSpecType.tcp_loadbalancers[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("tcp_loadbalancer.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "tcp_loadbalancer.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "tcp_loadbalancers",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetTcpLoadbalancersDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetTcpLoadbalancersDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "tcp_loadbalancer.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: tcp_loadbalancer")
	}
	for i, vref := range m.GetTcpLoadbalancers() {
		if vref == nil {
			return nil, fmt.Errorf("GetSpecType.tcp_loadbalancers[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "tcp_loadbalancer.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) CertificateUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for certificate_url")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) PrivateKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for private_key")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["certificate_chain"]; exists {

		vOpts := append(opts, db.WithValidateField("certificate_chain"))
		if err := fv(ctx, m.GetCertificateChain(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["certificate_url"]; exists {

		vOpts := append(opts, db.WithValidateField("certificate_url"))
		if err := fv(ctx, m.GetCertificateUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_loadbalancers"]; exists {

		vOpts := append(opts, db.WithValidateField("http_loadbalancers"))
		for idx, item := range m.GetHttpLoadbalancers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["infos"]; exists {

		vOpts := append(opts, db.WithValidateField("infos"))
		for idx, item := range m.GetInfos() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetOcspStaplingChoice().(type) {
	case *GetSpecType_UseSystemDefaults:
		if fv, exists := v.FldValidators["ocsp_stapling_choice.use_system_defaults"]; exists {
			val := m.GetOcspStaplingChoice().(*GetSpecType_UseSystemDefaults).UseSystemDefaults
			vOpts := append(opts,
				db.WithValidateField("ocsp_stapling_choice"),
				db.WithValidateField("use_system_defaults"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DisableOcspStapling:
		if fv, exists := v.FldValidators["ocsp_stapling_choice.disable_ocsp_stapling"]; exists {
			val := m.GetOcspStaplingChoice().(*GetSpecType_DisableOcspStapling).DisableOcspStapling
			vOpts := append(opts,
				db.WithValidateField("ocsp_stapling_choice"),
				db.WithValidateField("disable_ocsp_stapling"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_CustomHashAlgorithms:
		if fv, exists := v.FldValidators["ocsp_stapling_choice.custom_hash_algorithms"]; exists {
			val := m.GetOcspStaplingChoice().(*GetSpecType_CustomHashAlgorithms).CustomHashAlgorithms
			vOpts := append(opts,
				db.WithValidateField("ocsp_stapling_choice"),
				db.WithValidateField("custom_hash_algorithms"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["private_key"]; exists {

		vOpts := append(opts, db.WithValidateField("private_key"))
		if err := fv(ctx, m.GetPrivateKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tcp_loadbalancers"]; exists {

		vOpts := append(opts, db.WithValidateField("tcp_loadbalancers"))
		for idx, item := range m.GetTcpLoadbalancers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCertificateUrl := v.CertificateUrlValidationRuleHandler
	rulesCertificateUrl := map[string]string{
		"ves.io.schema.rules.message.required":       "true",
		"ves.io.schema.rules.string.certificate_url": "true",
		"ves.io.schema.rules.string.max_bytes":       "131072",
		"ves.io.schema.rules.string.min_bytes":       "1",
	}
	vFn, err = vrhCertificateUrl(rulesCertificateUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.certificate_url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["certificate_url"] = vFn

	vrhPrivateKey := v.PrivateKeyValidationRuleHandler
	rulesPrivateKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPrivateKey(rulesPrivateKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.private_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["private_key"] = vFn

	v.FldValidators["ocsp_stapling_choice.custom_hash_algorithms"] = ves_io_schema.HashAlgorithmsValidator().Validate

	v.FldValidators["certificate_chain"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["http_loadbalancers"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["tcp_loadbalancers"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetPrivateKey().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.private_key")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetCertificateChainDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCertificateChainDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetHttpLoadbalancersDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetHttpLoadbalancersDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetTcpLoadbalancersDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetTcpLoadbalancersDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GlobalSpecType) GetCertificateChainDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetCertificateChain()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("certificate_chain.Object")
	dri := db.DRefInfo{
		RefdType:   "certificate_chain.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "certificate_chain",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetCertificateChainDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetCertificateChainDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "certificate_chain.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: certificate_chain")
	}

	vref := m.GetCertificateChain()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "certificate_chain.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

func (m *GlobalSpecType) GetHttpLoadbalancersDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetHttpLoadbalancers()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.http_loadbalancers[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("http_loadbalancer.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "http_loadbalancer.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "http_loadbalancers",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetHttpLoadbalancersDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetHttpLoadbalancersDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "http_loadbalancer.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: http_loadbalancer")
	}
	for i, vref := range m.GetHttpLoadbalancers() {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.http_loadbalancers[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "http_loadbalancer.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *GlobalSpecType) GetTcpLoadbalancersDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetTcpLoadbalancers()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.tcp_loadbalancers[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("tcp_loadbalancer.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "tcp_loadbalancer.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "tcp_loadbalancers",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetTcpLoadbalancersDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetTcpLoadbalancersDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "tcp_loadbalancer.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: tcp_loadbalancer")
	}
	for i, vref := range m.GetTcpLoadbalancers() {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.tcp_loadbalancers[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "tcp_loadbalancer.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) CertificateUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for certificate_url")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) PrivateKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for private_key")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["certificate_chain"]; exists {

		vOpts := append(opts, db.WithValidateField("certificate_chain"))
		if err := fv(ctx, m.GetCertificateChain(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["certificate_url"]; exists {

		vOpts := append(opts, db.WithValidateField("certificate_url"))
		if err := fv(ctx, m.GetCertificateUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_loadbalancers"]; exists {

		vOpts := append(opts, db.WithValidateField("http_loadbalancers"))
		for idx, item := range m.GetHttpLoadbalancers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["infos"]; exists {

		vOpts := append(opts, db.WithValidateField("infos"))
		for idx, item := range m.GetInfos() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetOcspStaplingChoice().(type) {
	case *GlobalSpecType_UseSystemDefaults:
		if fv, exists := v.FldValidators["ocsp_stapling_choice.use_system_defaults"]; exists {
			val := m.GetOcspStaplingChoice().(*GlobalSpecType_UseSystemDefaults).UseSystemDefaults
			vOpts := append(opts,
				db.WithValidateField("ocsp_stapling_choice"),
				db.WithValidateField("use_system_defaults"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DisableOcspStapling:
		if fv, exists := v.FldValidators["ocsp_stapling_choice.disable_ocsp_stapling"]; exists {
			val := m.GetOcspStaplingChoice().(*GlobalSpecType_DisableOcspStapling).DisableOcspStapling
			vOpts := append(opts,
				db.WithValidateField("ocsp_stapling_choice"),
				db.WithValidateField("disable_ocsp_stapling"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_CustomHashAlgorithms:
		if fv, exists := v.FldValidators["ocsp_stapling_choice.custom_hash_algorithms"]; exists {
			val := m.GetOcspStaplingChoice().(*GlobalSpecType_CustomHashAlgorithms).CustomHashAlgorithms
			vOpts := append(opts,
				db.WithValidateField("ocsp_stapling_choice"),
				db.WithValidateField("custom_hash_algorithms"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["private_key"]; exists {

		vOpts := append(opts, db.WithValidateField("private_key"))
		if err := fv(ctx, m.GetPrivateKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tcp_loadbalancers"]; exists {

		vOpts := append(opts, db.WithValidateField("tcp_loadbalancers"))
		for idx, item := range m.GetTcpLoadbalancers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCertificateUrl := v.CertificateUrlValidationRuleHandler
	rulesCertificateUrl := map[string]string{
		"ves.io.schema.rules.message.required":       "true",
		"ves.io.schema.rules.string.certificate_url": "true",
		"ves.io.schema.rules.string.max_bytes":       "131072",
		"ves.io.schema.rules.string.min_bytes":       "1",
	}
	vFn, err = vrhCertificateUrl(rulesCertificateUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.certificate_url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["certificate_url"] = vFn

	vrhPrivateKey := v.PrivateKeyValidationRuleHandler
	rulesPrivateKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPrivateKey(rulesPrivateKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.private_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["private_key"] = vFn

	v.FldValidators["ocsp_stapling_choice.custom_hash_algorithms"] = ves_io_schema.HashAlgorithmsValidator().Validate

	v.FldValidators["certificate_chain"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["http_loadbalancers"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["tcp_loadbalancers"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetPrivateKey().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.private_key")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCertificateChainDRefInfo()

}

func (m *ReplaceSpecType) GetCertificateChainDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetCertificateChain()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("certificate_chain.Object")
	dri := db.DRefInfo{
		RefdType:   "certificate_chain.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "certificate_chain",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetCertificateChainDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetCertificateChainDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "certificate_chain.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: certificate_chain")
	}

	vref := m.GetCertificateChain()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "certificate_chain.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) CertificateUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for certificate_url")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) PrivateKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for private_key")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["certificate_chain"]; exists {

		vOpts := append(opts, db.WithValidateField("certificate_chain"))
		if err := fv(ctx, m.GetCertificateChain(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["certificate_url"]; exists {

		vOpts := append(opts, db.WithValidateField("certificate_url"))
		if err := fv(ctx, m.GetCertificateUrl(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetOcspStaplingChoice().(type) {
	case *ReplaceSpecType_UseSystemDefaults:
		if fv, exists := v.FldValidators["ocsp_stapling_choice.use_system_defaults"]; exists {
			val := m.GetOcspStaplingChoice().(*ReplaceSpecType_UseSystemDefaults).UseSystemDefaults
			vOpts := append(opts,
				db.WithValidateField("ocsp_stapling_choice"),
				db.WithValidateField("use_system_defaults"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DisableOcspStapling:
		if fv, exists := v.FldValidators["ocsp_stapling_choice.disable_ocsp_stapling"]; exists {
			val := m.GetOcspStaplingChoice().(*ReplaceSpecType_DisableOcspStapling).DisableOcspStapling
			vOpts := append(opts,
				db.WithValidateField("ocsp_stapling_choice"),
				db.WithValidateField("disable_ocsp_stapling"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_CustomHashAlgorithms:
		if fv, exists := v.FldValidators["ocsp_stapling_choice.custom_hash_algorithms"]; exists {
			val := m.GetOcspStaplingChoice().(*ReplaceSpecType_CustomHashAlgorithms).CustomHashAlgorithms
			vOpts := append(opts,
				db.WithValidateField("ocsp_stapling_choice"),
				db.WithValidateField("custom_hash_algorithms"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["private_key"]; exists {

		vOpts := append(opts, db.WithValidateField("private_key"))
		if err := fv(ctx, m.GetPrivateKey(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCertificateUrl := v.CertificateUrlValidationRuleHandler
	rulesCertificateUrl := map[string]string{
		"ves.io.schema.rules.message.required":       "true",
		"ves.io.schema.rules.string.certificate_url": "true",
		"ves.io.schema.rules.string.max_bytes":       "131072",
		"ves.io.schema.rules.string.min_bytes":       "1",
	}
	vFn, err = vrhCertificateUrl(rulesCertificateUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.certificate_url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["certificate_url"] = vFn

	vrhPrivateKey := v.PrivateKeyValidationRuleHandler
	rulesPrivateKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPrivateKey(rulesPrivateKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.private_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["private_key"] = vFn

	v.FldValidators["ocsp_stapling_choice.custom_hash_algorithms"] = ves_io_schema.HashAlgorithmsValidator().Validate

	v.FldValidators["certificate_chain"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetOcspStaplingChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.OcspStaplingChoice.(type) {
	case nil:
		o.OcspStaplingChoice = nil

	case *CreateSpecType_CustomHashAlgorithms:
		o.OcspStaplingChoice = &GlobalSpecType_CustomHashAlgorithms{CustomHashAlgorithms: of.CustomHashAlgorithms}

	case *CreateSpecType_DisableOcspStapling:
		o.OcspStaplingChoice = &GlobalSpecType_DisableOcspStapling{DisableOcspStapling: of.DisableOcspStapling}

	case *CreateSpecType_UseSystemDefaults:
		o.OcspStaplingChoice = &GlobalSpecType_UseSystemDefaults{UseSystemDefaults: of.UseSystemDefaults}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetOcspStaplingChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.OcspStaplingChoice.(type) {
	case nil:
		r.OcspStaplingChoice = nil

	case *GlobalSpecType_CustomHashAlgorithms:
		r.OcspStaplingChoice = &CreateSpecType_CustomHashAlgorithms{CustomHashAlgorithms: of.CustomHashAlgorithms}

	case *GlobalSpecType_DisableOcspStapling:
		r.OcspStaplingChoice = &CreateSpecType_DisableOcspStapling{DisableOcspStapling: of.DisableOcspStapling}

	case *GlobalSpecType_UseSystemDefaults:
		r.OcspStaplingChoice = &CreateSpecType_UseSystemDefaults{UseSystemDefaults: of.UseSystemDefaults}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.CertificateChain = f.GetCertificateChain()
	m.CertificateUrl = f.GetCertificateUrl()
	m.GetOcspStaplingChoiceFromGlobalSpecType(f)
	m.PrivateKey = f.GetPrivateKey()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.CertificateChain = m1.CertificateChain
	f.CertificateUrl = m1.CertificateUrl
	m1.SetOcspStaplingChoiceToGlobalSpecType(f)
	f.PrivateKey = m1.PrivateKey
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetOcspStaplingChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.OcspStaplingChoice.(type) {
	case nil:
		o.OcspStaplingChoice = nil

	case *GetSpecType_CustomHashAlgorithms:
		o.OcspStaplingChoice = &GlobalSpecType_CustomHashAlgorithms{CustomHashAlgorithms: of.CustomHashAlgorithms}

	case *GetSpecType_DisableOcspStapling:
		o.OcspStaplingChoice = &GlobalSpecType_DisableOcspStapling{DisableOcspStapling: of.DisableOcspStapling}

	case *GetSpecType_UseSystemDefaults:
		o.OcspStaplingChoice = &GlobalSpecType_UseSystemDefaults{UseSystemDefaults: of.UseSystemDefaults}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetOcspStaplingChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.OcspStaplingChoice.(type) {
	case nil:
		r.OcspStaplingChoice = nil

	case *GlobalSpecType_CustomHashAlgorithms:
		r.OcspStaplingChoice = &GetSpecType_CustomHashAlgorithms{CustomHashAlgorithms: of.CustomHashAlgorithms}

	case *GlobalSpecType_DisableOcspStapling:
		r.OcspStaplingChoice = &GetSpecType_DisableOcspStapling{DisableOcspStapling: of.DisableOcspStapling}

	case *GlobalSpecType_UseSystemDefaults:
		r.OcspStaplingChoice = &GetSpecType_UseSystemDefaults{UseSystemDefaults: of.UseSystemDefaults}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.CertificateChain = f.GetCertificateChain()
	m.CertificateUrl = f.GetCertificateUrl()
	m.HttpLoadbalancers = f.GetHttpLoadbalancers()
	m.Infos = f.GetInfos()
	m.GetOcspStaplingChoiceFromGlobalSpecType(f)
	m.PrivateKey = f.GetPrivateKey()
	m.TcpLoadbalancers = f.GetTcpLoadbalancers()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.CertificateChain = m1.CertificateChain
	f.CertificateUrl = m1.CertificateUrl
	f.HttpLoadbalancers = m1.HttpLoadbalancers
	f.Infos = m1.Infos
	m1.SetOcspStaplingChoiceToGlobalSpecType(f)
	f.PrivateKey = m1.PrivateKey
	f.TcpLoadbalancers = m1.TcpLoadbalancers
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetOcspStaplingChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.OcspStaplingChoice.(type) {
	case nil:
		o.OcspStaplingChoice = nil

	case *ReplaceSpecType_CustomHashAlgorithms:
		o.OcspStaplingChoice = &GlobalSpecType_CustomHashAlgorithms{CustomHashAlgorithms: of.CustomHashAlgorithms}

	case *ReplaceSpecType_DisableOcspStapling:
		o.OcspStaplingChoice = &GlobalSpecType_DisableOcspStapling{DisableOcspStapling: of.DisableOcspStapling}

	case *ReplaceSpecType_UseSystemDefaults:
		o.OcspStaplingChoice = &GlobalSpecType_UseSystemDefaults{UseSystemDefaults: of.UseSystemDefaults}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetOcspStaplingChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.OcspStaplingChoice.(type) {
	case nil:
		r.OcspStaplingChoice = nil

	case *GlobalSpecType_CustomHashAlgorithms:
		r.OcspStaplingChoice = &ReplaceSpecType_CustomHashAlgorithms{CustomHashAlgorithms: of.CustomHashAlgorithms}

	case *GlobalSpecType_DisableOcspStapling:
		r.OcspStaplingChoice = &ReplaceSpecType_DisableOcspStapling{DisableOcspStapling: of.DisableOcspStapling}

	case *GlobalSpecType_UseSystemDefaults:
		r.OcspStaplingChoice = &ReplaceSpecType_UseSystemDefaults{UseSystemDefaults: of.UseSystemDefaults}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.CertificateChain = f.GetCertificateChain()
	m.CertificateUrl = f.GetCertificateUrl()
	m.GetOcspStaplingChoiceFromGlobalSpecType(f)
	m.PrivateKey = f.GetPrivateKey()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.CertificateChain = m1.CertificateChain
	f.CertificateUrl = m1.CertificateUrl
	m1.SetOcspStaplingChoiceToGlobalSpecType(f)
	f.PrivateKey = m1.PrivateKey
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}
