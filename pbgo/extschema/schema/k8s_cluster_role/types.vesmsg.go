//
// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package k8s_cluster_role

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetSRefInfo() ([]db.SelrFldInfo, error) {
	if m == nil {
		return nil, nil
	}
	return m.GetRuleChoiceSRefInfo()

}

// GetRuleChoiceSRefInfo returns the selector info (fld-name/val, selectee-type) of this field
func (m *CreateSpecType) GetRuleChoiceSRefInfo() ([]db.SelrFldInfo, error) {
	switch m.GetRuleChoice().(type) {
	case *CreateSpecType_PolicyRuleList:

		return nil, nil

	case *CreateSpecType_K8SClusterRoleSelector:

		sref := m.GetK8SClusterRoleSelector()
		if sref == nil {
			return nil, nil
		}
		sri := db.SelrFldInfo{
			Name:  "CreateSpecType.rule_choice.k8s_cluster_role_selector",
			Kind:  "k8s_cluster_role.Object",
			Value: strings.Join(sref.Expressions, ","),
			Ref:   sref,
		}
		return []db.SelrFldInfo{sri}, nil

	default:
		return nil, nil
	}
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) RuleChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rule_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) RuleChoiceYamlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Yaml, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for yaml")
	}
	return oValidatorFn_Yaml, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["rule_choice"]; exists {
		val := m.GetRuleChoice()
		vOpts := append(opts,
			db.WithValidateField("rule_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRuleChoice().(type) {
	case *CreateSpecType_PolicyRuleList:
		if fv, exists := v.FldValidators["rule_choice.policy_rule_list"]; exists {
			val := m.GetRuleChoice().(*CreateSpecType_PolicyRuleList).PolicyRuleList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("policy_rule_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_K8SClusterRoleSelector:
		if fv, exists := v.FldValidators["rule_choice.k8s_cluster_role_selector"]; exists {
			val := m.GetRuleChoice().(*CreateSpecType_K8SClusterRoleSelector).K8SClusterRoleSelector
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("k8s_cluster_role_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Yaml:
		if fv, exists := v.FldValidators["rule_choice.yaml"]; exists {
			val := m.GetRuleChoice().(*CreateSpecType_Yaml).Yaml
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("yaml"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRuleChoice := v.RuleChoiceValidationRuleHandler
	rulesRuleChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRuleChoice(rulesRuleChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.rule_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rule_choice"] = vFn

	vrhRuleChoiceYaml := v.RuleChoiceYamlValidationRuleHandler
	rulesRuleChoiceYaml := map[string]string{
		"ves.io.schema.rules.string.max_len": "4096",
		"ves.io.schema.rules.string.uri_ref": "true",
	}
	vFnMap["rule_choice.yaml"], err = vrhRuleChoiceYaml(rulesRuleChoiceYaml)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CreateSpecType.rule_choice_yaml: %s", err)
		panic(errMsg)
	}

	v.FldValidators["rule_choice.yaml"] = vFnMap["rule_choice.yaml"]

	v.FldValidators["rule_choice.policy_rule_list"] = PolicyRuleListTypeValidator().Validate
	v.FldValidators["rule_choice.k8s_cluster_role_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetSRefInfo() ([]db.SelrFldInfo, error) {
	if m == nil {
		return nil, nil
	}
	return m.GetRuleChoiceSRefInfo()

}

// GetRuleChoiceSRefInfo returns the selector info (fld-name/val, selectee-type) of this field
func (m *GetSpecType) GetRuleChoiceSRefInfo() ([]db.SelrFldInfo, error) {
	switch m.GetRuleChoice().(type) {
	case *GetSpecType_PolicyRuleList:

		return nil, nil

	case *GetSpecType_K8SClusterRoleSelector:

		sref := m.GetK8SClusterRoleSelector()
		if sref == nil {
			return nil, nil
		}
		sri := db.SelrFldInfo{
			Name:  "GetSpecType.rule_choice.k8s_cluster_role_selector",
			Kind:  "k8s_cluster_role.Object",
			Value: strings.Join(sref.Expressions, ","),
			Ref:   sref,
		}
		return []db.SelrFldInfo{sri}, nil

	default:
		return nil, nil
	}
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) RuleChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rule_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) RuleChoiceYamlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Yaml, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for yaml")
	}
	return oValidatorFn_Yaml, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["rule_choice"]; exists {
		val := m.GetRuleChoice()
		vOpts := append(opts,
			db.WithValidateField("rule_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRuleChoice().(type) {
	case *GetSpecType_PolicyRuleList:
		if fv, exists := v.FldValidators["rule_choice.policy_rule_list"]; exists {
			val := m.GetRuleChoice().(*GetSpecType_PolicyRuleList).PolicyRuleList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("policy_rule_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_K8SClusterRoleSelector:
		if fv, exists := v.FldValidators["rule_choice.k8s_cluster_role_selector"]; exists {
			val := m.GetRuleChoice().(*GetSpecType_K8SClusterRoleSelector).K8SClusterRoleSelector
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("k8s_cluster_role_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Yaml:
		if fv, exists := v.FldValidators["rule_choice.yaml"]; exists {
			val := m.GetRuleChoice().(*GetSpecType_Yaml).Yaml
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("yaml"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRuleChoice := v.RuleChoiceValidationRuleHandler
	rulesRuleChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRuleChoice(rulesRuleChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.rule_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rule_choice"] = vFn

	vrhRuleChoiceYaml := v.RuleChoiceYamlValidationRuleHandler
	rulesRuleChoiceYaml := map[string]string{
		"ves.io.schema.rules.string.max_len": "4096",
		"ves.io.schema.rules.string.uri_ref": "true",
	}
	vFnMap["rule_choice.yaml"], err = vrhRuleChoiceYaml(rulesRuleChoiceYaml)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GetSpecType.rule_choice_yaml: %s", err)
		panic(errMsg)
	}

	v.FldValidators["rule_choice.yaml"] = vFnMap["rule_choice.yaml"]

	v.FldValidators["rule_choice.policy_rule_list"] = PolicyRuleListTypeValidator().Validate
	v.FldValidators["rule_choice.k8s_cluster_role_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) RuleChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rule_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) RuleChoiceYamlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Yaml, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for yaml")
	}
	return oValidatorFn_Yaml, nil
}

func (v *ValidateGlobalSpecType) GeneratedYamlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for generated_yaml")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["generated_yaml"]; exists {

		vOpts := append(opts, db.WithValidateField("generated_yaml"))
		if err := fv(ctx, m.GetGeneratedYaml(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rule_choice"]; exists {
		val := m.GetRuleChoice()
		vOpts := append(opts,
			db.WithValidateField("rule_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRuleChoice().(type) {
	case *GlobalSpecType_PolicyRuleList:
		if fv, exists := v.FldValidators["rule_choice.policy_rule_list"]; exists {
			val := m.GetRuleChoice().(*GlobalSpecType_PolicyRuleList).PolicyRuleList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("policy_rule_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_K8SClusterRoleSelector:
		if fv, exists := v.FldValidators["rule_choice.k8s_cluster_role_selector"]; exists {
			val := m.GetRuleChoice().(*GlobalSpecType_K8SClusterRoleSelector).K8SClusterRoleSelector
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("k8s_cluster_role_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Yaml:
		if fv, exists := v.FldValidators["rule_choice.yaml"]; exists {
			val := m.GetRuleChoice().(*GlobalSpecType_Yaml).Yaml
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("yaml"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRuleChoice := v.RuleChoiceValidationRuleHandler
	rulesRuleChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRuleChoice(rulesRuleChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.rule_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rule_choice"] = vFn

	vrhRuleChoiceYaml := v.RuleChoiceYamlValidationRuleHandler
	rulesRuleChoiceYaml := map[string]string{
		"ves.io.schema.rules.string.max_len": "4096",
		"ves.io.schema.rules.string.uri_ref": "true",
	}
	vFnMap["rule_choice.yaml"], err = vrhRuleChoiceYaml(rulesRuleChoiceYaml)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GlobalSpecType.rule_choice_yaml: %s", err)
		panic(errMsg)
	}

	v.FldValidators["rule_choice.yaml"] = vFnMap["rule_choice.yaml"]

	vrhGeneratedYaml := v.GeneratedYamlValidationRuleHandler
	rulesGeneratedYaml := map[string]string{
		"ves.io.schema.rules.string.max_len": "4096",
		"ves.io.schema.rules.string.uri_ref": "true",
	}
	vFn, err = vrhGeneratedYaml(rulesGeneratedYaml)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.generated_yaml: %s", err)
		panic(errMsg)
	}
	v.FldValidators["generated_yaml"] = vFn

	v.FldValidators["rule_choice.policy_rule_list"] = PolicyRuleListTypeValidator().Validate
	v.FldValidators["rule_choice.k8s_cluster_role_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *NonResourceURLListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NonResourceURLListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NonResourceURLListType) DeepCopy() *NonResourceURLListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NonResourceURLListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NonResourceURLListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NonResourceURLListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NonResourceURLListTypeValidator().Validate(ctx, m, opts...)
}

type ValidateNonResourceURLListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNonResourceURLListType) UrlsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for urls")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for urls")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated urls")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items urls")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateNonResourceURLListType) VerbsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for verbs")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for verbs")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated verbs")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items verbs")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateNonResourceURLListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NonResourceURLListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NonResourceURLListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["urls"]; exists {
		vOpts := append(opts, db.WithValidateField("urls"))
		if err := fv(ctx, m.GetUrls(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["verbs"]; exists {
		vOpts := append(opts, db.WithValidateField("verbs"))
		if err := fv(ctx, m.GetVerbs(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNonResourceURLListTypeValidator = func() *ValidateNonResourceURLListType {
	v := &ValidateNonResourceURLListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhUrls := v.UrlsValidationRuleHandler
	rulesUrls := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.max_items":              "16",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhUrls(rulesUrls)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for NonResourceURLListType.urls: %s", err)
		panic(errMsg)
	}
	v.FldValidators["urls"] = vFn

	vrhVerbs := v.VerbsValidationRuleHandler
	rulesVerbs := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.max_items":              "16",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhVerbs(rulesVerbs)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for NonResourceURLListType.verbs: %s", err)
		panic(errMsg)
	}
	v.FldValidators["verbs"] = vFn

	return v
}()

func NonResourceURLListTypeValidator() db.Validator {
	return DefaultNonResourceURLListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *PolicyRuleListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PolicyRuleListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PolicyRuleListType) DeepCopy() *PolicyRuleListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PolicyRuleListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PolicyRuleListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PolicyRuleListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PolicyRuleListTypeValidator().Validate(ctx, m, opts...)
}

type ValidatePolicyRuleListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePolicyRuleListType) PolicyRuleValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for policy_rule")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*PolicyRuleType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := PolicyRuleTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for policy_rule")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*PolicyRuleType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*PolicyRuleType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated policy_rule")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items policy_rule")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePolicyRuleListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PolicyRuleListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PolicyRuleListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["policy_rule"]; exists {
		vOpts := append(opts, db.WithValidateField("policy_rule"))
		if err := fv(ctx, m.GetPolicyRule(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPolicyRuleListTypeValidator = func() *ValidatePolicyRuleListType {
	v := &ValidatePolicyRuleListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPolicyRule := v.PolicyRuleValidationRuleHandler
	rulesPolicyRule := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhPolicyRule(rulesPolicyRule)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PolicyRuleListType.policy_rule: %s", err)
		panic(errMsg)
	}
	v.FldValidators["policy_rule"] = vFn

	return v
}()

func PolicyRuleListTypeValidator() db.Validator {
	return DefaultPolicyRuleListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *PolicyRuleType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PolicyRuleType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PolicyRuleType) DeepCopy() *PolicyRuleType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PolicyRuleType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PolicyRuleType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PolicyRuleType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PolicyRuleTypeValidator().Validate(ctx, m, opts...)
}

type ValidatePolicyRuleType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePolicyRuleType) ResourceChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for resource_choice")
	}
	return validatorFn, nil
}

func (v *ValidatePolicyRuleType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PolicyRuleType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PolicyRuleType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["resource_choice"]; exists {
		val := m.GetResourceChoice()
		vOpts := append(opts,
			db.WithValidateField("resource_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetResourceChoice().(type) {
	case *PolicyRuleType_ResourceList:
		if fv, exists := v.FldValidators["resource_choice.resource_list"]; exists {
			val := m.GetResourceChoice().(*PolicyRuleType_ResourceList).ResourceList
			vOpts := append(opts,
				db.WithValidateField("resource_choice"),
				db.WithValidateField("resource_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PolicyRuleType_NonResourceUrlList:
		if fv, exists := v.FldValidators["resource_choice.non_resource_url_list"]; exists {
			val := m.GetResourceChoice().(*PolicyRuleType_NonResourceUrlList).NonResourceUrlList
			vOpts := append(opts,
				db.WithValidateField("resource_choice"),
				db.WithValidateField("non_resource_url_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPolicyRuleTypeValidator = func() *ValidatePolicyRuleType {
	v := &ValidatePolicyRuleType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhResourceChoice := v.ResourceChoiceValidationRuleHandler
	rulesResourceChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhResourceChoice(rulesResourceChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PolicyRuleType.resource_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["resource_choice"] = vFn

	v.FldValidators["resource_choice.resource_list"] = ResourceListTypeValidator().Validate
	v.FldValidators["resource_choice.non_resource_url_list"] = NonResourceURLListTypeValidator().Validate

	return v
}()

func PolicyRuleTypeValidator() db.Validator {
	return DefaultPolicyRuleTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetSRefInfo() ([]db.SelrFldInfo, error) {
	if m == nil {
		return nil, nil
	}
	return m.GetRuleChoiceSRefInfo()

}

// GetRuleChoiceSRefInfo returns the selector info (fld-name/val, selectee-type) of this field
func (m *ReplaceSpecType) GetRuleChoiceSRefInfo() ([]db.SelrFldInfo, error) {
	switch m.GetRuleChoice().(type) {
	case *ReplaceSpecType_PolicyRuleList:

		return nil, nil

	case *ReplaceSpecType_K8SClusterRoleSelector:

		sref := m.GetK8SClusterRoleSelector()
		if sref == nil {
			return nil, nil
		}
		sri := db.SelrFldInfo{
			Name:  "ReplaceSpecType.rule_choice.k8s_cluster_role_selector",
			Kind:  "k8s_cluster_role.Object",
			Value: strings.Join(sref.Expressions, ","),
			Ref:   sref,
		}
		return []db.SelrFldInfo{sri}, nil

	default:
		return nil, nil
	}
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) RuleChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rule_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) RuleChoiceYamlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Yaml, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for yaml")
	}
	return oValidatorFn_Yaml, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["rule_choice"]; exists {
		val := m.GetRuleChoice()
		vOpts := append(opts,
			db.WithValidateField("rule_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRuleChoice().(type) {
	case *ReplaceSpecType_PolicyRuleList:
		if fv, exists := v.FldValidators["rule_choice.policy_rule_list"]; exists {
			val := m.GetRuleChoice().(*ReplaceSpecType_PolicyRuleList).PolicyRuleList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("policy_rule_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_K8SClusterRoleSelector:
		if fv, exists := v.FldValidators["rule_choice.k8s_cluster_role_selector"]; exists {
			val := m.GetRuleChoice().(*ReplaceSpecType_K8SClusterRoleSelector).K8SClusterRoleSelector
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("k8s_cluster_role_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Yaml:
		if fv, exists := v.FldValidators["rule_choice.yaml"]; exists {
			val := m.GetRuleChoice().(*ReplaceSpecType_Yaml).Yaml
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("yaml"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRuleChoice := v.RuleChoiceValidationRuleHandler
	rulesRuleChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRuleChoice(rulesRuleChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.rule_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rule_choice"] = vFn

	vrhRuleChoiceYaml := v.RuleChoiceYamlValidationRuleHandler
	rulesRuleChoiceYaml := map[string]string{
		"ves.io.schema.rules.string.max_len": "4096",
		"ves.io.schema.rules.string.uri_ref": "true",
	}
	vFnMap["rule_choice.yaml"], err = vrhRuleChoiceYaml(rulesRuleChoiceYaml)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ReplaceSpecType.rule_choice_yaml: %s", err)
		panic(errMsg)
	}

	v.FldValidators["rule_choice.yaml"] = vFnMap["rule_choice.yaml"]

	v.FldValidators["rule_choice.policy_rule_list"] = PolicyRuleListTypeValidator().Validate
	v.FldValidators["rule_choice.k8s_cluster_role_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ResourceListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ResourceListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ResourceListType) DeepCopy() *ResourceListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ResourceListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ResourceListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ResourceListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ResourceListTypeValidator().Validate(ctx, m, opts...)
}

type ValidateResourceListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateResourceListType) ApiGroupsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for api_groups")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_groups")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_groups")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_groups")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateResourceListType) ResourceTypesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for resource_types")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for resource_types")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated resource_types")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items resource_types")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateResourceListType) ResourceInstancesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for resource_instances")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for resource_instances")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated resource_instances")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items resource_instances")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateResourceListType) VerbsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for verbs")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for verbs")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated verbs")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items verbs")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateResourceListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ResourceListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ResourceListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_groups"]; exists {
		vOpts := append(opts, db.WithValidateField("api_groups"))
		if err := fv(ctx, m.GetApiGroups(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["resource_instances"]; exists {
		vOpts := append(opts, db.WithValidateField("resource_instances"))
		if err := fv(ctx, m.GetResourceInstances(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["resource_types"]; exists {
		vOpts := append(opts, db.WithValidateField("resource_types"))
		if err := fv(ctx, m.GetResourceTypes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["verbs"]; exists {
		vOpts := append(opts, db.WithValidateField("verbs"))
		if err := fv(ctx, m.GetVerbs(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultResourceListTypeValidator = func() *ValidateResourceListType {
	v := &ValidateResourceListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhApiGroups := v.ApiGroupsValidationRuleHandler
	rulesApiGroups := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.max_items":              "16",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhApiGroups(rulesApiGroups)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ResourceListType.api_groups: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_groups"] = vFn

	vrhResourceTypes := v.ResourceTypesValidationRuleHandler
	rulesResourceTypes := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.max_items":              "16",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhResourceTypes(rulesResourceTypes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ResourceListType.resource_types: %s", err)
		panic(errMsg)
	}
	v.FldValidators["resource_types"] = vFn

	vrhResourceInstances := v.ResourceInstancesValidationRuleHandler
	rulesResourceInstances := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.max_items":              "16",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhResourceInstances(rulesResourceInstances)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ResourceListType.resource_instances: %s", err)
		panic(errMsg)
	}
	v.FldValidators["resource_instances"] = vFn

	vrhVerbs := v.VerbsValidationRuleHandler
	rulesVerbs := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.max_items":              "16",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhVerbs(rulesVerbs)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ResourceListType.verbs: %s", err)
		panic(errMsg)
	}
	v.FldValidators["verbs"] = vFn

	return v
}()

func ResourceListTypeValidator() db.Validator {
	return DefaultResourceListTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetRuleChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RuleChoice.(type) {
	case nil:
		o.RuleChoice = nil

	case *CreateSpecType_K8SClusterRoleSelector:
		o.RuleChoice = &GlobalSpecType_K8SClusterRoleSelector{K8SClusterRoleSelector: of.K8SClusterRoleSelector}

	case *CreateSpecType_PolicyRuleList:
		o.RuleChoice = &GlobalSpecType_PolicyRuleList{PolicyRuleList: of.PolicyRuleList}

	case *CreateSpecType_Yaml:
		o.RuleChoice = &GlobalSpecType_Yaml{Yaml: of.Yaml}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetRuleChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RuleChoice.(type) {
	case nil:
		r.RuleChoice = nil

	case *GlobalSpecType_K8SClusterRoleSelector:
		r.RuleChoice = &CreateSpecType_K8SClusterRoleSelector{K8SClusterRoleSelector: of.K8SClusterRoleSelector}

	case *GlobalSpecType_PolicyRuleList:
		r.RuleChoice = &CreateSpecType_PolicyRuleList{PolicyRuleList: of.PolicyRuleList}

	case *GlobalSpecType_Yaml:
		r.RuleChoice = &CreateSpecType_Yaml{Yaml: of.Yaml}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetRuleChoiceFromGlobalSpecType(f)
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetRuleChoiceToGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetRuleChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RuleChoice.(type) {
	case nil:
		o.RuleChoice = nil

	case *GetSpecType_K8SClusterRoleSelector:
		o.RuleChoice = &GlobalSpecType_K8SClusterRoleSelector{K8SClusterRoleSelector: of.K8SClusterRoleSelector}

	case *GetSpecType_PolicyRuleList:
		o.RuleChoice = &GlobalSpecType_PolicyRuleList{PolicyRuleList: of.PolicyRuleList}

	case *GetSpecType_Yaml:
		o.RuleChoice = &GlobalSpecType_Yaml{Yaml: of.Yaml}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetRuleChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RuleChoice.(type) {
	case nil:
		r.RuleChoice = nil

	case *GlobalSpecType_K8SClusterRoleSelector:
		r.RuleChoice = &GetSpecType_K8SClusterRoleSelector{K8SClusterRoleSelector: of.K8SClusterRoleSelector}

	case *GlobalSpecType_PolicyRuleList:
		r.RuleChoice = &GetSpecType_PolicyRuleList{PolicyRuleList: of.PolicyRuleList}

	case *GlobalSpecType_Yaml:
		r.RuleChoice = &GetSpecType_Yaml{Yaml: of.Yaml}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetRuleChoiceFromGlobalSpecType(f)
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetRuleChoiceToGlobalSpecType(f)
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetRuleChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RuleChoice.(type) {
	case nil:
		o.RuleChoice = nil

	case *ReplaceSpecType_K8SClusterRoleSelector:
		o.RuleChoice = &GlobalSpecType_K8SClusterRoleSelector{K8SClusterRoleSelector: of.K8SClusterRoleSelector}

	case *ReplaceSpecType_PolicyRuleList:
		o.RuleChoice = &GlobalSpecType_PolicyRuleList{PolicyRuleList: of.PolicyRuleList}

	case *ReplaceSpecType_Yaml:
		o.RuleChoice = &GlobalSpecType_Yaml{Yaml: of.Yaml}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetRuleChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RuleChoice.(type) {
	case nil:
		r.RuleChoice = nil

	case *GlobalSpecType_K8SClusterRoleSelector:
		r.RuleChoice = &ReplaceSpecType_K8SClusterRoleSelector{K8SClusterRoleSelector: of.K8SClusterRoleSelector}

	case *GlobalSpecType_PolicyRuleList:
		r.RuleChoice = &ReplaceSpecType_PolicyRuleList{PolicyRuleList: of.PolicyRuleList}

	case *GlobalSpecType_Yaml:
		r.RuleChoice = &ReplaceSpecType_Yaml{Yaml: of.Yaml}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetRuleChoiceFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetRuleChoiceToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}
