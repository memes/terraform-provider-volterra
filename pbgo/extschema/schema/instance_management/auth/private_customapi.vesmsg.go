// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package auth

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *LookupAuthConfigRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *LookupAuthConfigRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *LookupAuthConfigRequest) DeepCopy() *LookupAuthConfigRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &LookupAuthConfigRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *LookupAuthConfigRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *LookupAuthConfigRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LookupAuthConfigRequestValidator().Validate(ctx, m, opts...)
}

type ValidateLookupAuthConfigRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLookupAuthConfigRequest) CnameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cname")
	}

	return validatorFn, nil
}

func (v *ValidateLookupAuthConfigRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*LookupAuthConfigRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *LookupAuthConfigRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cname"]; exists {

		vOpts := append(opts, db.WithValidateField("cname"))
		if err := fv(ctx, m.GetCname(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLookupAuthConfigRequestValidator = func() *ValidateLookupAuthConfigRequest {
	v := &ValidateLookupAuthConfigRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCname := v.CnameValidationRuleHandler
	rulesCname := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
		"ves.io.schema.rules.string.min_len": "1",
	}
	vFn, err = vrhCname(rulesCname)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for LookupAuthConfigRequest.cname: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cname"] = vFn

	return v
}()

func LookupAuthConfigRequestValidator() db.Validator {
	return DefaultLookupAuthConfigRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *LookupAuthConfigResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *LookupAuthConfigResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *LookupAuthConfigResponse) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAuth().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting LookupAuthConfigResponse.auth")
	}

	if err := m.GetSession().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting LookupAuthConfigResponse.session")
	}

	return nil
}

func (m *LookupAuthConfigResponse) DeepCopy() *LookupAuthConfigResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &LookupAuthConfigResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *LookupAuthConfigResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *LookupAuthConfigResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LookupAuthConfigResponseValidator().Validate(ctx, m, opts...)
}

type ValidateLookupAuthConfigResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLookupAuthConfigResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*LookupAuthConfigResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *LookupAuthConfigResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["auth"]; exists {

		vOpts := append(opts, db.WithValidateField("auth"))
		if err := fv(ctx, m.GetAuth(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["response_status"]; exists {

		vOpts := append(opts, db.WithValidateField("response_status"))
		if err := fv(ctx, m.GetResponseStatus(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["session"]; exists {

		vOpts := append(opts, db.WithValidateField("session"))
		if err := fv(ctx, m.GetSession(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLookupAuthConfigResponseValidator = func() *ValidateLookupAuthConfigResponse {
	v := &ValidateLookupAuthConfigResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func LookupAuthConfigResponseValidator() db.Validator {
	return DefaultLookupAuthConfigResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *LookupUserStatusRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *LookupUserStatusRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *LookupUserStatusRequest) DeepCopy() *LookupUserStatusRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &LookupUserStatusRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *LookupUserStatusRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *LookupUserStatusRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LookupUserStatusRequestValidator().Validate(ctx, m, opts...)
}

type ValidateLookupUserStatusRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLookupUserStatusRequest) CnameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cname")
	}

	return validatorFn, nil
}

func (v *ValidateLookupUserStatusRequest) EmailValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for email")
	}

	return validatorFn, nil
}

func (v *ValidateLookupUserStatusRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*LookupUserStatusRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *LookupUserStatusRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cname"]; exists {

		vOpts := append(opts, db.WithValidateField("cname"))
		if err := fv(ctx, m.GetCname(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["email"]; exists {

		vOpts := append(opts, db.WithValidateField("email"))
		if err := fv(ctx, m.GetEmail(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLookupUserStatusRequestValidator = func() *ValidateLookupUserStatusRequest {
	v := &ValidateLookupUserStatusRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCname := v.CnameValidationRuleHandler
	rulesCname := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhCname(rulesCname)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for LookupUserStatusRequest.cname: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cname"] = vFn

	vrhEmail := v.EmailValidationRuleHandler
	rulesEmail := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.email":     "true",
		"ves.io.schema.rules.string.max_len":   "256",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhEmail(rulesEmail)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for LookupUserStatusRequest.email: %s", err)
		panic(errMsg)
	}
	v.FldValidators["email"] = vFn

	return v
}()

func LookupUserStatusRequestValidator() db.Validator {
	return DefaultLookupUserStatusRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *LookupUserStatusResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *LookupUserStatusResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *LookupUserStatusResponse) DeepCopy() *LookupUserStatusResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &LookupUserStatusResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *LookupUserStatusResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *LookupUserStatusResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LookupUserStatusResponseValidator().Validate(ctx, m, opts...)
}

type ValidateLookupUserStatusResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLookupUserStatusResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*LookupUserStatusResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *LookupUserStatusResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["instance_name"]; exists {

		vOpts := append(opts, db.WithValidateField("instance_name"))
		if err := fv(ctx, m.GetInstanceName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["response_status"]; exists {

		vOpts := append(opts, db.WithValidateField("response_status"))
		if err := fv(ctx, m.GetResponseStatus(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tenant_id"]; exists {

		vOpts := append(opts, db.WithValidateField("tenant_id"))
		if err := fv(ctx, m.GetTenantId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tenant_status"]; exists {

		vOpts := append(opts, db.WithValidateField("tenant_status"))
		if err := fv(ctx, m.GetTenantStatus(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_idm_type"]; exists {

		vOpts := append(opts, db.WithValidateField("user_idm_type"))
		if err := fv(ctx, m.GetUserIdmType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_status"]; exists {

		vOpts := append(opts, db.WithValidateField("user_status"))
		if err := fv(ctx, m.GetUserStatus(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLookupUserStatusResponseValidator = func() *ValidateLookupUserStatusResponse {
	v := &ValidateLookupUserStatusResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func LookupUserStatusResponseValidator() db.Validator {
	return DefaultLookupUserStatusResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *ValidateAPICredentialRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ValidateAPICredentialRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ValidateAPICredentialRequest) DeepCopy() *ValidateAPICredentialRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ValidateAPICredentialRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ValidateAPICredentialRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ValidateAPICredentialRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ValidateAPICredentialRequestValidator().Validate(ctx, m, opts...)
}

type ValidateValidateAPICredentialRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateValidateAPICredentialRequest) TokenValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for token")
	}

	return validatorFn, nil
}

func (v *ValidateValidateAPICredentialRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ValidateAPICredentialRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ValidateAPICredentialRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["token"]; exists {

		vOpts := append(opts, db.WithValidateField("token"))
		if err := fv(ctx, m.GetToken(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultValidateAPICredentialRequestValidator = func() *ValidateValidateAPICredentialRequest {
	v := &ValidateValidateAPICredentialRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhToken := v.TokenValidationRuleHandler
	rulesToken := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "256",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhToken(rulesToken)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ValidateAPICredentialRequest.token: %s", err)
		panic(errMsg)
	}
	v.FldValidators["token"] = vFn

	return v
}()

func ValidateAPICredentialRequestValidator() db.Validator {
	return DefaultValidateAPICredentialRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *ValidateAPICredentialResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ValidateAPICredentialResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ValidateAPICredentialResponse) DeepCopy() *ValidateAPICredentialResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ValidateAPICredentialResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ValidateAPICredentialResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ValidateAPICredentialResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ValidateAPICredentialResponseValidator().Validate(ctx, m, opts...)
}

type ValidateValidateAPICredentialResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateValidateAPICredentialResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ValidateAPICredentialResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ValidateAPICredentialResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cred_type"]; exists {

		vOpts := append(opts, db.WithValidateField("cred_type"))
		if err := fv(ctx, m.GetCredType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["instance_name"]; exists {

		vOpts := append(opts, db.WithValidateField("instance_name"))
		if err := fv(ctx, m.GetInstanceName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["response_status"]; exists {

		vOpts := append(opts, db.WithValidateField("response_status"))
		if err := fv(ctx, m.GetResponseStatus(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tenant_id"]; exists {

		vOpts := append(opts, db.WithValidateField("tenant_id"))
		if err := fv(ctx, m.GetTenantId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_name"]; exists {

		vOpts := append(opts, db.WithValidateField("user_name"))
		if err := fv(ctx, m.GetUserName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["valid"]; exists {

		vOpts := append(opts, db.WithValidateField("valid"))
		if err := fv(ctx, m.GetValid(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultValidateAPICredentialResponseValidator = func() *ValidateValidateAPICredentialResponse {
	v := &ValidateValidateAPICredentialResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ValidateAPICredentialResponseValidator() db.Validator {
	return DefaultValidateAPICredentialResponseValidator
}
