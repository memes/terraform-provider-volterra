//
// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package policer

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) CommittedInformationRateValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for committed_information_rate")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) BurstSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for burst_size")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["burst_size"]; exists {

		vOpts := append(opts, db.WithValidateField("burst_size"))
		if err := fv(ctx, m.GetBurstSize(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["committed_information_rate"]; exists {

		vOpts := append(opts, db.WithValidateField("committed_information_rate"))
		if err := fv(ctx, m.GetCommittedInformationRate(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["policer_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("policer_mode"))
		if err := fv(ctx, m.GetPolicerMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["policer_type"]; exists {

		vOpts := append(opts, db.WithValidateField("policer_type"))
		if err := fv(ctx, m.GetPolicerType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCommittedInformationRate := v.CommittedInformationRateValidationRuleHandler
	rulesCommittedInformationRate := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "10000000",
	}
	vFn, err = vrhCommittedInformationRate(rulesCommittedInformationRate)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.committed_information_rate: %s", err)
		panic(errMsg)
	}
	v.FldValidators["committed_information_rate"] = vFn

	vrhBurstSize := v.BurstSizeValidationRuleHandler
	rulesBurstSize := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
	}
	vFn, err = vrhBurstSize(rulesBurstSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.burst_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["burst_size"] = vFn

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) CommittedInformationRateValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for committed_information_rate")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) BurstSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for burst_size")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["burst_size"]; exists {

		vOpts := append(opts, db.WithValidateField("burst_size"))
		if err := fv(ctx, m.GetBurstSize(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["committed_information_rate"]; exists {

		vOpts := append(opts, db.WithValidateField("committed_information_rate"))
		if err := fv(ctx, m.GetCommittedInformationRate(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["policer_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("policer_mode"))
		if err := fv(ctx, m.GetPolicerMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["policer_type"]; exists {

		vOpts := append(opts, db.WithValidateField("policer_type"))
		if err := fv(ctx, m.GetPolicerType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCommittedInformationRate := v.CommittedInformationRateValidationRuleHandler
	rulesCommittedInformationRate := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "10000000",
	}
	vFn, err = vrhCommittedInformationRate(rulesCommittedInformationRate)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.committed_information_rate: %s", err)
		panic(errMsg)
	}
	v.FldValidators["committed_information_rate"] = vFn

	vrhBurstSize := v.BurstSizeValidationRuleHandler
	rulesBurstSize := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
	}
	vFn, err = vrhBurstSize(rulesBurstSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.burst_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["burst_size"] = vFn

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) CommittedInformationRateValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for committed_information_rate")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) BurstSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for burst_size")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["burst_size"]; exists {

		vOpts := append(opts, db.WithValidateField("burst_size"))
		if err := fv(ctx, m.GetBurstSize(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["committed_information_rate"]; exists {

		vOpts := append(opts, db.WithValidateField("committed_information_rate"))
		if err := fv(ctx, m.GetCommittedInformationRate(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["policer_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("policer_mode"))
		if err := fv(ctx, m.GetPolicerMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["policer_type"]; exists {

		vOpts := append(opts, db.WithValidateField("policer_type"))
		if err := fv(ctx, m.GetPolicerType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCommittedInformationRate := v.CommittedInformationRateValidationRuleHandler
	rulesCommittedInformationRate := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "10000000",
	}
	vFn, err = vrhCommittedInformationRate(rulesCommittedInformationRate)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.committed_information_rate: %s", err)
		panic(errMsg)
	}
	v.FldValidators["committed_information_rate"] = vFn

	vrhBurstSize := v.BurstSizeValidationRuleHandler
	rulesBurstSize := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
	}
	vFn, err = vrhBurstSize(rulesBurstSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.burst_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["burst_size"] = vFn

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) CommittedInformationRateValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for committed_information_rate")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) BurstSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for burst_size")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["burst_size"]; exists {

		vOpts := append(opts, db.WithValidateField("burst_size"))
		if err := fv(ctx, m.GetBurstSize(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["committed_information_rate"]; exists {

		vOpts := append(opts, db.WithValidateField("committed_information_rate"))
		if err := fv(ctx, m.GetCommittedInformationRate(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["policer_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("policer_mode"))
		if err := fv(ctx, m.GetPolicerMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["policer_type"]; exists {

		vOpts := append(opts, db.WithValidateField("policer_type"))
		if err := fv(ctx, m.GetPolicerType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCommittedInformationRate := v.CommittedInformationRateValidationRuleHandler
	rulesCommittedInformationRate := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "10000000",
	}
	vFn, err = vrhCommittedInformationRate(rulesCommittedInformationRate)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.committed_information_rate: %s", err)
		panic(errMsg)
	}
	v.FldValidators["committed_information_rate"] = vFn

	vrhBurstSize := v.BurstSizeValidationRuleHandler
	rulesBurstSize := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
	}
	vFn, err = vrhBurstSize(rulesBurstSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.burst_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["burst_size"] = vFn

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SingleRateTwoColorType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SingleRateTwoColorType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SingleRateTwoColorType) DeepCopy() *SingleRateTwoColorType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SingleRateTwoColorType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SingleRateTwoColorType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SingleRateTwoColorType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SingleRateTwoColorTypeValidator().Validate(ctx, m, opts...)
}

type ValidateSingleRateTwoColorType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSingleRateTwoColorType) CommittedInformationRateValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for committed_information_rate")
	}

	return validatorFn, nil
}

func (v *ValidateSingleRateTwoColorType) BurstSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for burst_size")
	}

	return validatorFn, nil
}

func (v *ValidateSingleRateTwoColorType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SingleRateTwoColorType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SingleRateTwoColorType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["burst_size"]; exists {

		vOpts := append(opts, db.WithValidateField("burst_size"))
		if err := fv(ctx, m.GetBurstSize(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["committed_information_rate"]; exists {

		vOpts := append(opts, db.WithValidateField("committed_information_rate"))
		if err := fv(ctx, m.GetCommittedInformationRate(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSingleRateTwoColorTypeValidator = func() *ValidateSingleRateTwoColorType {
	v := &ValidateSingleRateTwoColorType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCommittedInformationRate := v.CommittedInformationRateValidationRuleHandler
	rulesCommittedInformationRate := map[string]string{
		"ves.io.schema.rules.uint32.gte": "1024",
	}
	vFn, err = vrhCommittedInformationRate(rulesCommittedInformationRate)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SingleRateTwoColorType.committed_information_rate: %s", err)
		panic(errMsg)
	}
	v.FldValidators["committed_information_rate"] = vFn

	vrhBurstSize := v.BurstSizeValidationRuleHandler
	rulesBurstSize := map[string]string{
		"ves.io.schema.rules.uint32.gte": "1024",
	}
	vFn, err = vrhBurstSize(rulesBurstSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SingleRateTwoColorType.burst_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["burst_size"] = vFn

	return v
}()

func SingleRateTwoColorTypeValidator() db.Validator {
	return DefaultSingleRateTwoColorTypeValidator
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.BurstSize = f.GetBurstSize()
	m.CommittedInformationRate = f.GetCommittedInformationRate()
	m.PolicerMode = f.GetPolicerMode()
	m.PolicerType = f.GetPolicerType()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.BurstSize = m1.BurstSize
	f.CommittedInformationRate = m1.CommittedInformationRate
	f.PolicerMode = m1.PolicerMode
	f.PolicerType = m1.PolicerType
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.BurstSize = f.GetBurstSize()
	m.CommittedInformationRate = f.GetCommittedInformationRate()
	m.PolicerMode = f.GetPolicerMode()
	m.PolicerType = f.GetPolicerType()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.BurstSize = m1.BurstSize
	f.CommittedInformationRate = m1.CommittedInformationRate
	f.PolicerMode = m1.PolicerMode
	f.PolicerType = m1.PolicerType
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.BurstSize = f.GetBurstSize()
	m.CommittedInformationRate = f.GetCommittedInformationRate()
	m.PolicerMode = f.GetPolicerMode()
	m.PolicerType = f.GetPolicerType()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.BurstSize = m1.BurstSize
	f.CommittedInformationRate = m1.CommittedInformationRate
	f.PolicerMode = m1.PolicerMode
	f.PolicerType = m1.PolicerType
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}
