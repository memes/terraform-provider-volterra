// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package app_type

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"
	google_protobuf "github.com/gogo/protobuf/types"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *APIEPDynExample) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEPDynExample) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEPDynExample) DeepCopy() *APIEPDynExample {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEPDynExample{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEPDynExample) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEPDynExample) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEPDynExampleValidator().Validate(ctx, m, opts...)
}

type ValidateAPIEPDynExample struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEPDynExample) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEPDynExample)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEPDynExample got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["component_examples"]; exists {

		vOpts := append(opts, db.WithValidateField("component_examples"))
		for idx, item := range m.GetComponentExamples() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["component_identifier"]; exists {

		vOpts := append(opts, db.WithValidateField("component_identifier"))
		if err := fv(ctx, m.GetComponentIdentifier(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEPDynExampleValidator = func() *ValidateAPIEPDynExample {
	v := &ValidateAPIEPDynExample{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func APIEPDynExampleValidator() db.Validator {
	return DefaultAPIEPDynExampleValidator
}

// augmented methods on protoc/std generated struct

func (m *APIEPInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEPInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEPInfo) DeepCopy() *APIEPInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEPInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEPInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEPInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEPInfoValidator().Validate(ctx, m, opts...)
}

// SetAccessDiscoveryTime sets the field
func (m *APIEPInfo) SetAccessDiscoveryTime(in *google_protobuf.Timestamp) {
	m.AccessDiscoveryTime = in
}

type ValidateAPIEPInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEPInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEPInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEPInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["access_discovery_time"]; exists {

		vOpts := append(opts, db.WithValidateField("access_discovery_time"))
		if err := fv(ctx, m.GetAccessDiscoveryTime(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["base_path"]; exists {

		vOpts := append(opts, db.WithValidateField("base_path"))
		if err := fv(ctx, m.GetBasePath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["category"]; exists {

		vOpts := append(opts, db.WithValidateField("category"))
		for idx, item := range m.GetCategory() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["collapsed_url"]; exists {

		vOpts := append(opts, db.WithValidateField("collapsed_url"))
		if err := fv(ctx, m.GetCollapsedUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {

		vOpts := append(opts, db.WithValidateField("domains"))
		for idx, item := range m.GetDomains() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["dyn_examples"]; exists {

		vOpts := append(opts, db.WithValidateField("dyn_examples"))
		for idx, item := range m.GetDynExamples() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["has_learnt_schema"]; exists {

		vOpts := append(opts, db.WithValidateField("has_learnt_schema"))
		if err := fv(ctx, m.GetHasLearntSchema(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["method"]; exists {

		vOpts := append(opts, db.WithValidateField("method"))
		if err := fv(ctx, m.GetMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["pdf_info"]; exists {

		vOpts := append(opts, db.WithValidateField("pdf_info"))
		if err := fv(ctx, m.GetPdfInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["pii_level"]; exists {

		vOpts := append(opts, db.WithValidateField("pii_level"))
		if err := fv(ctx, m.GetPiiLevel(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["request_percentage"]; exists {

		vOpts := append(opts, db.WithValidateField("request_percentage"))
		if err := fv(ctx, m.GetRequestPercentage(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["requests_count"]; exists {

		vOpts := append(opts, db.WithValidateField("requests_count"))
		if err := fv(ctx, m.GetRequestsCount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sec_events_count"]; exists {

		vOpts := append(opts, db.WithValidateField("sec_events_count"))
		if err := fv(ctx, m.GetSecEventsCount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["security_risk"]; exists {

		vOpts := append(opts, db.WithValidateField("security_risk"))
		if err := fv(ctx, m.GetSecurityRisk(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sensitive_data"]; exists {

		vOpts := append(opts, db.WithValidateField("sensitive_data"))
		for idx, item := range m.GetSensitiveData() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEPInfoValidator = func() *ValidateAPIEPInfo {
	v := &ValidateAPIEPInfo{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func APIEPInfoValidator() db.Validator {
	return DefaultAPIEPInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *APIEPPDFInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEPPDFInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEPPDFInfo) DeepCopy() *APIEPPDFInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEPPDFInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEPPDFInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEPPDFInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEPPDFInfoValidator().Validate(ctx, m, opts...)
}

// SetCreationTimestamp sets the field
func (m *APIEPPDFInfo) SetCreationTimestamp(in *google_protobuf.Timestamp) {
	m.CreationTimestamp = in
}

type ValidateAPIEPPDFInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEPPDFInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEPPDFInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEPPDFInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["creation_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("creation_timestamp"))
		if err := fv(ctx, m.GetCreationTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["error_rate"]; exists {

		vOpts := append(opts, db.WithValidateField("error_rate"))
		for idx, item := range m.GetErrorRate() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["error_rate_stat"]; exists {

		vOpts := append(opts, db.WithValidateField("error_rate_stat"))
		if err := fv(ctx, m.GetErrorRateStat(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["latency_no_data"]; exists {

		vOpts := append(opts, db.WithValidateField("latency_no_data"))
		for idx, item := range m.GetLatencyNoData() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["latency_no_data_stat"]; exists {

		vOpts := append(opts, db.WithValidateField("latency_no_data_stat"))
		if err := fv(ctx, m.GetLatencyNoDataStat(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["latency_with_data"]; exists {

		vOpts := append(opts, db.WithValidateField("latency_with_data"))
		for idx, item := range m.GetLatencyWithData() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["latency_with_data_stat"]; exists {

		vOpts := append(opts, db.WithValidateField("latency_with_data_stat"))
		if err := fv(ctx, m.GetLatencyWithDataStat(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["request_rate"]; exists {

		vOpts := append(opts, db.WithValidateField("request_rate"))
		for idx, item := range m.GetRequestRate() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["request_rate_stat"]; exists {

		vOpts := append(opts, db.WithValidateField("request_rate_stat"))
		if err := fv(ctx, m.GetRequestRateStat(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["request_size"]; exists {

		vOpts := append(opts, db.WithValidateField("request_size"))
		for idx, item := range m.GetRequestSize() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["request_size_stat"]; exists {

		vOpts := append(opts, db.WithValidateField("request_size_stat"))
		if err := fv(ctx, m.GetRequestSizeStat(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["response_size"]; exists {

		vOpts := append(opts, db.WithValidateField("response_size"))
		for idx, item := range m.GetResponseSize() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["response_size_stat"]; exists {

		vOpts := append(opts, db.WithValidateField("response_size_stat"))
		if err := fv(ctx, m.GetResponseSizeStat(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["response_throughput"]; exists {

		vOpts := append(opts, db.WithValidateField("response_throughput"))
		for idx, item := range m.GetResponseThroughput() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["response_throughput_stat"]; exists {

		vOpts := append(opts, db.WithValidateField("response_throughput_stat"))
		if err := fv(ctx, m.GetResponseThroughputStat(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEPPDFInfoValidator = func() *ValidateAPIEPPDFInfo {
	v := &ValidateAPIEPPDFInfo{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func APIEPPDFInfoValidator() db.Validator {
	return DefaultAPIEPPDFInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *BusinessLogicMarkupSetting) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *BusinessLogicMarkupSetting) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *BusinessLogicMarkupSetting) DeepCopy() *BusinessLogicMarkupSetting {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &BusinessLogicMarkupSetting{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *BusinessLogicMarkupSetting) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *BusinessLogicMarkupSetting) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BusinessLogicMarkupSettingValidator().Validate(ctx, m, opts...)
}

type ValidateBusinessLogicMarkupSetting struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBusinessLogicMarkupSetting) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*BusinessLogicMarkupSetting)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *BusinessLogicMarkupSetting got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetLearnFromRedirectTraffic().(type) {
	case *BusinessLogicMarkupSetting_Disable:
		if fv, exists := v.FldValidators["learn_from_redirect_traffic.disable"]; exists {
			val := m.GetLearnFromRedirectTraffic().(*BusinessLogicMarkupSetting_Disable).Disable
			vOpts := append(opts,
				db.WithValidateField("learn_from_redirect_traffic"),
				db.WithValidateField("disable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BusinessLogicMarkupSetting_Enable:
		if fv, exists := v.FldValidators["learn_from_redirect_traffic.enable"]; exists {
			val := m.GetLearnFromRedirectTraffic().(*BusinessLogicMarkupSetting_Enable).Enable
			vOpts := append(opts,
				db.WithValidateField("learn_from_redirect_traffic"),
				db.WithValidateField("enable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBusinessLogicMarkupSettingValidator = func() *ValidateBusinessLogicMarkupSetting {
	v := &ValidateBusinessLogicMarkupSetting{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func BusinessLogicMarkupSettingValidator() db.Validator {
	return DefaultBusinessLogicMarkupSettingValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) FeaturesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for features")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Feature, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := FeatureValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for features")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Feature)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Feature, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated features")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items features")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["business_logic_markup_setting"]; exists {

		vOpts := append(opts, db.WithValidateField("business_logic_markup_setting"))
		if err := fv(ctx, m.GetBusinessLogicMarkupSetting(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["features"]; exists {
		vOpts := append(opts, db.WithValidateField("features"))
		if err := fv(ctx, m.GetFeatures(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFeatures := v.FeaturesValidationRuleHandler
	rulesFeatures := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhFeatures(rulesFeatures)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.features: %s", err)
		panic(errMsg)
	}
	v.FldValidators["features"] = vFn

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *Feature) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Feature) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Feature) DeepCopy() *Feature {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Feature{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Feature) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Feature) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return FeatureValidator().Validate(ctx, m, opts...)
}

type ValidateFeature struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateFeature) TypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(FeatureType)
		return int32(i)
	}
	// FeatureType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, FeatureType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type")
	}

	return validatorFn, nil
}

func (v *ValidateFeature) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Feature)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Feature got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultFeatureValidator = func() *ValidateFeature {
	v := &ValidateFeature{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhType := v.TypeValidationRuleHandler
	rulesType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhType(rulesType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Feature.type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type"] = vFn

	return v
}()

func FeatureValidator() db.Validator {
	return DefaultFeatureValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) FeaturesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for features")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Feature, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := FeatureValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for features")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Feature)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Feature, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated features")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items features")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["business_logic_markup_setting"]; exists {

		vOpts := append(opts, db.WithValidateField("business_logic_markup_setting"))
		if err := fv(ctx, m.GetBusinessLogicMarkupSetting(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["features"]; exists {
		vOpts := append(opts, db.WithValidateField("features"))
		if err := fv(ctx, m.GetFeatures(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFeatures := v.FeaturesValidationRuleHandler
	rulesFeatures := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhFeatures(rulesFeatures)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.features: %s", err)
		panic(errMsg)
	}
	v.FldValidators["features"] = vFn

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) FeaturesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for features")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Feature, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := FeatureValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for features")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Feature)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Feature, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated features")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items features")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["business_logic_markup_setting"]; exists {

		vOpts := append(opts, db.WithValidateField("business_logic_markup_setting"))
		if err := fv(ctx, m.GetBusinessLogicMarkupSetting(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["features"]; exists {
		vOpts := append(opts, db.WithValidateField("features"))
		if err := fv(ctx, m.GetFeatures(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFeatures := v.FeaturesValidationRuleHandler
	rulesFeatures := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhFeatures(rulesFeatures)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.features: %s", err)
		panic(errMsg)
	}
	v.FldValidators["features"] = vFn

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *OverrideInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *OverrideInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *OverrideInfo) DeepCopy() *OverrideInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &OverrideInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *OverrideInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *OverrideInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return OverrideInfoValidator().Validate(ctx, m, opts...)
}

type ValidateOverrideInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateOverrideInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*OverrideInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *OverrideInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["component_identifier"]; exists {

		vOpts := append(opts, db.WithValidateField("component_identifier"))
		if err := fv(ctx, m.GetComponentIdentifier(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["set_dynamic"]; exists {

		vOpts := append(opts, db.WithValidateField("set_dynamic"))
		if err := fv(ctx, m.GetSetDynamic(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultOverrideInfoValidator = func() *ValidateOverrideInfo {
	v := &ValidateOverrideInfo{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func OverrideInfoValidator() db.Validator {
	return DefaultOverrideInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *PDFSpec) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PDFSpec) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PDFSpec) DeepCopy() *PDFSpec {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PDFSpec{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PDFSpec) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PDFSpec) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PDFSpecValidator().Validate(ctx, m, opts...)
}

type ValidatePDFSpec struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePDFSpec) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PDFSpec)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PDFSpec got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["probability"]; exists {

		vOpts := append(opts, db.WithValidateField("probability"))
		if err := fv(ctx, m.GetProbability(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["x"]; exists {

		vOpts := append(opts, db.WithValidateField("x"))
		if err := fv(ctx, m.GetX(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPDFSpecValidator = func() *ValidatePDFSpec {
	v := &ValidatePDFSpec{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func PDFSpecValidator() db.Validator {
	return DefaultPDFSpecValidator
}

// augmented methods on protoc/std generated struct

func (m *PDFStat) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PDFStat) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PDFStat) DeepCopy() *PDFStat {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PDFStat{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PDFStat) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PDFStat) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PDFStatValidator().Validate(ctx, m, opts...)
}

type ValidatePDFStat struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePDFStat) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PDFStat)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PDFStat got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["pdf_95"]; exists {

		vOpts := append(opts, db.WithValidateField("pdf_95"))
		if err := fv(ctx, m.GetPdf_95(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["pdf_mean"]; exists {

		vOpts := append(opts, db.WithValidateField("pdf_mean"))
		if err := fv(ctx, m.GetPdfMean(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPDFStatValidator = func() *ValidatePDFStat {
	v := &ValidatePDFStat{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func PDFStatValidator() db.Validator {
	return DefaultPDFStatValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) FeaturesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for features")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Feature, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := FeatureValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for features")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Feature)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Feature, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated features")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items features")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["business_logic_markup_setting"]; exists {

		vOpts := append(opts, db.WithValidateField("business_logic_markup_setting"))
		if err := fv(ctx, m.GetBusinessLogicMarkupSetting(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["features"]; exists {
		vOpts := append(opts, db.WithValidateField("features"))
		if err := fv(ctx, m.GetFeatures(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFeatures := v.FeaturesValidationRuleHandler
	rulesFeatures := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhFeatures(rulesFeatures)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.features: %s", err)
		panic(errMsg)
	}
	v.FldValidators["features"] = vFn

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.BusinessLogicMarkupSetting = f.GetBusinessLogicMarkupSetting()
	m.Features = f.GetFeatures()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.BusinessLogicMarkupSetting = m1.BusinessLogicMarkupSetting
	f.Features = m1.Features
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.BusinessLogicMarkupSetting = f.GetBusinessLogicMarkupSetting()
	m.Features = f.GetFeatures()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.BusinessLogicMarkupSetting = m1.BusinessLogicMarkupSetting
	f.Features = m1.Features
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.BusinessLogicMarkupSetting = f.GetBusinessLogicMarkupSetting()
	m.Features = f.GetFeatures()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.BusinessLogicMarkupSetting = m1.BusinessLogicMarkupSetting
	f.Features = m1.Features
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}
