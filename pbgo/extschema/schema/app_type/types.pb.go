// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/app_type/types.proto

package app_type

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FeatureType
//
// x-displayName: "AI/ML Features"
// Enumeration for AI/ML features supported
type FeatureType int32

const (
	// x-displayName: "API Discovery"
	// API Discovery enables generation of model for various API interactions between services of App type.
	BUSINESS_LOGIC_MARKUP FeatureType = 0
	// x-displayName: "DDoS Detection"
	// Enable analysis of timeseries for various metric collected like requests, errors, latency etc.
	TIMESERIES_ANOMALY_DETECTION FeatureType = 1
	// x-displayName: "Per API Request Analysis"
	// Enable anomaly detection per API request, i.e. the probability density function (PDF) charts generation for API endpoints
	PER_REQ_ANOMALY_DETECTION FeatureType = 2
	// x-displayName: "Malicious User Detection"
	// Enable user behavior analysis
	USER_BEHAVIOR_ANALYSIS FeatureType = 3
)

var FeatureType_name = map[int32]string{
	0: "BUSINESS_LOGIC_MARKUP",
	1: "TIMESERIES_ANOMALY_DETECTION",
	2: "PER_REQ_ANOMALY_DETECTION",
	3: "USER_BEHAVIOR_ANALYSIS",
}

var FeatureType_value = map[string]int32{
	"BUSINESS_LOGIC_MARKUP":        0,
	"TIMESERIES_ANOMALY_DETECTION": 1,
	"PER_REQ_ANOMALY_DETECTION":    2,
	"USER_BEHAVIOR_ANALYSIS":       3,
}

func (FeatureType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{0}
}

// ApiEndpointInfoRequest
//
// x-displayName: "API Endpoint Info Request"
// This is the various forms that can be requested to be sent in the ApiEndpointInfoRequest
type ApiEndpointInfoRequest int32

const (
	// x-displayName: "API Endpoint Info None"
	// API ENDPOINT INFO NONE option is used to disable any additional info request per api endpoint response
	API_ENDPOINT_INFO_NONE ApiEndpointInfoRequest = 0
	// x-displayName: "API Endpoint Info PDF Sparklines"
	// API ENDPOINT INFO PDF SPARKLINES option is used to enable pdf sparkline info along with the api endpoint response
	API_ENDPOINT_INFO_PDF_SPARKLINES ApiEndpointInfoRequest = 1
)

var ApiEndpointInfoRequest_name = map[int32]string{
	0: "API_ENDPOINT_INFO_NONE",
	1: "API_ENDPOINT_INFO_PDF_SPARKLINES",
}

var ApiEndpointInfoRequest_value = map[string]int32{
	"API_ENDPOINT_INFO_NONE":           0,
	"API_ENDPOINT_INFO_PDF_SPARKLINES": 1,
}

func (ApiEndpointInfoRequest) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{1}
}

// SensitiveDataType
//
// x-displayName: "Sensitive Data Type"
// List of possible types of sensitive data that can be discovered for an APIEP.
type SensitiveDataType int32

const (
	// x-displayName: "Credit Card Number"
	// The Sensitive Data detected as credit card number.
	SENSITIVE_DATA_TYPE_CCN SensitiveDataType = 0
	// x-displayName: "Social Security Number"
	// The sensitive data detected as social security number.
	SENSITIVE_DATA_TYPE_SSN SensitiveDataType = 1
	// x-displayName: "IP"
	// The sensitive data detected as IP address.
	SENSITIVE_DATA_TYPE_IP SensitiveDataType = 2
	// x-displayName: "Email"
	// The sensitive data detected as email address.
	SENSITIVE_DATA_TYPE_EMAIL SensitiveDataType = 3
	// x-displayName: "Phone Number"
	// The sensitive data detected as phone number.
	SENSITIVE_DATA_TYPE_PHONE SensitiveDataType = 4
	// x-displayName: "Authentication"
	// The sensitive data detected as authentication info(e.g password, auth token etc).
	SENSITIVE_DATA_TYPE_AUTHENTICATION SensitiveDataType = 5
	// x-displayName: "Information Leakage"
	// The sensitive data detected as information leakage.
	SENSITIVE_DATA_TYPE_APP_INFO_LEAKAGE SensitiveDataType = 6
	// x-displayName: "Masked PII"
	// The sensitive data detected as masked PII (CCN, SSN)
	SENSITIVE_DATA_TYPE_MASKED_PII SensitiveDataType = 7
	// x-displayName: "Location"
	// The sensitive data detected as Location.
	SENSITIVE_DATA_TYPE_LOCATION SensitiveDataType = 8
)

var SensitiveDataType_name = map[int32]string{
	0: "SENSITIVE_DATA_TYPE_CCN",
	1: "SENSITIVE_DATA_TYPE_SSN",
	2: "SENSITIVE_DATA_TYPE_IP",
	3: "SENSITIVE_DATA_TYPE_EMAIL",
	4: "SENSITIVE_DATA_TYPE_PHONE",
	5: "SENSITIVE_DATA_TYPE_AUTHENTICATION",
	6: "SENSITIVE_DATA_TYPE_APP_INFO_LEAKAGE",
	7: "SENSITIVE_DATA_TYPE_MASKED_PII",
	8: "SENSITIVE_DATA_TYPE_LOCATION",
}

var SensitiveDataType_value = map[string]int32{
	"SENSITIVE_DATA_TYPE_CCN":              0,
	"SENSITIVE_DATA_TYPE_SSN":              1,
	"SENSITIVE_DATA_TYPE_IP":               2,
	"SENSITIVE_DATA_TYPE_EMAIL":            3,
	"SENSITIVE_DATA_TYPE_PHONE":            4,
	"SENSITIVE_DATA_TYPE_AUTHENTICATION":   5,
	"SENSITIVE_DATA_TYPE_APP_INFO_LEAKAGE": 6,
	"SENSITIVE_DATA_TYPE_MASKED_PII":       7,
	"SENSITIVE_DATA_TYPE_LOCATION":         8,
}

func (SensitiveDataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{2}
}

// APIEP PII Level
//
// x-displayName: API EP PII Level
// API Endpoint's PII Level.
type APIEPPIILevel int32

const (
	// x-displayName: API EP PII Level
	// No PII data detected for the given API Endpoint.
	APIEP_PII_NOT_DETECTED APIEPPIILevel = 0
	// x-displayName: API EP PII Level Detected
	// Detected PII data for a given API Endpoint.
	APIEP_PII_DETECTED APIEPPIILevel = 1
)

var APIEPPIILevel_name = map[int32]string{
	0: "APIEP_PII_NOT_DETECTED",
	1: "APIEP_PII_DETECTED",
}

var APIEPPIILevel_value = map[string]int32{
	"APIEP_PII_NOT_DETECTED": 0,
	"APIEP_PII_DETECTED":     1,
}

func (APIEPPIILevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{3}
}

// APIEP Security Risk
//
// x-displayName: "API Endpoint Security Risk"
// Signifies API Endpoint Security Risk Level
type APIEPSecurityRisk int32

const (
	// x-displayName: "APIEP Security Risk"
	// Security risk is not detected (for example, when no traffic).
	APIEP_SEC_RISK_NONE APIEPSecurityRisk = 0
	// x-displayName: "APIEP Has Low Security Risk"
	// API Endpoint has low security risk.
	APIEP_SEC_RISK_LOW APIEPSecurityRisk = 1
	// x-displayName: "APIEP Has Medium Security Risk"
	// API Endpoint has medium security risk.
	APIEP_SEC_RISK_MED APIEPSecurityRisk = 2
	// x-displayName: "APIEP Has High Security Risk"
	// API Endpoint has high security risk.
	APIEP_SEC_RISK_HIGH APIEPSecurityRisk = 3
)

var APIEPSecurityRisk_name = map[int32]string{
	0: "APIEP_SEC_RISK_NONE",
	1: "APIEP_SEC_RISK_LOW",
	2: "APIEP_SEC_RISK_MED",
	3: "APIEP_SEC_RISK_HIGH",
}

var APIEPSecurityRisk_value = map[string]int32{
	"APIEP_SEC_RISK_NONE": 0,
	"APIEP_SEC_RISK_LOW":  1,
	"APIEP_SEC_RISK_MED":  2,
	"APIEP_SEC_RISK_HIGH": 3,
}

func (APIEPSecurityRisk) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{4}
}

// APIEP Category
//
// x-displayName: "Category of the API Endpoint"
// The category of an API endpoint.
type APIEPCategory int32

const (
	// x-displayName: "Discovered API Endpoint"
	// Discovered API Endpoint.
	APIEP_CATEGORY_DISCOVERED APIEPCategory = 0
	// x-displayName: "API Endpoint from Swagger spec"
	// The API Endpoint is imported from user swagger.
	APIEP_CATEGORY_SWAGGER APIEPCategory = 1
	// x-displayName: "API Endpoint is in the API Inventory"
	// The API Endpoint is present at the API Inventory.
	APIEP_CATEGORY_INVENTORY APIEPCategory = 2
	// x-displayName: "API Endpoint Origin Discovered"
	// The API Endpoint is considered as part of Shadow API.
	APIEP_CATEGORY_SHADOW APIEPCategory = 3
)

var APIEPCategory_name = map[int32]string{
	0: "APIEP_CATEGORY_DISCOVERED",
	1: "APIEP_CATEGORY_SWAGGER",
	2: "APIEP_CATEGORY_INVENTORY",
	3: "APIEP_CATEGORY_SHADOW",
}

var APIEPCategory_value = map[string]int32{
	"APIEP_CATEGORY_DISCOVERED": 0,
	"APIEP_CATEGORY_SWAGGER":    1,
	"APIEP_CATEGORY_INVENTORY":  2,
	"APIEP_CATEGORY_SHADOW":     3,
}

func (APIEPCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{5}
}

// Feature type container
//
// x-displayName: "Features"
// List of features that are to be enabled for this apptype. FeatureType enum lists
// the features available.
type Feature struct {
	// Enable type of Feature
	//
	// x-required
	// x-displayName: "AI/ML Feature Type"
	// Feature type to be enabled
	Type FeatureType `protobuf:"varint,1,opt,name=type,proto3,enum=ves.io.schema.app_type.FeatureType" json:"type,omitempty"`
}

func (m *Feature) Reset()      { *m = Feature{} }
func (*Feature) ProtoMessage() {}
func (*Feature) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{0}
}
func (m *Feature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Feature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Feature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feature.Merge(m, src)
}
func (m *Feature) XXX_Size() int {
	return m.Size()
}
func (m *Feature) XXX_DiscardUnknown() {
	xxx_messageInfo_Feature.DiscardUnknown(m)
}

var xxx_messageInfo_Feature proto.InternalMessageInfo

func (m *Feature) GetType() FeatureType {
	if m != nil {
		return m.Type
	}
	return BUSINESS_LOGIC_MARKUP
}

// API Discovery Settings
//
// x-displayName: "API Discovery Settings"
// Settings specifying how API Discovery will be performed
type BusinessLogicMarkupSetting struct {
	// Include or Exclude data in machine learning from traffic with redirect response in API Discovery
	//
	// x-displayName: "Learn from Traffic with Redirect Response"
	// By default, API Discovery only learns API Endpoints and patterns from traffic with response code 200
	// On enabling this, the AI engine will learn API Endpoints from traffic with response code 3xx in addition to 200
	//
	// Types that are valid to be assigned to LearnFromRedirectTraffic:
	//	*BusinessLogicMarkupSetting_Disable
	//	*BusinessLogicMarkupSetting_Enable
	LearnFromRedirectTraffic isBusinessLogicMarkupSetting_LearnFromRedirectTraffic `protobuf_oneof:"learn_from_redirect_traffic"`
}

func (m *BusinessLogicMarkupSetting) Reset()      { *m = BusinessLogicMarkupSetting{} }
func (*BusinessLogicMarkupSetting) ProtoMessage() {}
func (*BusinessLogicMarkupSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{1}
}
func (m *BusinessLogicMarkupSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BusinessLogicMarkupSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BusinessLogicMarkupSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusinessLogicMarkupSetting.Merge(m, src)
}
func (m *BusinessLogicMarkupSetting) XXX_Size() int {
	return m.Size()
}
func (m *BusinessLogicMarkupSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_BusinessLogicMarkupSetting.DiscardUnknown(m)
}

var xxx_messageInfo_BusinessLogicMarkupSetting proto.InternalMessageInfo

type isBusinessLogicMarkupSetting_LearnFromRedirectTraffic interface {
	isBusinessLogicMarkupSetting_LearnFromRedirectTraffic()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type BusinessLogicMarkupSetting_Disable struct {
	Disable *schema.Empty `protobuf:"bytes,1,opt,name=disable,proto3,oneof" json:"disable,omitempty"`
}
type BusinessLogicMarkupSetting_Enable struct {
	Enable *schema.Empty `protobuf:"bytes,2,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
}

func (*BusinessLogicMarkupSetting_Disable) isBusinessLogicMarkupSetting_LearnFromRedirectTraffic() {}
func (*BusinessLogicMarkupSetting_Enable) isBusinessLogicMarkupSetting_LearnFromRedirectTraffic()  {}

func (m *BusinessLogicMarkupSetting) GetLearnFromRedirectTraffic() isBusinessLogicMarkupSetting_LearnFromRedirectTraffic {
	if m != nil {
		return m.LearnFromRedirectTraffic
	}
	return nil
}

func (m *BusinessLogicMarkupSetting) GetDisable() *schema.Empty {
	if x, ok := m.GetLearnFromRedirectTraffic().(*BusinessLogicMarkupSetting_Disable); ok {
		return x.Disable
	}
	return nil
}

func (m *BusinessLogicMarkupSetting) GetEnable() *schema.Empty {
	if x, ok := m.GetLearnFromRedirectTraffic().(*BusinessLogicMarkupSetting_Enable); ok {
		return x.Enable
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BusinessLogicMarkupSetting) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BusinessLogicMarkupSetting_Disable)(nil),
		(*BusinessLogicMarkupSetting_Enable)(nil),
	}
}

// App type Configuration specification
//
// x-displayName: "App Type Spec"
type GlobalSpecType struct {
	// Features
	//
	// x-displayName: "Features"
	// List of various AI/ML features enabled
	Features []*Feature `protobuf:"bytes,1,rep,name=features,proto3" json:"features,omitempty"`
	// API Discovery Settings
	//
	// x-displayName: "API Discovery Settings"
	// Setting specifying how API Discovery will be performed
	BusinessLogicMarkupSetting *BusinessLogicMarkupSetting `protobuf:"bytes,2,opt,name=business_logic_markup_setting,json=businessLogicMarkupSetting,proto3" json:"business_logic_markup_setting,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{2}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetFeatures() []*Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *GlobalSpecType) GetBusinessLogicMarkupSetting() *BusinessLogicMarkupSetting {
	if m != nil {
		return m.BusinessLogicMarkupSetting
	}
	return nil
}

// Create App type
//
// x-displayName: "Create App Type"
// Create App type will create the configuration in namespace metadata.namespace
type CreateSpecType struct {
	Features                   []*Feature                  `protobuf:"bytes,1,rep,name=features,proto3" json:"features,omitempty"`
	BusinessLogicMarkupSetting *BusinessLogicMarkupSetting `protobuf:"bytes,2,opt,name=business_logic_markup_setting,json=businessLogicMarkupSetting,proto3" json:"business_logic_markup_setting,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{3}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetFeatures() []*Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *CreateSpecType) GetBusinessLogicMarkupSetting() *BusinessLogicMarkupSetting {
	if m != nil {
		return m.BusinessLogicMarkupSetting
	}
	return nil
}

// Replace App type
//
// x-displayName: "Replace App Type"
// Update the configuration by replacing the existing spec with the provided one.
// For read-then-write operations a resourceVersion mismatch will occur if the object was modified between the read and write.
type ReplaceSpecType struct {
	Features                   []*Feature                  `protobuf:"bytes,1,rep,name=features,proto3" json:"features,omitempty"`
	BusinessLogicMarkupSetting *BusinessLogicMarkupSetting `protobuf:"bytes,2,opt,name=business_logic_markup_setting,json=businessLogicMarkupSetting,proto3" json:"business_logic_markup_setting,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{4}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetFeatures() []*Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *ReplaceSpecType) GetBusinessLogicMarkupSetting() *BusinessLogicMarkupSetting {
	if m != nil {
		return m.BusinessLogicMarkupSetting
	}
	return nil
}

// Get App type
//
// x-displayName: "Get App Type"
// Get App type will read the configuration from namespace metadata.namespace
type GetSpecType struct {
	Features                   []*Feature                  `protobuf:"bytes,1,rep,name=features,proto3" json:"features,omitempty"`
	BusinessLogicMarkupSetting *BusinessLogicMarkupSetting `protobuf:"bytes,2,opt,name=business_logic_markup_setting,json=businessLogicMarkupSetting,proto3" json:"business_logic_markup_setting,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{5}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetFeatures() []*Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *GetSpecType) GetBusinessLogicMarkupSetting() *BusinessLogicMarkupSetting {
	if m != nil {
		return m.BusinessLogicMarkupSetting
	}
	return nil
}

// API endpoint dynamic example
//
// x-displayName: "Expanded API Endpoints"
// List of Examples of expanded URL components for API endpoints that are collapsed with a dynamic component that is identified automatically
type APIEPDynExample struct {
	// Dynamic component
	//
	// x-displayName: "Dynamic Component"
	// x-example: "/api/v1/user_id/DYN"
	// Dynamic component used to collapse sample URLs given in Expanded URLs
	ComponentIdentifier string `protobuf:"bytes,1,opt,name=component_identifier,json=componentIdentifier,proto3" json:"component_identifier,omitempty"`
	// List of expanded URLs
	//
	// x-displayName: "Expanded URL(s)"
	// x-example: "[d0161a1e-044e-427b-a806-3bad9eac97fc, a74eb844-6d91-474c-9874-f19fa3983f4d]"
	// List of sample URL(s) that are collapsed
	ComponentExamples []string `protobuf:"bytes,2,rep,name=component_examples,json=componentExamples,proto3" json:"component_examples,omitempty"`
}

func (m *APIEPDynExample) Reset()      { *m = APIEPDynExample{} }
func (*APIEPDynExample) ProtoMessage() {}
func (*APIEPDynExample) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{6}
}
func (m *APIEPDynExample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIEPDynExample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *APIEPDynExample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIEPDynExample.Merge(m, src)
}
func (m *APIEPDynExample) XXX_Size() int {
	return m.Size()
}
func (m *APIEPDynExample) XXX_DiscardUnknown() {
	xxx_messageInfo_APIEPDynExample.DiscardUnknown(m)
}

var xxx_messageInfo_APIEPDynExample proto.InternalMessageInfo

func (m *APIEPDynExample) GetComponentIdentifier() string {
	if m != nil {
		return m.ComponentIdentifier
	}
	return ""
}

func (m *APIEPDynExample) GetComponentExamples() []string {
	if m != nil {
		return m.ComponentExamples
	}
	return nil
}

// Identified API
//
// x-displayName: "API Endpoint Info"
// Information about automatically identified API endpoint
// Each identified API endpoint has a CollapsedURL and Method.
// CollapsedURL is created by replacing dynamic components in the URL, if any, with the keyword DYN.
// These dynamic components are automatically identified.
// Additionally, any API endpoint that has a collapsedURL with automatically identified DYN components,
// will also have DYN-Examples which show a few examples of the original values of the components that were determined to be DYN.
type APIEPInfo struct {
	// Identified API
	//
	// x-displayName: "API endpoint URL"
	// x-example: "/api/v1/user_id/DYN/vehicle_id/DYN"
	// URL for automatically identified API
	CollapsedUrl string `protobuf:"bytes,2,opt,name=collapsed_url,json=collapsedUrl,proto3" json:"collapsed_url,omitempty"`
	// HTTP method
	//
	// x-displayName: "HTTP Method"
	// x-example: "GET"
	// HTTP method for the API.
	Method string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	// Expanded URL(s)
	//
	// x-displayName: "Expanded URL(s)"
	// x-example: "{component_identifier: api/v1/user_id/DYN,component_examples: [cmenomo007]}"
	// For example -
	// {"dyn_examples": [
	//  {
	//    "component_identifier": "api/v1/user_id/DYN",
	//    "component_examples": [
	//      "cmenomo007",
	//      "marcusaurelius"
	//      "artattacksince1947",
	//      "johndoe83",
	//    ]
	//  },
	//  {
	//    "component_identifier": "api/v1/user_id/DYN/vehicle_id/DYN",
	//    "component_examples": [
	//      "JN1CV6AR3AM458367",
	//      "1GBCS10AXP2917522",
	//      "JM1DE1KY9D0155647",
	//      "JN1CA31D5YT533780"
	//    ]
	//  }
	// ]}
	// List  of sample URL(s) that are collapsed and dynamic components to collapse them
	DynExamples []*APIEPDynExample `protobuf:"bytes,4,rep,name=dyn_examples,json=dynExamples,proto3" json:"dyn_examples,omitempty"`
	// Probability Density Function
	//
	// x-displayName: "PDF(Value)"
	// Metrics supported currently are request_size response_size latency_with_data, latency_no_data, request_rate, error_rate, response_throughput.
	// PDF is calculated for each combination of (Tenant, App type, API endpoint).
	// API endpoint is determined from automatically identified API (collapsed_url) and method.
	PdfInfo *APIEPPDFInfo `protobuf:"bytes,5,opt,name=pdf_info,json=pdfInfo,proto3" json:"pdf_info,omitempty"`
	// Request percentage
	//
	// x-displayName: "Request Percentage"
	// x-example: "78.5789"
	// Percentage of requests that were directed to this API Endpoint
	RequestPercentage float32 `protobuf:"fixed32,6,opt,name=request_percentage,json=requestPercentage,proto3" json:"request_percentage,omitempty"`
	// Has Learnt Schema
	//
	// x-displayName: "Has Learnt Schema"
	// x-example: true
	//Has Learnt Schema flag for request API endpoint.
	HasLearntSchema bool `protobuf:"varint,7,opt,name=has_learnt_schema,json=hasLearntSchema,proto3" json:"has_learnt_schema,omitempty"`
	// Category
	//
	// x-displayName: "Category"
	// x-example: APIEP_CATEGORY_DISCOVERED, APIEP_CATEGORY_INVENTORY
	// The category of the API Endpoint relative to API Inventory.
	Category []APIEPCategory `protobuf:"varint,8,rep,packed,name=category,proto3,enum=ves.io.schema.app_type.APIEPCategory" json:"category,omitempty"`
	// base_path
	//
	// x-displayName: "Base Path"
	// x-example: "/v1"
	// The base path for this Endpoint.
	BasePath string `protobuf:"bytes,9,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty"`
	// pii_level
	//
	// x-displayName: "PII Level"
	// x-example: APIEP_PII_NOT_DETECTED, APIEP_PII_DETECTED
	// Signifies if the pii data is detected.
	PiiLevel APIEPPIILevel `protobuf:"varint,10,opt,name=pii_level,json=piiLevel,proto3,enum=ves.io.schema.app_type.APIEPPIILevel" json:"pii_level,omitempty"`
	// security_risk
	//
	// x-displayName: "Security Risk Level"
	// x-example: APIEP_SEC_RISK_LOW, APIEP_SEC_RISK_MED, APIEP_SEC_RISK_HIGH
	// Signifies api endpoint security risk level.
	SecurityRisk APIEPSecurityRisk `protobuf:"varint,11,opt,name=security_risk,json=securityRisk,proto3,enum=ves.io.schema.app_type.APIEPSecurityRisk" json:"security_risk,omitempty"`
	// access_discovery_time
	//
	// x-displayName: "Access Discovery Time"
	// access_discovery_time is the time when the API endpoint
	// was updated from the access logs by the discovery mechanism.
	// It is the UTC time and represented in RFC3339 form.
	AccessDiscoveryTime *types.Timestamp `protobuf:"bytes,12,opt,name=access_discovery_time,json=accessDiscoveryTime,proto3" json:"access_discovery_time,omitempty"`
	// List of domains
	//
	// x-displayName: "List of Domains"
	// x-example: "[www.example1.com", "www.example2.com]"
	// List of Domains of the API endpoint
	Domains []string `protobuf:"bytes,13,rep,name=domains,proto3" json:"domains,omitempty"`
	// List of Sensitive Data
	//
	// x-displayName: "List of Sensitive Data"
	// x-example: "[SENSITIVE_DATA_TYPE_CCN, SENSITIVE_DATA_TYPE_SSN, SENSITIVE_DATA_TYPE_IP]"
	// List of Sensitive Data found in the API endpoint
	SensitiveData []SensitiveDataType `protobuf:"varint,14,rep,packed,name=sensitive_data,json=sensitiveData,proto3,enum=ves.io.schema.app_type.SensitiveDataType" json:"sensitive_data,omitempty"`
	// sec_events_count
	//
	// x-displayName: "Number Of Total Security Events"
	// x-example: "1234"
	// Number of sec_events seen for this API Endpoint for the specified time-range.
	SecEventsCount int32 `protobuf:"varint,15,opt,name=sec_events_count,json=secEventsCount,proto3" json:"sec_events_count,omitempty"`
	// requests_count
	//
	// x-displayName: "Number Of Total Requests"
	// x-example: "1234"
	// Number of requests seen for this API Endpoint for the specified time-range.
	RequestsCount int32 `protobuf:"varint,16,opt,name=requests_count,json=requestsCount,proto3" json:"requests_count,omitempty"`
}

func (m *APIEPInfo) Reset()      { *m = APIEPInfo{} }
func (*APIEPInfo) ProtoMessage() {}
func (*APIEPInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{7}
}
func (m *APIEPInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIEPInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *APIEPInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIEPInfo.Merge(m, src)
}
func (m *APIEPInfo) XXX_Size() int {
	return m.Size()
}
func (m *APIEPInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_APIEPInfo.DiscardUnknown(m)
}

var xxx_messageInfo_APIEPInfo proto.InternalMessageInfo

func (m *APIEPInfo) GetCollapsedUrl() string {
	if m != nil {
		return m.CollapsedUrl
	}
	return ""
}

func (m *APIEPInfo) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *APIEPInfo) GetDynExamples() []*APIEPDynExample {
	if m != nil {
		return m.DynExamples
	}
	return nil
}

func (m *APIEPInfo) GetPdfInfo() *APIEPPDFInfo {
	if m != nil {
		return m.PdfInfo
	}
	return nil
}

func (m *APIEPInfo) GetRequestPercentage() float32 {
	if m != nil {
		return m.RequestPercentage
	}
	return 0
}

func (m *APIEPInfo) GetHasLearntSchema() bool {
	if m != nil {
		return m.HasLearntSchema
	}
	return false
}

func (m *APIEPInfo) GetCategory() []APIEPCategory {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *APIEPInfo) GetBasePath() string {
	if m != nil {
		return m.BasePath
	}
	return ""
}

func (m *APIEPInfo) GetPiiLevel() APIEPPIILevel {
	if m != nil {
		return m.PiiLevel
	}
	return APIEP_PII_NOT_DETECTED
}

func (m *APIEPInfo) GetSecurityRisk() APIEPSecurityRisk {
	if m != nil {
		return m.SecurityRisk
	}
	return APIEP_SEC_RISK_NONE
}

func (m *APIEPInfo) GetAccessDiscoveryTime() *types.Timestamp {
	if m != nil {
		return m.AccessDiscoveryTime
	}
	return nil
}

func (m *APIEPInfo) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *APIEPInfo) GetSensitiveData() []SensitiveDataType {
	if m != nil {
		return m.SensitiveData
	}
	return nil
}

func (m *APIEPInfo) GetSecEventsCount() int32 {
	if m != nil {
		return m.SecEventsCount
	}
	return 0
}

func (m *APIEPInfo) GetRequestsCount() int32 {
	if m != nil {
		return m.RequestsCount
	}
	return 0
}

// Probability Density Point(x,y)
//
// x-displayName: "Point(Value, Probability)"
// Probability Density point in (PDF(x)) of the metric.
// x is the value of the metric, probability is the corresponding PDF(x).
// In the univariate case (current configuration), the value x of the metrics is a scaler.
// As PDFSpec is repeated (see below), the x values are linearly spaced monotonically from minimum to maximum.
type PDFSpec struct {
	// Metric Value
	//
	// x-displayName: "Value"
	// x-example: "121.316"
	// Value of the metric that can be plotted on x-axis
	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	// Probability
	//
	// x-displayName: "Probability"
	// x-example: "0.078"
	// Probability of given Value of the metric that can be plotted on y-axis
	Probability float32 `protobuf:"fixed32,2,opt,name=probability,proto3" json:"probability,omitempty"`
}

func (m *PDFSpec) Reset()      { *m = PDFSpec{} }
func (*PDFSpec) ProtoMessage() {}
func (*PDFSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{8}
}
func (m *PDFSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PDFSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PDFSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PDFSpec.Merge(m, src)
}
func (m *PDFSpec) XXX_Size() int {
	return m.Size()
}
func (m *PDFSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PDFSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PDFSpec proto.InternalMessageInfo

func (m *PDFSpec) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *PDFSpec) GetProbability() float32 {
	if m != nil {
		return m.Probability
	}
	return 0
}

// Probability Density Function Statistics
//
// x-displayName: "PDF(Statistics)"
// Probability Density Function statistics of the metric.
// pdf_mean is the mean PDF of the metric, pdf_95 is the 95th percentile PDF of the metric.
// In the univariate case PDFStat for each metric consists of pdf_mean and pdf_95.
type PDFStat struct {
	// PDF Mean
	//
	// x-displayName: "PDF(Mean)"
	// pdf_mean represents the mean of PDF
	PdfMean float32 `protobuf:"fixed32,1,opt,name=pdf_mean,json=pdfMean,proto3" json:"pdf_mean,omitempty"`
	// PDF 95th Percentile
	//
	// x-displayName: "PDF(95th Percentile)"
	// x-example: "0.078"
	// pdf_95 represents the 95th percentile of PDF
	Pdf_95 float32 `protobuf:"fixed32,2,opt,name=pdf_95,json=pdf95,proto3" json:"pdf_95,omitempty"`
}

func (m *PDFStat) Reset()      { *m = PDFStat{} }
func (*PDFStat) ProtoMessage() {}
func (*PDFStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{9}
}
func (m *PDFStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PDFStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PDFStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PDFStat.Merge(m, src)
}
func (m *PDFStat) XXX_Size() int {
	return m.Size()
}
func (m *PDFStat) XXX_DiscardUnknown() {
	xxx_messageInfo_PDFStat.DiscardUnknown(m)
}

var xxx_messageInfo_PDFStat proto.InternalMessageInfo

func (m *PDFStat) GetPdfMean() float32 {
	if m != nil {
		return m.PdfMean
	}
	return 0
}

func (m *PDFStat) GetPdf_95() float32 {
	if m != nil {
		return m.Pdf_95
	}
	return 0
}

// Probability Density Function
//
// x-displayName: "PDF(Value)"
// Metrics supported currently are request_size response_size latency_with_data, latency_no_data.
// PDF is calculated for each combination of (Tenant, App type, API endpoint).
// API endpoint is determined from automatically identified API (collapsed_url) and method.
// In the univariate case PDFSpec for each metric is repeated num_pdf_samples times.
// num_pdf_samples is a parameter is system wide parameter currently set to 200.
type APIEPPDFInfo struct {
	// PDF(request_size)
	//
	// x-displayName: "PDF(Request)"
	// List of Probability density points for PDF for request size
	RequestSize []*PDFSpec `protobuf:"bytes,1,rep,name=request_size,json=requestSize,proto3" json:"request_size,omitempty"`
	// PDF(response_size)
	//
	// x-displayName: "PDF(Response)"
	// List of Probability density points for PDF for response size
	ResponseSize []*PDFSpec `protobuf:"bytes,2,rep,name=response_size,json=responseSize,proto3" json:"response_size,omitempty"`
	// PDF(response latency)
	//
	// x-displayName: "PDF(Latency End)"
	// List of Probability density points for PDF for latency of response end
	LatencyWithData []*PDFSpec `protobuf:"bytes,3,rep,name=latency_with_data,json=latencyWithData,proto3" json:"latency_with_data,omitempty"`
	// PDF(response latency to first byte)
	//
	// x-displayName: "PDF(Latency Begin)"
	// List of Probability density points for PDF for latency of response begin
	LatencyNoData []*PDFSpec `protobuf:"bytes,4,rep,name=latency_no_data,json=latencyNoData,proto3" json:"latency_no_data,omitempty"`
	// PDF(request rate)
	//
	// x-displayName: "PDF(Request Rate)"
	// List of Probability density points for PDF for request rate
	RequestRate []*PDFSpec `protobuf:"bytes,5,rep,name=request_rate,json=requestRate,proto3" json:"request_rate,omitempty"`
	// PDF(error rate)
	//
	// x-displayName: "PDF(Error Rate)"
	// List of Probability density points for PDF for error rate
	ErrorRate []*PDFSpec `protobuf:"bytes,6,rep,name=error_rate,json=errorRate,proto3" json:"error_rate,omitempty"`
	// PDF(response throughput)
	//
	// x-displayName: "PDF(Response Throughput)"
	// List of Probability density points for PDF for response throughput
	ResponseThroughput []*PDFSpec `protobuf:"bytes,7,rep,name=response_throughput,json=responseThroughput,proto3" json:"response_throughput,omitempty"`
	// creation_timestamp
	//
	// x-displayName: "Creation Timestamp"
	// creation_timestamp represents the time when this PDF was created
	// It is represented in RFC3339 form and is in UTC.
	CreationTimestamp *types.Timestamp `protobuf:"bytes,8,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	// PDFStat(request_size)
	//
	// x-displayName: "PDFStat(Request)"
	// Mean and 95th percentile for PDF for request size
	RequestSizeStat *PDFStat `protobuf:"bytes,9,opt,name=request_size_stat,json=requestSizeStat,proto3" json:"request_size_stat,omitempty"`
	// PDFStat(response_size)
	//
	// x-displayName: "PDFStat(Response)"
	// Mean and 95th percentile for PDF for response size
	ResponseSizeStat *PDFStat `protobuf:"bytes,10,opt,name=response_size_stat,json=responseSizeStat,proto3" json:"response_size_stat,omitempty"`
	// PDFStat(response latency)
	//
	// x-displayName: "PDFStat(Latency End)"
	// Mean and 95th percentile for PDF for latency of response end
	LatencyWithDataStat *PDFStat `protobuf:"bytes,11,opt,name=latency_with_data_stat,json=latencyWithDataStat,proto3" json:"latency_with_data_stat,omitempty"`
	// PDFStat(response latency to first byte)
	//
	// x-displayName: "PDFStat(Latency Begin)"
	// Mean and 95th percentile for PDF for latency of response begin
	LatencyNoDataStat *PDFStat `protobuf:"bytes,12,opt,name=latency_no_data_stat,json=latencyNoDataStat,proto3" json:"latency_no_data_stat,omitempty"`
	// PDFStat(request rate)
	//
	// x-displayName: "PDFStat(Request Rate)"
	// Mean and 95th percentile for PDF for request rate
	RequestRateStat *PDFStat `protobuf:"bytes,13,opt,name=request_rate_stat,json=requestRateStat,proto3" json:"request_rate_stat,omitempty"`
	// PDFStat(error rate)
	//
	// x-displayName: "PDFStat(Error Rate)"
	// Mean and 95th percentile for PDF for error rate
	ErrorRateStat *PDFStat `protobuf:"bytes,14,opt,name=error_rate_stat,json=errorRateStat,proto3" json:"error_rate_stat,omitempty"`
	// PDFStat(response throughput)
	//
	// x-displayName: "PDF(Response Throughput)"
	// Mean and 95th percentile for PDF for response throughput
	ResponseThroughputStat *PDFStat `protobuf:"bytes,15,opt,name=response_throughput_stat,json=responseThroughputStat,proto3" json:"response_throughput_stat,omitempty"`
}

func (m *APIEPPDFInfo) Reset()      { *m = APIEPPDFInfo{} }
func (*APIEPPDFInfo) ProtoMessage() {}
func (*APIEPPDFInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{10}
}
func (m *APIEPPDFInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIEPPDFInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *APIEPPDFInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIEPPDFInfo.Merge(m, src)
}
func (m *APIEPPDFInfo) XXX_Size() int {
	return m.Size()
}
func (m *APIEPPDFInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_APIEPPDFInfo.DiscardUnknown(m)
}

var xxx_messageInfo_APIEPPDFInfo proto.InternalMessageInfo

func (m *APIEPPDFInfo) GetRequestSize() []*PDFSpec {
	if m != nil {
		return m.RequestSize
	}
	return nil
}

func (m *APIEPPDFInfo) GetResponseSize() []*PDFSpec {
	if m != nil {
		return m.ResponseSize
	}
	return nil
}

func (m *APIEPPDFInfo) GetLatencyWithData() []*PDFSpec {
	if m != nil {
		return m.LatencyWithData
	}
	return nil
}

func (m *APIEPPDFInfo) GetLatencyNoData() []*PDFSpec {
	if m != nil {
		return m.LatencyNoData
	}
	return nil
}

func (m *APIEPPDFInfo) GetRequestRate() []*PDFSpec {
	if m != nil {
		return m.RequestRate
	}
	return nil
}

func (m *APIEPPDFInfo) GetErrorRate() []*PDFSpec {
	if m != nil {
		return m.ErrorRate
	}
	return nil
}

func (m *APIEPPDFInfo) GetResponseThroughput() []*PDFSpec {
	if m != nil {
		return m.ResponseThroughput
	}
	return nil
}

func (m *APIEPPDFInfo) GetCreationTimestamp() *types.Timestamp {
	if m != nil {
		return m.CreationTimestamp
	}
	return nil
}

func (m *APIEPPDFInfo) GetRequestSizeStat() *PDFStat {
	if m != nil {
		return m.RequestSizeStat
	}
	return nil
}

func (m *APIEPPDFInfo) GetResponseSizeStat() *PDFStat {
	if m != nil {
		return m.ResponseSizeStat
	}
	return nil
}

func (m *APIEPPDFInfo) GetLatencyWithDataStat() *PDFStat {
	if m != nil {
		return m.LatencyWithDataStat
	}
	return nil
}

func (m *APIEPPDFInfo) GetLatencyNoDataStat() *PDFStat {
	if m != nil {
		return m.LatencyNoDataStat
	}
	return nil
}

func (m *APIEPPDFInfo) GetRequestRateStat() *PDFStat {
	if m != nil {
		return m.RequestRateStat
	}
	return nil
}

func (m *APIEPPDFInfo) GetErrorRateStat() *PDFStat {
	if m != nil {
		return m.ErrorRateStat
	}
	return nil
}

func (m *APIEPPDFInfo) GetResponseThroughputStat() *PDFStat {
	if m != nil {
		return m.ResponseThroughputStat
	}
	return nil
}

// Override automatic collapse
//
// x-displayName: "Override Rule"
// Rule to override a given automatic dynamic identifier used to expand or collapse API URL
type OverrideInfo struct {
	// Override component identifier
	//
	// x-displayName: "Identifier"
	// x-example: "/api/v1/user_id/DYN"
	ComponentIdentifier string `protobuf:"bytes,2,opt,name=component_identifier,json=componentIdentifier,proto3" json:"component_identifier,omitempty"`
	// Override Value
	//
	// x-displayName: "Enable/Disable"
	// x-example: "False"
	// Enable or Disable component to be considered as dynamic to collapse or expand API URL
	SetDynamic bool `protobuf:"varint,3,opt,name=set_dynamic,json=setDynamic,proto3" json:"set_dynamic,omitempty"`
}

func (m *OverrideInfo) Reset()      { *m = OverrideInfo{} }
func (*OverrideInfo) ProtoMessage() {}
func (*OverrideInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f883938c2c15f50a, []int{11}
}
func (m *OverrideInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OverrideInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OverrideInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OverrideInfo.Merge(m, src)
}
func (m *OverrideInfo) XXX_Size() int {
	return m.Size()
}
func (m *OverrideInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OverrideInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OverrideInfo proto.InternalMessageInfo

func (m *OverrideInfo) GetComponentIdentifier() string {
	if m != nil {
		return m.ComponentIdentifier
	}
	return ""
}

func (m *OverrideInfo) GetSetDynamic() bool {
	if m != nil {
		return m.SetDynamic
	}
	return false
}

func init() {
	proto.RegisterEnum("ves.io.schema.app_type.FeatureType", FeatureType_name, FeatureType_value)
	proto.RegisterEnum("ves.io.schema.app_type.ApiEndpointInfoRequest", ApiEndpointInfoRequest_name, ApiEndpointInfoRequest_value)
	proto.RegisterEnum("ves.io.schema.app_type.SensitiveDataType", SensitiveDataType_name, SensitiveDataType_value)
	proto.RegisterEnum("ves.io.schema.app_type.APIEPPIILevel", APIEPPIILevel_name, APIEPPIILevel_value)
	proto.RegisterEnum("ves.io.schema.app_type.APIEPSecurityRisk", APIEPSecurityRisk_name, APIEPSecurityRisk_value)
	proto.RegisterEnum("ves.io.schema.app_type.APIEPCategory", APIEPCategory_name, APIEPCategory_value)
	proto.RegisterType((*Feature)(nil), "ves.io.schema.app_type.Feature")
	proto.RegisterType((*BusinessLogicMarkupSetting)(nil), "ves.io.schema.app_type.BusinessLogicMarkupSetting")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.app_type.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.app_type.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.app_type.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.app_type.GetSpecType")
	proto.RegisterType((*APIEPDynExample)(nil), "ves.io.schema.app_type.APIEPDynExample")
	proto.RegisterType((*APIEPInfo)(nil), "ves.io.schema.app_type.APIEPInfo")
	proto.RegisterType((*PDFSpec)(nil), "ves.io.schema.app_type.PDFSpec")
	proto.RegisterType((*PDFStat)(nil), "ves.io.schema.app_type.PDFStat")
	proto.RegisterType((*APIEPPDFInfo)(nil), "ves.io.schema.app_type.APIEPPDFInfo")
	proto.RegisterType((*OverrideInfo)(nil), "ves.io.schema.app_type.OverrideInfo")
}

func init() {
	proto.RegisterFile("ves.io/schema/app_type/types.proto", fileDescriptor_f883938c2c15f50a)
}

var fileDescriptor_f883938c2c15f50a = []byte{
	// 1860 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x58, 0xcf, 0x6f, 0xdb, 0xc8,
	0x15, 0x16, 0x25, 0xff, 0x90, 0x47, 0x92, 0x4d, 0x8f, 0x37, 0x5e, 0xda, 0xc9, 0x2a, 0x82, 0x36,
	0xbb, 0xab, 0x1a, 0xb6, 0xdc, 0x78, 0x9b, 0x2e, 0xb2, 0x0b, 0xa4, 0xa0, 0x24, 0x5a, 0xe6, 0x5a,
	0x96, 0x58, 0x52, 0x4e, 0xe0, 0xbd, 0x0c, 0x46, 0xd4, 0x48, 0x1a, 0x44, 0x22, 0x59, 0x72, 0xe4,
	0x8d, 0x16, 0x28, 0x50, 0xa0, 0x68, 0xcf, 0x45, 0xaf, 0xfd, 0x07, 0x7a, 0xe9, 0xb5, 0x87, 0xe6,
	0xd0, 0x45, 0x4f, 0x45, 0x4f, 0x3e, 0x14, 0x68, 0x8e, 0x8d, 0x73, 0x69, 0x6f, 0x8b, 0x9e, 0x7a,
	0x2c, 0x38, 0xa4, 0x68, 0xd9, 0x96, 0x1d, 0xe5, 0x54, 0x60, 0x2f, 0x06, 0xf9, 0xbe, 0xf7, 0xbe,
	0x79, 0x3f, 0xbe, 0xe1, 0x8c, 0x05, 0xf2, 0xa7, 0xc4, 0x2b, 0x52, 0x7b, 0xd7, 0x33, 0x7b, 0x64,
	0x80, 0x77, 0xb1, 0xe3, 0x20, 0x36, 0x72, 0xc8, 0xae, 0xff, 0xc7, 0x2b, 0x3a, 0xae, 0xcd, 0x6c,
	0xb8, 0x1e, 0xf8, 0x14, 0x03, 0x9f, 0xe2, 0xd8, 0x67, 0x73, 0xa7, 0x4b, 0x59, 0x6f, 0xd8, 0x2a,
	0x9a, 0xf6, 0x60, 0xb7, 0x6b, 0x77, 0xed, 0x5d, 0xee, 0xde, 0x1a, 0x76, 0xf8, 0x1b, 0x7f, 0xe1,
	0x4f, 0x01, 0xcd, 0xe6, 0xfd, 0xae, 0x6d, 0x77, 0xfb, 0xe4, 0xc2, 0x8b, 0xd1, 0x01, 0xf1, 0x18,
	0x1e, 0x38, 0xa1, 0xc3, 0xdd, 0xcb, 0xb9, 0xd8, 0x0e, 0xa3, 0xb6, 0x15, 0x26, 0xb1, 0xb9, 0x71,
	0x19, 0x9c, 0xc8, 0x6f, 0xf3, 0xde, 0x65, 0xe8, 0x14, 0xf7, 0x69, 0x1b, 0x33, 0x12, 0xa2, 0xb9,
	0x2b, 0x28, 0x25, 0x5f, 0xa3, 0x4b, 0xd4, 0xf9, 0x12, 0x58, 0xdc, 0x27, 0x98, 0x0d, 0x5d, 0x02,
	0x3f, 0x03, 0x73, 0x3e, 0xb3, 0x24, 0xe4, 0x84, 0xc2, 0xf2, 0xde, 0x87, 0xc5, 0xe9, 0x95, 0x17,
	0x43, 0xf7, 0xe6, 0xc8, 0x21, 0x3a, 0x0f, 0xc8, 0xff, 0x41, 0x00, 0x9b, 0xa5, 0xa1, 0x47, 0x2d,
	0xe2, 0x79, 0x35, 0xbb, 0x4b, 0xcd, 0x23, 0xec, 0x3e, 0x1f, 0x3a, 0x06, 0x61, 0x8c, 0x5a, 0x5d,
	0xf8, 0x43, 0xb0, 0xd8, 0xa6, 0x1e, 0x6e, 0xf5, 0x03, 0xea, 0xd4, 0xde, 0x7b, 0x57, 0xa8, 0x95,
	0x81, 0xc3, 0x46, 0x07, 0x31, 0x7d, 0xec, 0x06, 0x8b, 0x60, 0x81, 0x58, 0x3c, 0x20, 0x7e, 0x6b,
	0x40, 0xe8, 0x55, 0xfa, 0x04, 0xdc, 0xed, 0x13, 0xec, 0x5a, 0xa8, 0xe3, 0xda, 0x03, 0xe4, 0x92,
	0x36, 0x75, 0x89, 0xc9, 0x10, 0x73, 0x71, 0xa7, 0x43, 0x4d, 0x98, 0xfc, 0xf6, 0xa5, 0x20, 0x9c,
	0xbd, 0x14, 0x12, 0x5f, 0xce, 0x25, 0x13, 0xe2, 0x5c, 0xfe, 0xbf, 0x02, 0x58, 0xae, 0xf6, 0xed,
	0x16, 0xee, 0x1b, 0x0e, 0x31, 0xfd, 0x42, 0x60, 0x15, 0x24, 0x3b, 0x41, 0x5d, 0x9e, 0x24, 0xe4,
	0x12, 0x85, 0xd4, 0xde, 0xfd, 0xb7, 0xd4, 0x5f, 0x02, 0x7f, 0xfa, 0xf7, 0xb7, 0x89, 0xf9, 0xdf,
	0x0a, 0x71, 0x49, 0xd0, 0xa3, 0x60, 0x38, 0x04, 0x1f, 0xb4, 0xc2, 0x56, 0xa0, 0xbe, 0xdf, 0x0b,
	0x34, 0xe0, 0xcd, 0x40, 0x5e, 0xd0, 0x8d, 0xb0, 0xa2, 0xbd, 0x9b, 0xd8, 0x6f, 0xee, 0xa3, 0xbe,
	0xd9, 0xba, 0x11, 0xfb, 0xfc, 0xe3, 0xbf, 0xbc, 0x14, 0xf2, 0x20, 0x07, 0x36, 0x64, 0xc7, 0xe9,
	0x53, 0x13, 0xfb, 0x23, 0xce, 0xf9, 0x95, 0xe5, 0xf6, 0xc7, 0x99, 0x09, 0x0f, 0x0b, 0x42, 0xfe,
	0x1f, 0x02, 0x58, 0x2e, 0xbb, 0x04, 0x33, 0x12, 0x95, 0xfe, 0xc5, 0x3b, 0x97, 0xfe, 0xff, 0x2f,
	0x77, 0xf5, 0x6f, 0x4f, 0xae, 0x4c, 0x30, 0xff, 0x4a, 0x00, 0x2b, 0x3a, 0x71, 0xfa, 0xd8, 0xfc,
	0xde, 0x95, 0xf6, 0x77, 0x01, 0xa4, 0xaa, 0x84, 0x7d, 0xdf, 0xca, 0xf2, 0xc0, 0x8a, 0xac, 0xa9,
	0x8a, 0x56, 0x19, 0x59, 0xca, 0x0b, 0x3c, 0x70, 0xfa, 0x04, 0x3e, 0x04, 0xef, 0x99, 0xf6, 0xc0,
	0xb1, 0x2d, 0x62, 0x31, 0x44, 0xdb, 0xc4, 0x62, 0xb4, 0x43, 0x89, 0xcb, 0xbf, 0x1b, 0x4b, 0xfa,
	0x5a, 0x84, 0xa9, 0x11, 0x04, 0x77, 0x00, 0xbc, 0x08, 0x21, 0x01, 0x8f, 0x27, 0xc5, 0x73, 0x89,
	0xc2, 0x92, 0xbe, 0x1a, 0x21, 0xe1, 0x02, 0x5e, 0xfe, 0x8f, 0x0b, 0x60, 0x89, 0xaf, 0xaa, 0x5a,
	0x1d, 0x1b, 0x7e, 0x08, 0x32, 0xa6, 0xdd, 0xef, 0x63, 0xc7, 0x23, 0x6d, 0x34, 0x74, 0xfb, 0xbc,
	0xf8, 0x25, 0x3d, 0x1d, 0x19, 0x8f, 0xdd, 0x3e, 0x5c, 0x07, 0x0b, 0x03, 0xc2, 0x7a, 0x76, 0x5b,
	0x4a, 0x70, 0x34, 0x7c, 0x83, 0x5f, 0x82, 0x74, 0x7b, 0x64, 0x5d, 0xac, 0x39, 0xc7, 0x47, 0xf1,
	0xc9, 0x4d, 0x8d, 0xbb, 0x52, 0xab, 0x9e, 0x6a, 0x47, 0xcf, 0x1e, 0xfc, 0x09, 0x48, 0x3a, 0xed,
	0x0e, 0xa2, 0x56, 0xc7, 0x96, 0xe6, 0xf9, 0x00, 0x1e, 0xdc, 0xca, 0xa3, 0x55, 0xf6, 0xfd, 0x02,
	0xf4, 0x45, 0xa7, 0xdd, 0xe1, 0x95, 0xec, 0x00, 0xe8, 0x92, 0x9f, 0x0d, 0x89, 0xc7, 0x90, 0x43,
	0x5c, 0x93, 0x58, 0x0c, 0x77, 0x89, 0xb4, 0x90, 0x13, 0x0a, 0x71, 0x7d, 0x35, 0x44, 0xb4, 0x08,
	0x80, 0x5b, 0x60, 0xb5, 0x87, 0x3d, 0xc4, 0xbf, 0x9a, 0x0c, 0x05, 0x4b, 0x48, 0x8b, 0x39, 0xa1,
	0x90, 0xd4, 0x57, 0x7a, 0xd8, 0xab, 0x71, 0xbb, 0xc1, 0xcd, 0x50, 0x06, 0x49, 0x13, 0x33, 0xd2,
	0xb5, 0xdd, 0x91, 0x94, 0xcc, 0x25, 0x0a, 0xcb, 0x7b, 0x1f, 0xdd, 0x9a, 0x5b, 0x39, 0x74, 0xd6,
	0xa3, 0x30, 0x78, 0x17, 0x2c, 0xb5, 0xb0, 0x47, 0x90, 0x83, 0x59, 0x4f, 0x5a, 0xe2, 0x5d, 0x4c,
	0xfa, 0x06, 0x0d, 0xb3, 0x1e, 0x2c, 0x81, 0x25, 0x87, 0x52, 0xd4, 0x27, 0xa7, 0xa4, 0x2f, 0x01,
	0x7e, 0xf8, 0xdc, 0xbe, 0x80, 0xa6, 0xaa, 0x35, 0xdf, 0x59, 0x4f, 0x3a, 0x94, 0xf2, 0x27, 0x58,
	0x07, 0x19, 0x8f, 0x98, 0x43, 0x97, 0xb2, 0x11, 0x72, 0xa9, 0xf7, 0x5c, 0x4a, 0x71, 0x9e, 0x1f,
	0xdc, 0xca, 0x63, 0x84, 0x11, 0x3a, 0xf5, 0x9e, 0xeb, 0x69, 0x6f, 0xe2, 0x0d, 0x1a, 0xe0, 0x0e,
	0x36, 0x4d, 0x7f, 0x8f, 0xb4, 0xa9, 0x67, 0xda, 0xa7, 0xc4, 0x1d, 0x21, 0xff, 0xc8, 0x96, 0xd2,
	0x7c, 0x38, 0x9b, 0xc5, 0xe0, 0x3c, 0x2f, 0x8e, 0xcf, 0xf3, 0x62, 0x73, 0x7c, 0x9e, 0x97, 0x12,
	0x67, 0x3f, 0x17, 0xf4, 0xb5, 0x20, 0xba, 0x32, 0x0e, 0xf6, 0x61, 0x28, 0x81, 0xc5, 0xb6, 0x3d,
	0xc0, 0xd4, 0xf2, 0xa4, 0x0c, 0xd7, 0xe7, 0xf8, 0x15, 0x6a, 0x60, 0xd9, 0x23, 0x96, 0x47, 0x19,
	0x3d, 0x25, 0xa8, 0x8d, 0x19, 0x96, 0x96, 0x79, 0xa3, 0x6f, 0xcc, 0xdf, 0x18, 0x7b, 0x57, 0x30,
	0xc3, 0xfc, 0x28, 0xce, 0x78, 0x93, 0x26, 0x58, 0x00, 0xa2, 0x47, 0x4c, 0x44, 0x4e, 0x89, 0xc5,
	0x3c, 0x64, 0xda, 0x43, 0x8b, 0x49, 0x2b, 0x39, 0xa1, 0x30, 0xaf, 0x2f, 0x7b, 0xc4, 0x54, 0xb8,
	0xb9, 0xec, 0x5b, 0xe1, 0x47, 0x60, 0x39, 0xd4, 0xc7, 0xd8, 0x4f, 0xe4, 0x7e, 0x99, 0xb1, 0x95,
	0xbb, 0xe5, 0x1f, 0x83, 0x45, 0xad, 0xb2, 0xef, 0x6f, 0x5e, 0x98, 0x06, 0xc2, 0x0b, 0xbe, 0x25,
	0xe3, 0xba, 0xf0, 0x02, 0xe6, 0x40, 0xca, 0x71, 0xed, 0x16, 0x6e, 0xd1, 0x3e, 0x65, 0x23, 0xbe,
	0x83, 0xe2, 0xfa, 0xa4, 0x29, 0xff, 0x45, 0x10, 0xca, 0x30, 0x83, 0x1b, 0x81, 0xce, 0x07, 0x04,
	0x5b, 0x21, 0x83, 0xaf, 0xe0, 0x23, 0x82, 0x2d, 0x78, 0x07, 0x2c, 0xf8, 0xd0, 0xe3, 0x47, 0x21,
	0xc5, 0xbc, 0xd3, 0xee, 0x3c, 0x7e, 0x94, 0xff, 0xdd, 0x12, 0x48, 0x4f, 0x4a, 0x1e, 0x96, 0x40,
	0x7a, 0xac, 0x74, 0x8f, 0x7e, 0x43, 0xde, 0xf6, 0x05, 0x0c, 0x93, 0xd6, 0x53, 0x61, 0x90, 0x41,
	0xbf, 0x21, 0xb0, 0x02, 0x32, 0x2e, 0xf1, 0x1c, 0xdb, 0xf2, 0x48, 0x40, 0x12, 0x9f, 0x8d, 0x24,
	0x3d, 0x8e, 0xe2, 0x2c, 0x87, 0x60, 0xb5, 0x8f, 0x19, 0xb1, 0xcc, 0x11, 0xfa, 0x9a, 0xb2, 0x5e,
	0x30, 0xb8, 0xc4, 0x6c, 0x4c, 0x2b, 0x61, 0xe4, 0x33, 0xca, 0x7a, 0x7c, 0x60, 0x55, 0x30, 0x36,
	0x21, 0xcb, 0x0e, 0xa8, 0xe6, 0x66, 0xa3, 0xca, 0x84, 0x71, 0x75, 0x9b, 0x13, 0x4d, 0xf4, 0xc7,
	0xc5, 0x8c, 0x48, 0xf3, 0xef, 0xd6, 0x1f, 0x1d, 0x33, 0x02, 0x9f, 0x00, 0x40, 0x5c, 0xd7, 0x76,
	0x03, 0x86, 0x85, 0xd9, 0x18, 0x96, 0x78, 0x08, 0x8f, 0xd7, 0xc0, 0x5a, 0xd4, 0x5f, 0xd6, 0x73,
	0xed, 0x61, 0xb7, 0xe7, 0x0c, 0x99, 0xb4, 0x38, 0x1b, 0x11, 0x1c, 0xc7, 0x36, 0xa3, 0x50, 0x58,
	0x07, 0xd0, 0xf4, 0xef, 0x2d, 0xd4, 0xb6, 0x50, 0x74, 0x77, 0x96, 0x92, 0xb3, 0xed, 0xc6, 0xd5,
	0x71, 0x68, 0x64, 0xf7, 0x67, 0x37, 0xa9, 0x22, 0xe4, 0x31, 0xcc, 0xf8, 0x97, 0xe9, 0x2d, 0xf9,
	0x31, 0xcc, 0xf4, 0x95, 0x09, 0x29, 0x71, 0x55, 0x1f, 0x01, 0x78, 0x49, 0x4e, 0x01, 0x1b, 0x98,
	0x8d, 0x4d, 0x9c, 0xd4, 0x14, 0xa7, 0x6b, 0x82, 0xf5, 0x6b, 0xba, 0x0a, 0x28, 0x53, 0xb3, 0x51,
	0xae, 0x5d, 0x11, 0x17, 0x67, 0xd5, 0xc0, 0x7b, 0x57, 0x04, 0x16, 0x70, 0xa6, 0x67, 0xe3, 0x5c,
	0xbd, 0xa4, 0x32, 0xce, 0x38, 0xd1, 0x43, 0x5f, 0x27, 0x01, 0x5d, 0xe6, 0xdd, 0x7a, 0xe8, 0xcb,
	0x85, 0x93, 0x55, 0xc1, 0xca, 0x85, 0xe4, 0x02, 0xaa, 0xe5, 0xd9, 0xa8, 0x32, 0x91, 0xee, 0x38,
	0xd1, 0x09, 0x90, 0xa6, 0x68, 0x2f, 0x60, 0x5c, 0x99, 0x8d, 0x71, 0xfd, 0xba, 0x00, 0x7d, 0xfb,
	0xe7, 0xe2, 0x7f, 0x9e, 0x64, 0x1e, 0x6e, 0xef, 0x6d, 0xff, 0x68, 0xfb, 0xd3, 0xed, 0x47, 0xdb,
	0x3f, 0xde, 0xfe, 0x2c, 0xdf, 0x02, 0xe9, 0xc6, 0x29, 0x71, 0x5d, 0xda, 0x26, 0xfc, 0xe3, 0x74,
	0xd3, 0x05, 0x26, 0x7e, 0xf3, 0x05, 0xe6, 0x3e, 0x48, 0x79, 0x84, 0xa1, 0xf6, 0xc8, 0xc2, 0x03,
	0x6a, 0xf2, 0x3b, 0x46, 0x52, 0x07, 0x1e, 0x61, 0x95, 0xc0, 0xb2, 0xf5, 0x2b, 0x01, 0xa4, 0x26,
	0xfe, 0xe9, 0x82, 0x1b, 0xe0, 0x4e, 0xe9, 0xd8, 0x50, 0xeb, 0x8a, 0x61, 0xa0, 0x5a, 0xa3, 0xaa,
	0x96, 0xd1, 0x91, 0xac, 0x1f, 0x1e, 0x6b, 0x62, 0x0c, 0xe6, 0xc0, 0xbd, 0xa6, 0x7a, 0xa4, 0x18,
	0x8a, 0xae, 0x2a, 0x06, 0x92, 0xeb, 0x8d, 0x23, 0xb9, 0x76, 0x82, 0x2a, 0x4a, 0x53, 0x29, 0x37,
	0xd5, 0x46, 0x5d, 0x14, 0xe0, 0x07, 0x60, 0x43, 0x53, 0x74, 0xa4, 0x2b, 0x3f, 0x9d, 0x02, 0xc7,
	0xe1, 0x26, 0x58, 0x3f, 0x36, 0x14, 0x1d, 0x95, 0x94, 0x03, 0xf9, 0xa9, 0xda, 0xd0, 0x91, 0x5c,
	0x97, 0x6b, 0x27, 0x86, 0x6a, 0x88, 0x89, 0xad, 0xaf, 0xc0, 0xba, 0xec, 0x50, 0xc5, 0x6a, 0x3b,
	0x36, 0xb5, 0x18, 0xbf, 0x7e, 0x04, 0x33, 0xf4, 0xa3, 0x64, 0x4d, 0x45, 0x4a, 0xbd, 0xa2, 0x35,
	0xd4, 0x7a, 0x13, 0xa9, 0xf5, 0xfd, 0x06, 0xaa, 0x37, 0xea, 0x8a, 0x18, 0x83, 0x0f, 0x40, 0xee,
	0x3a, 0xa6, 0x55, 0xf6, 0x91, 0xa1, 0xc9, 0xfa, 0x61, 0xcd, 0x2f, 0x43, 0x14, 0xb6, 0xfe, 0x1c,
	0x07, 0xab, 0xd7, 0xce, 0x34, 0x78, 0x17, 0xbc, 0x6f, 0x28, 0x75, 0x43, 0x6d, 0xaa, 0x4f, 0x15,
	0x54, 0x91, 0x9b, 0x32, 0x6a, 0x9e, 0x68, 0x0a, 0x2a, 0x97, 0xeb, 0x62, 0xec, 0x26, 0xd0, 0x30,
	0xfc, 0x32, 0x37, 0xc1, 0xfa, 0x34, 0x50, 0xd5, 0xc4, 0xb8, 0xdf, 0x82, 0x69, 0x98, 0x72, 0x24,
	0xab, 0x35, 0x31, 0x71, 0x13, 0xac, 0x1d, 0xf8, 0xf5, 0xcc, 0xc1, 0x8f, 0x41, 0x7e, 0x1a, 0x2c,
	0x1f, 0x37, 0x0f, 0x94, 0x7a, 0x53, 0x2d, 0xcb, 0xbc, 0x93, 0xf3, 0xb0, 0x00, 0x1e, 0x4c, 0xf5,
	0xd3, 0xb4, 0xa0, 0x05, 0x35, 0x45, 0x3e, 0x94, 0xab, 0x8a, 0xb8, 0x00, 0xf3, 0x20, 0x3b, 0xcd,
	0xf3, 0x48, 0x36, 0x0e, 0x95, 0x0a, 0xd2, 0x54, 0x55, 0x5c, 0xf4, 0x07, 0x3b, 0xcd, 0xa7, 0xd6,
	0x08, 0xd7, 0x4b, 0x6e, 0x95, 0x41, 0xe6, 0xd2, 0xe5, 0x28, 0x1c, 0x8a, 0xa2, 0xf9, 0x0c, 0xa8,
	0xde, 0x68, 0x86, 0x73, 0x56, 0x2a, 0x62, 0x0c, 0xae, 0x03, 0x78, 0x81, 0x45, 0x76, 0x61, 0x6b,
	0x08, 0x56, 0xaf, 0xdd, 0x8c, 0xe0, 0xfb, 0x60, 0x2d, 0x70, 0x36, 0x94, 0x32, 0xd2, 0x55, 0xe3,
	0x70, 0x3c, 0xda, 0x88, 0x25, 0x02, 0x6a, 0x8d, 0x67, 0xa2, 0x30, 0xc5, 0x7e, 0xa4, 0x54, 0xc4,
	0xf8, 0x14, 0xa2, 0x03, 0xb5, 0x7a, 0x20, 0x26, 0xb6, 0x7e, 0x29, 0x84, 0xc9, 0x8f, 0xaf, 0x8e,
	0xfe, 0x10, 0x02, 0xd7, 0xb2, 0xdc, 0x54, 0xaa, 0x0d, 0xfd, 0x04, 0x55, 0x54, 0xa3, 0xdc, 0x78,
	0xaa, 0xe8, 0x3c, 0xff, 0xa8, 0xb6, 0x08, 0x36, 0x9e, 0xc9, 0xd5, 0xaa, 0xa2, 0x8b, 0x02, 0xbc,
	0x07, 0xa4, 0x2b, 0x98, 0x5a, 0x7f, 0xaa, 0xd4, 0x9b, 0x0d, 0xfd, 0x44, 0x8c, 0xfb, 0x9b, 0xe7,
	0x6a, 0xe4, 0x81, 0x5c, 0x69, 0x3c, 0x13, 0x13, 0xa5, 0x5f, 0x0b, 0x67, 0xaf, 0xb3, 0xb1, 0x57,
	0xaf, 0xb3, 0xb1, 0xef, 0x5e, 0x67, 0x85, 0x5f, 0x9c, 0x67, 0x85, 0xdf, 0x9f, 0x67, 0x85, 0xbf,
	0x9e, 0x67, 0x85, 0xb3, 0xf3, 0xac, 0xf0, 0xea, 0x3c, 0x2b, 0xfc, 0xf3, 0x3c, 0x2b, 0xfc, 0xeb,
	0x3c, 0x1b, 0xfb, 0xee, 0x3c, 0x2b, 0xfc, 0xe6, 0x4d, 0x36, 0x76, 0xf6, 0x26, 0x1b, 0x7b, 0xf5,
	0x26, 0x1b, 0xfb, 0xaa, 0xd6, 0xb5, 0x9d, 0xe7, 0xdd, 0xe2, 0xa9, 0xdd, 0x67, 0xc4, 0x75, 0x71,
	0x71, 0xe8, 0xed, 0xf2, 0x87, 0x8e, 0xed, 0x0e, 0x76, 0x1c, 0xd7, 0x3e, 0xa5, 0x6d, 0xe2, 0xee,
	0x8c, 0xe1, 0x5d, 0xa7, 0xd5, 0xb5, 0x77, 0xc9, 0x0b, 0x16, 0xfe, 0x2c, 0x73, 0xe5, 0xf7, 0xa7,
	0xd6, 0x02, 0x3f, 0xc7, 0x3e, 0xfd, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfb, 0xd3, 0xc0, 0x39,
	0xa0, 0x12, 0x00, 0x00,
}

func (x FeatureType) String() string {
	s, ok := FeatureType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ApiEndpointInfoRequest) String() string {
	s, ok := ApiEndpointInfoRequest_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SensitiveDataType) String() string {
	s, ok := SensitiveDataType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x APIEPPIILevel) String() string {
	s, ok := APIEPPIILevel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x APIEPSecurityRisk) String() string {
	s, ok := APIEPSecurityRisk_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x APIEPCategory) String() string {
	s, ok := APIEPCategory_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Feature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature)
	if !ok {
		that2, ok := that.(Feature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *BusinessLogicMarkupSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BusinessLogicMarkupSetting)
	if !ok {
		that2, ok := that.(BusinessLogicMarkupSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.LearnFromRedirectTraffic == nil {
		if this.LearnFromRedirectTraffic != nil {
			return false
		}
	} else if this.LearnFromRedirectTraffic == nil {
		return false
	} else if !this.LearnFromRedirectTraffic.Equal(that1.LearnFromRedirectTraffic) {
		return false
	}
	return true
}
func (this *BusinessLogicMarkupSetting_Disable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BusinessLogicMarkupSetting_Disable)
	if !ok {
		that2, ok := that.(BusinessLogicMarkupSetting_Disable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disable.Equal(that1.Disable) {
		return false
	}
	return true
}
func (this *BusinessLogicMarkupSetting_Enable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BusinessLogicMarkupSetting_Enable)
	if !ok {
		that2, ok := that.(BusinessLogicMarkupSetting_Enable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enable.Equal(that1.Enable) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Features) != len(that1.Features) {
		return false
	}
	for i := range this.Features {
		if !this.Features[i].Equal(that1.Features[i]) {
			return false
		}
	}
	if !this.BusinessLogicMarkupSetting.Equal(that1.BusinessLogicMarkupSetting) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Features) != len(that1.Features) {
		return false
	}
	for i := range this.Features {
		if !this.Features[i].Equal(that1.Features[i]) {
			return false
		}
	}
	if !this.BusinessLogicMarkupSetting.Equal(that1.BusinessLogicMarkupSetting) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Features) != len(that1.Features) {
		return false
	}
	for i := range this.Features {
		if !this.Features[i].Equal(that1.Features[i]) {
			return false
		}
	}
	if !this.BusinessLogicMarkupSetting.Equal(that1.BusinessLogicMarkupSetting) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Features) != len(that1.Features) {
		return false
	}
	for i := range this.Features {
		if !this.Features[i].Equal(that1.Features[i]) {
			return false
		}
	}
	if !this.BusinessLogicMarkupSetting.Equal(that1.BusinessLogicMarkupSetting) {
		return false
	}
	return true
}
func (this *APIEPDynExample) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEPDynExample)
	if !ok {
		that2, ok := that.(APIEPDynExample)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ComponentIdentifier != that1.ComponentIdentifier {
		return false
	}
	if len(this.ComponentExamples) != len(that1.ComponentExamples) {
		return false
	}
	for i := range this.ComponentExamples {
		if this.ComponentExamples[i] != that1.ComponentExamples[i] {
			return false
		}
	}
	return true
}
func (this *APIEPInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEPInfo)
	if !ok {
		that2, ok := that.(APIEPInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CollapsedUrl != that1.CollapsedUrl {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if len(this.DynExamples) != len(that1.DynExamples) {
		return false
	}
	for i := range this.DynExamples {
		if !this.DynExamples[i].Equal(that1.DynExamples[i]) {
			return false
		}
	}
	if !this.PdfInfo.Equal(that1.PdfInfo) {
		return false
	}
	if this.RequestPercentage != that1.RequestPercentage {
		return false
	}
	if this.HasLearntSchema != that1.HasLearntSchema {
		return false
	}
	if len(this.Category) != len(that1.Category) {
		return false
	}
	for i := range this.Category {
		if this.Category[i] != that1.Category[i] {
			return false
		}
	}
	if this.BasePath != that1.BasePath {
		return false
	}
	if this.PiiLevel != that1.PiiLevel {
		return false
	}
	if this.SecurityRisk != that1.SecurityRisk {
		return false
	}
	if !this.AccessDiscoveryTime.Equal(that1.AccessDiscoveryTime) {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if len(this.SensitiveData) != len(that1.SensitiveData) {
		return false
	}
	for i := range this.SensitiveData {
		if this.SensitiveData[i] != that1.SensitiveData[i] {
			return false
		}
	}
	if this.SecEventsCount != that1.SecEventsCount {
		return false
	}
	if this.RequestsCount != that1.RequestsCount {
		return false
	}
	return true
}
func (this *PDFSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PDFSpec)
	if !ok {
		that2, ok := that.(PDFSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Probability != that1.Probability {
		return false
	}
	return true
}
func (this *PDFStat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PDFStat)
	if !ok {
		that2, ok := that.(PDFStat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PdfMean != that1.PdfMean {
		return false
	}
	if this.Pdf_95 != that1.Pdf_95 {
		return false
	}
	return true
}
func (this *APIEPPDFInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEPPDFInfo)
	if !ok {
		that2, ok := that.(APIEPPDFInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RequestSize) != len(that1.RequestSize) {
		return false
	}
	for i := range this.RequestSize {
		if !this.RequestSize[i].Equal(that1.RequestSize[i]) {
			return false
		}
	}
	if len(this.ResponseSize) != len(that1.ResponseSize) {
		return false
	}
	for i := range this.ResponseSize {
		if !this.ResponseSize[i].Equal(that1.ResponseSize[i]) {
			return false
		}
	}
	if len(this.LatencyWithData) != len(that1.LatencyWithData) {
		return false
	}
	for i := range this.LatencyWithData {
		if !this.LatencyWithData[i].Equal(that1.LatencyWithData[i]) {
			return false
		}
	}
	if len(this.LatencyNoData) != len(that1.LatencyNoData) {
		return false
	}
	for i := range this.LatencyNoData {
		if !this.LatencyNoData[i].Equal(that1.LatencyNoData[i]) {
			return false
		}
	}
	if len(this.RequestRate) != len(that1.RequestRate) {
		return false
	}
	for i := range this.RequestRate {
		if !this.RequestRate[i].Equal(that1.RequestRate[i]) {
			return false
		}
	}
	if len(this.ErrorRate) != len(that1.ErrorRate) {
		return false
	}
	for i := range this.ErrorRate {
		if !this.ErrorRate[i].Equal(that1.ErrorRate[i]) {
			return false
		}
	}
	if len(this.ResponseThroughput) != len(that1.ResponseThroughput) {
		return false
	}
	for i := range this.ResponseThroughput {
		if !this.ResponseThroughput[i].Equal(that1.ResponseThroughput[i]) {
			return false
		}
	}
	if !this.CreationTimestamp.Equal(that1.CreationTimestamp) {
		return false
	}
	if !this.RequestSizeStat.Equal(that1.RequestSizeStat) {
		return false
	}
	if !this.ResponseSizeStat.Equal(that1.ResponseSizeStat) {
		return false
	}
	if !this.LatencyWithDataStat.Equal(that1.LatencyWithDataStat) {
		return false
	}
	if !this.LatencyNoDataStat.Equal(that1.LatencyNoDataStat) {
		return false
	}
	if !this.RequestRateStat.Equal(that1.RequestRateStat) {
		return false
	}
	if !this.ErrorRateStat.Equal(that1.ErrorRateStat) {
		return false
	}
	if !this.ResponseThroughputStat.Equal(that1.ResponseThroughputStat) {
		return false
	}
	return true
}
func (this *OverrideInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OverrideInfo)
	if !ok {
		that2, ok := that.(OverrideInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ComponentIdentifier != that1.ComponentIdentifier {
		return false
	}
	if this.SetDynamic != that1.SetDynamic {
		return false
	}
	return true
}
func (this *Feature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_type.Feature{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BusinessLogicMarkupSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.BusinessLogicMarkupSetting{")
	if this.LearnFromRedirectTraffic != nil {
		s = append(s, "LearnFromRedirectTraffic: "+fmt.Sprintf("%#v", this.LearnFromRedirectTraffic)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BusinessLogicMarkupSetting_Disable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_type.BusinessLogicMarkupSetting_Disable{` +
		`Disable:` + fmt.Sprintf("%#v", this.Disable) + `}`}, ", ")
	return s
}
func (this *BusinessLogicMarkupSetting_Enable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_type.BusinessLogicMarkupSetting_Enable{` +
		`Enable:` + fmt.Sprintf("%#v", this.Enable) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.GlobalSpecType{")
	if this.Features != nil {
		s = append(s, "Features: "+fmt.Sprintf("%#v", this.Features)+",\n")
	}
	if this.BusinessLogicMarkupSetting != nil {
		s = append(s, "BusinessLogicMarkupSetting: "+fmt.Sprintf("%#v", this.BusinessLogicMarkupSetting)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.CreateSpecType{")
	if this.Features != nil {
		s = append(s, "Features: "+fmt.Sprintf("%#v", this.Features)+",\n")
	}
	if this.BusinessLogicMarkupSetting != nil {
		s = append(s, "BusinessLogicMarkupSetting: "+fmt.Sprintf("%#v", this.BusinessLogicMarkupSetting)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.ReplaceSpecType{")
	if this.Features != nil {
		s = append(s, "Features: "+fmt.Sprintf("%#v", this.Features)+",\n")
	}
	if this.BusinessLogicMarkupSetting != nil {
		s = append(s, "BusinessLogicMarkupSetting: "+fmt.Sprintf("%#v", this.BusinessLogicMarkupSetting)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.GetSpecType{")
	if this.Features != nil {
		s = append(s, "Features: "+fmt.Sprintf("%#v", this.Features)+",\n")
	}
	if this.BusinessLogicMarkupSetting != nil {
		s = append(s, "BusinessLogicMarkupSetting: "+fmt.Sprintf("%#v", this.BusinessLogicMarkupSetting)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEPDynExample) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.APIEPDynExample{")
	s = append(s, "ComponentIdentifier: "+fmt.Sprintf("%#v", this.ComponentIdentifier)+",\n")
	s = append(s, "ComponentExamples: "+fmt.Sprintf("%#v", this.ComponentExamples)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEPInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&app_type.APIEPInfo{")
	s = append(s, "CollapsedUrl: "+fmt.Sprintf("%#v", this.CollapsedUrl)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	if this.DynExamples != nil {
		s = append(s, "DynExamples: "+fmt.Sprintf("%#v", this.DynExamples)+",\n")
	}
	if this.PdfInfo != nil {
		s = append(s, "PdfInfo: "+fmt.Sprintf("%#v", this.PdfInfo)+",\n")
	}
	s = append(s, "RequestPercentage: "+fmt.Sprintf("%#v", this.RequestPercentage)+",\n")
	s = append(s, "HasLearntSchema: "+fmt.Sprintf("%#v", this.HasLearntSchema)+",\n")
	s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	s = append(s, "BasePath: "+fmt.Sprintf("%#v", this.BasePath)+",\n")
	s = append(s, "PiiLevel: "+fmt.Sprintf("%#v", this.PiiLevel)+",\n")
	s = append(s, "SecurityRisk: "+fmt.Sprintf("%#v", this.SecurityRisk)+",\n")
	if this.AccessDiscoveryTime != nil {
		s = append(s, "AccessDiscoveryTime: "+fmt.Sprintf("%#v", this.AccessDiscoveryTime)+",\n")
	}
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	s = append(s, "SensitiveData: "+fmt.Sprintf("%#v", this.SensitiveData)+",\n")
	s = append(s, "SecEventsCount: "+fmt.Sprintf("%#v", this.SecEventsCount)+",\n")
	s = append(s, "RequestsCount: "+fmt.Sprintf("%#v", this.RequestsCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PDFSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.PDFSpec{")
	s = append(s, "X: "+fmt.Sprintf("%#v", this.X)+",\n")
	s = append(s, "Probability: "+fmt.Sprintf("%#v", this.Probability)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PDFStat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.PDFStat{")
	s = append(s, "PdfMean: "+fmt.Sprintf("%#v", this.PdfMean)+",\n")
	s = append(s, "Pdf_95: "+fmt.Sprintf("%#v", this.Pdf_95)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEPPDFInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&app_type.APIEPPDFInfo{")
	if this.RequestSize != nil {
		s = append(s, "RequestSize: "+fmt.Sprintf("%#v", this.RequestSize)+",\n")
	}
	if this.ResponseSize != nil {
		s = append(s, "ResponseSize: "+fmt.Sprintf("%#v", this.ResponseSize)+",\n")
	}
	if this.LatencyWithData != nil {
		s = append(s, "LatencyWithData: "+fmt.Sprintf("%#v", this.LatencyWithData)+",\n")
	}
	if this.LatencyNoData != nil {
		s = append(s, "LatencyNoData: "+fmt.Sprintf("%#v", this.LatencyNoData)+",\n")
	}
	if this.RequestRate != nil {
		s = append(s, "RequestRate: "+fmt.Sprintf("%#v", this.RequestRate)+",\n")
	}
	if this.ErrorRate != nil {
		s = append(s, "ErrorRate: "+fmt.Sprintf("%#v", this.ErrorRate)+",\n")
	}
	if this.ResponseThroughput != nil {
		s = append(s, "ResponseThroughput: "+fmt.Sprintf("%#v", this.ResponseThroughput)+",\n")
	}
	if this.CreationTimestamp != nil {
		s = append(s, "CreationTimestamp: "+fmt.Sprintf("%#v", this.CreationTimestamp)+",\n")
	}
	if this.RequestSizeStat != nil {
		s = append(s, "RequestSizeStat: "+fmt.Sprintf("%#v", this.RequestSizeStat)+",\n")
	}
	if this.ResponseSizeStat != nil {
		s = append(s, "ResponseSizeStat: "+fmt.Sprintf("%#v", this.ResponseSizeStat)+",\n")
	}
	if this.LatencyWithDataStat != nil {
		s = append(s, "LatencyWithDataStat: "+fmt.Sprintf("%#v", this.LatencyWithDataStat)+",\n")
	}
	if this.LatencyNoDataStat != nil {
		s = append(s, "LatencyNoDataStat: "+fmt.Sprintf("%#v", this.LatencyNoDataStat)+",\n")
	}
	if this.RequestRateStat != nil {
		s = append(s, "RequestRateStat: "+fmt.Sprintf("%#v", this.RequestRateStat)+",\n")
	}
	if this.ErrorRateStat != nil {
		s = append(s, "ErrorRateStat: "+fmt.Sprintf("%#v", this.ErrorRateStat)+",\n")
	}
	if this.ResponseThroughputStat != nil {
		s = append(s, "ResponseThroughputStat: "+fmt.Sprintf("%#v", this.ResponseThroughputStat)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OverrideInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_type.OverrideInfo{")
	s = append(s, "ComponentIdentifier: "+fmt.Sprintf("%#v", this.ComponentIdentifier)+",\n")
	s = append(s, "SetDynamic: "+fmt.Sprintf("%#v", this.SetDynamic)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Feature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Feature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Feature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BusinessLogicMarkupSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BusinessLogicMarkupSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusinessLogicMarkupSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LearnFromRedirectTraffic != nil {
		{
			size := m.LearnFromRedirectTraffic.Size()
			i -= size
			if _, err := m.LearnFromRedirectTraffic.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *BusinessLogicMarkupSetting_Disable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusinessLogicMarkupSetting_Disable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disable != nil {
		{
			size, err := m.Disable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *BusinessLogicMarkupSetting_Enable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusinessLogicMarkupSetting_Enable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enable != nil {
		{
			size, err := m.Enable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BusinessLogicMarkupSetting != nil {
		{
			size, err := m.BusinessLogicMarkupSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Features) > 0 {
		for iNdEx := len(m.Features) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Features[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BusinessLogicMarkupSetting != nil {
		{
			size, err := m.BusinessLogicMarkupSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Features) > 0 {
		for iNdEx := len(m.Features) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Features[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BusinessLogicMarkupSetting != nil {
		{
			size, err := m.BusinessLogicMarkupSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Features) > 0 {
		for iNdEx := len(m.Features) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Features[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BusinessLogicMarkupSetting != nil {
		{
			size, err := m.BusinessLogicMarkupSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Features) > 0 {
		for iNdEx := len(m.Features) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Features[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *APIEPDynExample) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEPDynExample) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIEPDynExample) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ComponentExamples) > 0 {
		for iNdEx := len(m.ComponentExamples) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ComponentExamples[iNdEx])
			copy(dAtA[i:], m.ComponentExamples[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ComponentExamples[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ComponentIdentifier) > 0 {
		i -= len(m.ComponentIdentifier)
		copy(dAtA[i:], m.ComponentIdentifier)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ComponentIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *APIEPInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEPInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIEPInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestsCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RequestsCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.SecEventsCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SecEventsCount))
		i--
		dAtA[i] = 0x78
	}
	if len(m.SensitiveData) > 0 {
		dAtA8 := make([]byte, len(m.SensitiveData)*10)
		var j7 int
		for _, num := range m.SensitiveData {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintTypes(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.AccessDiscoveryTime != nil {
		{
			size, err := m.AccessDiscoveryTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.SecurityRisk != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SecurityRisk))
		i--
		dAtA[i] = 0x58
	}
	if m.PiiLevel != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PiiLevel))
		i--
		dAtA[i] = 0x50
	}
	if len(m.BasePath) > 0 {
		i -= len(m.BasePath)
		copy(dAtA[i:], m.BasePath)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BasePath)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Category) > 0 {
		dAtA11 := make([]byte, len(m.Category)*10)
		var j10 int
		for _, num := range m.Category {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintTypes(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x42
	}
	if m.HasLearntSchema {
		i--
		if m.HasLearntSchema {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.RequestPercentage != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RequestPercentage))))
		i--
		dAtA[i] = 0x35
	}
	if m.PdfInfo != nil {
		{
			size, err := m.PdfInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DynExamples) > 0 {
		for iNdEx := len(m.DynExamples) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DynExamples[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CollapsedUrl) > 0 {
		i -= len(m.CollapsedUrl)
		copy(dAtA[i:], m.CollapsedUrl)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CollapsedUrl)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *PDFSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PDFSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PDFSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Probability != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Probability))))
		i--
		dAtA[i] = 0x15
	}
	if m.X != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.X))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *PDFStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PDFStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PDFStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pdf_95 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Pdf_95))))
		i--
		dAtA[i] = 0x15
	}
	if m.PdfMean != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PdfMean))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *APIEPPDFInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEPPDFInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIEPPDFInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResponseThroughputStat != nil {
		{
			size, err := m.ResponseThroughputStat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.ErrorRateStat != nil {
		{
			size, err := m.ErrorRateStat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.RequestRateStat != nil {
		{
			size, err := m.RequestRateStat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.LatencyNoDataStat != nil {
		{
			size, err := m.LatencyNoDataStat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.LatencyWithDataStat != nil {
		{
			size, err := m.LatencyWithDataStat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.ResponseSizeStat != nil {
		{
			size, err := m.ResponseSizeStat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.RequestSizeStat != nil {
		{
			size, err := m.RequestSizeStat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.CreationTimestamp != nil {
		{
			size, err := m.CreationTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.ResponseThroughput) > 0 {
		for iNdEx := len(m.ResponseThroughput) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResponseThroughput[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ErrorRate) > 0 {
		for iNdEx := len(m.ErrorRate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ErrorRate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.RequestRate) > 0 {
		for iNdEx := len(m.RequestRate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestRate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.LatencyNoData) > 0 {
		for iNdEx := len(m.LatencyNoData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LatencyNoData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.LatencyWithData) > 0 {
		for iNdEx := len(m.LatencyWithData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LatencyWithData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ResponseSize) > 0 {
		for iNdEx := len(m.ResponseSize) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResponseSize[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RequestSize) > 0 {
		for iNdEx := len(m.RequestSize) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestSize[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OverrideInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OverrideInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OverrideInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SetDynamic {
		i--
		if m.SetDynamic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ComponentIdentifier) > 0 {
		i -= len(m.ComponentIdentifier)
		copy(dAtA[i:], m.ComponentIdentifier)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ComponentIdentifier)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Feature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	return n
}

func (m *BusinessLogicMarkupSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LearnFromRedirectTraffic != nil {
		n += m.LearnFromRedirectTraffic.Size()
	}
	return n
}

func (m *BusinessLogicMarkupSetting_Disable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disable != nil {
		l = m.Disable.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *BusinessLogicMarkupSetting_Enable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enable != nil {
		l = m.Enable.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Features) > 0 {
		for _, e := range m.Features {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.BusinessLogicMarkupSetting != nil {
		l = m.BusinessLogicMarkupSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Features) > 0 {
		for _, e := range m.Features {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.BusinessLogicMarkupSetting != nil {
		l = m.BusinessLogicMarkupSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Features) > 0 {
		for _, e := range m.Features {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.BusinessLogicMarkupSetting != nil {
		l = m.BusinessLogicMarkupSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Features) > 0 {
		for _, e := range m.Features {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.BusinessLogicMarkupSetting != nil {
		l = m.BusinessLogicMarkupSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *APIEPDynExample) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ComponentIdentifier)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.ComponentExamples) > 0 {
		for _, s := range m.ComponentExamples {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *APIEPInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollapsedUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.DynExamples) > 0 {
		for _, e := range m.DynExamples {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.PdfInfo != nil {
		l = m.PdfInfo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RequestPercentage != 0 {
		n += 5
	}
	if m.HasLearntSchema {
		n += 2
	}
	if len(m.Category) > 0 {
		l = 0
		for _, e := range m.Category {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	l = len(m.BasePath)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PiiLevel != 0 {
		n += 1 + sovTypes(uint64(m.PiiLevel))
	}
	if m.SecurityRisk != 0 {
		n += 1 + sovTypes(uint64(m.SecurityRisk))
	}
	if m.AccessDiscoveryTime != nil {
		l = m.AccessDiscoveryTime.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.SensitiveData) > 0 {
		l = 0
		for _, e := range m.SensitiveData {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.SecEventsCount != 0 {
		n += 1 + sovTypes(uint64(m.SecEventsCount))
	}
	if m.RequestsCount != 0 {
		n += 2 + sovTypes(uint64(m.RequestsCount))
	}
	return n
}

func (m *PDFSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 5
	}
	if m.Probability != 0 {
		n += 5
	}
	return n
}

func (m *PDFStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PdfMean != 0 {
		n += 5
	}
	if m.Pdf_95 != 0 {
		n += 5
	}
	return n
}

func (m *APIEPPDFInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestSize) > 0 {
		for _, e := range m.RequestSize {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseSize) > 0 {
		for _, e := range m.ResponseSize {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.LatencyWithData) > 0 {
		for _, e := range m.LatencyWithData {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.LatencyNoData) > 0 {
		for _, e := range m.LatencyNoData {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RequestRate) > 0 {
		for _, e := range m.RequestRate {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ErrorRate) > 0 {
		for _, e := range m.ErrorRate {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseThroughput) > 0 {
		for _, e := range m.ResponseThroughput {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CreationTimestamp != nil {
		l = m.CreationTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RequestSizeStat != nil {
		l = m.RequestSizeStat.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ResponseSizeStat != nil {
		l = m.ResponseSizeStat.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LatencyWithDataStat != nil {
		l = m.LatencyWithDataStat.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LatencyNoDataStat != nil {
		l = m.LatencyNoDataStat.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RequestRateStat != nil {
		l = m.RequestRateStat.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ErrorRateStat != nil {
		l = m.ErrorRateStat.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ResponseThroughputStat != nil {
		l = m.ResponseThroughputStat.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *OverrideInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ComponentIdentifier)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SetDynamic {
		n += 2
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Feature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feature{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BusinessLogicMarkupSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BusinessLogicMarkupSetting{`,
		`LearnFromRedirectTraffic:` + fmt.Sprintf("%v", this.LearnFromRedirectTraffic) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BusinessLogicMarkupSetting_Disable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BusinessLogicMarkupSetting_Disable{`,
		`Disable:` + strings.Replace(fmt.Sprintf("%v", this.Disable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BusinessLogicMarkupSetting_Enable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BusinessLogicMarkupSetting_Enable{`,
		`Enable:` + strings.Replace(fmt.Sprintf("%v", this.Enable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFeatures := "[]*Feature{"
	for _, f := range this.Features {
		repeatedStringForFeatures += strings.Replace(f.String(), "Feature", "Feature", 1) + ","
	}
	repeatedStringForFeatures += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Features:` + repeatedStringForFeatures + `,`,
		`BusinessLogicMarkupSetting:` + strings.Replace(this.BusinessLogicMarkupSetting.String(), "BusinessLogicMarkupSetting", "BusinessLogicMarkupSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFeatures := "[]*Feature{"
	for _, f := range this.Features {
		repeatedStringForFeatures += strings.Replace(f.String(), "Feature", "Feature", 1) + ","
	}
	repeatedStringForFeatures += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Features:` + repeatedStringForFeatures + `,`,
		`BusinessLogicMarkupSetting:` + strings.Replace(this.BusinessLogicMarkupSetting.String(), "BusinessLogicMarkupSetting", "BusinessLogicMarkupSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFeatures := "[]*Feature{"
	for _, f := range this.Features {
		repeatedStringForFeatures += strings.Replace(f.String(), "Feature", "Feature", 1) + ","
	}
	repeatedStringForFeatures += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Features:` + repeatedStringForFeatures + `,`,
		`BusinessLogicMarkupSetting:` + strings.Replace(this.BusinessLogicMarkupSetting.String(), "BusinessLogicMarkupSetting", "BusinessLogicMarkupSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFeatures := "[]*Feature{"
	for _, f := range this.Features {
		repeatedStringForFeatures += strings.Replace(f.String(), "Feature", "Feature", 1) + ","
	}
	repeatedStringForFeatures += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Features:` + repeatedStringForFeatures + `,`,
		`BusinessLogicMarkupSetting:` + strings.Replace(this.BusinessLogicMarkupSetting.String(), "BusinessLogicMarkupSetting", "BusinessLogicMarkupSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEPDynExample) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEPDynExample{`,
		`ComponentIdentifier:` + fmt.Sprintf("%v", this.ComponentIdentifier) + `,`,
		`ComponentExamples:` + fmt.Sprintf("%v", this.ComponentExamples) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEPInfo) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDynExamples := "[]*APIEPDynExample{"
	for _, f := range this.DynExamples {
		repeatedStringForDynExamples += strings.Replace(f.String(), "APIEPDynExample", "APIEPDynExample", 1) + ","
	}
	repeatedStringForDynExamples += "}"
	s := strings.Join([]string{`&APIEPInfo{`,
		`CollapsedUrl:` + fmt.Sprintf("%v", this.CollapsedUrl) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`DynExamples:` + repeatedStringForDynExamples + `,`,
		`PdfInfo:` + strings.Replace(this.PdfInfo.String(), "APIEPPDFInfo", "APIEPPDFInfo", 1) + `,`,
		`RequestPercentage:` + fmt.Sprintf("%v", this.RequestPercentage) + `,`,
		`HasLearntSchema:` + fmt.Sprintf("%v", this.HasLearntSchema) + `,`,
		`Category:` + fmt.Sprintf("%v", this.Category) + `,`,
		`BasePath:` + fmt.Sprintf("%v", this.BasePath) + `,`,
		`PiiLevel:` + fmt.Sprintf("%v", this.PiiLevel) + `,`,
		`SecurityRisk:` + fmt.Sprintf("%v", this.SecurityRisk) + `,`,
		`AccessDiscoveryTime:` + strings.Replace(fmt.Sprintf("%v", this.AccessDiscoveryTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`SensitiveData:` + fmt.Sprintf("%v", this.SensitiveData) + `,`,
		`SecEventsCount:` + fmt.Sprintf("%v", this.SecEventsCount) + `,`,
		`RequestsCount:` + fmt.Sprintf("%v", this.RequestsCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PDFSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PDFSpec{`,
		`X:` + fmt.Sprintf("%v", this.X) + `,`,
		`Probability:` + fmt.Sprintf("%v", this.Probability) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PDFStat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PDFStat{`,
		`PdfMean:` + fmt.Sprintf("%v", this.PdfMean) + `,`,
		`Pdf_95:` + fmt.Sprintf("%v", this.Pdf_95) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEPPDFInfo) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRequestSize := "[]*PDFSpec{"
	for _, f := range this.RequestSize {
		repeatedStringForRequestSize += strings.Replace(f.String(), "PDFSpec", "PDFSpec", 1) + ","
	}
	repeatedStringForRequestSize += "}"
	repeatedStringForResponseSize := "[]*PDFSpec{"
	for _, f := range this.ResponseSize {
		repeatedStringForResponseSize += strings.Replace(f.String(), "PDFSpec", "PDFSpec", 1) + ","
	}
	repeatedStringForResponseSize += "}"
	repeatedStringForLatencyWithData := "[]*PDFSpec{"
	for _, f := range this.LatencyWithData {
		repeatedStringForLatencyWithData += strings.Replace(f.String(), "PDFSpec", "PDFSpec", 1) + ","
	}
	repeatedStringForLatencyWithData += "}"
	repeatedStringForLatencyNoData := "[]*PDFSpec{"
	for _, f := range this.LatencyNoData {
		repeatedStringForLatencyNoData += strings.Replace(f.String(), "PDFSpec", "PDFSpec", 1) + ","
	}
	repeatedStringForLatencyNoData += "}"
	repeatedStringForRequestRate := "[]*PDFSpec{"
	for _, f := range this.RequestRate {
		repeatedStringForRequestRate += strings.Replace(f.String(), "PDFSpec", "PDFSpec", 1) + ","
	}
	repeatedStringForRequestRate += "}"
	repeatedStringForErrorRate := "[]*PDFSpec{"
	for _, f := range this.ErrorRate {
		repeatedStringForErrorRate += strings.Replace(f.String(), "PDFSpec", "PDFSpec", 1) + ","
	}
	repeatedStringForErrorRate += "}"
	repeatedStringForResponseThroughput := "[]*PDFSpec{"
	for _, f := range this.ResponseThroughput {
		repeatedStringForResponseThroughput += strings.Replace(f.String(), "PDFSpec", "PDFSpec", 1) + ","
	}
	repeatedStringForResponseThroughput += "}"
	s := strings.Join([]string{`&APIEPPDFInfo{`,
		`RequestSize:` + repeatedStringForRequestSize + `,`,
		`ResponseSize:` + repeatedStringForResponseSize + `,`,
		`LatencyWithData:` + repeatedStringForLatencyWithData + `,`,
		`LatencyNoData:` + repeatedStringForLatencyNoData + `,`,
		`RequestRate:` + repeatedStringForRequestRate + `,`,
		`ErrorRate:` + repeatedStringForErrorRate + `,`,
		`ResponseThroughput:` + repeatedStringForResponseThroughput + `,`,
		`CreationTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.CreationTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`RequestSizeStat:` + strings.Replace(this.RequestSizeStat.String(), "PDFStat", "PDFStat", 1) + `,`,
		`ResponseSizeStat:` + strings.Replace(this.ResponseSizeStat.String(), "PDFStat", "PDFStat", 1) + `,`,
		`LatencyWithDataStat:` + strings.Replace(this.LatencyWithDataStat.String(), "PDFStat", "PDFStat", 1) + `,`,
		`LatencyNoDataStat:` + strings.Replace(this.LatencyNoDataStat.String(), "PDFStat", "PDFStat", 1) + `,`,
		`RequestRateStat:` + strings.Replace(this.RequestRateStat.String(), "PDFStat", "PDFStat", 1) + `,`,
		`ErrorRateStat:` + strings.Replace(this.ErrorRateStat.String(), "PDFStat", "PDFStat", 1) + `,`,
		`ResponseThroughputStat:` + strings.Replace(this.ResponseThroughputStat.String(), "PDFStat", "PDFStat", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OverrideInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OverrideInfo{`,
		`ComponentIdentifier:` + fmt.Sprintf("%v", this.ComponentIdentifier) + `,`,
		`SetDynamic:` + fmt.Sprintf("%v", this.SetDynamic) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Feature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Feature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Feature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= FeatureType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BusinessLogicMarkupSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BusinessLogicMarkupSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BusinessLogicMarkupSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LearnFromRedirectTraffic = &BusinessLogicMarkupSetting_Disable{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LearnFromRedirectTraffic = &BusinessLogicMarkupSetting_Enable{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Features = append(m.Features, &Feature{})
			if err := m.Features[len(m.Features)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessLogicMarkupSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BusinessLogicMarkupSetting == nil {
				m.BusinessLogicMarkupSetting = &BusinessLogicMarkupSetting{}
			}
			if err := m.BusinessLogicMarkupSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Features = append(m.Features, &Feature{})
			if err := m.Features[len(m.Features)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessLogicMarkupSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BusinessLogicMarkupSetting == nil {
				m.BusinessLogicMarkupSetting = &BusinessLogicMarkupSetting{}
			}
			if err := m.BusinessLogicMarkupSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Features = append(m.Features, &Feature{})
			if err := m.Features[len(m.Features)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessLogicMarkupSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BusinessLogicMarkupSetting == nil {
				m.BusinessLogicMarkupSetting = &BusinessLogicMarkupSetting{}
			}
			if err := m.BusinessLogicMarkupSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Features = append(m.Features, &Feature{})
			if err := m.Features[len(m.Features)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessLogicMarkupSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BusinessLogicMarkupSetting == nil {
				m.BusinessLogicMarkupSetting = &BusinessLogicMarkupSetting{}
			}
			if err := m.BusinessLogicMarkupSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEPDynExample) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEPDynExample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEPDynExample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentExamples", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentExamples = append(m.ComponentExamples, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEPInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEPInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEPInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollapsedUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollapsedUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynExamples", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynExamples = append(m.DynExamples, &APIEPDynExample{})
			if err := m.DynExamples[len(m.DynExamples)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PdfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PdfInfo == nil {
				m.PdfInfo = &APIEPPDFInfo{}
			}
			if err := m.PdfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestPercentage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RequestPercentage = float32(math.Float32frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasLearntSchema", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasLearntSchema = bool(v != 0)
		case 8:
			if wireType == 0 {
				var v APIEPCategory
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= APIEPCategory(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Category = append(m.Category, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Category) == 0 {
					m.Category = make([]APIEPCategory, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v APIEPCategory
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= APIEPCategory(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Category = append(m.Category, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BasePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PiiLevel", wireType)
			}
			m.PiiLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PiiLevel |= APIEPPIILevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityRisk", wireType)
			}
			m.SecurityRisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecurityRisk |= APIEPSecurityRisk(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessDiscoveryTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccessDiscoveryTime == nil {
				m.AccessDiscoveryTime = &types.Timestamp{}
			}
			if err := m.AccessDiscoveryTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType == 0 {
				var v SensitiveDataType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= SensitiveDataType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SensitiveData = append(m.SensitiveData, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.SensitiveData) == 0 {
					m.SensitiveData = make([]SensitiveDataType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v SensitiveDataType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= SensitiveDataType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SensitiveData = append(m.SensitiveData, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveData", wireType)
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecEventsCount", wireType)
			}
			m.SecEventsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecEventsCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestsCount", wireType)
			}
			m.RequestsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestsCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PDFSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PDFSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PDFSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.X = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Probability", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Probability = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PDFStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PDFStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PDFStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PdfMean", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PdfMean = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pdf_95", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Pdf_95 = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEPPDFInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEPPDFInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEPPDFInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSize = append(m.RequestSize, &PDFSpec{})
			if err := m.RequestSize[len(m.RequestSize)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseSize = append(m.ResponseSize, &PDFSpec{})
			if err := m.ResponseSize[len(m.ResponseSize)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatencyWithData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatencyWithData = append(m.LatencyWithData, &PDFSpec{})
			if err := m.LatencyWithData[len(m.LatencyWithData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatencyNoData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatencyNoData = append(m.LatencyNoData, &PDFSpec{})
			if err := m.LatencyNoData[len(m.LatencyNoData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestRate = append(m.RequestRate, &PDFSpec{})
			if err := m.RequestRate[len(m.RequestRate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorRate = append(m.ErrorRate, &PDFSpec{})
			if err := m.ErrorRate[len(m.ErrorRate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseThroughput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseThroughput = append(m.ResponseThroughput, &PDFSpec{})
			if err := m.ResponseThroughput[len(m.ResponseThroughput)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreationTimestamp == nil {
				m.CreationTimestamp = &types.Timestamp{}
			}
			if err := m.CreationTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSizeStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestSizeStat == nil {
				m.RequestSizeStat = &PDFStat{}
			}
			if err := m.RequestSizeStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseSizeStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponseSizeStat == nil {
				m.ResponseSizeStat = &PDFStat{}
			}
			if err := m.ResponseSizeStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatencyWithDataStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatencyWithDataStat == nil {
				m.LatencyWithDataStat = &PDFStat{}
			}
			if err := m.LatencyWithDataStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatencyNoDataStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatencyNoDataStat == nil {
				m.LatencyNoDataStat = &PDFStat{}
			}
			if err := m.LatencyNoDataStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestRateStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestRateStat == nil {
				m.RequestRateStat = &PDFStat{}
			}
			if err := m.RequestRateStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorRateStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ErrorRateStat == nil {
				m.ErrorRateStat = &PDFStat{}
			}
			if err := m.ErrorRateStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseThroughputStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponseThroughputStat == nil {
				m.ResponseThroughputStat = &PDFStat{}
			}
			if err := m.ResponseThroughputStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OverrideInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OverrideInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OverrideInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetDynamic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SetDynamic = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
