//
// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package secret_policy

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *ListPolicyRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ListPolicyRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ListPolicyRequest) DeepCopy() *ListPolicyRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ListPolicyRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ListPolicyRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ListPolicyRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ListPolicyRequestValidator().Validate(ctx, m, opts...)
}

type ValidateListPolicyRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateListPolicyRequest) NamespaceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for namespace")
	}

	return validatorFn, nil
}

func (v *ValidateListPolicyRequest) PolicyStateValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for policy_state")
	}

	return validatorFn, nil
}

func (v *ValidateListPolicyRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ListPolicyRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ListPolicyRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["policy_state"]; exists {

		vOpts := append(opts, db.WithValidateField("policy_state"))
		if err := fv(ctx, m.GetPolicyState(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultListPolicyRequestValidator = func() *ValidateListPolicyRequest {
	v := &ValidateListPolicyRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNamespace := v.NamespaceValidationRuleHandler
	rulesNamespace := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhNamespace(rulesNamespace)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ListPolicyRequest.namespace: %s", err)
		panic(errMsg)
	}
	v.FldValidators["namespace"] = vFn

	vrhPolicyState := v.PolicyStateValidationRuleHandler
	rulesPolicyState := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"active\",\"deleted\",\"all\"]",
	}
	vFn, err = vrhPolicyState(rulesPolicyState)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ListPolicyRequest.policy_state: %s", err)
		panic(errMsg)
	}
	v.FldValidators["policy_state"] = vFn

	return v
}()

func ListPolicyRequestValidator() db.Validator {
	return DefaultListPolicyRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *ListPolicyResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ListPolicyResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ListPolicyResponse) DeepCopy() *ListPolicyResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ListPolicyResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ListPolicyResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ListPolicyResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ListPolicyResponseValidator().Validate(ctx, m, opts...)
}

func (m *ListPolicyResponse) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetItemsDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ListPolicyResponse) GetItemsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetItems() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetItems() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetItems() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("items[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateListPolicyResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateListPolicyResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ListPolicyResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ListPolicyResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["errors"]; exists {

		vOpts := append(opts, db.WithValidateField("errors"))
		for idx, item := range m.GetErrors() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["items"]; exists {

		vOpts := append(opts, db.WithValidateField("items"))
		for idx, item := range m.GetItems() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultListPolicyResponseValidator = func() *ValidateListPolicyResponse {
	v := &ValidateListPolicyResponse{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["items"] = ListPolicyResponseItemValidator().Validate

	return v
}()

func ListPolicyResponseValidator() db.Validator {
	return DefaultListPolicyResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *ListPolicyResponseItem) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ListPolicyResponseItem) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ListPolicyResponseItem) DeepCopy() *ListPolicyResponseItem {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ListPolicyResponseItem{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ListPolicyResponseItem) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ListPolicyResponseItem) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ListPolicyResponseItemValidator().Validate(ctx, m, opts...)
}

func (m *ListPolicyResponseItem) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetGetSpecDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ListPolicyResponseItem) GetGetSpecDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGetSpec() == nil {
		return nil, nil
	}

	drInfos, err := m.GetGetSpec().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetGetSpec().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "get_spec." + dri.DRField
	}
	return drInfos, err

}

type ValidateListPolicyResponseItem struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateListPolicyResponseItem) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ListPolicyResponseItem)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ListPolicyResponseItem got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["annotations"]; exists {

		vOpts := append(opts, db.WithValidateField("annotations"))
		for key, value := range m.GetAnnotations() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["description"]; exists {

		vOpts := append(opts, db.WithValidateField("description"))
		if err := fv(ctx, m.GetDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["disabled"]; exists {

		vOpts := append(opts, db.WithValidateField("disabled"))
		if err := fv(ctx, m.GetDisabled(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["get_spec"]; exists {

		vOpts := append(opts, db.WithValidateField("get_spec"))
		if err := fv(ctx, m.GetGetSpec(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["labels"]; exists {

		vOpts := append(opts, db.WithValidateField("labels"))
		for key, value := range m.GetLabels() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["system_metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("system_metadata"))
		if err := fv(ctx, m.GetSystemMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tenant"]; exists {

		vOpts := append(opts, db.WithValidateField("tenant"))
		if err := fv(ctx, m.GetTenant(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["uid"]; exists {

		vOpts := append(opts, db.WithValidateField("uid"))
		if err := fv(ctx, m.GetUid(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultListPolicyResponseItemValidator = func() *ValidateListPolicyResponseItem {
	v := &ValidateListPolicyResponseItem{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["get_spec"] = GetSpecTypeValidator().Validate

	v.FldValidators["metadata"] = ves_io_schema.ObjectGetMetaTypeValidator().Validate

	return v
}()

func ListPolicyResponseItemValidator() db.Validator {
	return DefaultListPolicyResponseItemValidator
}

// augmented methods on protoc/std generated struct

func (m *RecoverRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RecoverRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RecoverRequest) DeepCopy() *RecoverRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RecoverRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RecoverRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RecoverRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RecoverRequestValidator().Validate(ctx, m, opts...)
}

type ValidateRecoverRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRecoverRequest) NamespaceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for namespace")
	}

	return validatorFn, nil
}

func (v *ValidateRecoverRequest) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateRecoverRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RecoverRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RecoverRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRecoverRequestValidator = func() *ValidateRecoverRequest {
	v := &ValidateRecoverRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNamespace := v.NamespaceValidationRuleHandler
	rulesNamespace := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhNamespace(rulesNamespace)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RecoverRequest.namespace: %s", err)
		panic(errMsg)
	}
	v.FldValidators["namespace"] = vFn

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RecoverRequest.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	return v
}()

func RecoverRequestValidator() db.Validator {
	return DefaultRecoverRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *RecoverResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RecoverResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RecoverResponse) DeepCopy() *RecoverResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RecoverResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RecoverResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RecoverResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RecoverResponseValidator().Validate(ctx, m, opts...)
}

type ValidateRecoverResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRecoverResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RecoverResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RecoverResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["status"]; exists {

		vOpts := append(opts, db.WithValidateField("status"))
		if err := fv(ctx, m.GetStatus(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRecoverResponseValidator = func() *ValidateRecoverResponse {
	v := &ValidateRecoverResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func RecoverResponseValidator() db.Validator {
	return DefaultRecoverResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *SoftDeleteRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SoftDeleteRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SoftDeleteRequest) DeepCopy() *SoftDeleteRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SoftDeleteRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SoftDeleteRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SoftDeleteRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SoftDeleteRequestValidator().Validate(ctx, m, opts...)
}

type ValidateSoftDeleteRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSoftDeleteRequest) NamespaceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for namespace")
	}

	return validatorFn, nil
}

func (v *ValidateSoftDeleteRequest) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateSoftDeleteRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SoftDeleteRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SoftDeleteRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSoftDeleteRequestValidator = func() *ValidateSoftDeleteRequest {
	v := &ValidateSoftDeleteRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNamespace := v.NamespaceValidationRuleHandler
	rulesNamespace := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhNamespace(rulesNamespace)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SoftDeleteRequest.namespace: %s", err)
		panic(errMsg)
	}
	v.FldValidators["namespace"] = vFn

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SoftDeleteRequest.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	return v
}()

func SoftDeleteRequestValidator() db.Validator {
	return DefaultSoftDeleteRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *SoftDeleteResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SoftDeleteResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SoftDeleteResponse) DeepCopy() *SoftDeleteResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SoftDeleteResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SoftDeleteResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SoftDeleteResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SoftDeleteResponseValidator().Validate(ctx, m, opts...)
}

type ValidateSoftDeleteResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSoftDeleteResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SoftDeleteResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SoftDeleteResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["status"]; exists {

		vOpts := append(opts, db.WithValidateField("status"))
		if err := fv(ctx, m.GetStatus(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSoftDeleteResponseValidator = func() *ValidateSoftDeleteResponse {
	v := &ValidateSoftDeleteResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SoftDeleteResponseValidator() db.Validator {
	return DefaultSoftDeleteResponseValidator
}
