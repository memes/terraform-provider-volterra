// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package waf

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AppProfile) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AppProfile) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AppProfile) DeepCopy() *AppProfile {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AppProfile{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AppProfile) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AppProfile) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AppProfileValidator().Validate(ctx, m, opts...)
}

type ValidateAppProfile struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAppProfile) LanguageValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(LanguageType)
		return int32(i)
	}
	// LanguageType_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, LanguageType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for language")
	}
	itemsValidatorFn := func(ctx context.Context, elems []LanguageType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for language")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]LanguageType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []LanguageType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated language")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items language")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAppProfile) CmsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ContentManagementSystemType)
		return int32(i)
	}
	// ContentManagementSystemType_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ContentManagementSystemType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cms")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ContentManagementSystemType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for cms")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ContentManagementSystemType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ContentManagementSystemType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated cms")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items cms")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAppProfile) WebserverValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(WebServerType)
		return int32(i)
	}
	// WebServerType_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, WebServerType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for webserver")
	}
	itemsValidatorFn := func(ctx context.Context, elems []WebServerType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for webserver")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]WebServerType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []WebServerType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated webserver")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items webserver")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAppProfile) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AppProfile)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AppProfile got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cms"]; exists {
		vOpts := append(opts, db.WithValidateField("cms"))
		if err := fv(ctx, m.GetCms(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["language"]; exists {
		vOpts := append(opts, db.WithValidateField("language"))
		if err := fv(ctx, m.GetLanguage(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["webserver"]; exists {
		vOpts := append(opts, db.WithValidateField("webserver"))
		if err := fv(ctx, m.GetWebserver(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAppProfileValidator = func() *ValidateAppProfile {
	v := &ValidateAppProfile{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhLanguage := v.LanguageValidationRuleHandler
	rulesLanguage := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhLanguage(rulesLanguage)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AppProfile.language: %s", err)
		panic(errMsg)
	}
	v.FldValidators["language"] = vFn

	vrhCms := v.CmsValidationRuleHandler
	rulesCms := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhCms(rulesCms)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AppProfile.cms: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cms"] = vFn

	vrhWebserver := v.WebserverValidationRuleHandler
	rulesWebserver := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhWebserver(rulesWebserver)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AppProfile.webserver: %s", err)
		panic(errMsg)
	}
	v.FldValidators["webserver"] = vFn

	return v
}()

func AppProfileValidator() db.Validator {
	return DefaultAppProfileValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["app_profile"]; exists {

		vOpts := append(opts, db.WithValidateField("app_profile"))
		if err := fv(ctx, m.GetAppProfile(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["disabled_detection_tags"]; exists {

		vOpts := append(opts, db.WithValidateField("disabled_detection_tags"))
		if err := fv(ctx, m.GetDisabledDetectionTags(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["mode"]; exists {

		vOpts := append(opts, db.WithValidateField("mode"))
		if err := fv(ctx, m.GetMode(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["app_profile"] = AppProfileValidator().Validate

	v.FldValidators["disabled_detection_tags"] = DisabledDetectionTagsValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DisabledDetectionTags) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DisabledDetectionTags) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DisabledDetectionTags) DeepCopy() *DisabledDetectionTags {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DisabledDetectionTags{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DisabledDetectionTags) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DisabledDetectionTags) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DisabledDetectionTagsValidator().Validate(ctx, m, opts...)
}

type ValidateDisabledDetectionTags struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDisabledDetectionTags) DetectionTagTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(DetectionTagType)
		return int32(i)
	}
	// DetectionTagType_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, DetectionTagType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for detection_tag_type")
	}
	itemsValidatorFn := func(ctx context.Context, elems []DetectionTagType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for detection_tag_type")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]DetectionTagType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []DetectionTagType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated detection_tag_type")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items detection_tag_type")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDisabledDetectionTags) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DisabledDetectionTags)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DisabledDetectionTags got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["detection_tag_type"]; exists {
		vOpts := append(opts, db.WithValidateField("detection_tag_type"))
		if err := fv(ctx, m.GetDetectionTagType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDisabledDetectionTagsValidator = func() *ValidateDisabledDetectionTags {
	v := &ValidateDisabledDetectionTags{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDetectionTagType := v.DetectionTagTypeValidationRuleHandler
	rulesDetectionTagType := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhDetectionTagType(rulesDetectionTagType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DisabledDetectionTags.detection_tag_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["detection_tag_type"] = vFn

	return v
}()

func DisabledDetectionTagsValidator() db.Validator {
	return DefaultDisabledDetectionTagsValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["app_profile"]; exists {

		vOpts := append(opts, db.WithValidateField("app_profile"))
		if err := fv(ctx, m.GetAppProfile(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["disabled_detection_tags"]; exists {

		vOpts := append(opts, db.WithValidateField("disabled_detection_tags"))
		if err := fv(ctx, m.GetDisabledDetectionTags(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["mode"]; exists {

		vOpts := append(opts, db.WithValidateField("mode"))
		if err := fv(ctx, m.GetMode(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["app_profile"] = AppProfileValidator().Validate

	v.FldValidators["disabled_detection_tags"] = DisabledDetectionTagsValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["app_profile"]; exists {

		vOpts := append(opts, db.WithValidateField("app_profile"))
		if err := fv(ctx, m.GetAppProfile(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["disabled_detection_tags"]; exists {

		vOpts := append(opts, db.WithValidateField("disabled_detection_tags"))
		if err := fv(ctx, m.GetDisabledDetectionTags(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["mode"]; exists {

		vOpts := append(opts, db.WithValidateField("mode"))
		if err := fv(ctx, m.GetMode(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["app_profile"] = AppProfileValidator().Validate

	v.FldValidators["disabled_detection_tags"] = DisabledDetectionTagsValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *MetricLabelFilter) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *MetricLabelFilter) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *MetricLabelFilter) DeepCopy() *MetricLabelFilter {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &MetricLabelFilter{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *MetricLabelFilter) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *MetricLabelFilter) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return MetricLabelFilterValidator().Validate(ctx, m, opts...)
}

type ValidateMetricLabelFilter struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateMetricLabelFilter) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*MetricLabelFilter)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *MetricLabelFilter got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["label"]; exists {

		vOpts := append(opts, db.WithValidateField("label"))
		if err := fv(ctx, m.GetLabel(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["op"]; exists {

		vOpts := append(opts, db.WithValidateField("op"))
		if err := fv(ctx, m.GetOp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["value"]; exists {

		vOpts := append(opts, db.WithValidateField("value"))
		if err := fv(ctx, m.GetValue(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultMetricLabelFilterValidator = func() *ValidateMetricLabelFilter {
	v := &ValidateMetricLabelFilter{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func MetricLabelFilterValidator() db.Validator {
	return DefaultMetricLabelFilterValidator
}

// augmented methods on protoc/std generated struct

func (m *MetricValue) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *MetricValue) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *MetricValue) DeepCopy() *MetricValue {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &MetricValue{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *MetricValue) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *MetricValue) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return MetricValueValidator().Validate(ctx, m, opts...)
}

type ValidateMetricValue struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateMetricValue) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*MetricValue)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *MetricValue got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("timestamp"))
		if err := fv(ctx, m.GetTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["value"]; exists {

		vOpts := append(opts, db.WithValidateField("value"))
		if err := fv(ctx, m.GetValue(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultMetricValueValidator = func() *ValidateMetricValue {
	v := &ValidateMetricValue{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func MetricValueValidator() db.Validator {
	return DefaultMetricValueValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["app_profile"]; exists {

		vOpts := append(opts, db.WithValidateField("app_profile"))
		if err := fv(ctx, m.GetAppProfile(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["disabled_detection_tags"]; exists {

		vOpts := append(opts, db.WithValidateField("disabled_detection_tags"))
		if err := fv(ctx, m.GetDisabledDetectionTags(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["mode"]; exists {

		vOpts := append(opts, db.WithValidateField("mode"))
		if err := fv(ctx, m.GetMode(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["app_profile"] = AppProfileValidator().Validate

	v.FldValidators["disabled_detection_tags"] = DisabledDetectionTagsValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *RuleHitsCounter) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RuleHitsCounter) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RuleHitsCounter) DeepCopy() *RuleHitsCounter {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RuleHitsCounter{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RuleHitsCounter) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RuleHitsCounter) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RuleHitsCounterValidator().Validate(ctx, m, opts...)
}

type ValidateRuleHitsCounter struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRuleHitsCounter) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RuleHitsCounter)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RuleHitsCounter got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["id"]; exists {

		vOpts := append(opts, db.WithValidateField("id"))
		if err := fv(ctx, m.GetId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metric"]; exists {

		vOpts := append(opts, db.WithValidateField("metric"))
		for idx, item := range m.GetMetric() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRuleHitsCounterValidator = func() *ValidateRuleHitsCounter {
	v := &ValidateRuleHitsCounter{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func RuleHitsCounterValidator() db.Validator {
	return DefaultRuleHitsCounterValidator
}

// augmented methods on protoc/std generated struct

func (m *RuleHitsId) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RuleHitsId) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RuleHitsId) DeepCopy() *RuleHitsId {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RuleHitsId{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RuleHitsId) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RuleHitsId) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RuleHitsIdValidator().Validate(ctx, m, opts...)
}

type ValidateRuleHitsId struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRuleHitsId) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RuleHitsId)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RuleHitsId got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["app_type"]; exists {

		vOpts := append(opts, db.WithValidateField("app_type"))
		if err := fv(ctx, m.GetAppType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bot_name"]; exists {

		vOpts := append(opts, db.WithValidateField("bot_name"))
		if err := fv(ctx, m.GetBotName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bot_type"]; exists {

		vOpts := append(opts, db.WithValidateField("bot_type"))
		if err := fv(ctx, m.GetBotType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["instance"]; exists {

		vOpts := append(opts, db.WithValidateField("instance"))
		if err := fv(ctx, m.GetInstance(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rule_id"]; exists {

		vOpts := append(opts, db.WithValidateField("rule_id"))
		if err := fv(ctx, m.GetRuleId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rule_severity"]; exists {

		vOpts := append(opts, db.WithValidateField("rule_severity"))
		if err := fv(ctx, m.GetRuleSeverity(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rule_tag"]; exists {

		vOpts := append(opts, db.WithValidateField("rule_tag"))
		if err := fv(ctx, m.GetRuleTag(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["service"]; exists {

		vOpts := append(opts, db.WithValidateField("service"))
		if err := fv(ctx, m.GetService(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site"]; exists {

		vOpts := append(opts, db.WithValidateField("site"))
		if err := fv(ctx, m.GetSite(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["virtual_host"]; exists {

		vOpts := append(opts, db.WithValidateField("virtual_host"))
		if err := fv(ctx, m.GetVirtualHost(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["waf_instance_id"]; exists {

		vOpts := append(opts, db.WithValidateField("waf_instance_id"))
		if err := fv(ctx, m.GetWafInstanceId(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRuleHitsIdValidator = func() *ValidateRuleHitsId {
	v := &ValidateRuleHitsId{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func RuleHitsIdValidator() db.Validator {
	return DefaultRuleHitsIdValidator
}

// augmented methods on protoc/std generated struct

func (m *SecurityEventAggregation) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SecurityEventAggregation) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SecurityEventAggregation) DeepCopy() *SecurityEventAggregation {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SecurityEventAggregation{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SecurityEventAggregation) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SecurityEventAggregation) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SecurityEventAggregationValidator().Validate(ctx, m, opts...)
}

type ValidateSecurityEventAggregation struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSecurityEventAggregation) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SecurityEventAggregation)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SecurityEventAggregation got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["step"]; exists {

		vOpts := append(opts, db.WithValidateField("step"))
		if err := fv(ctx, m.GetStep(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSecurityEventAggregationValidator = func() *ValidateSecurityEventAggregation {
	v := &ValidateSecurityEventAggregation{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SecurityEventAggregationValidator() db.Validator {
	return DefaultSecurityEventAggregationValidator
}

// augmented methods on protoc/std generated struct

func (m *SecurityEventsCounter) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SecurityEventsCounter) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SecurityEventsCounter) DeepCopy() *SecurityEventsCounter {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SecurityEventsCounter{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SecurityEventsCounter) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SecurityEventsCounter) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SecurityEventsCounterValidator().Validate(ctx, m, opts...)
}

type ValidateSecurityEventsCounter struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSecurityEventsCounter) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SecurityEventsCounter)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SecurityEventsCounter got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["id"]; exists {

		vOpts := append(opts, db.WithValidateField("id"))
		if err := fv(ctx, m.GetId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metric"]; exists {

		vOpts := append(opts, db.WithValidateField("metric"))
		for idx, item := range m.GetMetric() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSecurityEventsCounterValidator = func() *ValidateSecurityEventsCounter {
	v := &ValidateSecurityEventsCounter{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SecurityEventsCounterValidator() db.Validator {
	return DefaultSecurityEventsCounterValidator
}

// augmented methods on protoc/std generated struct

func (m *SecurityEventsId) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SecurityEventsId) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SecurityEventsId) DeepCopy() *SecurityEventsId {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SecurityEventsId{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SecurityEventsId) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SecurityEventsId) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SecurityEventsIdValidator().Validate(ctx, m, opts...)
}

type ValidateSecurityEventsId struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSecurityEventsId) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SecurityEventsId)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SecurityEventsId got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["app_type"]; exists {

		vOpts := append(opts, db.WithValidateField("app_type"))
		if err := fv(ctx, m.GetAppType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bot_name"]; exists {

		vOpts := append(opts, db.WithValidateField("bot_name"))
		if err := fv(ctx, m.GetBotName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bot_type"]; exists {

		vOpts := append(opts, db.WithValidateField("bot_type"))
		if err := fv(ctx, m.GetBotType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["instance"]; exists {

		vOpts := append(opts, db.WithValidateField("instance"))
		if err := fv(ctx, m.GetInstance(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["service"]; exists {

		vOpts := append(opts, db.WithValidateField("service"))
		if err := fv(ctx, m.GetService(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site"]; exists {

		vOpts := append(opts, db.WithValidateField("site"))
		if err := fv(ctx, m.GetSite(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["virtual_host"]; exists {

		vOpts := append(opts, db.WithValidateField("virtual_host"))
		if err := fv(ctx, m.GetVirtualHost(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["waf_instance_id"]; exists {

		vOpts := append(opts, db.WithValidateField("waf_instance_id"))
		if err := fv(ctx, m.GetWafInstanceId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["waf_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("waf_mode"))
		if err := fv(ctx, m.GetWafMode(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSecurityEventsIdValidator = func() *ValidateSecurityEventsId {
	v := &ValidateSecurityEventsId{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SecurityEventsIdValidator() db.Validator {
	return DefaultSecurityEventsIdValidator
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AppProfile = f.GetAppProfile()
	m.DisabledDetectionTags = f.GetDisabledDetectionTags()
	m.Mode = f.GetMode()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AppProfile = m1.AppProfile
	f.DisabledDetectionTags = m1.DisabledDetectionTags
	f.Mode = m1.Mode
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AppProfile = f.GetAppProfile()
	m.DisabledDetectionTags = f.GetDisabledDetectionTags()
	m.Mode = f.GetMode()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AppProfile = m1.AppProfile
	f.DisabledDetectionTags = m1.DisabledDetectionTags
	f.Mode = m1.Mode
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AppProfile = f.GetAppProfile()
	m.DisabledDetectionTags = f.GetDisabledDetectionTags()
	m.Mode = f.GetMode()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AppProfile = m1.AppProfile
	f.DisabledDetectionTags = m1.DisabledDetectionTags
	f.Mode = m1.Mode
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}
