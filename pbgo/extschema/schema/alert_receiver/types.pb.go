// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/alert_receiver/types.proto

package alert_receiver

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Slack Config
//
// x-displayName: "Slack Config"
// Slack configuration to send alert notifications
type SlackConfig struct {
	// URL
	//
	// x-displayName: "Webhook URL"
	// x-required
	// Incoming webhook url to send alert notifications.
	// API Key is embedded in the webhook URL.
	Url *schema.SecretType `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Channel
	//
	// x-displayName: "Channel"
	// x-example: "value"
	// x-required
	// Channel or user to send notifications to
	Channel string `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *SlackConfig) Reset()      { *m = SlackConfig{} }
func (*SlackConfig) ProtoMessage() {}
func (*SlackConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{0}
}
func (m *SlackConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlackConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SlackConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlackConfig.Merge(m, src)
}
func (m *SlackConfig) XXX_Size() int {
	return m.Size()
}
func (m *SlackConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SlackConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SlackConfig proto.InternalMessageInfo

func (m *SlackConfig) GetUrl() *schema.SecretType {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *SlackConfig) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

// PagerDuty Config
//
// x-displayName: "PagerDuty Config"
// PagerDuty configuration to send alert notifications
type PagerDutyConfig struct {
	// Routing Key
	//
	// x-displayName: "Integration Key"
	// x-required
	// PagerDuty integration key (choose Integration Type: Events API v2)
	RoutingKey *schema.SecretType `protobuf:"bytes,1,opt,name=routing_key,json=routingKey,proto3" json:"routing_key,omitempty"`
	// URL
	//
	// x-displayName: "Pager Duty URL"
	// x-example: "value"
	// x-required
	// URL to send API requests to
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *PagerDutyConfig) Reset()      { *m = PagerDutyConfig{} }
func (*PagerDutyConfig) ProtoMessage() {}
func (*PagerDutyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{1}
}
func (m *PagerDutyConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PagerDutyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PagerDutyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PagerDutyConfig.Merge(m, src)
}
func (m *PagerDutyConfig) XXX_Size() int {
	return m.Size()
}
func (m *PagerDutyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PagerDutyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PagerDutyConfig proto.InternalMessageInfo

func (m *PagerDutyConfig) GetRoutingKey() *schema.SecretType {
	if m != nil {
		return m.RoutingKey
	}
	return nil
}

func (m *PagerDutyConfig) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// Opsgenie Config
//
// x-displayName: "OpsGenie Config"
// OpsGenie configuration to send alert notifications
type OpsGenieConfig struct {
	// API Key
	//
	// x-displayName: "API Key"
	// x-required
	// API integration key to send alert notifications using REST API to OpsGenie service.
	ApiKey *schema.SecretType `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// URL
	//
	// x-displayName: "API URL"
	// x-example: "value"
	// x-required
	// URL to send API requests to
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *OpsGenieConfig) Reset()      { *m = OpsGenieConfig{} }
func (*OpsGenieConfig) ProtoMessage() {}
func (*OpsGenieConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{2}
}
func (m *OpsGenieConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpsGenieConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OpsGenieConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpsGenieConfig.Merge(m, src)
}
func (m *OpsGenieConfig) XXX_Size() int {
	return m.Size()
}
func (m *OpsGenieConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_OpsGenieConfig.DiscardUnknown(m)
}

var xxx_messageInfo_OpsGenieConfig proto.InternalMessageInfo

func (m *OpsGenieConfig) GetApiKey() *schema.SecretType {
	if m != nil {
		return m.ApiKey
	}
	return nil
}

func (m *OpsGenieConfig) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// EmailConfig
//
// x-displayName: "Email Configuration"
type EmailConfig struct {
	// Email
	//
	// x-displayName: "Email"
	// x-example: "abc@email.com"
	// Email id of the user
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (m *EmailConfig) Reset()      { *m = EmailConfig{} }
func (*EmailConfig) ProtoMessage() {}
func (*EmailConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{3}
}
func (m *EmailConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmailConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EmailConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmailConfig.Merge(m, src)
}
func (m *EmailConfig) XXX_Size() int {
	return m.Size()
}
func (m *EmailConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EmailConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EmailConfig proto.InternalMessageInfo

func (m *EmailConfig) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// SMSConfig
//
// x-displayName: "SMS Configuration"
type SMSConfig struct {
	// Contact Number
	//
	// x-displayName: "Contact Number"
	// x-example: "+14084004001"
	// Contact number of the user in ITU E.164 format [+][country code][subscriber number including area code]
	ContactNumber string `protobuf:"bytes,1,opt,name=contact_number,json=contactNumber,proto3" json:"contact_number,omitempty"`
}

func (m *SMSConfig) Reset()      { *m = SMSConfig{} }
func (*SMSConfig) ProtoMessage() {}
func (*SMSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{4}
}
func (m *SMSConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SMSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SMSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SMSConfig.Merge(m, src)
}
func (m *SMSConfig) XXX_Size() int {
	return m.Size()
}
func (m *SMSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SMSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SMSConfig proto.InternalMessageInfo

func (m *SMSConfig) GetContactNumber() string {
	if m != nil {
		return m.ContactNumber
	}
	return ""
}

// Webhook Config
//
// x-displayName: "Webhook Config"
// Webhook configuration to send alert notifications
type WebhookConfig struct {
	// URL
	//
	// x-displayName: "Webhook URL"
	// x-example: "value"
	// x-required
	// URL to send API requests to
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// HTTP Configuration
	//
	// x-displayName: "HTTP Configuration"
	// x-required
	// Configuration for HTTP endpoint
	HttpConfig *HTTPConfig `protobuf:"bytes,3,opt,name=http_config,json=httpConfig,proto3" json:"http_config,omitempty"`
}

func (m *WebhookConfig) Reset()      { *m = WebhookConfig{} }
func (*WebhookConfig) ProtoMessage() {}
func (*WebhookConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{5}
}
func (m *WebhookConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebhookConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WebhookConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebhookConfig.Merge(m, src)
}
func (m *WebhookConfig) XXX_Size() int {
	return m.Size()
}
func (m *WebhookConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_WebhookConfig.DiscardUnknown(m)
}

var xxx_messageInfo_WebhookConfig proto.InternalMessageInfo

func (m *WebhookConfig) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *WebhookConfig) GetHttpConfig() *HTTPConfig {
	if m != nil {
		return m.HttpConfig
	}
	return nil
}

// HTTP Configuration
//
// x-displayName: "HTTP Configuration"
// Configuration for HTTP endpoint
type HTTPConfig struct {
	// HTTP Authorization header
	//
	// x-displayName: "Authorization"
	// x-required
	// HTTP Authorization header controls how to authorize to the HTTP endpoint
	//
	// Types that are valid to be assigned to AuthChoice:
	//	*HTTPConfig_NoAuthorization
	//	*HTTPConfig_BasicAuth
	//	*HTTPConfig_AuthConfig
	AuthChoice isHTTPConfig_AuthChoice `protobuf_oneof:"auth_choice"`
	// Enable HTTP2
	//
	// x-displayName: "Enable HTTP2"
	// x-example: "value"
	// Whether to enable HTTP2.
	EnableHttp2 bool `protobuf:"varint,4,opt,name=enable_http2,json=enableHttp2,proto3" json:"enable_http2,omitempty"`
	// Follow Redirects
	//
	// x-displayName: "Follow Redirects"
	// x-example: "value"
	// Configure whether HTTP requests follow HTTP 3xx redirects.
	FollowRedirects bool `protobuf:"varint,5,opt,name=follow_redirects,json=followRedirects,proto3" json:"follow_redirects,omitempty"`
	// TLS Config
	//
	// x-displayName: "TLS Config"
	// x-required
	// Configures the TLS settings.
	TlsConfig *TLSConfig `protobuf:"bytes,6,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
}

func (m *HTTPConfig) Reset()      { *m = HTTPConfig{} }
func (*HTTPConfig) ProtoMessage() {}
func (*HTTPConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{6}
}
func (m *HTTPConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HTTPConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HTTPConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPConfig.Merge(m, src)
}
func (m *HTTPConfig) XXX_Size() int {
	return m.Size()
}
func (m *HTTPConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPConfig.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPConfig proto.InternalMessageInfo

type isHTTPConfig_AuthChoice interface {
	isHTTPConfig_AuthChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type HTTPConfig_NoAuthorization struct {
	NoAuthorization *schema.Empty `protobuf:"bytes,7,opt,name=no_authorization,json=noAuthorization,proto3,oneof" json:"no_authorization,omitempty"`
}
type HTTPConfig_BasicAuth struct {
	BasicAuth *HttpBasicAuth `protobuf:"bytes,2,opt,name=basic_auth,json=basicAuth,proto3,oneof" json:"basic_auth,omitempty"`
}
type HTTPConfig_AuthConfig struct {
	AuthConfig *Authorization `protobuf:"bytes,8,opt,name=auth_config,json=authConfig,proto3,oneof" json:"auth_config,omitempty"`
}

func (*HTTPConfig_NoAuthorization) isHTTPConfig_AuthChoice() {}
func (*HTTPConfig_BasicAuth) isHTTPConfig_AuthChoice()       {}
func (*HTTPConfig_AuthConfig) isHTTPConfig_AuthChoice()      {}

func (m *HTTPConfig) GetAuthChoice() isHTTPConfig_AuthChoice {
	if m != nil {
		return m.AuthChoice
	}
	return nil
}

func (m *HTTPConfig) GetNoAuthorization() *schema.Empty {
	if x, ok := m.GetAuthChoice().(*HTTPConfig_NoAuthorization); ok {
		return x.NoAuthorization
	}
	return nil
}

func (m *HTTPConfig) GetBasicAuth() *HttpBasicAuth {
	if x, ok := m.GetAuthChoice().(*HTTPConfig_BasicAuth); ok {
		return x.BasicAuth
	}
	return nil
}

func (m *HTTPConfig) GetAuthConfig() *Authorization {
	if x, ok := m.GetAuthChoice().(*HTTPConfig_AuthConfig); ok {
		return x.AuthConfig
	}
	return nil
}

func (m *HTTPConfig) GetEnableHttp2() bool {
	if m != nil {
		return m.EnableHttp2
	}
	return false
}

func (m *HTTPConfig) GetFollowRedirects() bool {
	if m != nil {
		return m.FollowRedirects
	}
	return false
}

func (m *HTTPConfig) GetTlsConfig() *TLSConfig {
	if m != nil {
		return m.TlsConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HTTPConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HTTPConfig_NoAuthorization)(nil),
		(*HTTPConfig_BasicAuth)(nil),
		(*HTTPConfig_AuthConfig)(nil),
	}
}

// TLS Config
//
// x-displayName: "TLS Config"
// Configures the token request's TLS settings.
type TLSConfig struct {
	// CA Cert
	//
	// x-displayName: "CA Cert"
	// x-example: "value"
	// x-required
	// CA certificate to validate the server certificate with.
	CaCert string `protobuf:"bytes,1,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	// Client Cert
	//
	// x-displayName: "Client Cert"
	// x-example: "value"
	// x-required
	// Cert for client cert authentication to the server.
	ClientCert string `protobuf:"bytes,2,opt,name=client_cert,json=clientCert,proto3" json:"client_cert,omitempty"`
	// Client Key
	//
	// x-displayName: "Client Key"
	// x-required
	// Key for client cert authentication to the server.
	ClientKey *schema.SecretType `protobuf:"bytes,3,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	// Server Name
	//
	// x-displayName: "Server Name"
	// x-example: "value"
	// x-required
	// ServerName extension to indicate the name of the server.
	ServerName string `protobuf:"bytes,4,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	// Min Version
	//
	// x-displayName: "Min Version"
	// x-example: "value"
	// Minimum acceptable TLS version. Accepted values: TLS10 (TLS 1.0), TLS11 (TLS
	// 1.1), TLS12 (TLS 1.2), TLS13 (TLS 1.3).
	// If unset, Prometheus will use Go default minimum version, which is TLS 1.2.
	MinVersion schema.TlsProtocol `protobuf:"varint,5,opt,name=min_version,json=minVersion,proto3,enum=ves.io.schema.TlsProtocol" json:"min_version,omitempty"`
	// Max Version
	//
	// x-displayName: "Max Version"
	// x-example: "value"
	// Maximum acceptable TLS version. Accepted values: TLS10 (TLS 1.0), TLS11 (TLS
	// 1.1), TLS12 (TLS 1.2), TLS13 (TLS 1.3).
	// If unset, Prometheus will use Go default maximum version, which is TLS 1.3.
	MaxVersion schema.TlsProtocol `protobuf:"varint,6,opt,name=max_version,json=maxVersion,proto3,enum=ves.io.schema.TlsProtocol" json:"max_version,omitempty"`
}

func (m *TLSConfig) Reset()      { *m = TLSConfig{} }
func (*TLSConfig) ProtoMessage() {}
func (*TLSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{7}
}
func (m *TLSConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TLSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSConfig.Merge(m, src)
}
func (m *TLSConfig) XXX_Size() int {
	return m.Size()
}
func (m *TLSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TLSConfig proto.InternalMessageInfo

func (m *TLSConfig) GetCaCert() string {
	if m != nil {
		return m.CaCert
	}
	return ""
}

func (m *TLSConfig) GetClientCert() string {
	if m != nil {
		return m.ClientCert
	}
	return ""
}

func (m *TLSConfig) GetClientKey() *schema.SecretType {
	if m != nil {
		return m.ClientKey
	}
	return nil
}

func (m *TLSConfig) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *TLSConfig) GetMinVersion() schema.TlsProtocol {
	if m != nil {
		return m.MinVersion
	}
	return schema.TLS_AUTO
}

func (m *TLSConfig) GetMaxVersion() schema.TlsProtocol {
	if m != nil {
		return m.MaxVersion
	}
	return schema.TLS_AUTO
}

// Authorization Configuration
//
// x-displayName: "Authorization Config"
// Authorization header configuration.
type Authorization struct {
	// Authentication Type
	//
	// x-displayName: "Authentication Type"
	// x-required
	// Sets the authentication type.
	//
	// Types that are valid to be assigned to AuthType:
	//	*Authorization_AuthTypeBearer
	AuthType isAuthorization_AuthType `protobuf_oneof:"auth_type"`
	// Credentials
	//
	// x-displayName: "Credentials"
	// x-required
	// Sets the credentials.
	Credentials *schema.SecretType `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (m *Authorization) Reset()      { *m = Authorization{} }
func (*Authorization) ProtoMessage() {}
func (*Authorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{8}
}
func (m *Authorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Authorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Authorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Authorization.Merge(m, src)
}
func (m *Authorization) XXX_Size() int {
	return m.Size()
}
func (m *Authorization) XXX_DiscardUnknown() {
	xxx_messageInfo_Authorization.DiscardUnknown(m)
}

var xxx_messageInfo_Authorization proto.InternalMessageInfo

type isAuthorization_AuthType interface {
	isAuthorization_AuthType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Authorization_AuthTypeBearer struct {
	AuthTypeBearer *schema.Empty `protobuf:"bytes,4,opt,name=auth_type_bearer,json=authTypeBearer,proto3,oneof" json:"auth_type_bearer,omitempty"`
}

func (*Authorization_AuthTypeBearer) isAuthorization_AuthType() {}

func (m *Authorization) GetAuthType() isAuthorization_AuthType {
	if m != nil {
		return m.AuthType
	}
	return nil
}

func (m *Authorization) GetAuthTypeBearer() *schema.Empty {
	if x, ok := m.GetAuthType().(*Authorization_AuthTypeBearer); ok {
		return x.AuthTypeBearer
	}
	return nil
}

func (m *Authorization) GetCredentials() *schema.SecretType {
	if m != nil {
		return m.Credentials
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Authorization) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Authorization_AuthTypeBearer)(nil),
	}
}

// HTTP Basic Authorization
//
// x-displayName: "Basic Authorization Credentials"
// Authorization parameters to access HTPP alert Receiver Endpoint.
type HttpBasicAuth struct {
	// username
	//
	// x-displayName: "User Name"
	// x-example: "Joe"
	// x-required
	// HTTP Basic Auth User Name
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// password
	//
	// x-displayName: "Password"
	// x-required
	// HTTP Basic Auth Password
	Password *schema.SecretType `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *HttpBasicAuth) Reset()      { *m = HttpBasicAuth{} }
func (*HttpBasicAuth) ProtoMessage() {}
func (*HttpBasicAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{9}
}
func (m *HttpBasicAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpBasicAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HttpBasicAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpBasicAuth.Merge(m, src)
}
func (m *HttpBasicAuth) XXX_Size() int {
	return m.Size()
}
func (m *HttpBasicAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpBasicAuth.DiscardUnknown(m)
}

var xxx_messageInfo_HttpBasicAuth proto.InternalMessageInfo

func (m *HttpBasicAuth) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *HttpBasicAuth) GetPassword() *schema.SecretType {
	if m != nil {
		return m.Password
	}
	return nil
}

// Specification for Alert Receiver
//
// x-displayName: "Specification"
// Shape of the Alert Receiver object
type GlobalSpecType struct {
	// Receiver
	//
	// x-displayName: "Receiver"
	// x-required
	// Receiver Config
	//
	// Types that are valid to be assigned to Receiver:
	//	*GlobalSpecType_Slack
	//	*GlobalSpecType_Pagerduty
	//	*GlobalSpecType_Opsgenie
	//	*GlobalSpecType_Email
	//	*GlobalSpecType_Sms
	//	*GlobalSpecType_Webhook
	Receiver isGlobalSpecType_Receiver `protobuf_oneof:"receiver"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{10}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_Receiver interface {
	isGlobalSpecType_Receiver()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_Slack struct {
	Slack *SlackConfig `protobuf:"bytes,1,opt,name=slack,proto3,oneof" json:"slack,omitempty"`
}
type GlobalSpecType_Pagerduty struct {
	Pagerduty *PagerDutyConfig `protobuf:"bytes,2,opt,name=pagerduty,proto3,oneof" json:"pagerduty,omitempty"`
}
type GlobalSpecType_Opsgenie struct {
	Opsgenie *OpsGenieConfig `protobuf:"bytes,3,opt,name=opsgenie,proto3,oneof" json:"opsgenie,omitempty"`
}
type GlobalSpecType_Email struct {
	Email *EmailConfig `protobuf:"bytes,4,opt,name=email,proto3,oneof" json:"email,omitempty"`
}
type GlobalSpecType_Sms struct {
	Sms *SMSConfig `protobuf:"bytes,5,opt,name=sms,proto3,oneof" json:"sms,omitempty"`
}
type GlobalSpecType_Webhook struct {
	Webhook *WebhookConfig `protobuf:"bytes,7,opt,name=webhook,proto3,oneof" json:"webhook,omitempty"`
}

func (*GlobalSpecType_Slack) isGlobalSpecType_Receiver()     {}
func (*GlobalSpecType_Pagerduty) isGlobalSpecType_Receiver() {}
func (*GlobalSpecType_Opsgenie) isGlobalSpecType_Receiver()  {}
func (*GlobalSpecType_Email) isGlobalSpecType_Receiver()     {}
func (*GlobalSpecType_Sms) isGlobalSpecType_Receiver()       {}
func (*GlobalSpecType_Webhook) isGlobalSpecType_Receiver()   {}

func (m *GlobalSpecType) GetReceiver() isGlobalSpecType_Receiver {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *GlobalSpecType) GetSlack() *SlackConfig {
	if x, ok := m.GetReceiver().(*GlobalSpecType_Slack); ok {
		return x.Slack
	}
	return nil
}

func (m *GlobalSpecType) GetPagerduty() *PagerDutyConfig {
	if x, ok := m.GetReceiver().(*GlobalSpecType_Pagerduty); ok {
		return x.Pagerduty
	}
	return nil
}

func (m *GlobalSpecType) GetOpsgenie() *OpsGenieConfig {
	if x, ok := m.GetReceiver().(*GlobalSpecType_Opsgenie); ok {
		return x.Opsgenie
	}
	return nil
}

func (m *GlobalSpecType) GetEmail() *EmailConfig {
	if x, ok := m.GetReceiver().(*GlobalSpecType_Email); ok {
		return x.Email
	}
	return nil
}

func (m *GlobalSpecType) GetSms() *SMSConfig {
	if x, ok := m.GetReceiver().(*GlobalSpecType_Sms); ok {
		return x.Sms
	}
	return nil
}

func (m *GlobalSpecType) GetWebhook() *WebhookConfig {
	if x, ok := m.GetReceiver().(*GlobalSpecType_Webhook); ok {
		return x.Webhook
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_Slack)(nil),
		(*GlobalSpecType_Pagerduty)(nil),
		(*GlobalSpecType_Opsgenie)(nil),
		(*GlobalSpecType_Email)(nil),
		(*GlobalSpecType_Sms)(nil),
		(*GlobalSpecType_Webhook)(nil),
	}
}

// Create Alert Receiver
//
// x-displayName: "Create Alert Receiver"
// Creates a new Alert Receiver object
type CreateSpecType struct {
	// Types that are valid to be assigned to Receiver:
	//	*CreateSpecType_Slack
	//	*CreateSpecType_Pagerduty
	//	*CreateSpecType_Opsgenie
	//	*CreateSpecType_Email
	//	*CreateSpecType_Sms
	//	*CreateSpecType_Webhook
	Receiver isCreateSpecType_Receiver `protobuf_oneof:"receiver"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{11}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_Receiver interface {
	isCreateSpecType_Receiver()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_Slack struct {
	Slack *SlackConfig `protobuf:"bytes,1,opt,name=slack,proto3,oneof" json:"slack,omitempty"`
}
type CreateSpecType_Pagerduty struct {
	Pagerduty *PagerDutyConfig `protobuf:"bytes,2,opt,name=pagerduty,proto3,oneof" json:"pagerduty,omitempty"`
}
type CreateSpecType_Opsgenie struct {
	Opsgenie *OpsGenieConfig `protobuf:"bytes,3,opt,name=opsgenie,proto3,oneof" json:"opsgenie,omitempty"`
}
type CreateSpecType_Email struct {
	Email *EmailConfig `protobuf:"bytes,4,opt,name=email,proto3,oneof" json:"email,omitempty"`
}
type CreateSpecType_Sms struct {
	Sms *SMSConfig `protobuf:"bytes,5,opt,name=sms,proto3,oneof" json:"sms,omitempty"`
}
type CreateSpecType_Webhook struct {
	Webhook *WebhookConfig `protobuf:"bytes,6,opt,name=webhook,proto3,oneof" json:"webhook,omitempty"`
}

func (*CreateSpecType_Slack) isCreateSpecType_Receiver()     {}
func (*CreateSpecType_Pagerduty) isCreateSpecType_Receiver() {}
func (*CreateSpecType_Opsgenie) isCreateSpecType_Receiver()  {}
func (*CreateSpecType_Email) isCreateSpecType_Receiver()     {}
func (*CreateSpecType_Sms) isCreateSpecType_Receiver()       {}
func (*CreateSpecType_Webhook) isCreateSpecType_Receiver()   {}

func (m *CreateSpecType) GetReceiver() isCreateSpecType_Receiver {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *CreateSpecType) GetSlack() *SlackConfig {
	if x, ok := m.GetReceiver().(*CreateSpecType_Slack); ok {
		return x.Slack
	}
	return nil
}

func (m *CreateSpecType) GetPagerduty() *PagerDutyConfig {
	if x, ok := m.GetReceiver().(*CreateSpecType_Pagerduty); ok {
		return x.Pagerduty
	}
	return nil
}

func (m *CreateSpecType) GetOpsgenie() *OpsGenieConfig {
	if x, ok := m.GetReceiver().(*CreateSpecType_Opsgenie); ok {
		return x.Opsgenie
	}
	return nil
}

func (m *CreateSpecType) GetEmail() *EmailConfig {
	if x, ok := m.GetReceiver().(*CreateSpecType_Email); ok {
		return x.Email
	}
	return nil
}

func (m *CreateSpecType) GetSms() *SMSConfig {
	if x, ok := m.GetReceiver().(*CreateSpecType_Sms); ok {
		return x.Sms
	}
	return nil
}

func (m *CreateSpecType) GetWebhook() *WebhookConfig {
	if x, ok := m.GetReceiver().(*CreateSpecType_Webhook); ok {
		return x.Webhook
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_Slack)(nil),
		(*CreateSpecType_Pagerduty)(nil),
		(*CreateSpecType_Opsgenie)(nil),
		(*CreateSpecType_Email)(nil),
		(*CreateSpecType_Sms)(nil),
		(*CreateSpecType_Webhook)(nil),
	}
}

// Replace Alert Receiver
//
// x-displayName: "Replace Alert Receiver"
// Replaces the content of an Alert Receiver object
type ReplaceSpecType struct {
	// Types that are valid to be assigned to Receiver:
	//	*ReplaceSpecType_Slack
	//	*ReplaceSpecType_Pagerduty
	//	*ReplaceSpecType_Opsgenie
	//	*ReplaceSpecType_Email
	//	*ReplaceSpecType_Sms
	//	*ReplaceSpecType_Webhook
	Receiver isReplaceSpecType_Receiver `protobuf_oneof:"receiver"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{12}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_Receiver interface {
	isReplaceSpecType_Receiver()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_Slack struct {
	Slack *SlackConfig `protobuf:"bytes,1,opt,name=slack,proto3,oneof" json:"slack,omitempty"`
}
type ReplaceSpecType_Pagerduty struct {
	Pagerduty *PagerDutyConfig `protobuf:"bytes,2,opt,name=pagerduty,proto3,oneof" json:"pagerduty,omitempty"`
}
type ReplaceSpecType_Opsgenie struct {
	Opsgenie *OpsGenieConfig `protobuf:"bytes,3,opt,name=opsgenie,proto3,oneof" json:"opsgenie,omitempty"`
}
type ReplaceSpecType_Email struct {
	Email *EmailConfig `protobuf:"bytes,4,opt,name=email,proto3,oneof" json:"email,omitempty"`
}
type ReplaceSpecType_Sms struct {
	Sms *SMSConfig `protobuf:"bytes,5,opt,name=sms,proto3,oneof" json:"sms,omitempty"`
}
type ReplaceSpecType_Webhook struct {
	Webhook *WebhookConfig `protobuf:"bytes,6,opt,name=webhook,proto3,oneof" json:"webhook,omitempty"`
}

func (*ReplaceSpecType_Slack) isReplaceSpecType_Receiver()     {}
func (*ReplaceSpecType_Pagerduty) isReplaceSpecType_Receiver() {}
func (*ReplaceSpecType_Opsgenie) isReplaceSpecType_Receiver()  {}
func (*ReplaceSpecType_Email) isReplaceSpecType_Receiver()     {}
func (*ReplaceSpecType_Sms) isReplaceSpecType_Receiver()       {}
func (*ReplaceSpecType_Webhook) isReplaceSpecType_Receiver()   {}

func (m *ReplaceSpecType) GetReceiver() isReplaceSpecType_Receiver {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *ReplaceSpecType) GetSlack() *SlackConfig {
	if x, ok := m.GetReceiver().(*ReplaceSpecType_Slack); ok {
		return x.Slack
	}
	return nil
}

func (m *ReplaceSpecType) GetPagerduty() *PagerDutyConfig {
	if x, ok := m.GetReceiver().(*ReplaceSpecType_Pagerduty); ok {
		return x.Pagerduty
	}
	return nil
}

func (m *ReplaceSpecType) GetOpsgenie() *OpsGenieConfig {
	if x, ok := m.GetReceiver().(*ReplaceSpecType_Opsgenie); ok {
		return x.Opsgenie
	}
	return nil
}

func (m *ReplaceSpecType) GetEmail() *EmailConfig {
	if x, ok := m.GetReceiver().(*ReplaceSpecType_Email); ok {
		return x.Email
	}
	return nil
}

func (m *ReplaceSpecType) GetSms() *SMSConfig {
	if x, ok := m.GetReceiver().(*ReplaceSpecType_Sms); ok {
		return x.Sms
	}
	return nil
}

func (m *ReplaceSpecType) GetWebhook() *WebhookConfig {
	if x, ok := m.GetReceiver().(*ReplaceSpecType_Webhook); ok {
		return x.Webhook
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_Slack)(nil),
		(*ReplaceSpecType_Pagerduty)(nil),
		(*ReplaceSpecType_Opsgenie)(nil),
		(*ReplaceSpecType_Email)(nil),
		(*ReplaceSpecType_Sms)(nil),
		(*ReplaceSpecType_Webhook)(nil),
	}
}

// Get Alert Receiver
//
// x-displayName: "Get Alert Receiver"
// Get the Alert Receiver object
type GetSpecType struct {
	// Types that are valid to be assigned to Receiver:
	//	*GetSpecType_Slack
	//	*GetSpecType_Pagerduty
	//	*GetSpecType_Opsgenie
	//	*GetSpecType_Email
	//	*GetSpecType_Sms
	//	*GetSpecType_Webhook
	Receiver isGetSpecType_Receiver `protobuf_oneof:"receiver"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{13}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_Receiver interface {
	isGetSpecType_Receiver()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_Slack struct {
	Slack *SlackConfig `protobuf:"bytes,1,opt,name=slack,proto3,oneof" json:"slack,omitempty"`
}
type GetSpecType_Pagerduty struct {
	Pagerduty *PagerDutyConfig `protobuf:"bytes,2,opt,name=pagerduty,proto3,oneof" json:"pagerduty,omitempty"`
}
type GetSpecType_Opsgenie struct {
	Opsgenie *OpsGenieConfig `protobuf:"bytes,3,opt,name=opsgenie,proto3,oneof" json:"opsgenie,omitempty"`
}
type GetSpecType_Email struct {
	Email *EmailConfig `protobuf:"bytes,4,opt,name=email,proto3,oneof" json:"email,omitempty"`
}
type GetSpecType_Sms struct {
	Sms *SMSConfig `protobuf:"bytes,5,opt,name=sms,proto3,oneof" json:"sms,omitempty"`
}
type GetSpecType_Webhook struct {
	Webhook *WebhookConfig `protobuf:"bytes,6,opt,name=webhook,proto3,oneof" json:"webhook,omitempty"`
}

func (*GetSpecType_Slack) isGetSpecType_Receiver()     {}
func (*GetSpecType_Pagerduty) isGetSpecType_Receiver() {}
func (*GetSpecType_Opsgenie) isGetSpecType_Receiver()  {}
func (*GetSpecType_Email) isGetSpecType_Receiver()     {}
func (*GetSpecType_Sms) isGetSpecType_Receiver()       {}
func (*GetSpecType_Webhook) isGetSpecType_Receiver()   {}

func (m *GetSpecType) GetReceiver() isGetSpecType_Receiver {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *GetSpecType) GetSlack() *SlackConfig {
	if x, ok := m.GetReceiver().(*GetSpecType_Slack); ok {
		return x.Slack
	}
	return nil
}

func (m *GetSpecType) GetPagerduty() *PagerDutyConfig {
	if x, ok := m.GetReceiver().(*GetSpecType_Pagerduty); ok {
		return x.Pagerduty
	}
	return nil
}

func (m *GetSpecType) GetOpsgenie() *OpsGenieConfig {
	if x, ok := m.GetReceiver().(*GetSpecType_Opsgenie); ok {
		return x.Opsgenie
	}
	return nil
}

func (m *GetSpecType) GetEmail() *EmailConfig {
	if x, ok := m.GetReceiver().(*GetSpecType_Email); ok {
		return x.Email
	}
	return nil
}

func (m *GetSpecType) GetSms() *SMSConfig {
	if x, ok := m.GetReceiver().(*GetSpecType_Sms); ok {
		return x.Sms
	}
	return nil
}

func (m *GetSpecType) GetWebhook() *WebhookConfig {
	if x, ok := m.GetReceiver().(*GetSpecType_Webhook); ok {
		return x.Webhook
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_Slack)(nil),
		(*GetSpecType_Pagerduty)(nil),
		(*GetSpecType_Opsgenie)(nil),
		(*GetSpecType_Email)(nil),
		(*GetSpecType_Sms)(nil),
		(*GetSpecType_Webhook)(nil),
	}
}

func init() {
	proto.RegisterType((*SlackConfig)(nil), "ves.io.schema.alert_receiver.SlackConfig")
	proto.RegisterType((*PagerDutyConfig)(nil), "ves.io.schema.alert_receiver.PagerDutyConfig")
	proto.RegisterType((*OpsGenieConfig)(nil), "ves.io.schema.alert_receiver.OpsGenieConfig")
	proto.RegisterType((*EmailConfig)(nil), "ves.io.schema.alert_receiver.EmailConfig")
	proto.RegisterType((*SMSConfig)(nil), "ves.io.schema.alert_receiver.SMSConfig")
	proto.RegisterType((*WebhookConfig)(nil), "ves.io.schema.alert_receiver.WebhookConfig")
	proto.RegisterType((*HTTPConfig)(nil), "ves.io.schema.alert_receiver.HTTPConfig")
	proto.RegisterType((*TLSConfig)(nil), "ves.io.schema.alert_receiver.TLSConfig")
	proto.RegisterType((*Authorization)(nil), "ves.io.schema.alert_receiver.Authorization")
	proto.RegisterType((*HttpBasicAuth)(nil), "ves.io.schema.alert_receiver.HttpBasicAuth")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.alert_receiver.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.alert_receiver.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.alert_receiver.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.alert_receiver.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/alert_receiver/types.proto", fileDescriptor_ca1466d8d1f67094)
}

var fileDescriptor_ca1466d8d1f67094 = []byte{
	// 1259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xcf, 0x6f, 0xdb, 0xc6,
	0x12, 0xe6, 0x8a, 0xb2, 0x24, 0x0e, 0x23, 0x5b, 0x21, 0x82, 0x07, 0xc5, 0x31, 0x18, 0x3d, 0xe1,
	0x01, 0x4f, 0xc9, 0xd3, 0x8f, 0x58, 0x2f, 0x49, 0xd3, 0x04, 0x30, 0x62, 0xa5, 0x69, 0x54, 0x37,
	0x49, 0x03, 0xda, 0x48, 0x81, 0x16, 0x2d, 0xbb, 0xa2, 0xd6, 0x12, 0x11, 0x92, 0xcb, 0x2e, 0x57,
	0xb2, 0x95, 0xa2, 0x45, 0xd0, 0x73, 0x0f, 0xf9, 0x1b, 0x7a, 0x2a, 0xfa, 0x07, 0xb4, 0x40, 0x95,
	0x83, 0x8f, 0x45, 0x4f, 0x3e, 0xe6, 0xd8, 0x28, 0x97, 0xf6, 0x16, 0xb4, 0x39, 0x04, 0x3d, 0x15,
	0x4b, 0x52, 0x8a, 0xe4, 0xb6, 0xb6, 0x03, 0x14, 0xbd, 0x24, 0x37, 0xee, 0xee, 0xf7, 0xcd, 0x7c,
	0xb3, 0x33, 0x3b, 0x03, 0x42, 0xa9, 0x4f, 0x82, 0xaa, 0x4d, 0x6b, 0x81, 0xd5, 0x25, 0x2e, 0xae,
	0x61, 0x87, 0x30, 0x6e, 0x32, 0x62, 0x11, 0xbb, 0x4f, 0x58, 0x8d, 0x0f, 0x7c, 0x12, 0x54, 0x7d,
	0x46, 0x39, 0xd5, 0x96, 0x22, 0x64, 0x35, 0x42, 0x56, 0x67, 0x91, 0x8b, 0x95, 0x8e, 0xcd, 0xbb,
	0xbd, 0x56, 0xd5, 0xa2, 0x6e, 0xad, 0x43, 0x3b, 0xb4, 0x16, 0x92, 0x5a, 0xbd, 0xcd, 0x70, 0x15,
	0x2e, 0xc2, 0xaf, 0xc8, 0xd8, 0xe2, 0x89, 0x59, 0xb7, 0xd4, 0xe7, 0x36, 0xf5, 0x62, 0x4f, 0x8b,
	0xc7, 0x67, 0x0f, 0xa7, 0x44, 0x2c, 0x2e, 0xcd, 0x1e, 0xf5, 0xb1, 0x63, 0xb7, 0x31, 0x27, 0xf1,
	0x69, 0x61, 0xcf, 0xa9, 0x4d, 0xb6, 0xcc, 0x19, 0xd3, 0xc5, 0x2d, 0x50, 0xd7, 0x1d, 0x6c, 0xdd,
	0xb9, 0x42, 0xbd, 0x4d, 0xbb, 0xa3, 0x2d, 0x83, 0xdc, 0x63, 0x4e, 0x1e, 0x15, 0x50, 0x49, 0xad,
	0x1f, 0xaf, 0xce, 0x46, 0xb8, 0x4e, 0x2c, 0x46, 0xf8, 0xc6, 0xc0, 0x27, 0x8d, 0xe4, 0xee, 0x10,
	0x21, 0x43, 0x60, 0xb5, 0x73, 0x90, 0xb6, 0xba, 0xd8, 0xf3, 0x88, 0x93, 0x4f, 0x14, 0x50, 0x49,
	0x69, 0x9c, 0xf8, 0xee, 0xe7, 0x1d, 0xf9, 0x5f, 0xec, 0x58, 0x5d, 0xfb, 0xf0, 0x7d, 0x5c, 0xb9,
	0x7b, 0xa6, 0xf2, 0x7a, 0xc5, 0xfc, 0xe0, 0x93, 0xe5, 0xf2, 0x85, 0x33, 0x9f, 0xfe, 0xc7, 0x18,
	0x63, 0x8b, 0x1f, 0xc3, 0xc2, 0x2d, 0xdc, 0x21, 0xec, 0x8d, 0x1e, 0x1f, 0xc4, 0xce, 0x2f, 0x83,
	0xca, 0x68, 0x8f, 0xdb, 0x5e, 0xc7, 0xbc, 0x43, 0x06, 0x87, 0x15, 0x01, 0x31, 0xe7, 0x6d, 0x32,
	0xd0, 0x96, 0x22, 0xf9, 0x91, 0x0e, 0x10, 0x3a, 0xe6, 0x98, 0x7c, 0x3f, 0x56, 0x5a, 0xec, 0xc2,
	0xfc, 0x3b, 0x7e, 0x70, 0x8d, 0x78, 0x36, 0x89, 0x3d, 0x5e, 0x80, 0x34, 0xf6, 0xed, 0x17, 0xf1,
	0x96, 0xc2, 0xbe, 0x7d, 0xb0, 0xa7, 0x2a, 0xa8, 0x57, 0x5d, 0x6c, 0x3b, 0xb1, 0x9b, 0x93, 0x30,
	0x47, 0xc4, 0x32, 0x74, 0xa2, 0x34, 0x14, 0x01, 0x4f, 0xb2, 0xc4, 0x47, 0xc8, 0x88, 0xf6, 0x8b,
	0x2b, 0xa0, 0xac, 0xdf, 0x58, 0x9f, 0xe4, 0x60, 0xde, 0xa2, 0x1e, 0xc7, 0x16, 0x37, 0xbd, 0x9e,
	0xdb, 0x22, 0x2c, 0xa6, 0x8d, 0xbd, 0xec, 0x24, 0x90, 0x91, 0x8d, 0x11, 0x37, 0x43, 0x40, 0xf1,
	0x33, 0xc8, 0xbe, 0x4b, 0x5a, 0x5d, 0x4a, 0xc7, 0x79, 0x5c, 0x7a, 0x9e, 0xc7, 0x3f, 0xca, 0xd3,
	0xde, 0x02, 0xb5, 0xcb, 0xb9, 0x6f, 0x5a, 0x21, 0x38, 0x2f, 0x87, 0xa1, 0x97, 0xaa, 0xfb, 0xd5,
	0x73, 0xb5, 0xb9, 0xb1, 0x71, 0x2b, 0x32, 0x6e, 0x80, 0x20, 0x47, 0xdf, 0x6b, 0xc9, 0x4c, 0x22,
	0x27, 0x17, 0xbf, 0x95, 0x01, 0x9e, 0x03, 0xb4, 0x55, 0xc8, 0x79, 0xd4, 0xc4, 0x3d, 0xde, 0xa5,
	0xcc, 0xbe, 0x8b, 0x45, 0xbd, 0xe5, 0xd3, 0xa1, 0x93, 0x63, 0x7b, 0x9c, 0x5c, 0x75, 0x7d, 0x3e,
	0x68, 0x4a, 0xc6, 0x82, 0x47, 0x57, 0xa7, 0xe1, 0xda, 0x75, 0x80, 0x16, 0x0e, 0x6c, 0x2b, 0xb4,
	0x12, 0x5e, 0xb3, 0x5a, 0xff, 0xdf, 0x01, 0x0a, 0x39, 0xf7, 0x1b, 0x82, 0x23, 0x2c, 0x35, 0x25,
	0x43, 0x69, 0x8d, 0x17, 0xda, 0x4d, 0x50, 0x85, 0x9d, 0x71, 0xc0, 0x99, 0xc3, 0x98, 0x9b, 0xd1,
	0xd3, 0x94, 0x0c, 0x10, 0x16, 0xe2, 0x00, 0xff, 0x0d, 0x47, 0x88, 0x87, 0x5b, 0x0e, 0x31, 0xc5,
	0x55, 0xd4, 0xf3, 0xc9, 0x02, 0x2a, 0x65, 0x0c, 0x35, 0xda, 0x13, 0x3a, 0xea, 0xda, 0x29, 0xc8,
	0x6d, 0x52, 0xc7, 0xa1, 0x5b, 0x26, 0x23, 0x6d, 0x9b, 0x11, 0x8b, 0x07, 0xf9, 0xb9, 0x10, 0xb6,
	0x10, 0xed, 0x1b, 0xe3, 0x6d, 0xed, 0x4d, 0x00, 0xee, 0x04, 0x63, 0x71, 0xa9, 0x50, 0xdc, 0x7f,
	0xf7, 0x17, 0xb7, 0x71, 0x3d, 0xae, 0x16, 0x43, 0xe1, 0x4e, 0x10, 0x7d, 0x5e, 0x84, 0x5f, 0x56,
	0xd2, 0xcb, 0xe5, 0xf3, 0xe5, 0xb3, 0xe5, 0x73, 0x8d, 0xc2, 0x38, 0xe2, 0x2e, 0xb5, 0x2d, 0xa2,
	0x1d, 0xdd, 0x19, 0xa2, 0xb4, 0x28, 0xe0, 0xd1, 0x10, 0xcd, 0xbd, 0x56, 0xae, 0x97, 0x2f, 0xac,
	0x25, 0x33, 0x28, 0x97, 0x28, 0x3e, 0x4d, 0x80, 0x32, 0x31, 0xa6, 0xad, 0x42, 0xda, 0xc2, 0xa6,
	0x45, 0x18, 0x8f, 0x4b, 0xa7, 0xf4, 0x6c, 0x88, 0x92, 0x5f, 0x3e, 0x40, 0xaa, 0x4f, 0xdc, 0x72,
	0xa1, 0x85, 0x03, 0x72, 0xfe, 0xac, 0xa8, 0xa6, 0x14, 0x4b, 0x96, 0xee, 0xdd, 0xcb, 0x4c, 0x15,
	0x56, 0xca, 0xc2, 0x57, 0x08, 0xe3, 0xa2, 0xb6, 0x2c, 0xc7, 0x26, 0x1e, 0x8f, 0xcc, 0x24, 0x5e,
	0xd0, 0x0c, 0x44, 0xe4, 0xd0, 0xd4, 0x0a, 0xc4, 0xab, 0xf0, 0x81, 0xca, 0x87, 0x7b, 0xa0, 0x4a,
	0x44, 0x11, 0x6f, 0xf4, 0x24, 0xa8, 0x01, 0x61, 0x7d, 0xc2, 0x4c, 0x0f, 0xbb, 0x24, 0x4c, 0x92,
	0x62, 0x40, 0xb4, 0x75, 0x13, 0xbb, 0x44, 0xbb, 0x04, 0xaa, 0x6b, 0x7b, 0x66, 0x9f, 0xb0, 0x40,
	0x94, 0xa8, 0x48, 0xcf, 0x7c, 0x7d, 0x71, 0x8f, 0x87, 0x0d, 0x27, 0xb8, 0x25, 0x5a, 0xa5, 0x45,
	0x1d, 0x03, 0x5c, 0xdb, 0xbb, 0x1d, 0xa1, 0x43, 0x32, 0xde, 0x9e, 0x90, 0x53, 0x87, 0x20, 0xe3,
	0xed, 0x98, 0x5c, 0xfc, 0x06, 0x41, 0x76, 0xb6, 0xe0, 0x2f, 0x43, 0x2e, 0x4c, 0x98, 0x68, 0xee,
	0x66, 0x8b, 0x60, 0x46, 0x58, 0xa8, 0xf8, 0xaf, 0xdf, 0xcc, 0xbc, 0xc0, 0x87, 0x91, 0x87, 0x68,
	0x6d, 0x15, 0x54, 0x8b, 0x91, 0x36, 0xf1, 0xb8, 0x8d, 0x9d, 0x20, 0x7e, 0x33, 0x07, 0xde, 0xd7,
	0x34, 0xa7, 0xb1, 0x08, 0xca, 0x44, 0x84, 0x96, 0xdd, 0x19, 0x22, 0x81, 0x91, 0x47, 0x43, 0x84,
	0xce, 0xae, 0x25, 0x33, 0x72, 0x2e, 0x59, 0xdc, 0x86, 0xec, 0xcc, 0x3b, 0xd3, 0x4e, 0x83, 0xd2,
	0x0b, 0xc6, 0x57, 0x1c, 0x15, 0x4d, 0xf6, 0xd9, 0x10, 0x49, 0x71, 0x8f, 0xcb, 0x5f, 0x36, 0x32,
	0xe2, 0x3c, 0xbe, 0xef, 0x8c, 0x8f, 0x83, 0x60, 0x8b, 0xb2, 0xf6, 0x61, 0xe5, 0x4d, 0x08, 0xc5,
	0x91, 0x0c, 0xf3, 0xd7, 0x1c, 0xda, 0xc2, 0xce, 0xba, 0x4f, 0x2c, 0x01, 0xd1, 0x56, 0x61, 0x2e,
	0x10, 0xc3, 0x2b, 0x6e, 0xde, 0xa7, 0xf6, 0x7f, 0x33, 0x53, 0x73, 0xae, 0x29, 0x19, 0x11, 0x53,
	0xbb, 0x01, 0x8a, 0x2f, 0xc6, 0x50, 0xbb, 0xc7, 0x07, 0xb1, 0xa6, 0xca, 0xfe, 0x66, 0xf6, 0x4c,
	0x2d, 0xd1, 0x68, 0x26, 0x16, 0xb4, 0x35, 0xc8, 0x50, 0x3f, 0xe8, 0x88, 0x11, 0x13, 0x17, 0x6c,
	0x79, 0x7f, 0x6b, 0xb3, 0x03, 0xa9, 0x29, 0x19, 0x13, 0xbe, 0x88, 0x2e, 0x9a, 0x1a, 0xc9, 0xc3,
	0x44, 0x37, 0x35, 0x6f, 0x44, 0x74, 0x21, 0x53, 0xbb, 0x04, 0x72, 0xe0, 0x46, 0x7d, 0xe7, 0xc0,
	0x96, 0x32, 0x19, 0x40, 0x4d, 0xc9, 0x10, 0x2c, 0xed, 0x36, 0xa4, 0xb7, 0xa2, 0xa1, 0x12, 0x37,
	0xef, 0x03, 0x1a, 0xe6, 0xcc, 0x04, 0x6a, 0x64, 0xbf, 0x7e, 0x80, 0x94, 0x02, 0x3a, 0x3d, 0xd7,
	0x26, 0x2e, 0x5d, 0x6e, 0x4a, 0xc6, 0xd8, 0x58, 0xe3, 0x18, 0x64, 0xc6, 0x1c, 0x2d, 0xb3, 0x33,
	0x44, 0x68, 0x77, 0x88, 0x52, 0x6b, 0xc9, 0x4c, 0x2a, 0x97, 0x2e, 0xfe, 0x2a, 0xc3, 0xfc, 0x15,
	0x46, 0x30, 0x27, 0xaf, 0x92, 0xfc, 0x4f, 0x27, 0x39, 0xf5, 0x37, 0x26, 0xf9, 0xe2, 0xd1, 0x1f,
	0x56, 0xf6, 0xbc, 0xd6, 0x46, 0x7e, 0x2a, 0xef, 0x47, 0x3e, 0xff, 0x0d, 0x4d, 0x56, 0xc5, 0xa7,
	0x32, 0x2c, 0x18, 0xc4, 0x77, 0xb0, 0xf5, 0x2a, 0xed, 0x2f, 0x51, 0xda, 0x9f, 0xc8, 0xa0, 0x5e,
	0x23, 0xfc, 0x55, 0xca, 0x5f, 0x9a, 0x94, 0x37, 0xbe, 0x40, 0xbb, 0x8f, 0x74, 0xe9, 0xe1, 0x23,
	0x5d, 0x7a, 0xf2, 0x48, 0x47, 0xf7, 0x46, 0x3a, 0xfa, 0x6a, 0xa4, 0xa3, 0xef, 0x47, 0x3a, 0xda,
	0x1d, 0xe9, 0xe8, 0xe1, 0x48, 0x47, 0x3f, 0x8e, 0x74, 0xf4, 0xd3, 0x48, 0x97, 0x9e, 0x8c, 0x74,
	0x74, 0xff, 0xb1, 0x2e, 0xed, 0x3e, 0xd6, 0xa5, 0x87, 0x8f, 0x75, 0xe9, 0x3d, 0xa3, 0x43, 0xfd,
	0x3b, 0x9d, 0x6a, 0x9f, 0x3a, 0x9c, 0x30, 0x86, 0xab, 0xbd, 0xa0, 0x16, 0x7e, 0x6c, 0x52, 0xe6,
	0x56, 0x7c, 0x46, 0xfb, 0x76, 0x9b, 0xb0, 0xca, 0xf8, 0xb8, 0xe6, 0xb7, 0x3a, 0xb4, 0x46, 0xb6,
	0x79, 0xfc, 0xeb, 0xfb, 0xa7, 0xbf, 0xf3, 0xad, 0x54, 0xf8, 0x13, 0xfc, 0xff, 0xdf, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x77, 0x89, 0x70, 0xad, 0xf5, 0x0f, 0x00, 0x00,
}

func (this *SlackConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SlackConfig)
	if !ok {
		that2, ok := that.(SlackConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Url.Equal(that1.Url) {
		return false
	}
	if this.Channel != that1.Channel {
		return false
	}
	return true
}
func (this *PagerDutyConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PagerDutyConfig)
	if !ok {
		that2, ok := that.(PagerDutyConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoutingKey.Equal(that1.RoutingKey) {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *OpsGenieConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpsGenieConfig)
	if !ok {
		that2, ok := that.(OpsGenieConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiKey.Equal(that1.ApiKey) {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *EmailConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EmailConfig)
	if !ok {
		that2, ok := that.(EmailConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	return true
}
func (this *SMSConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SMSConfig)
	if !ok {
		that2, ok := that.(SMSConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ContactNumber != that1.ContactNumber {
		return false
	}
	return true
}
func (this *WebhookConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebhookConfig)
	if !ok {
		that2, ok := that.(WebhookConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if !this.HttpConfig.Equal(that1.HttpConfig) {
		return false
	}
	return true
}
func (this *HTTPConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPConfig)
	if !ok {
		that2, ok := that.(HTTPConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AuthChoice == nil {
		if this.AuthChoice != nil {
			return false
		}
	} else if this.AuthChoice == nil {
		return false
	} else if !this.AuthChoice.Equal(that1.AuthChoice) {
		return false
	}
	if this.EnableHttp2 != that1.EnableHttp2 {
		return false
	}
	if this.FollowRedirects != that1.FollowRedirects {
		return false
	}
	if !this.TlsConfig.Equal(that1.TlsConfig) {
		return false
	}
	return true
}
func (this *HTTPConfig_NoAuthorization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPConfig_NoAuthorization)
	if !ok {
		that2, ok := that.(HTTPConfig_NoAuthorization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoAuthorization.Equal(that1.NoAuthorization) {
		return false
	}
	return true
}
func (this *HTTPConfig_BasicAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPConfig_BasicAuth)
	if !ok {
		that2, ok := that.(HTTPConfig_BasicAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BasicAuth.Equal(that1.BasicAuth) {
		return false
	}
	return true
}
func (this *HTTPConfig_AuthConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPConfig_AuthConfig)
	if !ok {
		that2, ok := that.(HTTPConfig_AuthConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AuthConfig.Equal(that1.AuthConfig) {
		return false
	}
	return true
}
func (this *TLSConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TLSConfig)
	if !ok {
		that2, ok := that.(TLSConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CaCert != that1.CaCert {
		return false
	}
	if this.ClientCert != that1.ClientCert {
		return false
	}
	if !this.ClientKey.Equal(that1.ClientKey) {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	if this.MinVersion != that1.MinVersion {
		return false
	}
	if this.MaxVersion != that1.MaxVersion {
		return false
	}
	return true
}
func (this *Authorization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Authorization)
	if !ok {
		that2, ok := that.(Authorization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AuthType == nil {
		if this.AuthType != nil {
			return false
		}
	} else if this.AuthType == nil {
		return false
	} else if !this.AuthType.Equal(that1.AuthType) {
		return false
	}
	if !this.Credentials.Equal(that1.Credentials) {
		return false
	}
	return true
}
func (this *Authorization_AuthTypeBearer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Authorization_AuthTypeBearer)
	if !ok {
		that2, ok := that.(Authorization_AuthTypeBearer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AuthTypeBearer.Equal(that1.AuthTypeBearer) {
		return false
	}
	return true
}
func (this *HttpBasicAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpBasicAuth)
	if !ok {
		that2, ok := that.(HttpBasicAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserName != that1.UserName {
		return false
	}
	if !this.Password.Equal(that1.Password) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Receiver == nil {
		if this.Receiver != nil {
			return false
		}
	} else if this.Receiver == nil {
		return false
	} else if !this.Receiver.Equal(that1.Receiver) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Slack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Slack)
	if !ok {
		that2, ok := that.(GlobalSpecType_Slack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Slack.Equal(that1.Slack) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Pagerduty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Pagerduty)
	if !ok {
		that2, ok := that.(GlobalSpecType_Pagerduty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pagerduty.Equal(that1.Pagerduty) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Opsgenie) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Opsgenie)
	if !ok {
		that2, ok := that.(GlobalSpecType_Opsgenie)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Opsgenie.Equal(that1.Opsgenie) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Email) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Email)
	if !ok {
		that2, ok := that.(GlobalSpecType_Email)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Email.Equal(that1.Email) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Sms) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Sms)
	if !ok {
		that2, ok := that.(GlobalSpecType_Sms)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sms.Equal(that1.Sms) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Webhook) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Webhook)
	if !ok {
		that2, ok := that.(GlobalSpecType_Webhook)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Webhook.Equal(that1.Webhook) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Receiver == nil {
		if this.Receiver != nil {
			return false
		}
	} else if this.Receiver == nil {
		return false
	} else if !this.Receiver.Equal(that1.Receiver) {
		return false
	}
	return true
}
func (this *CreateSpecType_Slack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Slack)
	if !ok {
		that2, ok := that.(CreateSpecType_Slack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Slack.Equal(that1.Slack) {
		return false
	}
	return true
}
func (this *CreateSpecType_Pagerduty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Pagerduty)
	if !ok {
		that2, ok := that.(CreateSpecType_Pagerduty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pagerduty.Equal(that1.Pagerduty) {
		return false
	}
	return true
}
func (this *CreateSpecType_Opsgenie) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Opsgenie)
	if !ok {
		that2, ok := that.(CreateSpecType_Opsgenie)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Opsgenie.Equal(that1.Opsgenie) {
		return false
	}
	return true
}
func (this *CreateSpecType_Email) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Email)
	if !ok {
		that2, ok := that.(CreateSpecType_Email)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Email.Equal(that1.Email) {
		return false
	}
	return true
}
func (this *CreateSpecType_Sms) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Sms)
	if !ok {
		that2, ok := that.(CreateSpecType_Sms)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sms.Equal(that1.Sms) {
		return false
	}
	return true
}
func (this *CreateSpecType_Webhook) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Webhook)
	if !ok {
		that2, ok := that.(CreateSpecType_Webhook)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Webhook.Equal(that1.Webhook) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Receiver == nil {
		if this.Receiver != nil {
			return false
		}
	} else if this.Receiver == nil {
		return false
	} else if !this.Receiver.Equal(that1.Receiver) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Slack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Slack)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Slack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Slack.Equal(that1.Slack) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Pagerduty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Pagerduty)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Pagerduty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pagerduty.Equal(that1.Pagerduty) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Opsgenie) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Opsgenie)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Opsgenie)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Opsgenie.Equal(that1.Opsgenie) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Email) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Email)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Email)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Email.Equal(that1.Email) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Sms) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Sms)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Sms)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sms.Equal(that1.Sms) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Webhook) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Webhook)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Webhook)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Webhook.Equal(that1.Webhook) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Receiver == nil {
		if this.Receiver != nil {
			return false
		}
	} else if this.Receiver == nil {
		return false
	} else if !this.Receiver.Equal(that1.Receiver) {
		return false
	}
	return true
}
func (this *GetSpecType_Slack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Slack)
	if !ok {
		that2, ok := that.(GetSpecType_Slack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Slack.Equal(that1.Slack) {
		return false
	}
	return true
}
func (this *GetSpecType_Pagerduty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Pagerduty)
	if !ok {
		that2, ok := that.(GetSpecType_Pagerduty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pagerduty.Equal(that1.Pagerduty) {
		return false
	}
	return true
}
func (this *GetSpecType_Opsgenie) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Opsgenie)
	if !ok {
		that2, ok := that.(GetSpecType_Opsgenie)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Opsgenie.Equal(that1.Opsgenie) {
		return false
	}
	return true
}
func (this *GetSpecType_Email) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Email)
	if !ok {
		that2, ok := that.(GetSpecType_Email)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Email.Equal(that1.Email) {
		return false
	}
	return true
}
func (this *GetSpecType_Sms) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Sms)
	if !ok {
		that2, ok := that.(GetSpecType_Sms)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sms.Equal(that1.Sms) {
		return false
	}
	return true
}
func (this *GetSpecType_Webhook) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Webhook)
	if !ok {
		that2, ok := that.(GetSpecType_Webhook)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Webhook.Equal(that1.Webhook) {
		return false
	}
	return true
}
func (this *SlackConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&alert_receiver.SlackConfig{")
	if this.Url != nil {
		s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	}
	s = append(s, "Channel: "+fmt.Sprintf("%#v", this.Channel)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PagerDutyConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&alert_receiver.PagerDutyConfig{")
	if this.RoutingKey != nil {
		s = append(s, "RoutingKey: "+fmt.Sprintf("%#v", this.RoutingKey)+",\n")
	}
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpsGenieConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&alert_receiver.OpsGenieConfig{")
	if this.ApiKey != nil {
		s = append(s, "ApiKey: "+fmt.Sprintf("%#v", this.ApiKey)+",\n")
	}
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EmailConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&alert_receiver.EmailConfig{")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SMSConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&alert_receiver.SMSConfig{")
	s = append(s, "ContactNumber: "+fmt.Sprintf("%#v", this.ContactNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WebhookConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&alert_receiver.WebhookConfig{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	if this.HttpConfig != nil {
		s = append(s, "HttpConfig: "+fmt.Sprintf("%#v", this.HttpConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HTTPConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&alert_receiver.HTTPConfig{")
	if this.AuthChoice != nil {
		s = append(s, "AuthChoice: "+fmt.Sprintf("%#v", this.AuthChoice)+",\n")
	}
	s = append(s, "EnableHttp2: "+fmt.Sprintf("%#v", this.EnableHttp2)+",\n")
	s = append(s, "FollowRedirects: "+fmt.Sprintf("%#v", this.FollowRedirects)+",\n")
	if this.TlsConfig != nil {
		s = append(s, "TlsConfig: "+fmt.Sprintf("%#v", this.TlsConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HTTPConfig_NoAuthorization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.HTTPConfig_NoAuthorization{` +
		`NoAuthorization:` + fmt.Sprintf("%#v", this.NoAuthorization) + `}`}, ", ")
	return s
}
func (this *HTTPConfig_BasicAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.HTTPConfig_BasicAuth{` +
		`BasicAuth:` + fmt.Sprintf("%#v", this.BasicAuth) + `}`}, ", ")
	return s
}
func (this *HTTPConfig_AuthConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.HTTPConfig_AuthConfig{` +
		`AuthConfig:` + fmt.Sprintf("%#v", this.AuthConfig) + `}`}, ", ")
	return s
}
func (this *TLSConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&alert_receiver.TLSConfig{")
	s = append(s, "CaCert: "+fmt.Sprintf("%#v", this.CaCert)+",\n")
	s = append(s, "ClientCert: "+fmt.Sprintf("%#v", this.ClientCert)+",\n")
	if this.ClientKey != nil {
		s = append(s, "ClientKey: "+fmt.Sprintf("%#v", this.ClientKey)+",\n")
	}
	s = append(s, "ServerName: "+fmt.Sprintf("%#v", this.ServerName)+",\n")
	s = append(s, "MinVersion: "+fmt.Sprintf("%#v", this.MinVersion)+",\n")
	s = append(s, "MaxVersion: "+fmt.Sprintf("%#v", this.MaxVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Authorization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&alert_receiver.Authorization{")
	if this.AuthType != nil {
		s = append(s, "AuthType: "+fmt.Sprintf("%#v", this.AuthType)+",\n")
	}
	if this.Credentials != nil {
		s = append(s, "Credentials: "+fmt.Sprintf("%#v", this.Credentials)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Authorization_AuthTypeBearer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.Authorization_AuthTypeBearer{` +
		`AuthTypeBearer:` + fmt.Sprintf("%#v", this.AuthTypeBearer) + `}`}, ", ")
	return s
}
func (this *HttpBasicAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&alert_receiver.HttpBasicAuth{")
	s = append(s, "UserName: "+fmt.Sprintf("%#v", this.UserName)+",\n")
	if this.Password != nil {
		s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&alert_receiver.GlobalSpecType{")
	if this.Receiver != nil {
		s = append(s, "Receiver: "+fmt.Sprintf("%#v", this.Receiver)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_Slack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GlobalSpecType_Slack{` +
		`Slack:` + fmt.Sprintf("%#v", this.Slack) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Pagerduty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GlobalSpecType_Pagerduty{` +
		`Pagerduty:` + fmt.Sprintf("%#v", this.Pagerduty) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Opsgenie) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GlobalSpecType_Opsgenie{` +
		`Opsgenie:` + fmt.Sprintf("%#v", this.Opsgenie) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Email) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GlobalSpecType_Email{` +
		`Email:` + fmt.Sprintf("%#v", this.Email) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Sms) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GlobalSpecType_Sms{` +
		`Sms:` + fmt.Sprintf("%#v", this.Sms) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Webhook) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GlobalSpecType_Webhook{` +
		`Webhook:` + fmt.Sprintf("%#v", this.Webhook) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&alert_receiver.CreateSpecType{")
	if this.Receiver != nil {
		s = append(s, "Receiver: "+fmt.Sprintf("%#v", this.Receiver)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_Slack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.CreateSpecType_Slack{` +
		`Slack:` + fmt.Sprintf("%#v", this.Slack) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Pagerduty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.CreateSpecType_Pagerduty{` +
		`Pagerduty:` + fmt.Sprintf("%#v", this.Pagerduty) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Opsgenie) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.CreateSpecType_Opsgenie{` +
		`Opsgenie:` + fmt.Sprintf("%#v", this.Opsgenie) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Email) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.CreateSpecType_Email{` +
		`Email:` + fmt.Sprintf("%#v", this.Email) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Sms) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.CreateSpecType_Sms{` +
		`Sms:` + fmt.Sprintf("%#v", this.Sms) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Webhook) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.CreateSpecType_Webhook{` +
		`Webhook:` + fmt.Sprintf("%#v", this.Webhook) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&alert_receiver.ReplaceSpecType{")
	if this.Receiver != nil {
		s = append(s, "Receiver: "+fmt.Sprintf("%#v", this.Receiver)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_Slack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.ReplaceSpecType_Slack{` +
		`Slack:` + fmt.Sprintf("%#v", this.Slack) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Pagerduty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.ReplaceSpecType_Pagerduty{` +
		`Pagerduty:` + fmt.Sprintf("%#v", this.Pagerduty) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Opsgenie) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.ReplaceSpecType_Opsgenie{` +
		`Opsgenie:` + fmt.Sprintf("%#v", this.Opsgenie) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Email) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.ReplaceSpecType_Email{` +
		`Email:` + fmt.Sprintf("%#v", this.Email) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Sms) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.ReplaceSpecType_Sms{` +
		`Sms:` + fmt.Sprintf("%#v", this.Sms) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Webhook) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.ReplaceSpecType_Webhook{` +
		`Webhook:` + fmt.Sprintf("%#v", this.Webhook) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&alert_receiver.GetSpecType{")
	if this.Receiver != nil {
		s = append(s, "Receiver: "+fmt.Sprintf("%#v", this.Receiver)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_Slack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GetSpecType_Slack{` +
		`Slack:` + fmt.Sprintf("%#v", this.Slack) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Pagerduty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GetSpecType_Pagerduty{` +
		`Pagerduty:` + fmt.Sprintf("%#v", this.Pagerduty) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Opsgenie) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GetSpecType_Opsgenie{` +
		`Opsgenie:` + fmt.Sprintf("%#v", this.Opsgenie) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Email) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GetSpecType_Email{` +
		`Email:` + fmt.Sprintf("%#v", this.Email) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Sms) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GetSpecType_Sms{` +
		`Sms:` + fmt.Sprintf("%#v", this.Sms) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Webhook) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GetSpecType_Webhook{` +
		`Webhook:` + fmt.Sprintf("%#v", this.Webhook) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SlackConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlackConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlackConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x12
	}
	if m.Url != nil {
		{
			size, err := m.Url.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PagerDutyConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PagerDutyConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PagerDutyConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if m.RoutingKey != nil {
		{
			size, err := m.RoutingKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OpsGenieConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpsGenieConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpsGenieConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if m.ApiKey != nil {
		{
			size, err := m.ApiKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EmailConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmailConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmailConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SMSConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SMSConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SMSConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContactNumber) > 0 {
		i -= len(m.ContactNumber)
		copy(dAtA[i:], m.ContactNumber)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ContactNumber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WebhookConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebhookConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebhookConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HttpConfig != nil {
		{
			size, err := m.HttpConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HTTPConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HTTPConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthChoice != nil {
		{
			size := m.AuthChoice.Size()
			i -= size
			if _, err := m.AuthChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TlsConfig != nil {
		{
			size, err := m.TlsConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.FollowRedirects {
		i--
		if m.FollowRedirects {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.EnableHttp2 {
		i--
		if m.EnableHttp2 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	return len(dAtA) - i, nil
}

func (m *HTTPConfig_BasicAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPConfig_BasicAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BasicAuth != nil {
		{
			size, err := m.BasicAuth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *HTTPConfig_NoAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPConfig_NoAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoAuthorization != nil {
		{
			size, err := m.NoAuthorization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *HTTPConfig_AuthConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPConfig_AuthConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AuthConfig != nil {
		{
			size, err := m.AuthConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *TLSConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxVersion != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxVersion))
		i--
		dAtA[i] = 0x30
	}
	if m.MinVersion != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MinVersion))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ServerName) > 0 {
		i -= len(m.ServerName)
		copy(dAtA[i:], m.ServerName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerName)))
		i--
		dAtA[i] = 0x22
	}
	if m.ClientKey != nil {
		{
			size, err := m.ClientKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClientCert) > 0 {
		i -= len(m.ClientCert)
		copy(dAtA[i:], m.ClientCert)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ClientCert)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CaCert) > 0 {
		i -= len(m.CaCert)
		copy(dAtA[i:], m.CaCert)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CaCert)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Authorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Authorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Authorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthType != nil {
		{
			size := m.AuthType.Size()
			i -= size
			if _, err := m.AuthType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Credentials != nil {
		{
			size, err := m.Credentials.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *Authorization_AuthTypeBearer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Authorization_AuthTypeBearer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AuthTypeBearer != nil {
		{
			size, err := m.AuthTypeBearer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *HttpBasicAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpBasicAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpBasicAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Password != nil {
		{
			size, err := m.Password.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Receiver != nil {
		{
			size := m.Receiver.Size()
			i -= size
			if _, err := m.Receiver.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_Slack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Slack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Slack != nil {
		{
			size, err := m.Slack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Pagerduty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Pagerduty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pagerduty != nil {
		{
			size, err := m.Pagerduty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Opsgenie) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Opsgenie) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Opsgenie != nil {
		{
			size, err := m.Opsgenie.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Email) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Email) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Email != nil {
		{
			size, err := m.Email.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Sms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Sms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sms != nil {
		{
			size, err := m.Sms.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Webhook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Webhook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Webhook != nil {
		{
			size, err := m.Webhook.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Receiver != nil {
		{
			size := m.Receiver.Size()
			i -= size
			if _, err := m.Receiver.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_Slack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Slack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Slack != nil {
		{
			size, err := m.Slack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Pagerduty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Pagerduty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pagerduty != nil {
		{
			size, err := m.Pagerduty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Opsgenie) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Opsgenie) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Opsgenie != nil {
		{
			size, err := m.Opsgenie.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Email) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Email) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Email != nil {
		{
			size, err := m.Email.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Sms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Sms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sms != nil {
		{
			size, err := m.Sms.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Webhook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Webhook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Webhook != nil {
		{
			size, err := m.Webhook.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Receiver != nil {
		{
			size := m.Receiver.Size()
			i -= size
			if _, err := m.Receiver.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_Slack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Slack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Slack != nil {
		{
			size, err := m.Slack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Pagerduty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Pagerduty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pagerduty != nil {
		{
			size, err := m.Pagerduty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Opsgenie) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Opsgenie) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Opsgenie != nil {
		{
			size, err := m.Opsgenie.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Email) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Email) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Email != nil {
		{
			size, err := m.Email.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Sms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Sms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sms != nil {
		{
			size, err := m.Sms.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Webhook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Webhook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Webhook != nil {
		{
			size, err := m.Webhook.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Receiver != nil {
		{
			size := m.Receiver.Size()
			i -= size
			if _, err := m.Receiver.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_Slack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Slack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Slack != nil {
		{
			size, err := m.Slack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Pagerduty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Pagerduty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pagerduty != nil {
		{
			size, err := m.Pagerduty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Opsgenie) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Opsgenie) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Opsgenie != nil {
		{
			size, err := m.Opsgenie.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Email) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Email) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Email != nil {
		{
			size, err := m.Email.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Sms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Sms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sms != nil {
		{
			size, err := m.Sms.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Webhook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Webhook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Webhook != nil {
		{
			size, err := m.Webhook.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SlackConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Url != nil {
		l = m.Url.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PagerDutyConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoutingKey != nil {
		l = m.RoutingKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *OpsGenieConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiKey != nil {
		l = m.ApiKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *EmailConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SMSConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContactNumber)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *WebhookConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HttpConfig != nil {
		l = m.HttpConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *HTTPConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthChoice != nil {
		n += m.AuthChoice.Size()
	}
	if m.EnableHttp2 {
		n += 2
	}
	if m.FollowRedirects {
		n += 2
	}
	if m.TlsConfig != nil {
		l = m.TlsConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *HTTPConfig_BasicAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BasicAuth != nil {
		l = m.BasicAuth.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HTTPConfig_NoAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoAuthorization != nil {
		l = m.NoAuthorization.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HTTPConfig_AuthConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthConfig != nil {
		l = m.AuthConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TLSConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CaCert)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ClientCert)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ClientKey != nil {
		l = m.ClientKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ServerName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MinVersion != 0 {
		n += 1 + sovTypes(uint64(m.MinVersion))
	}
	if m.MaxVersion != 0 {
		n += 1 + sovTypes(uint64(m.MaxVersion))
	}
	return n
}

func (m *Authorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Credentials != nil {
		l = m.Credentials.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AuthType != nil {
		n += m.AuthType.Size()
	}
	return n
}

func (m *Authorization_AuthTypeBearer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthTypeBearer != nil {
		l = m.AuthTypeBearer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HttpBasicAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Password != nil {
		l = m.Password.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Receiver != nil {
		n += m.Receiver.Size()
	}
	return n
}

func (m *GlobalSpecType_Slack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slack != nil {
		l = m.Slack.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Pagerduty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagerduty != nil {
		l = m.Pagerduty.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Opsgenie) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Opsgenie != nil {
		l = m.Opsgenie.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Email) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Email != nil {
		l = m.Email.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Sms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sms != nil {
		l = m.Sms.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Webhook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Webhook != nil {
		l = m.Webhook.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Receiver != nil {
		n += m.Receiver.Size()
	}
	return n
}

func (m *CreateSpecType_Slack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slack != nil {
		l = m.Slack.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Pagerduty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagerduty != nil {
		l = m.Pagerduty.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Opsgenie) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Opsgenie != nil {
		l = m.Opsgenie.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Email) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Email != nil {
		l = m.Email.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Sms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sms != nil {
		l = m.Sms.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Webhook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Webhook != nil {
		l = m.Webhook.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Receiver != nil {
		n += m.Receiver.Size()
	}
	return n
}

func (m *ReplaceSpecType_Slack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slack != nil {
		l = m.Slack.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Pagerduty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagerduty != nil {
		l = m.Pagerduty.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Opsgenie) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Opsgenie != nil {
		l = m.Opsgenie.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Email) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Email != nil {
		l = m.Email.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Sms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sms != nil {
		l = m.Sms.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Webhook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Webhook != nil {
		l = m.Webhook.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Receiver != nil {
		n += m.Receiver.Size()
	}
	return n
}

func (m *GetSpecType_Slack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slack != nil {
		l = m.Slack.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Pagerduty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagerduty != nil {
		l = m.Pagerduty.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Opsgenie) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Opsgenie != nil {
		l = m.Opsgenie.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Email) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Email != nil {
		l = m.Email.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Sms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sms != nil {
		l = m.Sms.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Webhook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Webhook != nil {
		l = m.Webhook.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SlackConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SlackConfig{`,
		`Url:` + strings.Replace(fmt.Sprintf("%v", this.Url), "SecretType", "schema.SecretType", 1) + `,`,
		`Channel:` + fmt.Sprintf("%v", this.Channel) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PagerDutyConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PagerDutyConfig{`,
		`RoutingKey:` + strings.Replace(fmt.Sprintf("%v", this.RoutingKey), "SecretType", "schema.SecretType", 1) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpsGenieConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpsGenieConfig{`,
		`ApiKey:` + strings.Replace(fmt.Sprintf("%v", this.ApiKey), "SecretType", "schema.SecretType", 1) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EmailConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmailConfig{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SMSConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SMSConfig{`,
		`ContactNumber:` + fmt.Sprintf("%v", this.ContactNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebhookConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebhookConfig{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`HttpConfig:` + strings.Replace(this.HttpConfig.String(), "HTTPConfig", "HTTPConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPConfig{`,
		`AuthChoice:` + fmt.Sprintf("%v", this.AuthChoice) + `,`,
		`EnableHttp2:` + fmt.Sprintf("%v", this.EnableHttp2) + `,`,
		`FollowRedirects:` + fmt.Sprintf("%v", this.FollowRedirects) + `,`,
		`TlsConfig:` + strings.Replace(this.TlsConfig.String(), "TLSConfig", "TLSConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPConfig_BasicAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPConfig_BasicAuth{`,
		`BasicAuth:` + strings.Replace(fmt.Sprintf("%v", this.BasicAuth), "HttpBasicAuth", "HttpBasicAuth", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPConfig_NoAuthorization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPConfig_NoAuthorization{`,
		`NoAuthorization:` + strings.Replace(fmt.Sprintf("%v", this.NoAuthorization), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPConfig_AuthConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPConfig_AuthConfig{`,
		`AuthConfig:` + strings.Replace(fmt.Sprintf("%v", this.AuthConfig), "Authorization", "Authorization", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TLSConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TLSConfig{`,
		`CaCert:` + fmt.Sprintf("%v", this.CaCert) + `,`,
		`ClientCert:` + fmt.Sprintf("%v", this.ClientCert) + `,`,
		`ClientKey:` + strings.Replace(fmt.Sprintf("%v", this.ClientKey), "SecretType", "schema.SecretType", 1) + `,`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`MinVersion:` + fmt.Sprintf("%v", this.MinVersion) + `,`,
		`MaxVersion:` + fmt.Sprintf("%v", this.MaxVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Authorization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Authorization{`,
		`Credentials:` + strings.Replace(fmt.Sprintf("%v", this.Credentials), "SecretType", "schema.SecretType", 1) + `,`,
		`AuthType:` + fmt.Sprintf("%v", this.AuthType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Authorization_AuthTypeBearer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Authorization_AuthTypeBearer{`,
		`AuthTypeBearer:` + strings.Replace(fmt.Sprintf("%v", this.AuthTypeBearer), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HttpBasicAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HttpBasicAuth{`,
		`UserName:` + fmt.Sprintf("%v", this.UserName) + `,`,
		`Password:` + strings.Replace(fmt.Sprintf("%v", this.Password), "SecretType", "schema.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Receiver:` + fmt.Sprintf("%v", this.Receiver) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Slack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Slack{`,
		`Slack:` + strings.Replace(fmt.Sprintf("%v", this.Slack), "SlackConfig", "SlackConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Pagerduty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Pagerduty{`,
		`Pagerduty:` + strings.Replace(fmt.Sprintf("%v", this.Pagerduty), "PagerDutyConfig", "PagerDutyConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Opsgenie) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Opsgenie{`,
		`Opsgenie:` + strings.Replace(fmt.Sprintf("%v", this.Opsgenie), "OpsGenieConfig", "OpsGenieConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Email) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Email{`,
		`Email:` + strings.Replace(fmt.Sprintf("%v", this.Email), "EmailConfig", "EmailConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Sms) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Sms{`,
		`Sms:` + strings.Replace(fmt.Sprintf("%v", this.Sms), "SMSConfig", "SMSConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Webhook) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Webhook{`,
		`Webhook:` + strings.Replace(fmt.Sprintf("%v", this.Webhook), "WebhookConfig", "WebhookConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`Receiver:` + fmt.Sprintf("%v", this.Receiver) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Slack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Slack{`,
		`Slack:` + strings.Replace(fmt.Sprintf("%v", this.Slack), "SlackConfig", "SlackConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Pagerduty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Pagerduty{`,
		`Pagerduty:` + strings.Replace(fmt.Sprintf("%v", this.Pagerduty), "PagerDutyConfig", "PagerDutyConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Opsgenie) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Opsgenie{`,
		`Opsgenie:` + strings.Replace(fmt.Sprintf("%v", this.Opsgenie), "OpsGenieConfig", "OpsGenieConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Email) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Email{`,
		`Email:` + strings.Replace(fmt.Sprintf("%v", this.Email), "EmailConfig", "EmailConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Sms) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Sms{`,
		`Sms:` + strings.Replace(fmt.Sprintf("%v", this.Sms), "SMSConfig", "SMSConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Webhook) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Webhook{`,
		`Webhook:` + strings.Replace(fmt.Sprintf("%v", this.Webhook), "WebhookConfig", "WebhookConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Receiver:` + fmt.Sprintf("%v", this.Receiver) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Slack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Slack{`,
		`Slack:` + strings.Replace(fmt.Sprintf("%v", this.Slack), "SlackConfig", "SlackConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Pagerduty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Pagerduty{`,
		`Pagerduty:` + strings.Replace(fmt.Sprintf("%v", this.Pagerduty), "PagerDutyConfig", "PagerDutyConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Opsgenie) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Opsgenie{`,
		`Opsgenie:` + strings.Replace(fmt.Sprintf("%v", this.Opsgenie), "OpsGenieConfig", "OpsGenieConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Email) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Email{`,
		`Email:` + strings.Replace(fmt.Sprintf("%v", this.Email), "EmailConfig", "EmailConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Sms) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Sms{`,
		`Sms:` + strings.Replace(fmt.Sprintf("%v", this.Sms), "SMSConfig", "SMSConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Webhook) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Webhook{`,
		`Webhook:` + strings.Replace(fmt.Sprintf("%v", this.Webhook), "WebhookConfig", "WebhookConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Receiver:` + fmt.Sprintf("%v", this.Receiver) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Slack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Slack{`,
		`Slack:` + strings.Replace(fmt.Sprintf("%v", this.Slack), "SlackConfig", "SlackConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Pagerduty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Pagerduty{`,
		`Pagerduty:` + strings.Replace(fmt.Sprintf("%v", this.Pagerduty), "PagerDutyConfig", "PagerDutyConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Opsgenie) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Opsgenie{`,
		`Opsgenie:` + strings.Replace(fmt.Sprintf("%v", this.Opsgenie), "OpsGenieConfig", "OpsGenieConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Email) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Email{`,
		`Email:` + strings.Replace(fmt.Sprintf("%v", this.Email), "EmailConfig", "EmailConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Sms) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Sms{`,
		`Sms:` + strings.Replace(fmt.Sprintf("%v", this.Sms), "SMSConfig", "SMSConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Webhook) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Webhook{`,
		`Webhook:` + strings.Replace(fmt.Sprintf("%v", this.Webhook), "WebhookConfig", "WebhookConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SlackConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlackConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlackConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Url == nil {
				m.Url = &schema.SecretType{}
			}
			if err := m.Url.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PagerDutyConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PagerDutyConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PagerDutyConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoutingKey == nil {
				m.RoutingKey = &schema.SecretType{}
			}
			if err := m.RoutingKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpsGenieConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpsGenieConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpsGenieConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiKey == nil {
				m.ApiKey = &schema.SecretType{}
			}
			if err := m.ApiKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmailConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmailConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmailConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SMSConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SMSConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SMSConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebhookConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebhookConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebhookConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HttpConfig == nil {
				m.HttpConfig = &HTTPConfig{}
			}
			if err := m.HttpConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HTTPConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HTTPConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HTTPConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasicAuth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpBasicAuth{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthChoice = &HTTPConfig_BasicAuth{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableHttp2", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableHttp2 = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowRedirects", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FollowRedirects = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsConfig == nil {
				m.TlsConfig = &TLSConfig{}
			}
			if err := m.TlsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoAuthorization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthChoice = &HTTPConfig_NoAuthorization{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Authorization{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthChoice = &HTTPConfig_AuthConfig{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TLSConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TLSConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaCert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaCert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientCert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientKey == nil {
				m.ClientKey = &schema.SecretType{}
			}
			if err := m.ClientKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVersion", wireType)
			}
			m.MinVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinVersion |= schema.TlsProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxVersion", wireType)
			}
			m.MaxVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxVersion |= schema.TlsProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Authorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Authorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Authorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Credentials == nil {
				m.Credentials = &schema.SecretType{}
			}
			if err := m.Credentials.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthTypeBearer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthType = &Authorization_AuthTypeBearer{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpBasicAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpBasicAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpBasicAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Password == nil {
				m.Password = &schema.SecretType{}
			}
			if err := m.Password.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SlackConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GlobalSpecType_Slack{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagerduty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PagerDutyConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GlobalSpecType_Pagerduty{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opsgenie", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpsGenieConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GlobalSpecType_Opsgenie{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmailConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GlobalSpecType_Email{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SMSConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GlobalSpecType_Sms{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Webhook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WebhookConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GlobalSpecType_Webhook{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SlackConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &CreateSpecType_Slack{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagerduty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PagerDutyConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &CreateSpecType_Pagerduty{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opsgenie", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpsGenieConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &CreateSpecType_Opsgenie{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmailConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &CreateSpecType_Email{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SMSConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &CreateSpecType_Sms{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Webhook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WebhookConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &CreateSpecType_Webhook{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SlackConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &ReplaceSpecType_Slack{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagerduty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PagerDutyConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &ReplaceSpecType_Pagerduty{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opsgenie", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpsGenieConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &ReplaceSpecType_Opsgenie{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmailConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &ReplaceSpecType_Email{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SMSConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &ReplaceSpecType_Sms{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Webhook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WebhookConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &ReplaceSpecType_Webhook{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SlackConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GetSpecType_Slack{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagerduty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PagerDutyConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GetSpecType_Pagerduty{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opsgenie", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpsGenieConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GetSpecType_Opsgenie{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmailConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GetSpecType_Email{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SMSConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GetSpecType_Sms{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Webhook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WebhookConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GetSpecType_Webhook{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
