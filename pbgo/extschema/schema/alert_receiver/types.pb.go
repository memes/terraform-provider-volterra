// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/alert_receiver/types.proto

package alert_receiver

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Slack Config
//
// x-displayName: "Slack Config"
// Slack configuration to send alert notifications
type SlackConfig struct {
	// URL
	//
	// x-displayName: "Webhook URL"
	// x-required
	// Incoming webhook url to send alert notifications.
	// API Key is embedded in the webhook URL.
	Url *schema.SecretType `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Channel
	//
	// x-displayName: "Channel"
	// x-example: "value"
	// x-required
	// Channel or user to send notifications to
	Channel string `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *SlackConfig) Reset()      { *m = SlackConfig{} }
func (*SlackConfig) ProtoMessage() {}
func (*SlackConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{0}
}
func (m *SlackConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlackConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SlackConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlackConfig.Merge(m, src)
}
func (m *SlackConfig) XXX_Size() int {
	return m.Size()
}
func (m *SlackConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SlackConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SlackConfig proto.InternalMessageInfo

func (m *SlackConfig) GetUrl() *schema.SecretType {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *SlackConfig) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

// PagerDuty Config
//
// x-displayName: "PagerDuty Config"
// PagerDuty configuration to send alert notifications
type PagerDutyConfig struct {
	// Routing Key
	//
	// x-displayName: "Integration Key"
	// x-required
	// PagerDuty integration key (choose Integration Type: Events API v2)
	RoutingKey *schema.SecretType `protobuf:"bytes,1,opt,name=routing_key,json=routingKey,proto3" json:"routing_key,omitempty"`
	// URL
	//
	// x-displayName: "Pager Duty URL"
	// x-example: "value"
	// x-required
	// URL to send API requests to
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *PagerDutyConfig) Reset()      { *m = PagerDutyConfig{} }
func (*PagerDutyConfig) ProtoMessage() {}
func (*PagerDutyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{1}
}
func (m *PagerDutyConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PagerDutyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PagerDutyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PagerDutyConfig.Merge(m, src)
}
func (m *PagerDutyConfig) XXX_Size() int {
	return m.Size()
}
func (m *PagerDutyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PagerDutyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PagerDutyConfig proto.InternalMessageInfo

func (m *PagerDutyConfig) GetRoutingKey() *schema.SecretType {
	if m != nil {
		return m.RoutingKey
	}
	return nil
}

func (m *PagerDutyConfig) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// Opsgenie Config
//
// x-displayName: "OpsGenie Config"
// OpsGenie configuration to send alert notifications
type OpsGenieConfig struct {
	// API Key
	//
	// x-displayName: "API Key"
	// x-required
	// API integration key to send alert notifications using REST API to OpsGenie service.
	ApiKey *schema.SecretType `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// URL
	//
	// x-displayName: "API URL"
	// x-example: "value"
	// x-required
	// URL to send API requests to
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *OpsGenieConfig) Reset()      { *m = OpsGenieConfig{} }
func (*OpsGenieConfig) ProtoMessage() {}
func (*OpsGenieConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{2}
}
func (m *OpsGenieConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpsGenieConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OpsGenieConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpsGenieConfig.Merge(m, src)
}
func (m *OpsGenieConfig) XXX_Size() int {
	return m.Size()
}
func (m *OpsGenieConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_OpsGenieConfig.DiscardUnknown(m)
}

var xxx_messageInfo_OpsGenieConfig proto.InternalMessageInfo

func (m *OpsGenieConfig) GetApiKey() *schema.SecretType {
	if m != nil {
		return m.ApiKey
	}
	return nil
}

func (m *OpsGenieConfig) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// EmailConfig
//
// x-displayName: "Email Configuration"
type EmailConfig struct {
	// Email
	//
	// x-displayName: "Email"
	// x-example: "abc@email.com"
	// Email id of the user
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (m *EmailConfig) Reset()      { *m = EmailConfig{} }
func (*EmailConfig) ProtoMessage() {}
func (*EmailConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{3}
}
func (m *EmailConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmailConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EmailConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmailConfig.Merge(m, src)
}
func (m *EmailConfig) XXX_Size() int {
	return m.Size()
}
func (m *EmailConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EmailConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EmailConfig proto.InternalMessageInfo

func (m *EmailConfig) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// SMSConfig
//
// x-displayName: "SMS Configuration"
type SMSConfig struct {
	// Contact Number
	//
	// x-displayName: "Contact Number"
	// x-example: "+14084004001"
	// Contact number of the user in ITU E.164 format [+][country code][subscriber number including area code]
	ContactNumber string `protobuf:"bytes,1,opt,name=contact_number,json=contactNumber,proto3" json:"contact_number,omitempty"`
}

func (m *SMSConfig) Reset()      { *m = SMSConfig{} }
func (*SMSConfig) ProtoMessage() {}
func (*SMSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{4}
}
func (m *SMSConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SMSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SMSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SMSConfig.Merge(m, src)
}
func (m *SMSConfig) XXX_Size() int {
	return m.Size()
}
func (m *SMSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SMSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SMSConfig proto.InternalMessageInfo

func (m *SMSConfig) GetContactNumber() string {
	if m != nil {
		return m.ContactNumber
	}
	return ""
}

// Webhook Config
//
// x-displayName: "Webhook Config"
// Webhook configuration to send alert notifications
type WebhookConfig struct {
	// URL
	//
	// x-displayName: "Webhook URL"
	// x-example: "value"
	// x-required
	// Incoming webhook url to send alert notifications.
	Url *schema.SecretType `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// HTTP Configuration
	//
	// x-displayName: "HTTP Configuration"
	// x-required
	// Configuration for HTTP endpoint
	HttpConfig *HTTPConfig `protobuf:"bytes,3,opt,name=http_config,json=httpConfig,proto3" json:"http_config,omitempty"`
}

func (m *WebhookConfig) Reset()      { *m = WebhookConfig{} }
func (*WebhookConfig) ProtoMessage() {}
func (*WebhookConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{5}
}
func (m *WebhookConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebhookConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WebhookConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebhookConfig.Merge(m, src)
}
func (m *WebhookConfig) XXX_Size() int {
	return m.Size()
}
func (m *WebhookConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_WebhookConfig.DiscardUnknown(m)
}

var xxx_messageInfo_WebhookConfig proto.InternalMessageInfo

func (m *WebhookConfig) GetUrl() *schema.SecretType {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *WebhookConfig) GetHttpConfig() *HTTPConfig {
	if m != nil {
		return m.HttpConfig
	}
	return nil
}

// HTTP Configuration
//
// x-displayName: "HTTP Configuration"
// Configuration for HTTP endpoint
type HTTPConfig struct {
	// HTTP Authentication header
	//
	// x-displayName: "Authentication"
	// x-required
	// HTTP Authentication header controls how to authenticate to the HTTP endpoint
	//
	// Types that are valid to be assigned to AuthChoice:
	//	*HTTPConfig_NoAuthorization
	//	*HTTPConfig_BasicAuth
	//	*HTTPConfig_AuthToken
	//	*HTTPConfig_ClientCertObj
	AuthChoice isHTTPConfig_AuthChoice `protobuf_oneof:"auth_choice"`
	// Enable HTTP2
	//
	// x-displayName: "Enable HTTP2"
	// x-example: "value"
	// Configure to use HTTP2 protocol.
	EnableHttp2 bool `protobuf:"varint,4,opt,name=enable_http2,json=enableHttp2,proto3" json:"enable_http2,omitempty"`
	// Follow Redirects
	//
	// x-displayName: "Follow Redirects"
	// x-example: "value"
	// Configure whether HTTP requests follow HTTP 3xx redirects.
	FollowRedirects bool `protobuf:"varint,5,opt,name=follow_redirects,json=followRedirects,proto3" json:"follow_redirects,omitempty"`
	// Enable TLS
	//
	// x-displayName: "TLS"
	// x-required
	//
	// Types that are valid to be assigned to TlsChoice:
	//	*HTTPConfig_NoTls
	//	*HTTPConfig_UseTls
	TlsChoice isHTTPConfig_TlsChoice `protobuf_oneof:"tls_choice"`
}

func (m *HTTPConfig) Reset()      { *m = HTTPConfig{} }
func (*HTTPConfig) ProtoMessage() {}
func (*HTTPConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{6}
}
func (m *HTTPConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HTTPConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HTTPConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPConfig.Merge(m, src)
}
func (m *HTTPConfig) XXX_Size() int {
	return m.Size()
}
func (m *HTTPConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPConfig.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPConfig proto.InternalMessageInfo

type isHTTPConfig_AuthChoice interface {
	isHTTPConfig_AuthChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isHTTPConfig_TlsChoice interface {
	isHTTPConfig_TlsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type HTTPConfig_NoAuthorization struct {
	NoAuthorization *schema.Empty `protobuf:"bytes,7,opt,name=no_authorization,json=noAuthorization,proto3,oneof" json:"no_authorization,omitempty"`
}
type HTTPConfig_BasicAuth struct {
	BasicAuth *HttpBasicAuth `protobuf:"bytes,2,opt,name=basic_auth,json=basicAuth,proto3,oneof" json:"basic_auth,omitempty"`
}
type HTTPConfig_AuthToken struct {
	AuthToken *AuthToken `protobuf:"bytes,9,opt,name=auth_token,json=authToken,proto3,oneof" json:"auth_token,omitempty"`
}
type HTTPConfig_ClientCertObj struct {
	ClientCertObj *ClientCertificateObj `protobuf:"bytes,10,opt,name=client_cert_obj,json=clientCertObj,proto3,oneof" json:"client_cert_obj,omitempty"`
}
type HTTPConfig_NoTls struct {
	NoTls *schema.Empty `protobuf:"bytes,12,opt,name=no_tls,json=noTls,proto3,oneof" json:"no_tls,omitempty"`
}
type HTTPConfig_UseTls struct {
	UseTls *TLSConfig `protobuf:"bytes,13,opt,name=use_tls,json=useTls,proto3,oneof" json:"use_tls,omitempty"`
}

func (*HTTPConfig_NoAuthorization) isHTTPConfig_AuthChoice() {}
func (*HTTPConfig_BasicAuth) isHTTPConfig_AuthChoice()       {}
func (*HTTPConfig_AuthToken) isHTTPConfig_AuthChoice()       {}
func (*HTTPConfig_ClientCertObj) isHTTPConfig_AuthChoice()   {}
func (*HTTPConfig_NoTls) isHTTPConfig_TlsChoice()            {}
func (*HTTPConfig_UseTls) isHTTPConfig_TlsChoice()           {}

func (m *HTTPConfig) GetAuthChoice() isHTTPConfig_AuthChoice {
	if m != nil {
		return m.AuthChoice
	}
	return nil
}
func (m *HTTPConfig) GetTlsChoice() isHTTPConfig_TlsChoice {
	if m != nil {
		return m.TlsChoice
	}
	return nil
}

func (m *HTTPConfig) GetNoAuthorization() *schema.Empty {
	if x, ok := m.GetAuthChoice().(*HTTPConfig_NoAuthorization); ok {
		return x.NoAuthorization
	}
	return nil
}

func (m *HTTPConfig) GetBasicAuth() *HttpBasicAuth {
	if x, ok := m.GetAuthChoice().(*HTTPConfig_BasicAuth); ok {
		return x.BasicAuth
	}
	return nil
}

func (m *HTTPConfig) GetAuthToken() *AuthToken {
	if x, ok := m.GetAuthChoice().(*HTTPConfig_AuthToken); ok {
		return x.AuthToken
	}
	return nil
}

func (m *HTTPConfig) GetClientCertObj() *ClientCertificateObj {
	if x, ok := m.GetAuthChoice().(*HTTPConfig_ClientCertObj); ok {
		return x.ClientCertObj
	}
	return nil
}

func (m *HTTPConfig) GetEnableHttp2() bool {
	if m != nil {
		return m.EnableHttp2
	}
	return false
}

func (m *HTTPConfig) GetFollowRedirects() bool {
	if m != nil {
		return m.FollowRedirects
	}
	return false
}

func (m *HTTPConfig) GetNoTls() *schema.Empty {
	if x, ok := m.GetTlsChoice().(*HTTPConfig_NoTls); ok {
		return x.NoTls
	}
	return nil
}

func (m *HTTPConfig) GetUseTls() *TLSConfig {
	if x, ok := m.GetTlsChoice().(*HTTPConfig_UseTls); ok {
		return x.UseTls
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HTTPConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HTTPConfig_NoAuthorization)(nil),
		(*HTTPConfig_BasicAuth)(nil),
		(*HTTPConfig_AuthToken)(nil),
		(*HTTPConfig_ClientCertObj)(nil),
		(*HTTPConfig_NoTls)(nil),
		(*HTTPConfig_UseTls)(nil),
	}
}

// Client Certificate Object
//
// x-displayName: "Client Certificate Object"
// Configuration for client certificate
type ClientCertificateObj struct {
	// certificate_object_refs
	//
	// x-displayName: "Certificate Object"
	// Reference to client certificate object
	UseTlsObj []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=use_tls_obj,json=useTlsObj,proto3" json:"use_tls_obj,omitempty"`
}

func (m *ClientCertificateObj) Reset()      { *m = ClientCertificateObj{} }
func (*ClientCertificateObj) ProtoMessage() {}
func (*ClientCertificateObj) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{7}
}
func (m *ClientCertificateObj) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientCertificateObj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClientCertificateObj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientCertificateObj.Merge(m, src)
}
func (m *ClientCertificateObj) XXX_Size() int {
	return m.Size()
}
func (m *ClientCertificateObj) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientCertificateObj.DiscardUnknown(m)
}

var xxx_messageInfo_ClientCertificateObj proto.InternalMessageInfo

func (m *ClientCertificateObj) GetUseTlsObj() []*schema.ObjectRefType {
	if m != nil {
		return m.UseTlsObj
	}
	return nil
}

// CA Certificate Object
//
// x-displayName: "CA Certificate Object"
// Configuration for CA certificate
type CACertificateObj struct {
	// certificate_object_refs
	//
	// x-displayName: "Certificate Object"
	// Reference to client certificate object
	TrustedCa []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=trusted_ca,json=trustedCa,proto3" json:"trusted_ca,omitempty"`
}

func (m *CACertificateObj) Reset()      { *m = CACertificateObj{} }
func (*CACertificateObj) ProtoMessage() {}
func (*CACertificateObj) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{8}
}
func (m *CACertificateObj) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CACertificateObj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CACertificateObj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CACertificateObj.Merge(m, src)
}
func (m *CACertificateObj) XXX_Size() int {
	return m.Size()
}
func (m *CACertificateObj) XXX_DiscardUnknown() {
	xxx_messageInfo_CACertificateObj.DiscardUnknown(m)
}

var xxx_messageInfo_CACertificateObj proto.InternalMessageInfo

func (m *CACertificateObj) GetTrustedCa() []*schema.ObjectRefType {
	if m != nil {
		return m.TrustedCa
	}
	return nil
}

// TLS Config
//
// x-displayName: "TLS Config"
// Configures the token request's TLS settings.
type TLSConfig struct {
	// sni choice
	//
	// x-displayName: "SNI Selection"
	// x-required
	// Select SNI to be used for upstream connection
	//
	// Types that are valid to be assigned to SniChoice:
	//	*TLSConfig_Sni
	//	*TLSConfig_DisableSni
	SniChoice isTLSConfig_SniChoice `protobuf_oneof:"sni_choice"`
	// minimum_protocol_version
	//
	// x-displayName: "Minimum TLS version"
	// Minimum TLS protocol version.
	MinVersion schema.TlsProtocol `protobuf:"varint,5,opt,name=min_version,json=minVersion,proto3,enum=ves.io.schema.TlsProtocol" json:"min_version,omitempty"`
	// maximum_protocol_version
	//
	// x-displayName: "Maximum TLS version"
	// Maximum TLS protocol version.
	MaxVersion schema.TlsProtocol `protobuf:"varint,6,opt,name=max_version,json=maxVersion,proto3,enum=ves.io.schema.TlsProtocol" json:"max_version,omitempty"`
	// Server verification choice
	//
	// x-displayName: "Server Verification"
	// x-required
	// Choose whether to perform server verification.
	//
	// Types that are valid to be assigned to ServerValidationChoice:
	//	*TLSConfig_UseServerVerification
	//	*TLSConfig_VolterraTrustedCa
	ServerValidationChoice isTLSConfig_ServerValidationChoice `protobuf_oneof:"server_validation_choice"`
}

func (m *TLSConfig) Reset()      { *m = TLSConfig{} }
func (*TLSConfig) ProtoMessage() {}
func (*TLSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{9}
}
func (m *TLSConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TLSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSConfig.Merge(m, src)
}
func (m *TLSConfig) XXX_Size() int {
	return m.Size()
}
func (m *TLSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TLSConfig proto.InternalMessageInfo

type isTLSConfig_SniChoice interface {
	isTLSConfig_SniChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTLSConfig_ServerValidationChoice interface {
	isTLSConfig_ServerValidationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TLSConfig_Sni struct {
	Sni string `protobuf:"bytes,13,opt,name=sni,proto3,oneof" json:"sni,omitempty"`
}
type TLSConfig_DisableSni struct {
	DisableSni *schema.Empty `protobuf:"bytes,12,opt,name=disable_sni,json=disableSni,proto3,oneof" json:"disable_sni,omitempty"`
}
type TLSConfig_UseServerVerification struct {
	UseServerVerification *UpstreamTlsValidationContext `protobuf:"bytes,17,opt,name=use_server_verification,json=useServerVerification,proto3,oneof" json:"use_server_verification,omitempty"`
}
type TLSConfig_VolterraTrustedCa struct {
	VolterraTrustedCa *schema.Empty `protobuf:"bytes,16,opt,name=volterra_trusted_ca,json=volterraTrustedCa,proto3,oneof" json:"volterra_trusted_ca,omitempty"`
}

func (*TLSConfig_Sni) isTLSConfig_SniChoice()                                {}
func (*TLSConfig_DisableSni) isTLSConfig_SniChoice()                         {}
func (*TLSConfig_UseServerVerification) isTLSConfig_ServerValidationChoice() {}
func (*TLSConfig_VolterraTrustedCa) isTLSConfig_ServerValidationChoice()     {}

func (m *TLSConfig) GetSniChoice() isTLSConfig_SniChoice {
	if m != nil {
		return m.SniChoice
	}
	return nil
}
func (m *TLSConfig) GetServerValidationChoice() isTLSConfig_ServerValidationChoice {
	if m != nil {
		return m.ServerValidationChoice
	}
	return nil
}

func (m *TLSConfig) GetSni() string {
	if x, ok := m.GetSniChoice().(*TLSConfig_Sni); ok {
		return x.Sni
	}
	return ""
}

func (m *TLSConfig) GetDisableSni() *schema.Empty {
	if x, ok := m.GetSniChoice().(*TLSConfig_DisableSni); ok {
		return x.DisableSni
	}
	return nil
}

func (m *TLSConfig) GetMinVersion() schema.TlsProtocol {
	if m != nil {
		return m.MinVersion
	}
	return schema.TLS_AUTO
}

func (m *TLSConfig) GetMaxVersion() schema.TlsProtocol {
	if m != nil {
		return m.MaxVersion
	}
	return schema.TLS_AUTO
}

func (m *TLSConfig) GetUseServerVerification() *UpstreamTlsValidationContext {
	if x, ok := m.GetServerValidationChoice().(*TLSConfig_UseServerVerification); ok {
		return x.UseServerVerification
	}
	return nil
}

func (m *TLSConfig) GetVolterraTrustedCa() *schema.Empty {
	if x, ok := m.GetServerValidationChoice().(*TLSConfig_VolterraTrustedCa); ok {
		return x.VolterraTrustedCa
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TLSConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TLSConfig_Sni)(nil),
		(*TLSConfig_DisableSni)(nil),
		(*TLSConfig_UseServerVerification)(nil),
		(*TLSConfig_VolterraTrustedCa)(nil),
	}
}

// UpstreamTlsValidationContext
//
// x-displayName: "TLS Validation Context for Servers"
// Upstream TLS Validation Context
type UpstreamTlsValidationContext struct {
	// trusted_ca
	//
	// x-displayName: "Trusted CA List"
	// Trusted CA List for verification of Server's certificate
	CaCertObj *CACertificateObj `protobuf:"bytes,1,opt,name=ca_cert_obj,json=caCertObj,proto3" json:"ca_cert_obj,omitempty"`
}

func (m *UpstreamTlsValidationContext) Reset()      { *m = UpstreamTlsValidationContext{} }
func (*UpstreamTlsValidationContext) ProtoMessage() {}
func (*UpstreamTlsValidationContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{10}
}
func (m *UpstreamTlsValidationContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamTlsValidationContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UpstreamTlsValidationContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamTlsValidationContext.Merge(m, src)
}
func (m *UpstreamTlsValidationContext) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamTlsValidationContext) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamTlsValidationContext.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamTlsValidationContext proto.InternalMessageInfo

func (m *UpstreamTlsValidationContext) GetCaCertObj() *CACertificateObj {
	if m != nil {
		return m.CaCertObj
	}
	return nil
}

// Token Authentication
//
// x-displayName: "Access Token"
// Authentication Token for access
type AuthToken struct {
	// token
	//
	// x-displayName: "Token"
	// x-required
	// F5XC Secret. URL for token, needs to be fetched from this path
	Token *schema.SecretType `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *AuthToken) Reset()      { *m = AuthToken{} }
func (*AuthToken) ProtoMessage() {}
func (*AuthToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{11}
}
func (m *AuthToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AuthToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthToken.Merge(m, src)
}
func (m *AuthToken) XXX_Size() int {
	return m.Size()
}
func (m *AuthToken) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthToken.DiscardUnknown(m)
}

var xxx_messageInfo_AuthToken proto.InternalMessageInfo

func (m *AuthToken) GetToken() *schema.SecretType {
	if m != nil {
		return m.Token
	}
	return nil
}

// HTTP Basic Authorization
//
// x-displayName: "Basic Authorization Credentials"
// Authorization parameters to access HTPP alert Receiver Endpoint.
type HttpBasicAuth struct {
	// username
	//
	// x-displayName: "User Name"
	// x-example: "Joe"
	// x-required
	// HTTP Basic Auth User Name
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// password
	//
	// x-displayName: "Password"
	// x-required
	// HTTP Basic Auth Password
	Password *schema.SecretType `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *HttpBasicAuth) Reset()      { *m = HttpBasicAuth{} }
func (*HttpBasicAuth) ProtoMessage() {}
func (*HttpBasicAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{12}
}
func (m *HttpBasicAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpBasicAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HttpBasicAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpBasicAuth.Merge(m, src)
}
func (m *HttpBasicAuth) XXX_Size() int {
	return m.Size()
}
func (m *HttpBasicAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpBasicAuth.DiscardUnknown(m)
}

var xxx_messageInfo_HttpBasicAuth proto.InternalMessageInfo

func (m *HttpBasicAuth) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *HttpBasicAuth) GetPassword() *schema.SecretType {
	if m != nil {
		return m.Password
	}
	return nil
}

// Specification for Alert Receiver
//
// x-displayName: "Specification"
// Shape of the Alert Receiver object
type GlobalSpecType struct {
	// Receiver
	//
	// x-displayName: "Receiver"
	// x-required
	// Receiver Config
	//
	// Types that are valid to be assigned to Receiver:
	//	*GlobalSpecType_Slack
	//	*GlobalSpecType_Pagerduty
	//	*GlobalSpecType_Opsgenie
	//	*GlobalSpecType_Email
	//	*GlobalSpecType_Sms
	//	*GlobalSpecType_Webhook
	Receiver isGlobalSpecType_Receiver `protobuf_oneof:"receiver"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{13}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_Receiver interface {
	isGlobalSpecType_Receiver()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_Slack struct {
	Slack *SlackConfig `protobuf:"bytes,1,opt,name=slack,proto3,oneof" json:"slack,omitempty"`
}
type GlobalSpecType_Pagerduty struct {
	Pagerduty *PagerDutyConfig `protobuf:"bytes,2,opt,name=pagerduty,proto3,oneof" json:"pagerduty,omitempty"`
}
type GlobalSpecType_Opsgenie struct {
	Opsgenie *OpsGenieConfig `protobuf:"bytes,3,opt,name=opsgenie,proto3,oneof" json:"opsgenie,omitempty"`
}
type GlobalSpecType_Email struct {
	Email *EmailConfig `protobuf:"bytes,4,opt,name=email,proto3,oneof" json:"email,omitempty"`
}
type GlobalSpecType_Sms struct {
	Sms *SMSConfig `protobuf:"bytes,5,opt,name=sms,proto3,oneof" json:"sms,omitempty"`
}
type GlobalSpecType_Webhook struct {
	Webhook *WebhookConfig `protobuf:"bytes,7,opt,name=webhook,proto3,oneof" json:"webhook,omitempty"`
}

func (*GlobalSpecType_Slack) isGlobalSpecType_Receiver()     {}
func (*GlobalSpecType_Pagerduty) isGlobalSpecType_Receiver() {}
func (*GlobalSpecType_Opsgenie) isGlobalSpecType_Receiver()  {}
func (*GlobalSpecType_Email) isGlobalSpecType_Receiver()     {}
func (*GlobalSpecType_Sms) isGlobalSpecType_Receiver()       {}
func (*GlobalSpecType_Webhook) isGlobalSpecType_Receiver()   {}

func (m *GlobalSpecType) GetReceiver() isGlobalSpecType_Receiver {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *GlobalSpecType) GetSlack() *SlackConfig {
	if x, ok := m.GetReceiver().(*GlobalSpecType_Slack); ok {
		return x.Slack
	}
	return nil
}

func (m *GlobalSpecType) GetPagerduty() *PagerDutyConfig {
	if x, ok := m.GetReceiver().(*GlobalSpecType_Pagerduty); ok {
		return x.Pagerduty
	}
	return nil
}

func (m *GlobalSpecType) GetOpsgenie() *OpsGenieConfig {
	if x, ok := m.GetReceiver().(*GlobalSpecType_Opsgenie); ok {
		return x.Opsgenie
	}
	return nil
}

func (m *GlobalSpecType) GetEmail() *EmailConfig {
	if x, ok := m.GetReceiver().(*GlobalSpecType_Email); ok {
		return x.Email
	}
	return nil
}

func (m *GlobalSpecType) GetSms() *SMSConfig {
	if x, ok := m.GetReceiver().(*GlobalSpecType_Sms); ok {
		return x.Sms
	}
	return nil
}

func (m *GlobalSpecType) GetWebhook() *WebhookConfig {
	if x, ok := m.GetReceiver().(*GlobalSpecType_Webhook); ok {
		return x.Webhook
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_Slack)(nil),
		(*GlobalSpecType_Pagerduty)(nil),
		(*GlobalSpecType_Opsgenie)(nil),
		(*GlobalSpecType_Email)(nil),
		(*GlobalSpecType_Sms)(nil),
		(*GlobalSpecType_Webhook)(nil),
	}
}

// Create Alert Receiver
//
// x-displayName: "Create Alert Receiver"
// Creates a new Alert Receiver object
type CreateSpecType struct {
	// Types that are valid to be assigned to Receiver:
	//	*CreateSpecType_Slack
	//	*CreateSpecType_Pagerduty
	//	*CreateSpecType_Opsgenie
	//	*CreateSpecType_Email
	//	*CreateSpecType_Sms
	//	*CreateSpecType_Webhook
	Receiver isCreateSpecType_Receiver `protobuf_oneof:"receiver"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{14}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_Receiver interface {
	isCreateSpecType_Receiver()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_Slack struct {
	Slack *SlackConfig `protobuf:"bytes,1,opt,name=slack,proto3,oneof" json:"slack,omitempty"`
}
type CreateSpecType_Pagerduty struct {
	Pagerduty *PagerDutyConfig `protobuf:"bytes,2,opt,name=pagerduty,proto3,oneof" json:"pagerduty,omitempty"`
}
type CreateSpecType_Opsgenie struct {
	Opsgenie *OpsGenieConfig `protobuf:"bytes,3,opt,name=opsgenie,proto3,oneof" json:"opsgenie,omitempty"`
}
type CreateSpecType_Email struct {
	Email *EmailConfig `protobuf:"bytes,4,opt,name=email,proto3,oneof" json:"email,omitempty"`
}
type CreateSpecType_Sms struct {
	Sms *SMSConfig `protobuf:"bytes,5,opt,name=sms,proto3,oneof" json:"sms,omitempty"`
}
type CreateSpecType_Webhook struct {
	Webhook *WebhookConfig `protobuf:"bytes,6,opt,name=webhook,proto3,oneof" json:"webhook,omitempty"`
}

func (*CreateSpecType_Slack) isCreateSpecType_Receiver()     {}
func (*CreateSpecType_Pagerduty) isCreateSpecType_Receiver() {}
func (*CreateSpecType_Opsgenie) isCreateSpecType_Receiver()  {}
func (*CreateSpecType_Email) isCreateSpecType_Receiver()     {}
func (*CreateSpecType_Sms) isCreateSpecType_Receiver()       {}
func (*CreateSpecType_Webhook) isCreateSpecType_Receiver()   {}

func (m *CreateSpecType) GetReceiver() isCreateSpecType_Receiver {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *CreateSpecType) GetSlack() *SlackConfig {
	if x, ok := m.GetReceiver().(*CreateSpecType_Slack); ok {
		return x.Slack
	}
	return nil
}

func (m *CreateSpecType) GetPagerduty() *PagerDutyConfig {
	if x, ok := m.GetReceiver().(*CreateSpecType_Pagerduty); ok {
		return x.Pagerduty
	}
	return nil
}

func (m *CreateSpecType) GetOpsgenie() *OpsGenieConfig {
	if x, ok := m.GetReceiver().(*CreateSpecType_Opsgenie); ok {
		return x.Opsgenie
	}
	return nil
}

func (m *CreateSpecType) GetEmail() *EmailConfig {
	if x, ok := m.GetReceiver().(*CreateSpecType_Email); ok {
		return x.Email
	}
	return nil
}

func (m *CreateSpecType) GetSms() *SMSConfig {
	if x, ok := m.GetReceiver().(*CreateSpecType_Sms); ok {
		return x.Sms
	}
	return nil
}

func (m *CreateSpecType) GetWebhook() *WebhookConfig {
	if x, ok := m.GetReceiver().(*CreateSpecType_Webhook); ok {
		return x.Webhook
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_Slack)(nil),
		(*CreateSpecType_Pagerduty)(nil),
		(*CreateSpecType_Opsgenie)(nil),
		(*CreateSpecType_Email)(nil),
		(*CreateSpecType_Sms)(nil),
		(*CreateSpecType_Webhook)(nil),
	}
}

// Replace Alert Receiver
//
// x-displayName: "Replace Alert Receiver"
// Replaces the content of an Alert Receiver object
type ReplaceSpecType struct {
	// Types that are valid to be assigned to Receiver:
	//	*ReplaceSpecType_Slack
	//	*ReplaceSpecType_Pagerduty
	//	*ReplaceSpecType_Opsgenie
	//	*ReplaceSpecType_Email
	//	*ReplaceSpecType_Sms
	//	*ReplaceSpecType_Webhook
	Receiver isReplaceSpecType_Receiver `protobuf_oneof:"receiver"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{15}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_Receiver interface {
	isReplaceSpecType_Receiver()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_Slack struct {
	Slack *SlackConfig `protobuf:"bytes,1,opt,name=slack,proto3,oneof" json:"slack,omitempty"`
}
type ReplaceSpecType_Pagerduty struct {
	Pagerduty *PagerDutyConfig `protobuf:"bytes,2,opt,name=pagerduty,proto3,oneof" json:"pagerduty,omitempty"`
}
type ReplaceSpecType_Opsgenie struct {
	Opsgenie *OpsGenieConfig `protobuf:"bytes,3,opt,name=opsgenie,proto3,oneof" json:"opsgenie,omitempty"`
}
type ReplaceSpecType_Email struct {
	Email *EmailConfig `protobuf:"bytes,4,opt,name=email,proto3,oneof" json:"email,omitempty"`
}
type ReplaceSpecType_Sms struct {
	Sms *SMSConfig `protobuf:"bytes,5,opt,name=sms,proto3,oneof" json:"sms,omitempty"`
}
type ReplaceSpecType_Webhook struct {
	Webhook *WebhookConfig `protobuf:"bytes,6,opt,name=webhook,proto3,oneof" json:"webhook,omitempty"`
}

func (*ReplaceSpecType_Slack) isReplaceSpecType_Receiver()     {}
func (*ReplaceSpecType_Pagerduty) isReplaceSpecType_Receiver() {}
func (*ReplaceSpecType_Opsgenie) isReplaceSpecType_Receiver()  {}
func (*ReplaceSpecType_Email) isReplaceSpecType_Receiver()     {}
func (*ReplaceSpecType_Sms) isReplaceSpecType_Receiver()       {}
func (*ReplaceSpecType_Webhook) isReplaceSpecType_Receiver()   {}

func (m *ReplaceSpecType) GetReceiver() isReplaceSpecType_Receiver {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *ReplaceSpecType) GetSlack() *SlackConfig {
	if x, ok := m.GetReceiver().(*ReplaceSpecType_Slack); ok {
		return x.Slack
	}
	return nil
}

func (m *ReplaceSpecType) GetPagerduty() *PagerDutyConfig {
	if x, ok := m.GetReceiver().(*ReplaceSpecType_Pagerduty); ok {
		return x.Pagerduty
	}
	return nil
}

func (m *ReplaceSpecType) GetOpsgenie() *OpsGenieConfig {
	if x, ok := m.GetReceiver().(*ReplaceSpecType_Opsgenie); ok {
		return x.Opsgenie
	}
	return nil
}

func (m *ReplaceSpecType) GetEmail() *EmailConfig {
	if x, ok := m.GetReceiver().(*ReplaceSpecType_Email); ok {
		return x.Email
	}
	return nil
}

func (m *ReplaceSpecType) GetSms() *SMSConfig {
	if x, ok := m.GetReceiver().(*ReplaceSpecType_Sms); ok {
		return x.Sms
	}
	return nil
}

func (m *ReplaceSpecType) GetWebhook() *WebhookConfig {
	if x, ok := m.GetReceiver().(*ReplaceSpecType_Webhook); ok {
		return x.Webhook
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_Slack)(nil),
		(*ReplaceSpecType_Pagerduty)(nil),
		(*ReplaceSpecType_Opsgenie)(nil),
		(*ReplaceSpecType_Email)(nil),
		(*ReplaceSpecType_Sms)(nil),
		(*ReplaceSpecType_Webhook)(nil),
	}
}

// Get Alert Receiver
//
// x-displayName: "Get Alert Receiver"
// Get the Alert Receiver object
type GetSpecType struct {
	// Types that are valid to be assigned to Receiver:
	//	*GetSpecType_Slack
	//	*GetSpecType_Pagerduty
	//	*GetSpecType_Opsgenie
	//	*GetSpecType_Email
	//	*GetSpecType_Sms
	//	*GetSpecType_Webhook
	Receiver isGetSpecType_Receiver `protobuf_oneof:"receiver"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1466d8d1f67094, []int{16}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_Receiver interface {
	isGetSpecType_Receiver()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_Slack struct {
	Slack *SlackConfig `protobuf:"bytes,1,opt,name=slack,proto3,oneof" json:"slack,omitempty"`
}
type GetSpecType_Pagerduty struct {
	Pagerduty *PagerDutyConfig `protobuf:"bytes,2,opt,name=pagerduty,proto3,oneof" json:"pagerduty,omitempty"`
}
type GetSpecType_Opsgenie struct {
	Opsgenie *OpsGenieConfig `protobuf:"bytes,3,opt,name=opsgenie,proto3,oneof" json:"opsgenie,omitempty"`
}
type GetSpecType_Email struct {
	Email *EmailConfig `protobuf:"bytes,4,opt,name=email,proto3,oneof" json:"email,omitempty"`
}
type GetSpecType_Sms struct {
	Sms *SMSConfig `protobuf:"bytes,5,opt,name=sms,proto3,oneof" json:"sms,omitempty"`
}
type GetSpecType_Webhook struct {
	Webhook *WebhookConfig `protobuf:"bytes,6,opt,name=webhook,proto3,oneof" json:"webhook,omitempty"`
}

func (*GetSpecType_Slack) isGetSpecType_Receiver()     {}
func (*GetSpecType_Pagerduty) isGetSpecType_Receiver() {}
func (*GetSpecType_Opsgenie) isGetSpecType_Receiver()  {}
func (*GetSpecType_Email) isGetSpecType_Receiver()     {}
func (*GetSpecType_Sms) isGetSpecType_Receiver()       {}
func (*GetSpecType_Webhook) isGetSpecType_Receiver()   {}

func (m *GetSpecType) GetReceiver() isGetSpecType_Receiver {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *GetSpecType) GetSlack() *SlackConfig {
	if x, ok := m.GetReceiver().(*GetSpecType_Slack); ok {
		return x.Slack
	}
	return nil
}

func (m *GetSpecType) GetPagerduty() *PagerDutyConfig {
	if x, ok := m.GetReceiver().(*GetSpecType_Pagerduty); ok {
		return x.Pagerduty
	}
	return nil
}

func (m *GetSpecType) GetOpsgenie() *OpsGenieConfig {
	if x, ok := m.GetReceiver().(*GetSpecType_Opsgenie); ok {
		return x.Opsgenie
	}
	return nil
}

func (m *GetSpecType) GetEmail() *EmailConfig {
	if x, ok := m.GetReceiver().(*GetSpecType_Email); ok {
		return x.Email
	}
	return nil
}

func (m *GetSpecType) GetSms() *SMSConfig {
	if x, ok := m.GetReceiver().(*GetSpecType_Sms); ok {
		return x.Sms
	}
	return nil
}

func (m *GetSpecType) GetWebhook() *WebhookConfig {
	if x, ok := m.GetReceiver().(*GetSpecType_Webhook); ok {
		return x.Webhook
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_Slack)(nil),
		(*GetSpecType_Pagerduty)(nil),
		(*GetSpecType_Opsgenie)(nil),
		(*GetSpecType_Email)(nil),
		(*GetSpecType_Sms)(nil),
		(*GetSpecType_Webhook)(nil),
	}
}

func init() {
	proto.RegisterType((*SlackConfig)(nil), "ves.io.schema.alert_receiver.SlackConfig")
	proto.RegisterType((*PagerDutyConfig)(nil), "ves.io.schema.alert_receiver.PagerDutyConfig")
	proto.RegisterType((*OpsGenieConfig)(nil), "ves.io.schema.alert_receiver.OpsGenieConfig")
	proto.RegisterType((*EmailConfig)(nil), "ves.io.schema.alert_receiver.EmailConfig")
	proto.RegisterType((*SMSConfig)(nil), "ves.io.schema.alert_receiver.SMSConfig")
	proto.RegisterType((*WebhookConfig)(nil), "ves.io.schema.alert_receiver.WebhookConfig")
	proto.RegisterType((*HTTPConfig)(nil), "ves.io.schema.alert_receiver.HTTPConfig")
	proto.RegisterType((*ClientCertificateObj)(nil), "ves.io.schema.alert_receiver.ClientCertificateObj")
	proto.RegisterType((*CACertificateObj)(nil), "ves.io.schema.alert_receiver.CACertificateObj")
	proto.RegisterType((*TLSConfig)(nil), "ves.io.schema.alert_receiver.TLSConfig")
	proto.RegisterType((*UpstreamTlsValidationContext)(nil), "ves.io.schema.alert_receiver.UpstreamTlsValidationContext")
	proto.RegisterType((*AuthToken)(nil), "ves.io.schema.alert_receiver.AuthToken")
	proto.RegisterType((*HttpBasicAuth)(nil), "ves.io.schema.alert_receiver.HttpBasicAuth")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.alert_receiver.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.alert_receiver.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.alert_receiver.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.alert_receiver.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/alert_receiver/types.proto", fileDescriptor_ca1466d8d1f67094)
}

var fileDescriptor_ca1466d8d1f67094 = []byte{
	// 1505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0x4d, 0x6f, 0xdb, 0x46,
	0x13, 0xd6, 0x5a, 0x1f, 0x96, 0x86, 0xb6, 0x25, 0xf3, 0xf5, 0xfb, 0x46, 0x71, 0x0c, 0xc5, 0xaf,
	0x5a, 0xa0, 0x4e, 0xa3, 0x0f, 0x4b, 0x89, 0x9b, 0xc4, 0x01, 0x8c, 0x58, 0x6e, 0x6a, 0xd5, 0x4d,
	0xe2, 0x80, 0x56, 0x5d, 0xf4, 0x93, 0x5d, 0xd1, 0x6b, 0x89, 0x36, 0xc5, 0x65, 0xc9, 0x95, 0x3f,
	0x52, 0x04, 0x08, 0x7a, 0xee, 0x21, 0xc8, 0x5f, 0xe8, 0xa5, 0xc8, 0x4f, 0xa8, 0x2e, 0x3e, 0x16,
	0x3d, 0x19, 0xe8, 0x25, 0xc7, 0x5a, 0x69, 0x81, 0xf6, 0x16, 0xe4, 0x14, 0xf4, 0x54, 0xec, 0x92,
	0x94, 0x25, 0x21, 0x90, 0x5d, 0x14, 0xe8, 0x21, 0xc8, 0x4d, 0xcb, 0x7d, 0x9e, 0x67, 0x66, 0x76,
	0x66, 0x77, 0x06, 0x82, 0x99, 0x1d, 0xe2, 0xe4, 0x74, 0x9a, 0x77, 0xb4, 0x3a, 0x69, 0xe0, 0x3c,
	0x36, 0x88, 0xcd, 0x54, 0x9b, 0x68, 0x44, 0xdf, 0x21, 0x76, 0x9e, 0xed, 0x5b, 0xc4, 0xc9, 0x59,
	0x36, 0x65, 0x54, 0x9e, 0x72, 0x91, 0x39, 0x17, 0x99, 0xeb, 0x45, 0x4e, 0x66, 0x6b, 0x3a, 0xab,
	0x37, 0xab, 0x39, 0x8d, 0x36, 0xf2, 0x35, 0x5a, 0xa3, 0x79, 0x41, 0xaa, 0x36, 0x37, 0xc5, 0x4a,
	0x2c, 0xc4, 0x2f, 0x57, 0x6c, 0xf2, 0x5c, 0xaf, 0x59, 0x6a, 0x31, 0x9d, 0x9a, 0x9e, 0xa5, 0xc9,
	0xb3, 0xbd, 0x9b, 0x5d, 0x4e, 0x4c, 0x4e, 0xf5, 0x6e, 0xed, 0x60, 0x43, 0xdf, 0xc0, 0x8c, 0x78,
	0xbb, 0xd3, 0x7d, 0xbb, 0x3a, 0xd9, 0x55, 0x7b, 0xa4, 0xd3, 0xbb, 0x20, 0xad, 0x19, 0x58, 0xdb,
	0x5e, 0xa2, 0xe6, 0xa6, 0x5e, 0x93, 0x0b, 0x10, 0x6c, 0xda, 0x46, 0x12, 0x4d, 0xa3, 0x19, 0xa9,
	0x78, 0x36, 0xd7, 0x1b, 0xe1, 0x1a, 0xd1, 0x6c, 0xc2, 0x2a, 0xfb, 0x16, 0x29, 0x85, 0x0e, 0x5b,
	0x08, 0x29, 0x1c, 0x2b, 0xcf, 0xc1, 0xb0, 0x56, 0xc7, 0xa6, 0x49, 0x8c, 0xe4, 0xd0, 0x34, 0x9a,
	0x89, 0x95, 0xce, 0xfd, 0xf0, 0xc7, 0x41, 0xf0, 0x7f, 0xf6, 0x44, 0x51, 0xfe, 0xe2, 0x53, 0x9c,
	0xbd, 0x37, 0x9b, 0xbd, 0x96, 0x55, 0x3f, 0xff, 0xba, 0x90, 0xb9, 0x3a, 0x7b, 0xff, 0x4d, 0xc5,
	0xc7, 0xa6, 0xbf, 0x82, 0xf8, 0x5d, 0x5c, 0x23, 0xf6, 0xbb, 0x4d, 0xb6, 0xef, 0x19, 0xbf, 0x01,
	0x92, 0x4d, 0x9b, 0x4c, 0x37, 0x6b, 0xea, 0x36, 0xd9, 0x3f, 0xad, 0x13, 0xe0, 0x71, 0x3e, 0x20,
	0xfb, 0xf2, 0x94, 0xeb, 0xbe, 0xeb, 0x07, 0x70, 0x3f, 0xc2, 0x76, 0xf0, 0xa1, 0xe7, 0x69, 0xba,
	0x0e, 0x63, 0xab, 0x96, 0xb3, 0x4c, 0x4c, 0x9d, 0x78, 0x16, 0xaf, 0xc2, 0x30, 0xb6, 0xf4, 0xbf,
	0x63, 0x2d, 0x82, 0x2d, 0xfd, 0x64, 0x4b, 0x39, 0x90, 0x6e, 0x36, 0xb0, 0x6e, 0x78, 0x66, 0xce,
	0x43, 0x98, 0xf0, 0xa5, 0x30, 0x12, 0x2b, 0xc5, 0x38, 0x3c, 0x64, 0x0f, 0x7d, 0x89, 0x14, 0xf7,
	0x7b, 0x7a, 0x01, 0x62, 0x6b, 0xb7, 0xd7, 0x3a, 0x39, 0x18, 0xd3, 0xa8, 0xc9, 0xb0, 0xc6, 0x54,
	0xb3, 0xd9, 0xa8, 0x12, 0xdb, 0xa3, 0xf9, 0x56, 0x0e, 0x86, 0x90, 0x32, 0xea, 0x21, 0xee, 0x08,
	0x40, 0xfa, 0x3b, 0x04, 0xa3, 0x1f, 0x91, 0x6a, 0x9d, 0x52, 0x3f, 0x91, 0xd7, 0x5d, 0xff, 0x42,
	0x27, 0x45, 0x35, 0xc6, 0xa3, 0xea, 0x73, 0x5f, 0x7e, 0x1f, 0xa4, 0x3a, 0x63, 0x96, 0xaa, 0x09,
	0xad, 0x64, 0x50, 0x88, 0xcc, 0xe4, 0x06, 0xd5, 0x7b, 0xae, 0x5c, 0xa9, 0xdc, 0x75, 0x6d, 0x2b,
	0xc0, 0xc9, 0xee, 0xef, 0x95, 0x50, 0x14, 0x25, 0x86, 0x56, 0x42, 0xd1, 0xa1, 0x44, 0x30, 0xfd,
	0x22, 0x04, 0x70, 0x0c, 0x93, 0x17, 0x21, 0x61, 0x52, 0x15, 0x37, 0x59, 0x9d, 0xda, 0xfa, 0x3d,
	0xcc, 0xab, 0x32, 0x39, 0x2c, 0x4c, 0x4d, 0xf4, 0x99, 0xba, 0xd9, 0xb0, 0xd8, 0x7e, 0x39, 0xa0,
	0xc4, 0x4d, 0xba, 0xd8, 0x0d, 0x97, 0x6f, 0x01, 0x54, 0xb1, 0xa3, 0x6b, 0x42, 0x45, 0x24, 0x43,
	0x2a, 0x5e, 0x3c, 0xc1, 0x4f, 0xc6, 0xac, 0x12, 0xe7, 0x70, 0xa5, 0x72, 0x40, 0x89, 0x55, 0xfd,
	0x85, 0x5c, 0x06, 0xe0, 0x3a, 0x2a, 0xa3, 0xdb, 0xc4, 0x4c, 0xc6, 0x84, 0xda, 0x5b, 0x83, 0xd5,
	0x38, 0xaf, 0xc2, 0xe1, 0x5c, 0x09, 0xfb, 0x0b, 0xf9, 0x33, 0x88, 0x6b, 0x86, 0x4e, 0x4c, 0xa6,
	0x6a, 0x1c, 0x4e, 0xab, 0x5b, 0x49, 0x10, 0x72, 0xc5, 0xc1, 0x72, 0x4b, 0x82, 0xb4, 0x44, 0x6c,
	0xa6, 0x6f, 0xea, 0x1a, 0x66, 0x64, 0xb5, 0xba, 0x55, 0x0e, 0x28, 0xa3, 0x5a, 0xe7, 0xfb, 0x6a,
	0x75, 0x4b, 0xfe, 0x3f, 0x8c, 0x10, 0x13, 0x57, 0x0d, 0xa2, 0xf2, 0x83, 0x2e, 0x8a, 0x24, 0x47,
	0x15, 0xc9, 0xfd, 0xc6, 0xe3, 0x2b, 0xca, 0x17, 0x20, 0xb1, 0x49, 0x0d, 0x83, 0xee, 0xaa, 0x36,
	0xd9, 0xd0, 0x6d, 0xa2, 0x31, 0x27, 0x19, 0x16, 0xb0, 0xb8, 0xfb, 0x5d, 0xf1, 0x3f, 0xcb, 0x59,
	0x88, 0x98, 0x54, 0x65, 0x86, 0x93, 0x1c, 0x19, 0x70, 0xf8, 0x48, 0x09, 0x9b, 0xb4, 0x62, 0x38,
	0x72, 0x09, 0x86, 0x9b, 0x0e, 0x11, 0xf8, 0xd1, 0xd3, 0x9c, 0x50, 0xe5, 0x96, 0x57, 0xd7, 0x65,
	0xa4, 0x44, 0x9a, 0x0e, 0xa9, 0x18, 0xce, 0xfc, 0xc8, 0xf3, 0x85, 0x58, 0x61, 0x2e, 0x53, 0x28,
	0x64, 0x2e, 0x67, 0xe6, 0x4a, 0x6f, 0x80, 0x24, 0x8e, 0x5d, 0xab, 0x53, 0x5d, 0x23, 0xf2, 0xc4,
	0x41, 0x0b, 0x0d, 0x1f, 0xb6, 0x50, 0xbc, 0xdd, 0x42, 0xd1, 0x2b, 0x99, 0x62, 0xe6, 0x5a, 0xa6,
	0x30, 0x5b, 0x3a, 0x0f, 0xc0, 0x0c, 0xc7, 0xc7, 0x8c, 0x1f, 0xb4, 0xd0, 0xe8, 0x61, 0x0b, 0x49,
	0xed, 0x16, 0x0a, 0x17, 0x8a, 0x99, 0xc2, 0xa5, 0x4e, 0xa1, 0x45, 0x13, 0xb1, 0x95, 0x50, 0x34,
	0x92, 0x18, 0x5e, 0x09, 0x45, 0xe3, 0x89, 0xc4, 0x4a, 0x28, 0x2a, 0x25, 0x46, 0xd2, 0x26, 0x4c,
	0xbc, 0xec, 0x6c, 0xe5, 0x75, 0x90, 0xbc, 0x68, 0x44, 0x92, 0xd0, 0x74, 0x70, 0x46, 0x2a, 0x4e,
	0xf5, 0x45, 0xb4, 0x5a, 0xdd, 0x22, 0x1a, 0x53, 0xc8, 0xa6, 0xb8, 0x31, 0xc9, 0xc7, 0xf7, 0x25,
	0xed, 0x58, 0x45, 0xdc, 0x9d, 0x47, 0x68, 0x28, 0x81, 0x94, 0x98, 0x1b, 0xde, 0x6a, 0x75, 0x2b,
	0xdd, 0x80, 0xc4, 0xd2, 0x62, 0x9f, 0xad, 0x8f, 0x01, 0x98, 0xdd, 0x74, 0x18, 0xd9, 0x50, 0x35,
	0x7c, 0x2a, 0x53, 0x53, 0x8f, 0xef, 0xc7, 0x8f, 0x29, 0xaa, 0xa1, 0x3b, 0xac, 0xdb, 0x9c, 0xb7,
	0xb5, 0x84, 0xd3, 0x8f, 0x42, 0x10, 0xeb, 0x1c, 0xb4, 0x7c, 0x11, 0x82, 0x8e, 0xa9, 0x8b, 0xf4,
	0xc4, 0x4a, 0x67, 0x5e, 0xb4, 0x50, 0xc0, 0x7b, 0x70, 0xea, 0xfe, 0x4d, 0x4f, 0x3e, 0x18, 0x2a,
	0x07, 0x14, 0x8e, 0x92, 0xaf, 0x80, 0xb4, 0xa1, 0x3b, 0xa2, 0x9a, 0x38, 0x69, 0x64, 0xe0, 0x05,
	0x04, 0x0f, 0xba, 0x66, 0xea, 0xf2, 0x75, 0x90, 0x1a, 0xba, 0xa9, 0xee, 0x10, 0xdb, 0xe1, 0x37,
	0x97, 0x57, 0xd7, 0x58, 0x71, 0xb2, 0x8f, 0x58, 0x31, 0x9c, 0xbb, 0xbc, 0xcf, 0x68, 0xd4, 0x50,
	0xa0, 0xa1, 0x9b, 0xeb, 0x2e, 0x5a, 0x90, 0xf1, 0x5e, 0x87, 0x1c, 0x39, 0x05, 0x19, 0xef, 0xf9,
	0x64, 0x06, 0x67, 0x78, 0xd2, 0x1c, 0x62, 0xef, 0x10, 0x9b, 0x6b, 0xb8, 0x87, 0xcc, 0x85, 0xc6,
	0x85, 0xfb, 0xf3, 0x83, 0x4b, 0xf2, 0x43, 0xcb, 0x61, 0x36, 0xc1, 0x8d, 0x8a, 0xe1, 0xac, 0xbb,
	0xfd, 0x52, 0xa7, 0xe6, 0x12, 0x35, 0x19, 0xd9, 0x63, 0x65, 0xa4, 0xfc, 0xb7, 0xe9, 0x90, 0x35,
	0xa1, 0xbd, 0xde, 0x25, 0x2d, 0xbf, 0x07, 0xff, 0xd9, 0xa1, 0x06, 0x23, 0xb6, 0x8d, 0xd5, 0xae,
	0x3c, 0x26, 0x06, 0x5e, 0x9a, 0x71, 0x9f, 0x52, 0xf1, 0x73, 0x35, 0x2f, 0x3d, 0x5f, 0x88, 0x16,
	0x66, 0x33, 0x85, 0xcb, 0x99, 0xc2, 0x1c, 0x2f, 0x6b, 0xc7, 0xd4, 0xfb, 0xcb, 0x1a, 0x44, 0x59,
	0x5f, 0xca, 0x14, 0x8a, 0xa5, 0x2c, 0x24, 0xfd, 0x38, 0x3b, 0xae, 0x76, 0xc3, 0x13, 0xde, 0x4d,
	0x09, 0x17, 0xde, 0xc9, 0x14, 0xae, 0xac, 0x84, 0xa2, 0x90, 0x90, 0xdc, 0xca, 0x4f, 0x9b, 0x30,
	0x35, 0x28, 0x52, 0xf9, 0x0e, 0x48, 0x1a, 0x3e, 0x7e, 0xa0, 0xdc, 0x06, 0x98, 0x3b, 0xe1, 0x81,
	0xea, 0x2b, 0x6a, 0x25, 0xa6, 0x61, 0xef, 0x59, 0x4a, 0x97, 0x20, 0xd6, 0x79, 0x0e, 0xe5, 0x39,
	0x08, 0xbb, 0xcf, 0xe8, 0x29, 0xfb, 0xaa, 0x8b, 0x4e, 0xef, 0xc1, 0x68, 0xcf, 0x03, 0x2d, 0xbf,
	0x0d, 0xfc, 0x56, 0xd9, 0xaa, 0x89, 0x1b, 0xc4, 0xeb, 0x83, 0xa3, 0x5d, 0x15, 0x9d, 0xbc, 0xa1,
	0x44, 0xf9, 0xfe, 0x1d, 0xdc, 0x20, 0xf2, 0x75, 0x88, 0x5a, 0xd8, 0x71, 0x76, 0xa9, 0xbd, 0xe1,
	0xf5, 0x82, 0x13, 0xcd, 0x76, 0x08, 0xe9, 0x9f, 0x83, 0x30, 0xb6, 0x6c, 0xd0, 0x2a, 0x36, 0xd6,
	0x2c, 0xa2, 0x71, 0x88, 0xbc, 0x08, 0x61, 0x87, 0xcf, 0x46, 0x5e, 0x0c, 0x17, 0x06, 0x1f, 0x4d,
	0xd7, 0x18, 0x55, 0x0e, 0x28, 0x2e, 0x53, 0xbe, 0x0d, 0x31, 0x8b, 0x4f, 0x39, 0x1b, 0x4d, 0xb6,
	0xef, 0xf9, 0x94, 0x1d, 0x2c, 0xd3, 0x37, 0x14, 0xf1, 0xbe, 0xd2, 0x51, 0x90, 0x57, 0x20, 0x4a,
	0x2d, 0xa7, 0xc6, 0x27, 0x18, 0xaf, 0x2b, 0x67, 0x06, 0xab, 0xf5, 0xce, 0x3b, 0xe5, 0x80, 0xd2,
	0xe1, 0xf3, 0xe8, 0xdc, 0xa1, 0x24, 0x74, 0x9a, 0xe8, 0xba, 0xc6, 0x19, 0x1e, 0x9d, 0x60, 0xf2,
	0x21, 0xc3, 0x69, 0xb8, 0x8d, 0xe5, 0xc4, 0x3e, 0xd0, 0x99, 0x6f, 0xc4, 0xc3, 0xd3, 0x70, 0xe4,
	0x65, 0x18, 0xde, 0x75, 0x47, 0x16, 0xaf, 0xeb, 0x9f, 0xd0, 0xb8, 0x7b, 0xe6, 0x9b, 0x72, 0x40,
	0xf1, 0xd9, 0xa5, 0x09, 0x88, 0xfa, 0x20, 0x39, 0x7a, 0xd0, 0x42, 0xe8, 0xb0, 0x85, 0x22, 0x6e,
	0x0f, 0x48, 0xff, 0x1a, 0x84, 0xb1, 0x25, 0x9b, 0x60, 0x46, 0x5e, 0x67, 0xf5, 0xdf, 0xce, 0x6a,
	0xe4, 0x9f, 0x64, 0x75, 0x7e, 0xfc, 0xa7, 0x85, 0xbe, 0xfb, 0x58, 0x4a, 0x76, 0x25, 0x7a, 0xe4,
	0x9b, 0x3f, 0x51, 0x67, 0x95, 0xfe, 0x2d, 0x08, 0x71, 0x85, 0x58, 0x06, 0xd6, 0x5e, 0xe7, 0xf9,
	0x55, 0xce, 0xf3, 0x51, 0x10, 0xa4, 0x65, 0xc2, 0x5e, 0xe7, 0xf8, 0xd5, 0xcd, 0x71, 0xe9, 0x5b,
	0x74, 0x78, 0x94, 0x0a, 0x3c, 0x39, 0x4a, 0x05, 0x9e, 0x1d, 0xa5, 0xd0, 0x83, 0x76, 0x0a, 0x7d,
	0xdf, 0x4e, 0xa1, 0x1f, 0xdb, 0x29, 0x74, 0xd8, 0x4e, 0xa1, 0x27, 0xed, 0x14, 0xfa, 0xa5, 0x9d,
	0x42, 0xbf, 0xb7, 0x53, 0x81, 0x67, 0xed, 0x14, 0x7a, 0xf8, 0x34, 0x15, 0x38, 0x7c, 0x9a, 0x0a,
	0x3c, 0x79, 0x9a, 0x0a, 0x7c, 0xa2, 0xd4, 0xa8, 0xb5, 0x5d, 0xcb, 0xf9, 0x33, 0x57, 0xae, 0xe9,
	0xe4, 0xc5, 0x8f, 0x4d, 0x6a, 0x37, 0xb2, 0x96, 0x4d, 0x77, 0xf4, 0x0d, 0x62, 0x67, 0xfd, 0xed,
	0xbc, 0x55, 0xad, 0xd1, 0x3c, 0xd9, 0x63, 0xde, 0xbf, 0x23, 0x2f, 0xfd, 0xc7, 0xa7, 0x1a, 0x11,
	0xff, 0x93, 0x5c, 0xfa, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x0c, 0xe6, 0x8d, 0x18, 0x12, 0x00,
	0x00,
}

func (this *SlackConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SlackConfig)
	if !ok {
		that2, ok := that.(SlackConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Url.Equal(that1.Url) {
		return false
	}
	if this.Channel != that1.Channel {
		return false
	}
	return true
}
func (this *PagerDutyConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PagerDutyConfig)
	if !ok {
		that2, ok := that.(PagerDutyConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoutingKey.Equal(that1.RoutingKey) {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *OpsGenieConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpsGenieConfig)
	if !ok {
		that2, ok := that.(OpsGenieConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiKey.Equal(that1.ApiKey) {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *EmailConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EmailConfig)
	if !ok {
		that2, ok := that.(EmailConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	return true
}
func (this *SMSConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SMSConfig)
	if !ok {
		that2, ok := that.(SMSConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ContactNumber != that1.ContactNumber {
		return false
	}
	return true
}
func (this *WebhookConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebhookConfig)
	if !ok {
		that2, ok := that.(WebhookConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Url.Equal(that1.Url) {
		return false
	}
	if !this.HttpConfig.Equal(that1.HttpConfig) {
		return false
	}
	return true
}
func (this *HTTPConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPConfig)
	if !ok {
		that2, ok := that.(HTTPConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AuthChoice == nil {
		if this.AuthChoice != nil {
			return false
		}
	} else if this.AuthChoice == nil {
		return false
	} else if !this.AuthChoice.Equal(that1.AuthChoice) {
		return false
	}
	if this.EnableHttp2 != that1.EnableHttp2 {
		return false
	}
	if this.FollowRedirects != that1.FollowRedirects {
		return false
	}
	if that1.TlsChoice == nil {
		if this.TlsChoice != nil {
			return false
		}
	} else if this.TlsChoice == nil {
		return false
	} else if !this.TlsChoice.Equal(that1.TlsChoice) {
		return false
	}
	return true
}
func (this *HTTPConfig_NoAuthorization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPConfig_NoAuthorization)
	if !ok {
		that2, ok := that.(HTTPConfig_NoAuthorization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoAuthorization.Equal(that1.NoAuthorization) {
		return false
	}
	return true
}
func (this *HTTPConfig_BasicAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPConfig_BasicAuth)
	if !ok {
		that2, ok := that.(HTTPConfig_BasicAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BasicAuth.Equal(that1.BasicAuth) {
		return false
	}
	return true
}
func (this *HTTPConfig_AuthToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPConfig_AuthToken)
	if !ok {
		that2, ok := that.(HTTPConfig_AuthToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AuthToken.Equal(that1.AuthToken) {
		return false
	}
	return true
}
func (this *HTTPConfig_ClientCertObj) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPConfig_ClientCertObj)
	if !ok {
		that2, ok := that.(HTTPConfig_ClientCertObj)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientCertObj.Equal(that1.ClientCertObj) {
		return false
	}
	return true
}
func (this *HTTPConfig_NoTls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPConfig_NoTls)
	if !ok {
		that2, ok := that.(HTTPConfig_NoTls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoTls.Equal(that1.NoTls) {
		return false
	}
	return true
}
func (this *HTTPConfig_UseTls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPConfig_UseTls)
	if !ok {
		that2, ok := that.(HTTPConfig_UseTls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseTls.Equal(that1.UseTls) {
		return false
	}
	return true
}
func (this *ClientCertificateObj) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientCertificateObj)
	if !ok {
		that2, ok := that.(ClientCertificateObj)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.UseTlsObj) != len(that1.UseTlsObj) {
		return false
	}
	for i := range this.UseTlsObj {
		if !this.UseTlsObj[i].Equal(that1.UseTlsObj[i]) {
			return false
		}
	}
	return true
}
func (this *CACertificateObj) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CACertificateObj)
	if !ok {
		that2, ok := that.(CACertificateObj)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TrustedCa) != len(that1.TrustedCa) {
		return false
	}
	for i := range this.TrustedCa {
		if !this.TrustedCa[i].Equal(that1.TrustedCa[i]) {
			return false
		}
	}
	return true
}
func (this *TLSConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TLSConfig)
	if !ok {
		that2, ok := that.(TLSConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SniChoice == nil {
		if this.SniChoice != nil {
			return false
		}
	} else if this.SniChoice == nil {
		return false
	} else if !this.SniChoice.Equal(that1.SniChoice) {
		return false
	}
	if this.MinVersion != that1.MinVersion {
		return false
	}
	if this.MaxVersion != that1.MaxVersion {
		return false
	}
	if that1.ServerValidationChoice == nil {
		if this.ServerValidationChoice != nil {
			return false
		}
	} else if this.ServerValidationChoice == nil {
		return false
	} else if !this.ServerValidationChoice.Equal(that1.ServerValidationChoice) {
		return false
	}
	return true
}
func (this *TLSConfig_Sni) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TLSConfig_Sni)
	if !ok {
		that2, ok := that.(TLSConfig_Sni)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sni != that1.Sni {
		return false
	}
	return true
}
func (this *TLSConfig_DisableSni) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TLSConfig_DisableSni)
	if !ok {
		that2, ok := that.(TLSConfig_DisableSni)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableSni.Equal(that1.DisableSni) {
		return false
	}
	return true
}
func (this *TLSConfig_UseServerVerification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TLSConfig_UseServerVerification)
	if !ok {
		that2, ok := that.(TLSConfig_UseServerVerification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseServerVerification.Equal(that1.UseServerVerification) {
		return false
	}
	return true
}
func (this *TLSConfig_VolterraTrustedCa) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TLSConfig_VolterraTrustedCa)
	if !ok {
		that2, ok := that.(TLSConfig_VolterraTrustedCa)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VolterraTrustedCa.Equal(that1.VolterraTrustedCa) {
		return false
	}
	return true
}
func (this *UpstreamTlsValidationContext) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamTlsValidationContext)
	if !ok {
		that2, ok := that.(UpstreamTlsValidationContext)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaCertObj.Equal(that1.CaCertObj) {
		return false
	}
	return true
}
func (this *AuthToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthToken)
	if !ok {
		that2, ok := that.(AuthToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Token.Equal(that1.Token) {
		return false
	}
	return true
}
func (this *HttpBasicAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpBasicAuth)
	if !ok {
		that2, ok := that.(HttpBasicAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserName != that1.UserName {
		return false
	}
	if !this.Password.Equal(that1.Password) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Receiver == nil {
		if this.Receiver != nil {
			return false
		}
	} else if this.Receiver == nil {
		return false
	} else if !this.Receiver.Equal(that1.Receiver) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Slack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Slack)
	if !ok {
		that2, ok := that.(GlobalSpecType_Slack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Slack.Equal(that1.Slack) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Pagerduty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Pagerduty)
	if !ok {
		that2, ok := that.(GlobalSpecType_Pagerduty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pagerduty.Equal(that1.Pagerduty) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Opsgenie) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Opsgenie)
	if !ok {
		that2, ok := that.(GlobalSpecType_Opsgenie)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Opsgenie.Equal(that1.Opsgenie) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Email) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Email)
	if !ok {
		that2, ok := that.(GlobalSpecType_Email)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Email.Equal(that1.Email) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Sms) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Sms)
	if !ok {
		that2, ok := that.(GlobalSpecType_Sms)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sms.Equal(that1.Sms) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Webhook) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Webhook)
	if !ok {
		that2, ok := that.(GlobalSpecType_Webhook)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Webhook.Equal(that1.Webhook) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Receiver == nil {
		if this.Receiver != nil {
			return false
		}
	} else if this.Receiver == nil {
		return false
	} else if !this.Receiver.Equal(that1.Receiver) {
		return false
	}
	return true
}
func (this *CreateSpecType_Slack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Slack)
	if !ok {
		that2, ok := that.(CreateSpecType_Slack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Slack.Equal(that1.Slack) {
		return false
	}
	return true
}
func (this *CreateSpecType_Pagerduty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Pagerduty)
	if !ok {
		that2, ok := that.(CreateSpecType_Pagerduty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pagerduty.Equal(that1.Pagerduty) {
		return false
	}
	return true
}
func (this *CreateSpecType_Opsgenie) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Opsgenie)
	if !ok {
		that2, ok := that.(CreateSpecType_Opsgenie)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Opsgenie.Equal(that1.Opsgenie) {
		return false
	}
	return true
}
func (this *CreateSpecType_Email) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Email)
	if !ok {
		that2, ok := that.(CreateSpecType_Email)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Email.Equal(that1.Email) {
		return false
	}
	return true
}
func (this *CreateSpecType_Sms) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Sms)
	if !ok {
		that2, ok := that.(CreateSpecType_Sms)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sms.Equal(that1.Sms) {
		return false
	}
	return true
}
func (this *CreateSpecType_Webhook) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Webhook)
	if !ok {
		that2, ok := that.(CreateSpecType_Webhook)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Webhook.Equal(that1.Webhook) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Receiver == nil {
		if this.Receiver != nil {
			return false
		}
	} else if this.Receiver == nil {
		return false
	} else if !this.Receiver.Equal(that1.Receiver) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Slack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Slack)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Slack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Slack.Equal(that1.Slack) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Pagerduty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Pagerduty)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Pagerduty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pagerduty.Equal(that1.Pagerduty) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Opsgenie) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Opsgenie)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Opsgenie)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Opsgenie.Equal(that1.Opsgenie) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Email) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Email)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Email)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Email.Equal(that1.Email) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Sms) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Sms)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Sms)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sms.Equal(that1.Sms) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Webhook) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Webhook)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Webhook)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Webhook.Equal(that1.Webhook) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Receiver == nil {
		if this.Receiver != nil {
			return false
		}
	} else if this.Receiver == nil {
		return false
	} else if !this.Receiver.Equal(that1.Receiver) {
		return false
	}
	return true
}
func (this *GetSpecType_Slack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Slack)
	if !ok {
		that2, ok := that.(GetSpecType_Slack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Slack.Equal(that1.Slack) {
		return false
	}
	return true
}
func (this *GetSpecType_Pagerduty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Pagerduty)
	if !ok {
		that2, ok := that.(GetSpecType_Pagerduty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pagerduty.Equal(that1.Pagerduty) {
		return false
	}
	return true
}
func (this *GetSpecType_Opsgenie) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Opsgenie)
	if !ok {
		that2, ok := that.(GetSpecType_Opsgenie)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Opsgenie.Equal(that1.Opsgenie) {
		return false
	}
	return true
}
func (this *GetSpecType_Email) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Email)
	if !ok {
		that2, ok := that.(GetSpecType_Email)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Email.Equal(that1.Email) {
		return false
	}
	return true
}
func (this *GetSpecType_Sms) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Sms)
	if !ok {
		that2, ok := that.(GetSpecType_Sms)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sms.Equal(that1.Sms) {
		return false
	}
	return true
}
func (this *GetSpecType_Webhook) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Webhook)
	if !ok {
		that2, ok := that.(GetSpecType_Webhook)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Webhook.Equal(that1.Webhook) {
		return false
	}
	return true
}
func (this *SlackConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&alert_receiver.SlackConfig{")
	if this.Url != nil {
		s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	}
	s = append(s, "Channel: "+fmt.Sprintf("%#v", this.Channel)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PagerDutyConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&alert_receiver.PagerDutyConfig{")
	if this.RoutingKey != nil {
		s = append(s, "RoutingKey: "+fmt.Sprintf("%#v", this.RoutingKey)+",\n")
	}
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpsGenieConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&alert_receiver.OpsGenieConfig{")
	if this.ApiKey != nil {
		s = append(s, "ApiKey: "+fmt.Sprintf("%#v", this.ApiKey)+",\n")
	}
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EmailConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&alert_receiver.EmailConfig{")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SMSConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&alert_receiver.SMSConfig{")
	s = append(s, "ContactNumber: "+fmt.Sprintf("%#v", this.ContactNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WebhookConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&alert_receiver.WebhookConfig{")
	if this.Url != nil {
		s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	}
	if this.HttpConfig != nil {
		s = append(s, "HttpConfig: "+fmt.Sprintf("%#v", this.HttpConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HTTPConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&alert_receiver.HTTPConfig{")
	if this.AuthChoice != nil {
		s = append(s, "AuthChoice: "+fmt.Sprintf("%#v", this.AuthChoice)+",\n")
	}
	s = append(s, "EnableHttp2: "+fmt.Sprintf("%#v", this.EnableHttp2)+",\n")
	s = append(s, "FollowRedirects: "+fmt.Sprintf("%#v", this.FollowRedirects)+",\n")
	if this.TlsChoice != nil {
		s = append(s, "TlsChoice: "+fmt.Sprintf("%#v", this.TlsChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HTTPConfig_NoAuthorization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.HTTPConfig_NoAuthorization{` +
		`NoAuthorization:` + fmt.Sprintf("%#v", this.NoAuthorization) + `}`}, ", ")
	return s
}
func (this *HTTPConfig_BasicAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.HTTPConfig_BasicAuth{` +
		`BasicAuth:` + fmt.Sprintf("%#v", this.BasicAuth) + `}`}, ", ")
	return s
}
func (this *HTTPConfig_AuthToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.HTTPConfig_AuthToken{` +
		`AuthToken:` + fmt.Sprintf("%#v", this.AuthToken) + `}`}, ", ")
	return s
}
func (this *HTTPConfig_ClientCertObj) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.HTTPConfig_ClientCertObj{` +
		`ClientCertObj:` + fmt.Sprintf("%#v", this.ClientCertObj) + `}`}, ", ")
	return s
}
func (this *HTTPConfig_NoTls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.HTTPConfig_NoTls{` +
		`NoTls:` + fmt.Sprintf("%#v", this.NoTls) + `}`}, ", ")
	return s
}
func (this *HTTPConfig_UseTls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.HTTPConfig_UseTls{` +
		`UseTls:` + fmt.Sprintf("%#v", this.UseTls) + `}`}, ", ")
	return s
}
func (this *ClientCertificateObj) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&alert_receiver.ClientCertificateObj{")
	if this.UseTlsObj != nil {
		s = append(s, "UseTlsObj: "+fmt.Sprintf("%#v", this.UseTlsObj)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CACertificateObj) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&alert_receiver.CACertificateObj{")
	if this.TrustedCa != nil {
		s = append(s, "TrustedCa: "+fmt.Sprintf("%#v", this.TrustedCa)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&alert_receiver.TLSConfig{")
	if this.SniChoice != nil {
		s = append(s, "SniChoice: "+fmt.Sprintf("%#v", this.SniChoice)+",\n")
	}
	s = append(s, "MinVersion: "+fmt.Sprintf("%#v", this.MinVersion)+",\n")
	s = append(s, "MaxVersion: "+fmt.Sprintf("%#v", this.MaxVersion)+",\n")
	if this.ServerValidationChoice != nil {
		s = append(s, "ServerValidationChoice: "+fmt.Sprintf("%#v", this.ServerValidationChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSConfig_Sni) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.TLSConfig_Sni{` +
		`Sni:` + fmt.Sprintf("%#v", this.Sni) + `}`}, ", ")
	return s
}
func (this *TLSConfig_DisableSni) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.TLSConfig_DisableSni{` +
		`DisableSni:` + fmt.Sprintf("%#v", this.DisableSni) + `}`}, ", ")
	return s
}
func (this *TLSConfig_UseServerVerification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.TLSConfig_UseServerVerification{` +
		`UseServerVerification:` + fmt.Sprintf("%#v", this.UseServerVerification) + `}`}, ", ")
	return s
}
func (this *TLSConfig_VolterraTrustedCa) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.TLSConfig_VolterraTrustedCa{` +
		`VolterraTrustedCa:` + fmt.Sprintf("%#v", this.VolterraTrustedCa) + `}`}, ", ")
	return s
}
func (this *UpstreamTlsValidationContext) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&alert_receiver.UpstreamTlsValidationContext{")
	if this.CaCertObj != nil {
		s = append(s, "CaCertObj: "+fmt.Sprintf("%#v", this.CaCertObj)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&alert_receiver.AuthToken{")
	if this.Token != nil {
		s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HttpBasicAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&alert_receiver.HttpBasicAuth{")
	s = append(s, "UserName: "+fmt.Sprintf("%#v", this.UserName)+",\n")
	if this.Password != nil {
		s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&alert_receiver.GlobalSpecType{")
	if this.Receiver != nil {
		s = append(s, "Receiver: "+fmt.Sprintf("%#v", this.Receiver)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_Slack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GlobalSpecType_Slack{` +
		`Slack:` + fmt.Sprintf("%#v", this.Slack) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Pagerduty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GlobalSpecType_Pagerduty{` +
		`Pagerduty:` + fmt.Sprintf("%#v", this.Pagerduty) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Opsgenie) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GlobalSpecType_Opsgenie{` +
		`Opsgenie:` + fmt.Sprintf("%#v", this.Opsgenie) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Email) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GlobalSpecType_Email{` +
		`Email:` + fmt.Sprintf("%#v", this.Email) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Sms) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GlobalSpecType_Sms{` +
		`Sms:` + fmt.Sprintf("%#v", this.Sms) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Webhook) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GlobalSpecType_Webhook{` +
		`Webhook:` + fmt.Sprintf("%#v", this.Webhook) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&alert_receiver.CreateSpecType{")
	if this.Receiver != nil {
		s = append(s, "Receiver: "+fmt.Sprintf("%#v", this.Receiver)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_Slack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.CreateSpecType_Slack{` +
		`Slack:` + fmt.Sprintf("%#v", this.Slack) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Pagerduty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.CreateSpecType_Pagerduty{` +
		`Pagerduty:` + fmt.Sprintf("%#v", this.Pagerduty) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Opsgenie) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.CreateSpecType_Opsgenie{` +
		`Opsgenie:` + fmt.Sprintf("%#v", this.Opsgenie) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Email) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.CreateSpecType_Email{` +
		`Email:` + fmt.Sprintf("%#v", this.Email) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Sms) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.CreateSpecType_Sms{` +
		`Sms:` + fmt.Sprintf("%#v", this.Sms) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Webhook) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.CreateSpecType_Webhook{` +
		`Webhook:` + fmt.Sprintf("%#v", this.Webhook) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&alert_receiver.ReplaceSpecType{")
	if this.Receiver != nil {
		s = append(s, "Receiver: "+fmt.Sprintf("%#v", this.Receiver)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_Slack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.ReplaceSpecType_Slack{` +
		`Slack:` + fmt.Sprintf("%#v", this.Slack) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Pagerduty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.ReplaceSpecType_Pagerduty{` +
		`Pagerduty:` + fmt.Sprintf("%#v", this.Pagerduty) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Opsgenie) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.ReplaceSpecType_Opsgenie{` +
		`Opsgenie:` + fmt.Sprintf("%#v", this.Opsgenie) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Email) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.ReplaceSpecType_Email{` +
		`Email:` + fmt.Sprintf("%#v", this.Email) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Sms) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.ReplaceSpecType_Sms{` +
		`Sms:` + fmt.Sprintf("%#v", this.Sms) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Webhook) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.ReplaceSpecType_Webhook{` +
		`Webhook:` + fmt.Sprintf("%#v", this.Webhook) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&alert_receiver.GetSpecType{")
	if this.Receiver != nil {
		s = append(s, "Receiver: "+fmt.Sprintf("%#v", this.Receiver)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_Slack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GetSpecType_Slack{` +
		`Slack:` + fmt.Sprintf("%#v", this.Slack) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Pagerduty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GetSpecType_Pagerduty{` +
		`Pagerduty:` + fmt.Sprintf("%#v", this.Pagerduty) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Opsgenie) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GetSpecType_Opsgenie{` +
		`Opsgenie:` + fmt.Sprintf("%#v", this.Opsgenie) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Email) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GetSpecType_Email{` +
		`Email:` + fmt.Sprintf("%#v", this.Email) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Sms) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GetSpecType_Sms{` +
		`Sms:` + fmt.Sprintf("%#v", this.Sms) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Webhook) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&alert_receiver.GetSpecType_Webhook{` +
		`Webhook:` + fmt.Sprintf("%#v", this.Webhook) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SlackConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlackConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlackConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x12
	}
	if m.Url != nil {
		{
			size, err := m.Url.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PagerDutyConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PagerDutyConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PagerDutyConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if m.RoutingKey != nil {
		{
			size, err := m.RoutingKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OpsGenieConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpsGenieConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpsGenieConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if m.ApiKey != nil {
		{
			size, err := m.ApiKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EmailConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmailConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmailConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SMSConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SMSConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SMSConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContactNumber) > 0 {
		i -= len(m.ContactNumber)
		copy(dAtA[i:], m.ContactNumber)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ContactNumber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WebhookConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebhookConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebhookConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Url != nil {
		{
			size, err := m.Url.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.HttpConfig != nil {
		{
			size, err := m.HttpConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *HTTPConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HTTPConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TlsChoice != nil {
		{
			size := m.TlsChoice.Size()
			i -= size
			if _, err := m.TlsChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AuthChoice != nil {
		{
			size := m.AuthChoice.Size()
			i -= size
			if _, err := m.AuthChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.FollowRedirects {
		i--
		if m.FollowRedirects {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.EnableHttp2 {
		i--
		if m.EnableHttp2 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	return len(dAtA) - i, nil
}

func (m *HTTPConfig_BasicAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPConfig_BasicAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BasicAuth != nil {
		{
			size, err := m.BasicAuth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *HTTPConfig_NoAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPConfig_NoAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoAuthorization != nil {
		{
			size, err := m.NoAuthorization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *HTTPConfig_AuthToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPConfig_AuthToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AuthToken != nil {
		{
			size, err := m.AuthToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *HTTPConfig_ClientCertObj) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPConfig_ClientCertObj) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClientCertObj != nil {
		{
			size, err := m.ClientCertObj.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *HTTPConfig_NoTls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPConfig_NoTls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoTls != nil {
		{
			size, err := m.NoTls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *HTTPConfig_UseTls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPConfig_UseTls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseTls != nil {
		{
			size, err := m.UseTls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ClientCertificateObj) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientCertificateObj) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientCertificateObj) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UseTlsObj) > 0 {
		for iNdEx := len(m.UseTlsObj) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UseTlsObj[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CACertificateObj) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CACertificateObj) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CACertificateObj) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TrustedCa) > 0 {
		for iNdEx := len(m.TrustedCa) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TrustedCa[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TLSConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerValidationChoice != nil {
		{
			size := m.ServerValidationChoice.Size()
			i -= size
			if _, err := m.ServerValidationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SniChoice != nil {
		{
			size := m.SniChoice.Size()
			i -= size
			if _, err := m.SniChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaxVersion != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxVersion))
		i--
		dAtA[i] = 0x30
	}
	if m.MinVersion != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MinVersion))
		i--
		dAtA[i] = 0x28
	}
	return len(dAtA) - i, nil
}

func (m *TLSConfig_DisableSni) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSConfig_DisableSni) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableSni != nil {
		{
			size, err := m.DisableSni.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *TLSConfig_Sni) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSConfig_Sni) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Sni)
	copy(dAtA[i:], m.Sni)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Sni)))
	i--
	dAtA[i] = 0x6a
	return len(dAtA) - i, nil
}
func (m *TLSConfig_VolterraTrustedCa) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSConfig_VolterraTrustedCa) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VolterraTrustedCa != nil {
		{
			size, err := m.VolterraTrustedCa.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *TLSConfig_UseServerVerification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSConfig_UseServerVerification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseServerVerification != nil {
		{
			size, err := m.UseServerVerification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *UpstreamTlsValidationContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamTlsValidationContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamTlsValidationContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CaCertObj != nil {
		{
			size, err := m.CaCertObj.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HttpBasicAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpBasicAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpBasicAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Password != nil {
		{
			size, err := m.Password.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Receiver != nil {
		{
			size := m.Receiver.Size()
			i -= size
			if _, err := m.Receiver.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_Slack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Slack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Slack != nil {
		{
			size, err := m.Slack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Pagerduty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Pagerduty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pagerduty != nil {
		{
			size, err := m.Pagerduty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Opsgenie) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Opsgenie) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Opsgenie != nil {
		{
			size, err := m.Opsgenie.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Email) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Email) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Email != nil {
		{
			size, err := m.Email.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Sms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Sms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sms != nil {
		{
			size, err := m.Sms.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Webhook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Webhook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Webhook != nil {
		{
			size, err := m.Webhook.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Receiver != nil {
		{
			size := m.Receiver.Size()
			i -= size
			if _, err := m.Receiver.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_Slack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Slack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Slack != nil {
		{
			size, err := m.Slack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Pagerduty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Pagerduty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pagerduty != nil {
		{
			size, err := m.Pagerduty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Opsgenie) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Opsgenie) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Opsgenie != nil {
		{
			size, err := m.Opsgenie.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Email) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Email) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Email != nil {
		{
			size, err := m.Email.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Sms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Sms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sms != nil {
		{
			size, err := m.Sms.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Webhook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Webhook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Webhook != nil {
		{
			size, err := m.Webhook.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Receiver != nil {
		{
			size := m.Receiver.Size()
			i -= size
			if _, err := m.Receiver.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_Slack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Slack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Slack != nil {
		{
			size, err := m.Slack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Pagerduty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Pagerduty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pagerduty != nil {
		{
			size, err := m.Pagerduty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Opsgenie) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Opsgenie) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Opsgenie != nil {
		{
			size, err := m.Opsgenie.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Email) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Email) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Email != nil {
		{
			size, err := m.Email.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Sms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Sms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sms != nil {
		{
			size, err := m.Sms.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Webhook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Webhook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Webhook != nil {
		{
			size, err := m.Webhook.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Receiver != nil {
		{
			size := m.Receiver.Size()
			i -= size
			if _, err := m.Receiver.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_Slack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Slack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Slack != nil {
		{
			size, err := m.Slack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Pagerduty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Pagerduty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pagerduty != nil {
		{
			size, err := m.Pagerduty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Opsgenie) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Opsgenie) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Opsgenie != nil {
		{
			size, err := m.Opsgenie.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Email) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Email) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Email != nil {
		{
			size, err := m.Email.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Sms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Sms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sms != nil {
		{
			size, err := m.Sms.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Webhook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Webhook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Webhook != nil {
		{
			size, err := m.Webhook.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SlackConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Url != nil {
		l = m.Url.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PagerDutyConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoutingKey != nil {
		l = m.RoutingKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *OpsGenieConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiKey != nil {
		l = m.ApiKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *EmailConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SMSConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContactNumber)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *WebhookConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpConfig != nil {
		l = m.HttpConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Url != nil {
		l = m.Url.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *HTTPConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthChoice != nil {
		n += m.AuthChoice.Size()
	}
	if m.EnableHttp2 {
		n += 2
	}
	if m.FollowRedirects {
		n += 2
	}
	if m.TlsChoice != nil {
		n += m.TlsChoice.Size()
	}
	return n
}

func (m *HTTPConfig_BasicAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BasicAuth != nil {
		l = m.BasicAuth.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HTTPConfig_NoAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoAuthorization != nil {
		l = m.NoAuthorization.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HTTPConfig_AuthToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthToken != nil {
		l = m.AuthToken.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HTTPConfig_ClientCertObj) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientCertObj != nil {
		l = m.ClientCertObj.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HTTPConfig_NoTls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoTls != nil {
		l = m.NoTls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HTTPConfig_UseTls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseTls != nil {
		l = m.UseTls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ClientCertificateObj) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UseTlsObj) > 0 {
		for _, e := range m.UseTlsObj {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CACertificateObj) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TrustedCa) > 0 {
		for _, e := range m.TrustedCa {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *TLSConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinVersion != 0 {
		n += 1 + sovTypes(uint64(m.MinVersion))
	}
	if m.MaxVersion != 0 {
		n += 1 + sovTypes(uint64(m.MaxVersion))
	}
	if m.SniChoice != nil {
		n += m.SniChoice.Size()
	}
	if m.ServerValidationChoice != nil {
		n += m.ServerValidationChoice.Size()
	}
	return n
}

func (m *TLSConfig_DisableSni) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableSni != nil {
		l = m.DisableSni.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TLSConfig_Sni) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sni)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *TLSConfig_VolterraTrustedCa) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VolterraTrustedCa != nil {
		l = m.VolterraTrustedCa.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TLSConfig_UseServerVerification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseServerVerification != nil {
		l = m.UseServerVerification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UpstreamTlsValidationContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaCertObj != nil {
		l = m.CaCertObj.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AuthToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *HttpBasicAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Password != nil {
		l = m.Password.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Receiver != nil {
		n += m.Receiver.Size()
	}
	return n
}

func (m *GlobalSpecType_Slack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slack != nil {
		l = m.Slack.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Pagerduty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagerduty != nil {
		l = m.Pagerduty.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Opsgenie) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Opsgenie != nil {
		l = m.Opsgenie.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Email) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Email != nil {
		l = m.Email.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Sms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sms != nil {
		l = m.Sms.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Webhook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Webhook != nil {
		l = m.Webhook.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Receiver != nil {
		n += m.Receiver.Size()
	}
	return n
}

func (m *CreateSpecType_Slack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slack != nil {
		l = m.Slack.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Pagerduty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagerduty != nil {
		l = m.Pagerduty.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Opsgenie) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Opsgenie != nil {
		l = m.Opsgenie.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Email) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Email != nil {
		l = m.Email.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Sms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sms != nil {
		l = m.Sms.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Webhook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Webhook != nil {
		l = m.Webhook.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Receiver != nil {
		n += m.Receiver.Size()
	}
	return n
}

func (m *ReplaceSpecType_Slack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slack != nil {
		l = m.Slack.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Pagerduty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagerduty != nil {
		l = m.Pagerduty.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Opsgenie) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Opsgenie != nil {
		l = m.Opsgenie.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Email) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Email != nil {
		l = m.Email.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Sms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sms != nil {
		l = m.Sms.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Webhook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Webhook != nil {
		l = m.Webhook.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Receiver != nil {
		n += m.Receiver.Size()
	}
	return n
}

func (m *GetSpecType_Slack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slack != nil {
		l = m.Slack.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Pagerduty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagerduty != nil {
		l = m.Pagerduty.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Opsgenie) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Opsgenie != nil {
		l = m.Opsgenie.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Email) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Email != nil {
		l = m.Email.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Sms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sms != nil {
		l = m.Sms.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Webhook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Webhook != nil {
		l = m.Webhook.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SlackConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SlackConfig{`,
		`Url:` + strings.Replace(fmt.Sprintf("%v", this.Url), "SecretType", "schema.SecretType", 1) + `,`,
		`Channel:` + fmt.Sprintf("%v", this.Channel) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PagerDutyConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PagerDutyConfig{`,
		`RoutingKey:` + strings.Replace(fmt.Sprintf("%v", this.RoutingKey), "SecretType", "schema.SecretType", 1) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpsGenieConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpsGenieConfig{`,
		`ApiKey:` + strings.Replace(fmt.Sprintf("%v", this.ApiKey), "SecretType", "schema.SecretType", 1) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EmailConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmailConfig{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SMSConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SMSConfig{`,
		`ContactNumber:` + fmt.Sprintf("%v", this.ContactNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebhookConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebhookConfig{`,
		`HttpConfig:` + strings.Replace(this.HttpConfig.String(), "HTTPConfig", "HTTPConfig", 1) + `,`,
		`Url:` + strings.Replace(fmt.Sprintf("%v", this.Url), "SecretType", "schema.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPConfig{`,
		`AuthChoice:` + fmt.Sprintf("%v", this.AuthChoice) + `,`,
		`EnableHttp2:` + fmt.Sprintf("%v", this.EnableHttp2) + `,`,
		`FollowRedirects:` + fmt.Sprintf("%v", this.FollowRedirects) + `,`,
		`TlsChoice:` + fmt.Sprintf("%v", this.TlsChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPConfig_BasicAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPConfig_BasicAuth{`,
		`BasicAuth:` + strings.Replace(fmt.Sprintf("%v", this.BasicAuth), "HttpBasicAuth", "HttpBasicAuth", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPConfig_NoAuthorization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPConfig_NoAuthorization{`,
		`NoAuthorization:` + strings.Replace(fmt.Sprintf("%v", this.NoAuthorization), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPConfig_AuthToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPConfig_AuthToken{`,
		`AuthToken:` + strings.Replace(fmt.Sprintf("%v", this.AuthToken), "AuthToken", "AuthToken", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPConfig_ClientCertObj) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPConfig_ClientCertObj{`,
		`ClientCertObj:` + strings.Replace(fmt.Sprintf("%v", this.ClientCertObj), "ClientCertificateObj", "ClientCertificateObj", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPConfig_NoTls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPConfig_NoTls{`,
		`NoTls:` + strings.Replace(fmt.Sprintf("%v", this.NoTls), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPConfig_UseTls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPConfig_UseTls{`,
		`UseTls:` + strings.Replace(fmt.Sprintf("%v", this.UseTls), "TLSConfig", "TLSConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientCertificateObj) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUseTlsObj := "[]*ObjectRefType{"
	for _, f := range this.UseTlsObj {
		repeatedStringForUseTlsObj += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForUseTlsObj += "}"
	s := strings.Join([]string{`&ClientCertificateObj{`,
		`UseTlsObj:` + repeatedStringForUseTlsObj + `,`,
		`}`,
	}, "")
	return s
}
func (this *CACertificateObj) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTrustedCa := "[]*ObjectRefType{"
	for _, f := range this.TrustedCa {
		repeatedStringForTrustedCa += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForTrustedCa += "}"
	s := strings.Join([]string{`&CACertificateObj{`,
		`TrustedCa:` + repeatedStringForTrustedCa + `,`,
		`}`,
	}, "")
	return s
}
func (this *TLSConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TLSConfig{`,
		`MinVersion:` + fmt.Sprintf("%v", this.MinVersion) + `,`,
		`MaxVersion:` + fmt.Sprintf("%v", this.MaxVersion) + `,`,
		`SniChoice:` + fmt.Sprintf("%v", this.SniChoice) + `,`,
		`ServerValidationChoice:` + fmt.Sprintf("%v", this.ServerValidationChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TLSConfig_DisableSni) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TLSConfig_DisableSni{`,
		`DisableSni:` + strings.Replace(fmt.Sprintf("%v", this.DisableSni), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TLSConfig_Sni) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TLSConfig_Sni{`,
		`Sni:` + fmt.Sprintf("%v", this.Sni) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TLSConfig_VolterraTrustedCa) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TLSConfig_VolterraTrustedCa{`,
		`VolterraTrustedCa:` + strings.Replace(fmt.Sprintf("%v", this.VolterraTrustedCa), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TLSConfig_UseServerVerification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TLSConfig_UseServerVerification{`,
		`UseServerVerification:` + strings.Replace(fmt.Sprintf("%v", this.UseServerVerification), "UpstreamTlsValidationContext", "UpstreamTlsValidationContext", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpstreamTlsValidationContext) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpstreamTlsValidationContext{`,
		`CaCertObj:` + strings.Replace(this.CaCertObj.String(), "CACertificateObj", "CACertificateObj", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthToken{`,
		`Token:` + strings.Replace(fmt.Sprintf("%v", this.Token), "SecretType", "schema.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HttpBasicAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HttpBasicAuth{`,
		`UserName:` + fmt.Sprintf("%v", this.UserName) + `,`,
		`Password:` + strings.Replace(fmt.Sprintf("%v", this.Password), "SecretType", "schema.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Receiver:` + fmt.Sprintf("%v", this.Receiver) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Slack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Slack{`,
		`Slack:` + strings.Replace(fmt.Sprintf("%v", this.Slack), "SlackConfig", "SlackConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Pagerduty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Pagerduty{`,
		`Pagerduty:` + strings.Replace(fmt.Sprintf("%v", this.Pagerduty), "PagerDutyConfig", "PagerDutyConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Opsgenie) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Opsgenie{`,
		`Opsgenie:` + strings.Replace(fmt.Sprintf("%v", this.Opsgenie), "OpsGenieConfig", "OpsGenieConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Email) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Email{`,
		`Email:` + strings.Replace(fmt.Sprintf("%v", this.Email), "EmailConfig", "EmailConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Sms) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Sms{`,
		`Sms:` + strings.Replace(fmt.Sprintf("%v", this.Sms), "SMSConfig", "SMSConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Webhook) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Webhook{`,
		`Webhook:` + strings.Replace(fmt.Sprintf("%v", this.Webhook), "WebhookConfig", "WebhookConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`Receiver:` + fmt.Sprintf("%v", this.Receiver) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Slack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Slack{`,
		`Slack:` + strings.Replace(fmt.Sprintf("%v", this.Slack), "SlackConfig", "SlackConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Pagerduty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Pagerduty{`,
		`Pagerduty:` + strings.Replace(fmt.Sprintf("%v", this.Pagerduty), "PagerDutyConfig", "PagerDutyConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Opsgenie) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Opsgenie{`,
		`Opsgenie:` + strings.Replace(fmt.Sprintf("%v", this.Opsgenie), "OpsGenieConfig", "OpsGenieConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Email) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Email{`,
		`Email:` + strings.Replace(fmt.Sprintf("%v", this.Email), "EmailConfig", "EmailConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Sms) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Sms{`,
		`Sms:` + strings.Replace(fmt.Sprintf("%v", this.Sms), "SMSConfig", "SMSConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Webhook) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Webhook{`,
		`Webhook:` + strings.Replace(fmt.Sprintf("%v", this.Webhook), "WebhookConfig", "WebhookConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Receiver:` + fmt.Sprintf("%v", this.Receiver) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Slack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Slack{`,
		`Slack:` + strings.Replace(fmt.Sprintf("%v", this.Slack), "SlackConfig", "SlackConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Pagerduty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Pagerduty{`,
		`Pagerduty:` + strings.Replace(fmt.Sprintf("%v", this.Pagerduty), "PagerDutyConfig", "PagerDutyConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Opsgenie) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Opsgenie{`,
		`Opsgenie:` + strings.Replace(fmt.Sprintf("%v", this.Opsgenie), "OpsGenieConfig", "OpsGenieConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Email) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Email{`,
		`Email:` + strings.Replace(fmt.Sprintf("%v", this.Email), "EmailConfig", "EmailConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Sms) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Sms{`,
		`Sms:` + strings.Replace(fmt.Sprintf("%v", this.Sms), "SMSConfig", "SMSConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Webhook) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Webhook{`,
		`Webhook:` + strings.Replace(fmt.Sprintf("%v", this.Webhook), "WebhookConfig", "WebhookConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Receiver:` + fmt.Sprintf("%v", this.Receiver) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Slack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Slack{`,
		`Slack:` + strings.Replace(fmt.Sprintf("%v", this.Slack), "SlackConfig", "SlackConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Pagerduty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Pagerduty{`,
		`Pagerduty:` + strings.Replace(fmt.Sprintf("%v", this.Pagerduty), "PagerDutyConfig", "PagerDutyConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Opsgenie) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Opsgenie{`,
		`Opsgenie:` + strings.Replace(fmt.Sprintf("%v", this.Opsgenie), "OpsGenieConfig", "OpsGenieConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Email) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Email{`,
		`Email:` + strings.Replace(fmt.Sprintf("%v", this.Email), "EmailConfig", "EmailConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Sms) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Sms{`,
		`Sms:` + strings.Replace(fmt.Sprintf("%v", this.Sms), "SMSConfig", "SMSConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Webhook) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Webhook{`,
		`Webhook:` + strings.Replace(fmt.Sprintf("%v", this.Webhook), "WebhookConfig", "WebhookConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SlackConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlackConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlackConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Url == nil {
				m.Url = &schema.SecretType{}
			}
			if err := m.Url.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PagerDutyConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PagerDutyConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PagerDutyConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoutingKey == nil {
				m.RoutingKey = &schema.SecretType{}
			}
			if err := m.RoutingKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpsGenieConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpsGenieConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpsGenieConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiKey == nil {
				m.ApiKey = &schema.SecretType{}
			}
			if err := m.ApiKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmailConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmailConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmailConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SMSConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SMSConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SMSConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebhookConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebhookConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebhookConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HttpConfig == nil {
				m.HttpConfig = &HTTPConfig{}
			}
			if err := m.HttpConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Url == nil {
				m.Url = &schema.SecretType{}
			}
			if err := m.Url.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HTTPConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HTTPConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HTTPConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasicAuth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpBasicAuth{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthChoice = &HTTPConfig_BasicAuth{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableHttp2", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableHttp2 = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowRedirects", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FollowRedirects = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoAuthorization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthChoice = &HTTPConfig_NoAuthorization{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthToken{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthChoice = &HTTPConfig_AuthToken{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCertObj", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClientCertificateObj{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthChoice = &HTTPConfig_ClientCertObj{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoTls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsChoice = &HTTPConfig_NoTls{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TLSConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsChoice = &HTTPConfig_UseTls{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientCertificateObj) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientCertificateObj: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientCertificateObj: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTlsObj", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UseTlsObj = append(m.UseTlsObj, &schema.ObjectRefType{})
			if err := m.UseTlsObj[len(m.UseTlsObj)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CACertificateObj) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CACertificateObj: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CACertificateObj: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedCa", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedCa = append(m.TrustedCa, &schema.ObjectRefType{})
			if err := m.TrustedCa[len(m.TrustedCa)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TLSConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TLSConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVersion", wireType)
			}
			m.MinVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinVersion |= schema.TlsProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxVersion", wireType)
			}
			m.MaxVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxVersion |= schema.TlsProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableSni", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SniChoice = &TLSConfig_DisableSni{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sni", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SniChoice = &TLSConfig_Sni{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraTrustedCa", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerValidationChoice = &TLSConfig_VolterraTrustedCa{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseServerVerification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamTlsValidationContext{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerValidationChoice = &TLSConfig_UseServerVerification{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamTlsValidationContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamTlsValidationContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamTlsValidationContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaCertObj", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CaCertObj == nil {
				m.CaCertObj = &CACertificateObj{}
			}
			if err := m.CaCertObj.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &schema.SecretType{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpBasicAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpBasicAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpBasicAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Password == nil {
				m.Password = &schema.SecretType{}
			}
			if err := m.Password.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SlackConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GlobalSpecType_Slack{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagerduty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PagerDutyConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GlobalSpecType_Pagerduty{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opsgenie", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpsGenieConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GlobalSpecType_Opsgenie{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmailConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GlobalSpecType_Email{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SMSConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GlobalSpecType_Sms{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Webhook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WebhookConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GlobalSpecType_Webhook{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SlackConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &CreateSpecType_Slack{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagerduty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PagerDutyConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &CreateSpecType_Pagerduty{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opsgenie", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpsGenieConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &CreateSpecType_Opsgenie{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmailConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &CreateSpecType_Email{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SMSConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &CreateSpecType_Sms{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Webhook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WebhookConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &CreateSpecType_Webhook{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SlackConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &ReplaceSpecType_Slack{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagerduty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PagerDutyConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &ReplaceSpecType_Pagerduty{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opsgenie", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpsGenieConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &ReplaceSpecType_Opsgenie{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmailConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &ReplaceSpecType_Email{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SMSConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &ReplaceSpecType_Sms{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Webhook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WebhookConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &ReplaceSpecType_Webhook{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SlackConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GetSpecType_Slack{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagerduty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PagerDutyConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GetSpecType_Pagerduty{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opsgenie", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpsGenieConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GetSpecType_Opsgenie{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmailConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GetSpecType_Email{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SMSConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GetSpecType_Sms{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Webhook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WebhookConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GetSpecType_Webhook{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
