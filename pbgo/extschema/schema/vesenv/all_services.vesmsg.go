// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package vesenv

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *ServiceChoice) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ServiceChoice) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ServiceChoice) DeepCopy() *ServiceChoice {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ServiceChoice{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ServiceChoice) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ServiceChoice) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ServiceChoiceValidator().Validate(ctx, m, opts...)
}

type ValidateServiceChoice struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateServiceChoice) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ServiceChoice)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ServiceChoice got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetChoice().(type) {
	case *ServiceChoice_Akar:
		if fv, exists := v.FldValidators["choice.akar"]; exists {
			val := m.GetChoice().(*ServiceChoice_Akar).Akar
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("akar"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Ares:
		if fv, exists := v.FldValidators["choice.ares"]; exists {
			val := m.GetChoice().(*ServiceChoice_Ares).Ares
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ares"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Asterix:
		if fv, exists := v.FldValidators["choice.asterix"]; exists {
			val := m.GetChoice().(*ServiceChoice_Asterix).Asterix
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("asterix"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Athena:
		if fv, exists := v.FldValidators["choice.athena"]; exists {
			val := m.GetChoice().(*ServiceChoice_Athena).Athena
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("athena"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Automatix:
		if fv, exists := v.FldValidators["choice.automatix"]; exists {
			val := m.GetChoice().(*ServiceChoice_Automatix).Automatix
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("automatix"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Barracute:
		if fv, exists := v.FldValidators["choice.barracute"]; exists {
			val := m.GetChoice().(*ServiceChoice_Barracute).Barracute
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("barracute"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Blindfold:
		if fv, exists := v.FldValidators["choice.blindfold"]; exists {
			val := m.GetChoice().(*ServiceChoice_Blindfold).Blindfold
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("blindfold"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Bolt:
		if fv, exists := v.FldValidators["choice.bolt"]; exists {
			val := m.GetChoice().(*ServiceChoice_Bolt).Bolt
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("bolt"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Charmander:
		if fv, exists := v.FldValidators["choice.charmander"]; exists {
			val := m.GetChoice().(*ServiceChoice_Charmander).Charmander
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("charmander"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Charmandercar:
		if fv, exists := v.FldValidators["choice.charmandercar"]; exists {
			val := m.GetChoice().(*ServiceChoice_Charmandercar).Charmandercar
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("charmandercar"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Drogon:
		if fv, exists := v.FldValidators["choice.drogon"]; exists {
			val := m.GetChoice().(*ServiceChoice_Drogon).Drogon
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("drogon"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Eywa:
		if fv, exists := v.FldValidators["choice.eywa"]; exists {
			val := m.GetChoice().(*ServiceChoice_Eywa).Eywa
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("eywa"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Griffin:
		if fv, exists := v.FldValidators["choice.griffin"]; exists {
			val := m.GetChoice().(*ServiceChoice_Griffin).Griffin
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("griffin"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Identityauthority:
		if fv, exists := v.FldValidators["choice.identityauthority"]; exists {
			val := m.GetChoice().(*ServiceChoice_Identityauthority).Identityauthority
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("identityauthority"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Keypr:
		if fv, exists := v.FldValidators["choice.keypr"]; exists {
			val := m.GetChoice().(*ServiceChoice_Keypr).Keypr
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("keypr"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Maurice:
		if fv, exists := v.FldValidators["choice.maurice"]; exists {
			val := m.GetChoice().(*ServiceChoice_Maurice).Maurice
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("maurice"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Obelix:
		if fv, exists := v.FldValidators["choice.obelix"]; exists {
			val := m.GetChoice().(*ServiceChoice_Obelix).Obelix
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("obelix"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Ocspmule:
		if fv, exists := v.FldValidators["choice.ocspmule"]; exists {
			val := m.GetChoice().(*ServiceChoice_Ocspmule).Ocspmule
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ocspmule"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Opera:
		if fv, exists := v.FldValidators["choice.opera"]; exists {
			val := m.GetChoice().(*ServiceChoice_Opera).Opera
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("opera"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Pikachu:
		if fv, exists := v.FldValidators["choice.pikachu"]; exists {
			val := m.GetChoice().(*ServiceChoice_Pikachu).Pikachu
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("pikachu"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Pkifactory:
		if fv, exists := v.FldValidators["choice.pkifactory"]; exists {
			val := m.GetChoice().(*ServiceChoice_Pkifactory).Pkifactory
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("pkifactory"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Rakar:
		if fv, exists := v.FldValidators["choice.rakar"]; exists {
			val := m.GetChoice().(*ServiceChoice_Rakar).Rakar
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("rakar"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_SiteConsole:
		if fv, exists := v.FldValidators["choice.site_console"]; exists {
			val := m.GetChoice().(*ServiceChoice_SiteConsole).SiteConsole
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("site_console"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Vega:
		if fv, exists := v.FldValidators["choice.vega"]; exists {
			val := m.GetChoice().(*ServiceChoice_Vega).Vega
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("vega"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Voucher:
		if fv, exists := v.FldValidators["choice.voucher"]; exists {
			val := m.GetChoice().(*ServiceChoice_Voucher).Voucher
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("voucher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Vpm:
		if fv, exists := v.FldValidators["choice.vpm"]; exists {
			val := m.GetChoice().(*ServiceChoice_Vpm).Vpm
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("vpm"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Vulpix:
		if fv, exists := v.FldValidators["choice.vulpix"]; exists {
			val := m.GetChoice().(*ServiceChoice_Vulpix).Vulpix
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("vulpix"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Warden:
		if fv, exists := v.FldValidators["choice.warden"]; exists {
			val := m.GetChoice().(*ServiceChoice_Warden).Warden
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("warden"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Wingman:
		if fv, exists := v.FldValidators["choice.wingman"]; exists {
			val := m.GetChoice().(*ServiceChoice_Wingman).Wingman
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("wingman"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Shape:
		if fv, exists := v.FldValidators["choice.shape"]; exists {
			val := m.GetChoice().(*ServiceChoice_Shape).Shape
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("shape"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Hellas:
		if fv, exists := v.FldValidators["choice.hellas"]; exists {
			val := m.GetChoice().(*ServiceChoice_Hellas).Hellas
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("hellas"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Nfvsvc:
		if fv, exists := v.FldValidators["choice.nfvsvc"]; exists {
			val := m.GetChoice().(*ServiceChoice_Nfvsvc).Nfvsvc
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("nfvsvc"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Scim:
		if fv, exists := v.FldValidators["choice.scim"]; exists {
			val := m.GetChoice().(*ServiceChoice_Scim).Scim
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("scim"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_LilacEdge:
		if fv, exists := v.FldValidators["choice.lilac_edge"]; exists {
			val := m.GetChoice().(*ServiceChoice_LilacEdge).LilacEdge
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("lilac_edge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Doscontroller:
		if fv, exists := v.FldValidators["choice.doscontroller"]; exists {
			val := m.GetChoice().(*ServiceChoice_Doscontroller).Doscontroller
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("doscontroller"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceChoice_Minerva:
		if fv, exists := v.FldValidators["choice.minerva"]; exists {
			val := m.GetChoice().(*ServiceChoice_Minerva).Minerva
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("minerva"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultServiceChoiceValidator = func() *ValidateServiceChoice {
	v := &ValidateServiceChoice{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ServiceChoiceValidator() db.Validator {
	return DefaultServiceChoiceValidator
}
