// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/healthcheck/types.proto

package healthcheck

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DNS Query Type
//
// x-displayName: "DNS Query Type"
// DNS Query Type
type DNSQueryType int32

const (
	// Query Type A
	//
	// x-displayName: "Query Type A"
	DNS_QTYPE_A DNSQueryType = 0
	// Query Type AAAA
	//
	// x-displayName: "Query Type AAAA"
	DNS_QTYPE_AAAA DNSQueryType = 1
)

var DNSQueryType_name = map[int32]string{
	0: "DNS_QTYPE_A",
	1: "DNS_QTYPE_AAAA",
}

var DNSQueryType_value = map[string]int32{
	"DNS_QTYPE_A":    0,
	"DNS_QTYPE_AAAA": 1,
}

func (DNSQueryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1d9419355153b697, []int{0}
}

// Expected DNS Response Rcode Type
//
// x-displayName: "DNS Response Rcode Type"
// Expected DNS Response Rcode Type
type DNSResponseRcodeType int32

const (
	// Rcode NOERROR
	//
	// x-displayName: "Rcode NOERROR"
	DNS_RES_RCODE_NOERROR DNSResponseRcodeType = 0
	// RCODE ANY
	//
	// x-displayName: "Any Rcode"
	DNS_RES_RCODE_ANY DNSResponseRcodeType = 1
)

var DNSResponseRcodeType_name = map[int32]string{
	0: "DNS_RES_RCODE_NOERROR",
	1: "DNS_RES_RCODE_ANY",
}

var DNSResponseRcodeType_value = map[string]int32{
	"DNS_RES_RCODE_NOERROR": 0,
	"DNS_RES_RCODE_ANY":     1,
}

func (DNSResponseRcodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1d9419355153b697, []int{1}
}

// DNS Response Record Type
//
// x-displayName: "DNS Response Record Type"
// DNS Response Record Type
type DNSResponseRecordType int32

const (
	// Requested Query Type
	//
	// x-displayName: "Same as Requested Query Type"
	DNS_REQUESTED_QUERY_TYPE DNSResponseRecordType = 0
	// Any Record Type
	//
	// x-displayName: "Any Record Type"
	DNS_RES_RECORD_TYPE_ANY DNSResponseRecordType = 1
)

var DNSResponseRecordType_name = map[int32]string{
	0: "DNS_REQUESTED_QUERY_TYPE",
	1: "DNS_RES_RECORD_TYPE_ANY",
}

var DNSResponseRecordType_value = map[string]int32{
	"DNS_REQUESTED_QUERY_TYPE": 0,
	"DNS_RES_RECORD_TYPE_ANY":  1,
}

func (DNSResponseRecordType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1d9419355153b697, []int{2}
}

// HttpHealthCheck
//
// x-displayName: "HTTP Health Check"
// Healthy if "get" method on URL "http(s)://<host>/<path>" with optional "<header>" returns success.
// "host" is not used for DNS resolution. It is used as HTTP Header in the request.
type HttpHealthCheck struct {
	// host header choice
	//
	// x-displayName: "Specify Host Header"
	// x-required
	// Specify the value of host header in the HTTP health check request.
	//
	// Types that are valid to be assigned to HostHeaderChoice:
	//	*HttpHealthCheck_UseOriginServerName
	//	*HttpHealthCheck_HostHeader
	HostHeaderChoice isHttpHealthCheck_HostHeaderChoice `protobuf_oneof:"host_header_choice"`
	// path
	//
	// x-displayName: "Path"
	// x-required
	// x-example: "/healthcheck"
	// Specifies the HTTP path that will be requested during health checking.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Headers to add in health check request
	//
	// x-displayName: "Request Headers to Add"
	// x-example: "value"
	// Specifies a list of HTTP headers that should be added to each request that is sent to the
	// health checked cluster. This is a list of key-value pairs.
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Headers to be removed from health check request
	//
	// x-displayName: "Request Headers to Remove"
	// x-example: "user-agent"
	// Specifies a list of HTTP headers that should be removed from each request that is sent to the
	// health checked cluster. This is a list of keys of headers.
	RequestHeadersToRemove []string `protobuf:"bytes,4,rep,name=request_headers_to_remove,json=requestHeadersToRemove,proto3" json:"request_headers_to_remove,omitempty"`
	// Use HTTP2
	//
	// x-displayName: "Use HTTP2"
	// x-example: false
	// If set, health checks will be made using http/2.
	UseHttp2 bool `protobuf:"varint,5,opt,name=use_http2,json=useHttp2,proto3" json:"use_http2,omitempty"`
	// Expected Status Codes
	//
	// x-displayName: "Expected Status Codes"
	// x-example: "200-250"
	// Specifies a list of HTTP response status codes considered healthy. To treat default HTTP expected
	// status code 200 as healthy, user has to configure it explicitly. This is a list of strings, each
	// of which is single HTTP status code or a range with start and end values separated by "-".
	ExpectedStatusCodes []string `protobuf:"bytes,8,rep,name=expected_status_codes,json=expectedStatusCodes,proto3" json:"expected_status_codes,omitempty"`
}

func (m *HttpHealthCheck) Reset()      { *m = HttpHealthCheck{} }
func (*HttpHealthCheck) ProtoMessage() {}
func (*HttpHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9419355153b697, []int{0}
}
func (m *HttpHealthCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HttpHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpHealthCheck.Merge(m, src)
}
func (m *HttpHealthCheck) XXX_Size() int {
	return m.Size()
}
func (m *HttpHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HttpHealthCheck proto.InternalMessageInfo

type isHttpHealthCheck_HostHeaderChoice interface {
	isHttpHealthCheck_HostHeaderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type HttpHealthCheck_UseOriginServerName struct {
	UseOriginServerName *schema.Empty `protobuf:"bytes,7,opt,name=use_origin_server_name,json=useOriginServerName,proto3,oneof" json:"use_origin_server_name,omitempty"`
}
type HttpHealthCheck_HostHeader struct {
	HostHeader string `protobuf:"bytes,1,opt,name=host_header,json=hostHeader,proto3,oneof" json:"host_header,omitempty"`
}

func (*HttpHealthCheck_UseOriginServerName) isHttpHealthCheck_HostHeaderChoice() {}
func (*HttpHealthCheck_HostHeader) isHttpHealthCheck_HostHeaderChoice()          {}

func (m *HttpHealthCheck) GetHostHeaderChoice() isHttpHealthCheck_HostHeaderChoice {
	if m != nil {
		return m.HostHeaderChoice
	}
	return nil
}

func (m *HttpHealthCheck) GetUseOriginServerName() *schema.Empty {
	if x, ok := m.GetHostHeaderChoice().(*HttpHealthCheck_UseOriginServerName); ok {
		return x.UseOriginServerName
	}
	return nil
}

func (m *HttpHealthCheck) GetHostHeader() string {
	if x, ok := m.GetHostHeaderChoice().(*HttpHealthCheck_HostHeader); ok {
		return x.HostHeader
	}
	return ""
}

func (m *HttpHealthCheck) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HttpHealthCheck) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HttpHealthCheck) GetRequestHeadersToRemove() []string {
	if m != nil {
		return m.RequestHeadersToRemove
	}
	return nil
}

func (m *HttpHealthCheck) GetUseHttp2() bool {
	if m != nil {
		return m.UseHttp2
	}
	return false
}

func (m *HttpHealthCheck) GetExpectedStatusCodes() []string {
	if m != nil {
		return m.ExpectedStatusCodes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HttpHealthCheck) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HttpHealthCheck_UseOriginServerName)(nil),
		(*HttpHealthCheck_HostHeader)(nil),
	}
}

// DNS Health Check
//
// x-displayName: "DNS Health Check"
// DNS health check reports healthy if DNS query is successful and response header and answer matches the given value
type DnsHealthCheck struct {
	// Use Reverse mode
	//
	// x-displayName: "Use Reverse mode"
	// x-example: false
	// Enable the monitor operation in reverse mode.
	// When the monitor is in reverse mode, a successful receive
	// string match marks the monitored object down instead of up.
	Reverse bool `protobuf:"varint,2,opt,name=reverse,proto3" json:"reverse,omitempty"`
	// Query Name
	//
	// x-displayName: "Query Name"
	// x-example: "www.example.com"
	// x-required
	// The query name that the monitor sends a DNS query for.
	QueryName string `protobuf:"bytes,3,opt,name=query_name,json=queryName,proto3" json:"query_name,omitempty"`
	// Query Type
	//
	// x-displayName: "Query Type"
	// x-example: "A"
	// x-required
	// The DNS query type that the monitor sends. Supported types are: [a, aaaa] default: a
	QueryType DNSQueryType `protobuf:"varint,4,opt,name=query_type,json=queryType,proto3,enum=ves.io.schema.healthcheck.DNSQueryType" json:"query_type,omitempty"`
	// Expected Response Record Type
	//
	// x-displayName: "Expected Response Record Type"
	// x-example: "REQUESTED_QUERY_TYPE"
	// x-required
	// Specifies an expected record type in the answer section of DNS Response
	// options: [REQUESTED_QUERY_TYPE, RECORD_TYPE_ANY] when REQUESTED_QUERY_TYPE is set, health monitor expects record type same as requested query type
	ExpectedRecordType DNSResponseRecordType `protobuf:"varint,5,opt,name=expected_record_type,json=expectedRecordType,proto3,enum=ves.io.schema.healthcheck.DNSResponseRecordType" json:"expected_record_type,omitempty"`
	// Expected Response Rcode
	//
	// x-displayName: "Expected Response Rcode"
	// x-example: "no-error"
	// x-required
	// Specifies an expected Rcode in the answer section of DNS Response, option [no-error, any]
	ExpectedRcode DNSResponseRcodeType `protobuf:"varint,6,opt,name=expected_rcode,json=expectedRcode,proto3,enum=ves.io.schema.healthcheck.DNSResponseRcodeType" json:"expected_rcode,omitempty"`
	// Expected Response Content
	//
	// x-displayName: "Expected Response Content"
	// x-example: "10.0.0.1"
	// x-required
	// Specifies an IPv4 or IPv6 address in the answer section of DNS Response
	ExpectedResponse string `protobuf:"bytes,7,opt,name=expected_response,json=expectedResponse,proto3" json:"expected_response,omitempty"`
}

func (m *DnsHealthCheck) Reset()      { *m = DnsHealthCheck{} }
func (*DnsHealthCheck) ProtoMessage() {}
func (*DnsHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9419355153b697, []int{1}
}
func (m *DnsHealthCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DnsHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DnsHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DnsHealthCheck.Merge(m, src)
}
func (m *DnsHealthCheck) XXX_Size() int {
	return m.Size()
}
func (m *DnsHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_DnsHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_DnsHealthCheck proto.InternalMessageInfo

func (m *DnsHealthCheck) GetReverse() bool {
	if m != nil {
		return m.Reverse
	}
	return false
}

func (m *DnsHealthCheck) GetQueryName() string {
	if m != nil {
		return m.QueryName
	}
	return ""
}

func (m *DnsHealthCheck) GetQueryType() DNSQueryType {
	if m != nil {
		return m.QueryType
	}
	return DNS_QTYPE_A
}

func (m *DnsHealthCheck) GetExpectedRecordType() DNSResponseRecordType {
	if m != nil {
		return m.ExpectedRecordType
	}
	return DNS_REQUESTED_QUERY_TYPE
}

func (m *DnsHealthCheck) GetExpectedRcode() DNSResponseRcodeType {
	if m != nil {
		return m.ExpectedRcode
	}
	return DNS_RES_RCODE_NOERROR
}

func (m *DnsHealthCheck) GetExpectedResponse() string {
	if m != nil {
		return m.ExpectedResponse
	}
	return ""
}

// DnsProxyUdpHealthCheck
//
// x-displayName: "UDP Health Check"
// Monitor reports healthy status if TCP connection is successful and response payload matches expected response pattern
type DnsProxyUdpHealthCheck struct {
	// send string
	//
	// x-displayName: "Send string"
	// x-example: ""
	// x-required
	// Text string sent in the request
	SendPayload string `protobuf:"bytes,1,opt,name=send_payload,json=sendPayload,proto3" json:"send_payload,omitempty"`
	// expected response
	//
	// x-displayName: "Expected Response pattern"
	// x-example: ".*"
	// x-required
	// Specifies a regular expression pattern which will be matched against response payload
	ExpectedResponse string `protobuf:"bytes,2,opt,name=expected_response,json=expectedResponse,proto3" json:"expected_response,omitempty"`
}

func (m *DnsProxyUdpHealthCheck) Reset()      { *m = DnsProxyUdpHealthCheck{} }
func (*DnsProxyUdpHealthCheck) ProtoMessage() {}
func (*DnsProxyUdpHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9419355153b697, []int{2}
}
func (m *DnsProxyUdpHealthCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DnsProxyUdpHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DnsProxyUdpHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DnsProxyUdpHealthCheck.Merge(m, src)
}
func (m *DnsProxyUdpHealthCheck) XXX_Size() int {
	return m.Size()
}
func (m *DnsProxyUdpHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_DnsProxyUdpHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_DnsProxyUdpHealthCheck proto.InternalMessageInfo

func (m *DnsProxyUdpHealthCheck) GetSendPayload() string {
	if m != nil {
		return m.SendPayload
	}
	return ""
}

func (m *DnsProxyUdpHealthCheck) GetExpectedResponse() string {
	if m != nil {
		return m.ExpectedResponse
	}
	return ""
}

// DnsProxyTcpHealthCheck
//
// x-displayName: "TCP Health Check"
// Monitor reports healthy status if UDP connection is successful and response payload matches expected response pattern
type DnsProxyTcpHealthCheck struct {
	// send string
	//
	// x-displayName: "Send string"
	// x-example: ""
	// x-required
	// Text string sent in the request
	SendPayload string `protobuf:"bytes,1,opt,name=send_payload,json=sendPayload,proto3" json:"send_payload,omitempty"`
	// expected response
	//
	// x-displayName: "Expected Response pattern"
	// x-example: ".*"
	// x-required
	// Specifies a regular expression pattern which will be matched against response payload
	ExpectedResponse string `protobuf:"bytes,2,opt,name=expected_response,json=expectedResponse,proto3" json:"expected_response,omitempty"`
}

func (m *DnsProxyTcpHealthCheck) Reset()      { *m = DnsProxyTcpHealthCheck{} }
func (*DnsProxyTcpHealthCheck) ProtoMessage() {}
func (*DnsProxyTcpHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9419355153b697, []int{3}
}
func (m *DnsProxyTcpHealthCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DnsProxyTcpHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DnsProxyTcpHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DnsProxyTcpHealthCheck.Merge(m, src)
}
func (m *DnsProxyTcpHealthCheck) XXX_Size() int {
	return m.Size()
}
func (m *DnsProxyTcpHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_DnsProxyTcpHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_DnsProxyTcpHealthCheck proto.InternalMessageInfo

func (m *DnsProxyTcpHealthCheck) GetSendPayload() string {
	if m != nil {
		return m.SendPayload
	}
	return ""
}

func (m *DnsProxyTcpHealthCheck) GetExpectedResponse() string {
	if m != nil {
		return m.ExpectedResponse
	}
	return ""
}

// TcpHealthCheck
//
// x-displayName: "TCP Health Check"
// Healthy if TCP connection is successful and response payload matches <expected_response>
type TcpHealthCheck struct {
	// send payload
	//
	// x-displayName: "Send Payload"
	// x-example: "000000FF"
	// raw bytes sent in the request. Empty payloads imply a connect-only health check.
	// Describes the encoding of the payload bytes in the payload.
	// Hex encoded payload.
	SendPayload string `protobuf:"bytes,1,opt,name=send_payload,json=sendPayload,proto3" json:"send_payload,omitempty"`
	// expected response
	//
	// x-displayName: "Expected Response"
	// x-example: "00000034"
	// raw bytes expected in the request. Describes the encoding of the payload bytes in the payload.
	// Hex encoded payload.
	ExpectedResponse string `protobuf:"bytes,2,opt,name=expected_response,json=expectedResponse,proto3" json:"expected_response,omitempty"`
}

func (m *TcpHealthCheck) Reset()      { *m = TcpHealthCheck{} }
func (*TcpHealthCheck) ProtoMessage() {}
func (*TcpHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9419355153b697, []int{4}
}
func (m *TcpHealthCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TcpHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TcpHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpHealthCheck.Merge(m, src)
}
func (m *TcpHealthCheck) XXX_Size() int {
	return m.Size()
}
func (m *TcpHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_TcpHealthCheck proto.InternalMessageInfo

func (m *TcpHealthCheck) GetSendPayload() string {
	if m != nil {
		return m.SendPayload
	}
	return ""
}

func (m *TcpHealthCheck) GetExpectedResponse() string {
	if m != nil {
		return m.ExpectedResponse
	}
	return ""
}

// GlobalSpecType
//
// x-displayName: "Global Configuration Specification"
// Configuration specification for HealthCheck
type GlobalSpecType struct {
	// health_check
	//
	// x-required
	// x-displayName: "Health Check"
	// Specifies whether to perform HTTP Health Check or TCP Health check
	//
	// Types that are valid to be assigned to HealthCheck:
	//	*GlobalSpecType_HttpHealthCheck
	//	*GlobalSpecType_TcpHealthCheck
	//	*GlobalSpecType_DnsProxyTcpHealthCheck
	//	*GlobalSpecType_DnsProxyUdpHealthCheck
	//	*GlobalSpecType_DnsHealthCheck
	//	*GlobalSpecType_DnsProxyIcmpHealthCheck
	HealthCheck isGlobalSpecType_HealthCheck `protobuf_oneof:"health_check"`
	// timeout
	//
	// x-displayName: "Timeout"
	// x-required
	// x-example: "1"
	// Timeout in seconds to wait for successful response. In other words, it is
	// the time to wait for a health check response. If the timeout is reached the
	// health check attempt will be considered a failure.
	Timeout uint32 `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// interval
	//
	// x-displayName: "Interval"
	// x-required
	// x-example: "10"
	// Time interval in seconds between two healthcheck requests.
	Interval uint32 `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"`
	// jitter
	//
	// x-displayName: "Jitter"
	// x-example: "1"
	// Random variation of time in seconds interval between two health checks
	// This is the amount of time in seconds added to the interval above to
	// increase the wait time between two healthcheck requests.
	Jitter uint32 `protobuf:"varint,5,opt,name=jitter,proto3" json:"jitter,omitempty"`
	// unhealthy threshold
	//
	// x-displayName: "Unhealthy Threshold"
	// x-required
	// x-example: "5"
	// Number of failed responses before declaring unhealthy. In other words, this is
	// the number of unhealthy health checks required before a host is marked
	// unhealthy. Note that for http health checking if a host responds with 503
	// this threshold is ignored and the host is considered unhealthy immediately.
	UnhealthyThreshold uint32 `protobuf:"varint,6,opt,name=unhealthy_threshold,json=unhealthyThreshold,proto3" json:"unhealthy_threshold,omitempty"`
	// healthy threshold
	//
	// x-displayName: "Healthy Threshold"
	// x-required
	// x-example: "2"
	// Number of successful responses before declaring healthy. In other words, this is
	// the number of healthy health checks required before a host is marked
	// healthy. Note that during startup, only a single successful health check is
	// required to mark a host healthy.
	HealthyThreshold uint32 `protobuf:"varint,7,opt,name=healthy_threshold,json=healthyThreshold,proto3" json:"healthy_threshold,omitempty"`
	// jitter percent
	//
	// x-displayName: "Jitter Percent"
	// x-example: "25"
	// Add a random amount of time as a percent value to the interval between successive healthcheck requests.
	JitterPercent uint32 `protobuf:"varint,9,opt,name=jitter_percent,json=jitterPercent,proto3" json:"jitter_percent,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9419355153b697, []int{5}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_HealthCheck interface {
	isGlobalSpecType_HealthCheck()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_HttpHealthCheck struct {
	HttpHealthCheck *HttpHealthCheck `protobuf:"bytes,1,opt,name=http_health_check,json=httpHealthCheck,proto3,oneof" json:"http_health_check,omitempty"`
}
type GlobalSpecType_TcpHealthCheck struct {
	TcpHealthCheck *TcpHealthCheck `protobuf:"bytes,2,opt,name=tcp_health_check,json=tcpHealthCheck,proto3,oneof" json:"tcp_health_check,omitempty"`
}
type GlobalSpecType_DnsProxyTcpHealthCheck struct {
	DnsProxyTcpHealthCheck *DnsProxyTcpHealthCheck `protobuf:"bytes,10,opt,name=dns_proxy_tcp_health_check,json=dnsProxyTcpHealthCheck,proto3,oneof" json:"dns_proxy_tcp_health_check,omitempty"`
}
type GlobalSpecType_DnsProxyUdpHealthCheck struct {
	DnsProxyUdpHealthCheck *DnsProxyUdpHealthCheck `protobuf:"bytes,11,opt,name=dns_proxy_udp_health_check,json=dnsProxyUdpHealthCheck,proto3,oneof" json:"dns_proxy_udp_health_check,omitempty"`
}
type GlobalSpecType_DnsHealthCheck struct {
	DnsHealthCheck *DnsHealthCheck `protobuf:"bytes,12,opt,name=dns_health_check,json=dnsHealthCheck,proto3,oneof" json:"dns_health_check,omitempty"`
}
type GlobalSpecType_DnsProxyIcmpHealthCheck struct {
	DnsProxyIcmpHealthCheck *schema.Empty `protobuf:"bytes,13,opt,name=dns_proxy_icmp_health_check,json=dnsProxyIcmpHealthCheck,proto3,oneof" json:"dns_proxy_icmp_health_check,omitempty"`
}

func (*GlobalSpecType_HttpHealthCheck) isGlobalSpecType_HealthCheck()         {}
func (*GlobalSpecType_TcpHealthCheck) isGlobalSpecType_HealthCheck()          {}
func (*GlobalSpecType_DnsProxyTcpHealthCheck) isGlobalSpecType_HealthCheck()  {}
func (*GlobalSpecType_DnsProxyUdpHealthCheck) isGlobalSpecType_HealthCheck()  {}
func (*GlobalSpecType_DnsHealthCheck) isGlobalSpecType_HealthCheck()          {}
func (*GlobalSpecType_DnsProxyIcmpHealthCheck) isGlobalSpecType_HealthCheck() {}

func (m *GlobalSpecType) GetHealthCheck() isGlobalSpecType_HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *GlobalSpecType) GetHttpHealthCheck() *HttpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GlobalSpecType_HttpHealthCheck); ok {
		return x.HttpHealthCheck
	}
	return nil
}

func (m *GlobalSpecType) GetTcpHealthCheck() *TcpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GlobalSpecType_TcpHealthCheck); ok {
		return x.TcpHealthCheck
	}
	return nil
}

func (m *GlobalSpecType) GetDnsProxyTcpHealthCheck() *DnsProxyTcpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GlobalSpecType_DnsProxyTcpHealthCheck); ok {
		return x.DnsProxyTcpHealthCheck
	}
	return nil
}

func (m *GlobalSpecType) GetDnsProxyUdpHealthCheck() *DnsProxyUdpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GlobalSpecType_DnsProxyUdpHealthCheck); ok {
		return x.DnsProxyUdpHealthCheck
	}
	return nil
}

func (m *GlobalSpecType) GetDnsHealthCheck() *DnsHealthCheck {
	if x, ok := m.GetHealthCheck().(*GlobalSpecType_DnsHealthCheck); ok {
		return x.DnsHealthCheck
	}
	return nil
}

func (m *GlobalSpecType) GetDnsProxyIcmpHealthCheck() *schema.Empty {
	if x, ok := m.GetHealthCheck().(*GlobalSpecType_DnsProxyIcmpHealthCheck); ok {
		return x.DnsProxyIcmpHealthCheck
	}
	return nil
}

func (m *GlobalSpecType) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *GlobalSpecType) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *GlobalSpecType) GetJitter() uint32 {
	if m != nil {
		return m.Jitter
	}
	return 0
}

func (m *GlobalSpecType) GetUnhealthyThreshold() uint32 {
	if m != nil {
		return m.UnhealthyThreshold
	}
	return 0
}

func (m *GlobalSpecType) GetHealthyThreshold() uint32 {
	if m != nil {
		return m.HealthyThreshold
	}
	return 0
}

func (m *GlobalSpecType) GetJitterPercent() uint32 {
	if m != nil {
		return m.JitterPercent
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_HttpHealthCheck)(nil),
		(*GlobalSpecType_TcpHealthCheck)(nil),
		(*GlobalSpecType_DnsProxyTcpHealthCheck)(nil),
		(*GlobalSpecType_DnsProxyUdpHealthCheck)(nil),
		(*GlobalSpecType_DnsHealthCheck)(nil),
		(*GlobalSpecType_DnsProxyIcmpHealthCheck)(nil),
	}
}

// Create healthcheck
//
// x-displayName: "Create Health Check"
// Healthcheck object defines method to determine if the given Endpoint is healthy.
// Single Healthcheck object can be referred to by one or many Cluster objects.
type CreateSpecType struct {
	// Types that are valid to be assigned to HealthCheck:
	//	*CreateSpecType_HttpHealthCheck
	//	*CreateSpecType_TcpHealthCheck
	//	*CreateSpecType_DnsProxyTcpHealthCheck
	//	*CreateSpecType_DnsProxyUdpHealthCheck
	//	*CreateSpecType_DnsHealthCheck
	//	*CreateSpecType_DnsProxyIcmpHealthCheck
	HealthCheck        isCreateSpecType_HealthCheck `protobuf_oneof:"health_check"`
	Timeout            uint32                       `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Interval           uint32                       `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"`
	UnhealthyThreshold uint32                       `protobuf:"varint,6,opt,name=unhealthy_threshold,json=unhealthyThreshold,proto3" json:"unhealthy_threshold,omitempty"`
	HealthyThreshold   uint32                       `protobuf:"varint,7,opt,name=healthy_threshold,json=healthyThreshold,proto3" json:"healthy_threshold,omitempty"`
	JitterPercent      uint32                       `protobuf:"varint,9,opt,name=jitter_percent,json=jitterPercent,proto3" json:"jitter_percent,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9419355153b697, []int{6}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_HealthCheck interface {
	isCreateSpecType_HealthCheck()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_HttpHealthCheck struct {
	HttpHealthCheck *HttpHealthCheck `protobuf:"bytes,1,opt,name=http_health_check,json=httpHealthCheck,proto3,oneof" json:"http_health_check,omitempty"`
}
type CreateSpecType_TcpHealthCheck struct {
	TcpHealthCheck *TcpHealthCheck `protobuf:"bytes,2,opt,name=tcp_health_check,json=tcpHealthCheck,proto3,oneof" json:"tcp_health_check,omitempty"`
}
type CreateSpecType_DnsProxyTcpHealthCheck struct {
	DnsProxyTcpHealthCheck *DnsProxyTcpHealthCheck `protobuf:"bytes,10,opt,name=dns_proxy_tcp_health_check,json=dnsProxyTcpHealthCheck,proto3,oneof" json:"dns_proxy_tcp_health_check,omitempty"`
}
type CreateSpecType_DnsProxyUdpHealthCheck struct {
	DnsProxyUdpHealthCheck *DnsProxyUdpHealthCheck `protobuf:"bytes,11,opt,name=dns_proxy_udp_health_check,json=dnsProxyUdpHealthCheck,proto3,oneof" json:"dns_proxy_udp_health_check,omitempty"`
}
type CreateSpecType_DnsHealthCheck struct {
	DnsHealthCheck *DnsHealthCheck `protobuf:"bytes,12,opt,name=dns_health_check,json=dnsHealthCheck,proto3,oneof" json:"dns_health_check,omitempty"`
}
type CreateSpecType_DnsProxyIcmpHealthCheck struct {
	DnsProxyIcmpHealthCheck *schema.Empty `protobuf:"bytes,13,opt,name=dns_proxy_icmp_health_check,json=dnsProxyIcmpHealthCheck,proto3,oneof" json:"dns_proxy_icmp_health_check,omitempty"`
}

func (*CreateSpecType_HttpHealthCheck) isCreateSpecType_HealthCheck()         {}
func (*CreateSpecType_TcpHealthCheck) isCreateSpecType_HealthCheck()          {}
func (*CreateSpecType_DnsProxyTcpHealthCheck) isCreateSpecType_HealthCheck()  {}
func (*CreateSpecType_DnsProxyUdpHealthCheck) isCreateSpecType_HealthCheck()  {}
func (*CreateSpecType_DnsHealthCheck) isCreateSpecType_HealthCheck()          {}
func (*CreateSpecType_DnsProxyIcmpHealthCheck) isCreateSpecType_HealthCheck() {}

func (m *CreateSpecType) GetHealthCheck() isCreateSpecType_HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *CreateSpecType) GetHttpHealthCheck() *HttpHealthCheck {
	if x, ok := m.GetHealthCheck().(*CreateSpecType_HttpHealthCheck); ok {
		return x.HttpHealthCheck
	}
	return nil
}

func (m *CreateSpecType) GetTcpHealthCheck() *TcpHealthCheck {
	if x, ok := m.GetHealthCheck().(*CreateSpecType_TcpHealthCheck); ok {
		return x.TcpHealthCheck
	}
	return nil
}

func (m *CreateSpecType) GetDnsProxyTcpHealthCheck() *DnsProxyTcpHealthCheck {
	if x, ok := m.GetHealthCheck().(*CreateSpecType_DnsProxyTcpHealthCheck); ok {
		return x.DnsProxyTcpHealthCheck
	}
	return nil
}

func (m *CreateSpecType) GetDnsProxyUdpHealthCheck() *DnsProxyUdpHealthCheck {
	if x, ok := m.GetHealthCheck().(*CreateSpecType_DnsProxyUdpHealthCheck); ok {
		return x.DnsProxyUdpHealthCheck
	}
	return nil
}

func (m *CreateSpecType) GetDnsHealthCheck() *DnsHealthCheck {
	if x, ok := m.GetHealthCheck().(*CreateSpecType_DnsHealthCheck); ok {
		return x.DnsHealthCheck
	}
	return nil
}

func (m *CreateSpecType) GetDnsProxyIcmpHealthCheck() *schema.Empty {
	if x, ok := m.GetHealthCheck().(*CreateSpecType_DnsProxyIcmpHealthCheck); ok {
		return x.DnsProxyIcmpHealthCheck
	}
	return nil
}

func (m *CreateSpecType) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *CreateSpecType) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *CreateSpecType) GetUnhealthyThreshold() uint32 {
	if m != nil {
		return m.UnhealthyThreshold
	}
	return 0
}

func (m *CreateSpecType) GetHealthyThreshold() uint32 {
	if m != nil {
		return m.HealthyThreshold
	}
	return 0
}

func (m *CreateSpecType) GetJitterPercent() uint32 {
	if m != nil {
		return m.JitterPercent
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_HttpHealthCheck)(nil),
		(*CreateSpecType_TcpHealthCheck)(nil),
		(*CreateSpecType_DnsProxyTcpHealthCheck)(nil),
		(*CreateSpecType_DnsProxyUdpHealthCheck)(nil),
		(*CreateSpecType_DnsHealthCheck)(nil),
		(*CreateSpecType_DnsProxyIcmpHealthCheck)(nil),
	}
}

// replace healthcheck
//
// x-displayName: "Replace Health Check"
// Healthcheck object defines method to determine if the given Endpoint is healthy.
// Single Healthcheck object can be referred to by one or many Cluster objects.
type ReplaceSpecType struct {
	// Types that are valid to be assigned to HealthCheck:
	//	*ReplaceSpecType_HttpHealthCheck
	//	*ReplaceSpecType_TcpHealthCheck
	//	*ReplaceSpecType_DnsProxyTcpHealthCheck
	//	*ReplaceSpecType_DnsProxyUdpHealthCheck
	//	*ReplaceSpecType_DnsHealthCheck
	//	*ReplaceSpecType_DnsProxyIcmpHealthCheck
	HealthCheck        isReplaceSpecType_HealthCheck `protobuf_oneof:"health_check"`
	Timeout            uint32                        `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Interval           uint32                        `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"`
	UnhealthyThreshold uint32                        `protobuf:"varint,6,opt,name=unhealthy_threshold,json=unhealthyThreshold,proto3" json:"unhealthy_threshold,omitempty"`
	HealthyThreshold   uint32                        `protobuf:"varint,7,opt,name=healthy_threshold,json=healthyThreshold,proto3" json:"healthy_threshold,omitempty"`
	JitterPercent      uint32                        `protobuf:"varint,9,opt,name=jitter_percent,json=jitterPercent,proto3" json:"jitter_percent,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9419355153b697, []int{7}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_HealthCheck interface {
	isReplaceSpecType_HealthCheck()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_HttpHealthCheck struct {
	HttpHealthCheck *HttpHealthCheck `protobuf:"bytes,1,opt,name=http_health_check,json=httpHealthCheck,proto3,oneof" json:"http_health_check,omitempty"`
}
type ReplaceSpecType_TcpHealthCheck struct {
	TcpHealthCheck *TcpHealthCheck `protobuf:"bytes,2,opt,name=tcp_health_check,json=tcpHealthCheck,proto3,oneof" json:"tcp_health_check,omitempty"`
}
type ReplaceSpecType_DnsProxyTcpHealthCheck struct {
	DnsProxyTcpHealthCheck *DnsProxyTcpHealthCheck `protobuf:"bytes,10,opt,name=dns_proxy_tcp_health_check,json=dnsProxyTcpHealthCheck,proto3,oneof" json:"dns_proxy_tcp_health_check,omitempty"`
}
type ReplaceSpecType_DnsProxyUdpHealthCheck struct {
	DnsProxyUdpHealthCheck *DnsProxyUdpHealthCheck `protobuf:"bytes,11,opt,name=dns_proxy_udp_health_check,json=dnsProxyUdpHealthCheck,proto3,oneof" json:"dns_proxy_udp_health_check,omitempty"`
}
type ReplaceSpecType_DnsHealthCheck struct {
	DnsHealthCheck *DnsHealthCheck `protobuf:"bytes,12,opt,name=dns_health_check,json=dnsHealthCheck,proto3,oneof" json:"dns_health_check,omitempty"`
}
type ReplaceSpecType_DnsProxyIcmpHealthCheck struct {
	DnsProxyIcmpHealthCheck *schema.Empty `protobuf:"bytes,13,opt,name=dns_proxy_icmp_health_check,json=dnsProxyIcmpHealthCheck,proto3,oneof" json:"dns_proxy_icmp_health_check,omitempty"`
}

func (*ReplaceSpecType_HttpHealthCheck) isReplaceSpecType_HealthCheck()         {}
func (*ReplaceSpecType_TcpHealthCheck) isReplaceSpecType_HealthCheck()          {}
func (*ReplaceSpecType_DnsProxyTcpHealthCheck) isReplaceSpecType_HealthCheck()  {}
func (*ReplaceSpecType_DnsProxyUdpHealthCheck) isReplaceSpecType_HealthCheck()  {}
func (*ReplaceSpecType_DnsHealthCheck) isReplaceSpecType_HealthCheck()          {}
func (*ReplaceSpecType_DnsProxyIcmpHealthCheck) isReplaceSpecType_HealthCheck() {}

func (m *ReplaceSpecType) GetHealthCheck() isReplaceSpecType_HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *ReplaceSpecType) GetHttpHealthCheck() *HttpHealthCheck {
	if x, ok := m.GetHealthCheck().(*ReplaceSpecType_HttpHealthCheck); ok {
		return x.HttpHealthCheck
	}
	return nil
}

func (m *ReplaceSpecType) GetTcpHealthCheck() *TcpHealthCheck {
	if x, ok := m.GetHealthCheck().(*ReplaceSpecType_TcpHealthCheck); ok {
		return x.TcpHealthCheck
	}
	return nil
}

func (m *ReplaceSpecType) GetDnsProxyTcpHealthCheck() *DnsProxyTcpHealthCheck {
	if x, ok := m.GetHealthCheck().(*ReplaceSpecType_DnsProxyTcpHealthCheck); ok {
		return x.DnsProxyTcpHealthCheck
	}
	return nil
}

func (m *ReplaceSpecType) GetDnsProxyUdpHealthCheck() *DnsProxyUdpHealthCheck {
	if x, ok := m.GetHealthCheck().(*ReplaceSpecType_DnsProxyUdpHealthCheck); ok {
		return x.DnsProxyUdpHealthCheck
	}
	return nil
}

func (m *ReplaceSpecType) GetDnsHealthCheck() *DnsHealthCheck {
	if x, ok := m.GetHealthCheck().(*ReplaceSpecType_DnsHealthCheck); ok {
		return x.DnsHealthCheck
	}
	return nil
}

func (m *ReplaceSpecType) GetDnsProxyIcmpHealthCheck() *schema.Empty {
	if x, ok := m.GetHealthCheck().(*ReplaceSpecType_DnsProxyIcmpHealthCheck); ok {
		return x.DnsProxyIcmpHealthCheck
	}
	return nil
}

func (m *ReplaceSpecType) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *ReplaceSpecType) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *ReplaceSpecType) GetUnhealthyThreshold() uint32 {
	if m != nil {
		return m.UnhealthyThreshold
	}
	return 0
}

func (m *ReplaceSpecType) GetHealthyThreshold() uint32 {
	if m != nil {
		return m.HealthyThreshold
	}
	return 0
}

func (m *ReplaceSpecType) GetJitterPercent() uint32 {
	if m != nil {
		return m.JitterPercent
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_HttpHealthCheck)(nil),
		(*ReplaceSpecType_TcpHealthCheck)(nil),
		(*ReplaceSpecType_DnsProxyTcpHealthCheck)(nil),
		(*ReplaceSpecType_DnsProxyUdpHealthCheck)(nil),
		(*ReplaceSpecType_DnsHealthCheck)(nil),
		(*ReplaceSpecType_DnsProxyIcmpHealthCheck)(nil),
	}
}

// Get healthcheck
//
// x-displayName: "Get Health Check"
// Healthcheck object defines method to determine if the given Endpoint is healthy.
// Single Healthcheck object can be referred to by one or many Cluster objects.
type GetSpecType struct {
	// Types that are valid to be assigned to HealthCheck:
	//	*GetSpecType_HttpHealthCheck
	//	*GetSpecType_TcpHealthCheck
	//	*GetSpecType_DnsProxyTcpHealthCheck
	//	*GetSpecType_DnsProxyUdpHealthCheck
	//	*GetSpecType_DnsHealthCheck
	//	*GetSpecType_DnsProxyIcmpHealthCheck
	HealthCheck        isGetSpecType_HealthCheck `protobuf_oneof:"health_check"`
	Timeout            uint32                    `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Interval           uint32                    `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"`
	Jitter             uint32                    `protobuf:"varint,5,opt,name=jitter,proto3" json:"jitter,omitempty"`
	UnhealthyThreshold uint32                    `protobuf:"varint,6,opt,name=unhealthy_threshold,json=unhealthyThreshold,proto3" json:"unhealthy_threshold,omitempty"`
	HealthyThreshold   uint32                    `protobuf:"varint,7,opt,name=healthy_threshold,json=healthyThreshold,proto3" json:"healthy_threshold,omitempty"`
	JitterPercent      uint32                    `protobuf:"varint,9,opt,name=jitter_percent,json=jitterPercent,proto3" json:"jitter_percent,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9419355153b697, []int{8}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_HealthCheck interface {
	isGetSpecType_HealthCheck()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_HttpHealthCheck struct {
	HttpHealthCheck *HttpHealthCheck `protobuf:"bytes,1,opt,name=http_health_check,json=httpHealthCheck,proto3,oneof" json:"http_health_check,omitempty"`
}
type GetSpecType_TcpHealthCheck struct {
	TcpHealthCheck *TcpHealthCheck `protobuf:"bytes,2,opt,name=tcp_health_check,json=tcpHealthCheck,proto3,oneof" json:"tcp_health_check,omitempty"`
}
type GetSpecType_DnsProxyTcpHealthCheck struct {
	DnsProxyTcpHealthCheck *DnsProxyTcpHealthCheck `protobuf:"bytes,10,opt,name=dns_proxy_tcp_health_check,json=dnsProxyTcpHealthCheck,proto3,oneof" json:"dns_proxy_tcp_health_check,omitempty"`
}
type GetSpecType_DnsProxyUdpHealthCheck struct {
	DnsProxyUdpHealthCheck *DnsProxyUdpHealthCheck `protobuf:"bytes,11,opt,name=dns_proxy_udp_health_check,json=dnsProxyUdpHealthCheck,proto3,oneof" json:"dns_proxy_udp_health_check,omitempty"`
}
type GetSpecType_DnsHealthCheck struct {
	DnsHealthCheck *DnsHealthCheck `protobuf:"bytes,12,opt,name=dns_health_check,json=dnsHealthCheck,proto3,oneof" json:"dns_health_check,omitempty"`
}
type GetSpecType_DnsProxyIcmpHealthCheck struct {
	DnsProxyIcmpHealthCheck *schema.Empty `protobuf:"bytes,13,opt,name=dns_proxy_icmp_health_check,json=dnsProxyIcmpHealthCheck,proto3,oneof" json:"dns_proxy_icmp_health_check,omitempty"`
}

func (*GetSpecType_HttpHealthCheck) isGetSpecType_HealthCheck()         {}
func (*GetSpecType_TcpHealthCheck) isGetSpecType_HealthCheck()          {}
func (*GetSpecType_DnsProxyTcpHealthCheck) isGetSpecType_HealthCheck()  {}
func (*GetSpecType_DnsProxyUdpHealthCheck) isGetSpecType_HealthCheck()  {}
func (*GetSpecType_DnsHealthCheck) isGetSpecType_HealthCheck()          {}
func (*GetSpecType_DnsProxyIcmpHealthCheck) isGetSpecType_HealthCheck() {}

func (m *GetSpecType) GetHealthCheck() isGetSpecType_HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *GetSpecType) GetHttpHealthCheck() *HttpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GetSpecType_HttpHealthCheck); ok {
		return x.HttpHealthCheck
	}
	return nil
}

func (m *GetSpecType) GetTcpHealthCheck() *TcpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GetSpecType_TcpHealthCheck); ok {
		return x.TcpHealthCheck
	}
	return nil
}

func (m *GetSpecType) GetDnsProxyTcpHealthCheck() *DnsProxyTcpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GetSpecType_DnsProxyTcpHealthCheck); ok {
		return x.DnsProxyTcpHealthCheck
	}
	return nil
}

func (m *GetSpecType) GetDnsProxyUdpHealthCheck() *DnsProxyUdpHealthCheck {
	if x, ok := m.GetHealthCheck().(*GetSpecType_DnsProxyUdpHealthCheck); ok {
		return x.DnsProxyUdpHealthCheck
	}
	return nil
}

func (m *GetSpecType) GetDnsHealthCheck() *DnsHealthCheck {
	if x, ok := m.GetHealthCheck().(*GetSpecType_DnsHealthCheck); ok {
		return x.DnsHealthCheck
	}
	return nil
}

func (m *GetSpecType) GetDnsProxyIcmpHealthCheck() *schema.Empty {
	if x, ok := m.GetHealthCheck().(*GetSpecType_DnsProxyIcmpHealthCheck); ok {
		return x.DnsProxyIcmpHealthCheck
	}
	return nil
}

func (m *GetSpecType) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *GetSpecType) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *GetSpecType) GetJitter() uint32 {
	if m != nil {
		return m.Jitter
	}
	return 0
}

func (m *GetSpecType) GetUnhealthyThreshold() uint32 {
	if m != nil {
		return m.UnhealthyThreshold
	}
	return 0
}

func (m *GetSpecType) GetHealthyThreshold() uint32 {
	if m != nil {
		return m.HealthyThreshold
	}
	return 0
}

func (m *GetSpecType) GetJitterPercent() uint32 {
	if m != nil {
		return m.JitterPercent
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_HttpHealthCheck)(nil),
		(*GetSpecType_TcpHealthCheck)(nil),
		(*GetSpecType_DnsProxyTcpHealthCheck)(nil),
		(*GetSpecType_DnsProxyUdpHealthCheck)(nil),
		(*GetSpecType_DnsHealthCheck)(nil),
		(*GetSpecType_DnsProxyIcmpHealthCheck)(nil),
	}
}

func init() {
	proto.RegisterEnum("ves.io.schema.healthcheck.DNSQueryType", DNSQueryType_name, DNSQueryType_value)
	golang_proto.RegisterEnum("ves.io.schema.healthcheck.DNSQueryType", DNSQueryType_name, DNSQueryType_value)
	proto.RegisterEnum("ves.io.schema.healthcheck.DNSResponseRcodeType", DNSResponseRcodeType_name, DNSResponseRcodeType_value)
	golang_proto.RegisterEnum("ves.io.schema.healthcheck.DNSResponseRcodeType", DNSResponseRcodeType_name, DNSResponseRcodeType_value)
	proto.RegisterEnum("ves.io.schema.healthcheck.DNSResponseRecordType", DNSResponseRecordType_name, DNSResponseRecordType_value)
	golang_proto.RegisterEnum("ves.io.schema.healthcheck.DNSResponseRecordType", DNSResponseRecordType_name, DNSResponseRecordType_value)
	proto.RegisterType((*HttpHealthCheck)(nil), "ves.io.schema.healthcheck.HttpHealthCheck")
	golang_proto.RegisterType((*HttpHealthCheck)(nil), "ves.io.schema.healthcheck.HttpHealthCheck")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.healthcheck.HttpHealthCheck.HeadersEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.healthcheck.HttpHealthCheck.HeadersEntry")
	proto.RegisterType((*DnsHealthCheck)(nil), "ves.io.schema.healthcheck.DnsHealthCheck")
	golang_proto.RegisterType((*DnsHealthCheck)(nil), "ves.io.schema.healthcheck.DnsHealthCheck")
	proto.RegisterType((*DnsProxyUdpHealthCheck)(nil), "ves.io.schema.healthcheck.DnsProxyUdpHealthCheck")
	golang_proto.RegisterType((*DnsProxyUdpHealthCheck)(nil), "ves.io.schema.healthcheck.DnsProxyUdpHealthCheck")
	proto.RegisterType((*DnsProxyTcpHealthCheck)(nil), "ves.io.schema.healthcheck.DnsProxyTcpHealthCheck")
	golang_proto.RegisterType((*DnsProxyTcpHealthCheck)(nil), "ves.io.schema.healthcheck.DnsProxyTcpHealthCheck")
	proto.RegisterType((*TcpHealthCheck)(nil), "ves.io.schema.healthcheck.TcpHealthCheck")
	golang_proto.RegisterType((*TcpHealthCheck)(nil), "ves.io.schema.healthcheck.TcpHealthCheck")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.healthcheck.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.healthcheck.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.healthcheck.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.healthcheck.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.healthcheck.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.healthcheck.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.healthcheck.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.healthcheck.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/healthcheck/types.proto", fileDescriptor_1d9419355153b697)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/healthcheck/types.proto", fileDescriptor_1d9419355153b697)
}

var fileDescriptor_1d9419355153b697 = []byte{
	// 1860 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xcf, 0x6f, 0xdb, 0xc8,
	0x15, 0xd6, 0x48, 0xb2, 0x7e, 0x8c, 0x6c, 0x99, 0x9e, 0xf8, 0x07, 0xad, 0x04, 0x2a, 0xd7, 0x68,
	0x5a, 0xad, 0x56, 0x91, 0x6c, 0x79, 0x9d, 0x64, 0x1d, 0x20, 0x80, 0x69, 0xab, 0x71, 0x77, 0x01,
	0xdb, 0xa1, 0xe5, 0x62, 0x53, 0x6c, 0x97, 0xa0, 0xc9, 0x89, 0xa5, 0x46, 0x12, 0xb9, 0xe4, 0x48,
	0x8d, 0x02, 0x14, 0x08, 0x7a, 0x28, 0x0a, 0x03, 0x2d, 0x82, 0x1c, 0xf7, 0x2f, 0xe8, 0x9f, 0x50,
	0x94, 0x3e, 0xb8, 0x41, 0x0b, 0x04, 0x3d, 0xf9, 0x52, 0xc0, 0xd8, 0x53, 0xa2, 0x5c, 0xd2, 0x3d,
	0x05, 0x7b, 0x5a, 0xf4, 0xd2, 0x62, 0x86, 0x94, 0x44, 0xca, 0xb2, 0x1a, 0x2c, 0x76, 0x5b, 0x2c,
	0xe0, 0x1b, 0xa9, 0xf7, 0xde, 0xf7, 0xbd, 0x37, 0xf3, 0xbe, 0x37, 0x03, 0x0a, 0x5e, 0x6d, 0x61,
	0x2b, 0x5f, 0xd5, 0x0b, 0x96, 0x5a, 0xc1, 0x75, 0xa5, 0x50, 0xc1, 0x4a, 0x8d, 0x54, 0xd4, 0x0a,
	0x56, 0x1f, 0x14, 0x48, 0xdb, 0xc0, 0x56, 0xde, 0x30, 0x75, 0xa2, 0xa3, 0x79, 0xc7, 0x2d, 0xef,
	0xb8, 0xe5, 0x3d, 0x6e, 0xa9, 0x6b, 0x07, 0x55, 0x52, 0x69, 0xee, 0xe7, 0x55, 0xbd, 0x5e, 0x38,
	0xd0, 0x0f, 0xf4, 0x02, 0x8b, 0xd8, 0x6f, 0xde, 0x67, 0x6f, 0xec, 0x85, 0x3d, 0x39, 0x48, 0xa9,
	0x39, 0x3f, 0x61, 0x03, 0x13, 0xd7, 0x70, 0xd9, 0x6f, 0xd0, 0x0d, 0x52, 0xd5, 0x1b, 0x2e, 0x7f,
	0x6a, 0xde, 0x6f, 0xf4, 0xa4, 0x96, 0xba, 0xe2, 0x37, 0xb5, 0x94, 0x5a, 0x55, 0x53, 0x08, 0x76,
	0xad, 0xc2, 0x80, 0xb5, 0x8a, 0x7f, 0x25, 0xfb, 0xa0, 0x17, 0x9e, 0xc4, 0xe0, 0xe4, 0x26, 0x21,
	0xc6, 0x26, 0xab, 0x69, 0x9d, 0xd6, 0x84, 0x3e, 0x82, 0xb3, 0x4d, 0x0b, 0xcb, 0xba, 0x59, 0x3d,
	0xa8, 0x36, 0x64, 0x0b, 0x9b, 0x2d, 0x6c, 0xca, 0x0d, 0xa5, 0x8e, 0xf9, 0xa8, 0x00, 0x32, 0x89,
	0xe2, 0x74, 0xde, 0xbf, 0x1e, 0xa5, 0xba, 0x41, 0xda, 0x9b, 0x01, 0xe9, 0x52, 0xd3, 0xc2, 0xdb,
	0x2c, 0x68, 0x97, 0xc5, 0x6c, 0x29, 0x75, 0x8c, 0x6e, 0xc1, 0x44, 0x45, 0xb7, 0x88, 0x5c, 0xc1,
	0x8a, 0x86, 0x4d, 0x1e, 0x08, 0x20, 0x13, 0x17, 0xf9, 0xaf, 0x6d, 0x10, 0xf8, 0xf3, 0x3f, 0x8f,
	0x43, 0x63, 0x66, 0x88, 0xff, 0x6d, 0xd0, 0x7d, 0x7a, 0x01, 0xc0, 0x66, 0x40, 0x82, 0xd4, 0x7d,
	0x93, 0x79, 0x23, 0x15, 0x86, 0x0d, 0x85, 0x54, 0xf8, 0x20, 0x8b, 0xda, 0xfe, 0xc2, 0x06, 0xa0,
	0xd0, 0xb1, 0xc1, 0x0a, 0x04, 0x05, 0x18, 0x75, 0xb7, 0x0b, 0x8e, 0x7b, 0xf7, 0x0d, 0xc6, 0xdc,
	0xb7, 0x47, 0x30, 0x52, 0xa8, 0x55, 0x5b, 0xf8, 0x11, 0x8c, 0x16, 0x4c, 0xac, 0x68, 0xed, 0x47,
	0x5d, 0xce, 0x98, 0x19, 0xe1, 0x1f, 0x73, 0xaf, 0x83, 0x40, 0x62, 0xe0, 0xa8, 0x13, 0x84, 0x51,
	0x27, 0x3b, 0x8b, 0x0f, 0x09, 0xa1, 0x4c, 0xa2, 0x78, 0x23, 0x7f, 0xee, 0x86, 0xe7, 0x07, 0x16,
	0x2b, 0xef, 0x64, 0x6a, 0x95, 0x1a, 0xc4, 0x6c, 0x8b, 0x7f, 0x08, 0x1e, 0xdb, 0x00, 0x50, 0x92,
	0xf1, 0xcf, 0x41, 0x7c, 0x21, 0x6a, 0x8e, 0x71, 0x80, 0x7f, 0xec, 0xd4, 0xf7, 0x39, 0x08, 0x72,
	0x5c, 0xd7, 0x94, 0x75, 0x4d, 0x5c, 0xe7, 0xc5, 0xdf, 0x42, 0xc2, 0xe1, 0x11, 0xb8, 0x82, 0x52,
	0x5f, 0xda, 0x60, 0x76, 0xb3, 0x5c, 0xde, 0x11, 0x9c, 0x64, 0x84, 0x07, 0xb8, 0x2d, 0x58, 0xc4,
	0xac, 0x36, 0x0e, 0xa8, 0xd3, 0xfc, 0xe1, 0x11, 0x98, 0x41, 0x97, 0x3a, 0x36, 0x98, 0x64, 0x4e,
	0x0e, 0xaf, 0xf0, 0x11, 0x6e, 0x53, 0x2b, 0x3c, 0x3c, 0x02, 0x11, 0x14, 0x7e, 0x6e, 0x83, 0x00,
	0x7d, 0x8d, 0x1c, 0x1e, 0x81, 0x60, 0x0c, 0xd0, 0xc7, 0xdb, 0x87, 0x47, 0x60, 0x35, 0x75, 0xf3,
	0x4b, 0x1b, 0xbc, 0xbf, 0xcb, 0xc0, 0x04, 0xfd, 0xbe, 0xa0, 0xea, 0xf5, 0xba, 0x22, 0x58, 0xd8,
	0x50, 0x4c, 0x85, 0x60, 0x4d, 0xa8, 0x55, 0x2d, 0x42, 0x7f, 0xf7, 0xd2, 0xb7, 0x94, 0x5a, 0x13,
	0x5b, 0x14, 0xe2, 0xf2, 0xe1, 0x11, 0x98, 0x4b, 0xcd, 0x74, 0x6c, 0x30, 0xe5, 0xa5, 0xfe, 0x19,
	0x75, 0xe8, 0x91, 0xa7, 0x28, 0x79, 0xc8, 0xf3, 0x4a, 0x57, 0x42, 0xea, 0x2e, 0x2c, 0xfa, 0x04,
	0xce, 0x9b, 0xf8, 0xb3, 0x26, 0xee, 0x75, 0x82, 0x25, 0x13, 0x5d, 0x36, 0x71, 0x5d, 0x6f, 0x61,
	0x3e, 0x2c, 0x84, 0x32, 0x71, 0xf1, 0x1d, 0x1a, 0xd1, 0xdd, 0x24, 0xf8, 0x14, 0x44, 0x17, 0x68,
	0x77, 0xb8, 0xab, 0xf7, 0x94, 0xae, 0x9e, 0x34, 0xeb, 0x62, 0xb8, 0x8b, 0x5e, 0xd6, 0x25, 0x06,
	0x80, 0xde, 0x81, 0x71, 0xda, 0xb1, 0x15, 0x42, 0x8c, 0x22, 0x3f, 0x26, 0x80, 0x4c, 0x4c, 0x0c,
	0x53, 0x24, 0x29, 0xd6, 0xb4, 0x30, 0xdd, 0xb1, 0x22, 0x6a, 0xc1, 0x19, 0xfc, 0xd0, 0xc0, 0x2a,
	0xc1, 0x9a, 0x6c, 0x11, 0x85, 0x34, 0x2d, 0x59, 0xd5, 0x35, 0x6c, 0xf1, 0x31, 0x46, 0x2e, 0x52,
	0xf2, 0x2f, 0x6c, 0x10, 0x2a, 0x2e, 0x2e, 0x76, 0x73, 0x48, 0x3c, 0x05, 0xb1, 0x85, 0x88, 0x19,
	0xe6, 0x42, 0x3c, 0xf4, 0xe6, 0xf4, 0x24, 0x0c, 0xfa, 0x39, 0x75, 0x9f, 0x78, 0x20, 0x5d, 0xea,
	0x12, 0xec, 0x32, 0xfc, 0x75, 0x0a, 0x9f, 0x5a, 0x85, 0xe3, 0xde, 0x16, 0x41, 0x1c, 0x0c, 0x3d,
	0xc0, 0x6d, 0x47, 0x07, 0x12, 0x7d, 0x44, 0xd3, 0x70, 0x8c, 0xad, 0xb5, 0xd3, 0xe5, 0x92, 0xf3,
	0xb2, 0x1a, 0xbc, 0x09, 0x56, 0xef, 0x7c, 0x75, 0x3b, 0x71, 0x3d, 0x57, 0xcc, 0xad, 0xe4, 0x96,
	0x73, 0xef, 0xe7, 0x6e, 0x3e, 0xa3, 0x9d, 0xbf, 0x0c, 0x7f, 0xe8, 0xb4, 0x9f, 0xc0, 0xfa, 0xcf,
	0xd9, 0x32, 0xc9, 0x59, 0x16, 0x61, 0x47, 0x31, 0x95, 0x3a, 0x26, 0x74, 0xc1, 0xbd, 0x81, 0xe2,
	0x55, 0x88, 0x3c, 0x22, 0x94, 0xd5, 0x8a, 0x5e, 0x55, 0x31, 0x9a, 0x3c, 0xb6, 0x41, 0xf4, 0xc4,
	0x06, 0x91, 0x8e, 0x0d, 0x42, 0x37, 0x72, 0x4b, 0x1f, 0x86, 0x63, 0x11, 0x2e, 0xba, 0xf0, 0xd7,
	0x10, 0x4c, 0x6e, 0x34, 0x2c, 0xef, 0x44, 0x48, 0xc3, 0xa8, 0x89, 0x5b, 0xd8, 0xb4, 0x9c, 0x24,
	0x63, 0xa2, 0xbb, 0xbb, 0xee, 0x8f, 0xe8, 0x3d, 0x08, 0x3f, 0x6b, 0x62, 0xb3, 0xed, 0x4c, 0x89,
	0x10, 0x53, 0xeb, 0x38, 0x5d, 0x19, 0xa7, 0xcd, 0xff, 0x0d, 0xa4, 0x38, 0xb3, 0xb3, 0x89, 0xf0,
	0x93, 0xae, 0x33, 0x9d, 0x63, 0x7c, 0x58, 0x00, 0x99, 0x64, 0xf1, 0xc7, 0x23, 0x14, 0xb7, 0xb1,
	0xb5, 0x7b, 0x97, 0xfa, 0x97, 0xdb, 0x06, 0x76, 0x71, 0xe8, 0x23, 0xaa, 0xc0, 0xe9, 0xde, 0x8e,
	0x9a, 0x58, 0xd5, 0x4d, 0xcd, 0x41, 0x1c, 0x63, 0x88, 0x8b, 0xa3, 0x11, 0x25, 0x6c, 0x19, 0x7a,
	0xc3, 0xc2, 0x12, 0x0b, 0xa4, 0x78, 0x6e, 0x4d, 0xa8, 0x8b, 0xd9, 0xb7, 0xa0, 0x4f, 0x60, 0xb2,
	0xcf, 0x44, 0xbb, 0x86, 0x8f, 0x30, 0x8e, 0xc2, 0x5b, 0x72, 0xd0, 0x10, 0x0f, 0xc5, 0x44, 0x8f,
	0x82, 0x1a, 0x50, 0x09, 0x4e, 0x79, 0xea, 0x70, 0x42, 0xd8, 0xa4, 0x8d, 0x8b, 0xbc, 0xdb, 0x95,
	0xc1, 0x7c, 0xd6, 0x3b, 0x31, 0x1f, 0xc7, 0x24, 0xae, 0x9f, 0xa6, 0x13, 0xb1, 0x9a, 0xfc, 0xea,
	0x76, 0xa2, 0xc8, 0xf6, 0x7b, 0x25, 0x77, 0x3d, 0x77, 0x63, 0xe1, 0x08, 0xc0, 0xd9, 0x8d, 0x86,
	0xb5, 0x63, 0xea, 0x0f, 0xdb, 0x7b, 0x9a, 0x6f, 0xc0, 0x2f, 0xc1, 0x71, 0x0b, 0x37, 0x34, 0xd9,
	0x50, 0xda, 0x35, 0x5d, 0xd1, 0xdc, 0xa1, 0x9c, 0xfc, 0xda, 0x06, 0xa1, 0x1e, 0x05, 0x27, 0x25,
	0xa8, 0xcf, 0x8e, 0xe3, 0x82, 0x6e, 0x0d, 0x4b, 0x32, 0x38, 0x34, 0xee, 0x6c, 0x6a, 0xc5, 0x67,
	0x36, 0xc8, 0xc3, 0x1c, 0xbc, 0xea, 0xeb, 0xdc, 0xbd, 0x8d, 0x7e, 0xe3, 0x2a, 0x0d, 0x4d, 0xe8,
	0xba, 0xa3, 0xd0, 0x52, 0xae, 0xe8, 0x4b, 0xbf, 0xac, 0x7e, 0xef, 0xd2, 0x7f, 0x0e, 0x60, 0x72,
	0x20, 0xed, 0x5b, 0x43, 0xd3, 0xe6, 0xfd, 0xf4, 0xee, 0xd3, 0x1b, 0x00, 0xfc, 0x05, 0x94, 0xce,
	0x2f, 0xe0, 0x7c, 0x84, 0xb7, 0x2d, 0xa5, 0xbc, 0x3e, 0xaa, 0x94, 0x3f, 0xc5, 0x60, 0xf2, 0x4e,
	0x4d, 0xdf, 0x57, 0x6a, 0xbb, 0x06, 0x56, 0x99, 0x20, 0x3e, 0x85, 0x53, 0x74, 0xd6, 0xca, 0x4e,
	0xc3, 0xcb, 0xac, 0xe3, 0x59, 0x3d, 0x89, 0x62, 0xf6, 0xed, 0xcf, 0x4e, 0x31, 0x7c, 0x62, 0xb3,
	0x23, 0x7f, 0xb2, 0x32, 0x70, 0x03, 0xd9, 0x83, 0x1c, 0x51, 0x07, 0xe0, 0x83, 0x0c, 0xfe, 0xdd,
	0x11, 0xf0, 0xfe, 0xf5, 0xde, 0x0c, 0x48, 0x49, 0xe2, 0xdf, 0x81, 0x87, 0x30, 0xa5, 0x35, 0x2c,
	0xd9, 0xa0, 0x3d, 0x25, 0x9f, 0x21, 0x80, 0x8c, 0x60, 0x69, 0x94, 0xa6, 0x87, 0xf6, 0xa3, 0x18,
	0x3d, 0xfd, 0x35, 0x78, 0xed, 0x54, 0x32, 0xab, 0x0d, 0x6f, 0x59, 0x1f, 0x73, 0x53, 0x1b, 0x60,
	0x4e, 0xbc, 0x35, 0xb3, 0x5f, 0xc8, 0x43, 0x99, 0x07, 0xb4, 0xfe, 0x29, 0xe4, 0x28, 0xb3, 0x8f,
	0x6f, 0xfc, 0xbf, 0x2e, 0xa5, 0x7f, 0xfe, 0x7b, 0x79, 0x92, 0x9a, 0xff, 0x68, 0xf8, 0x05, 0xbc,
	0xdc, 0xaf, 0xac, 0xaa, 0xd6, 0x07, 0x4a, 0x9b, 0x38, 0xff, 0xc6, 0xe8, 0x45, 0x9d, 0xeb, 0x66,
	0xff, 0x53, 0xb5, 0xee, 0x4b, 0x7f, 0x19, 0x46, 0x49, 0xb5, 0x8e, 0xf5, 0x26, 0x61, 0xc7, 0xca,
	0x84, 0x38, 0x4f, 0x2f, 0x81, 0xcb, 0x74, 0x1a, 0xfe, 0xee, 0xc8, 0xb9, 0x6a, 0x45, 0xb3, 0x63,
	0xfc, 0x69, 0x38, 0x03, 0xa4, 0xae, 0x27, 0xba, 0x0e, 0x63, 0xd5, 0x06, 0xc1, 0x66, 0x4b, 0xa9,
	0xb1, 0xf3, 0x65, 0x42, 0x4c, 0xd1, 0x21, 0xba, 0xb4, 0x32, 0x34, 0xac, 0xe7, 0x8b, 0xde, 0x85,
	0x91, 0x5f, 0x56, 0x09, 0xc1, 0x26, 0x3b, 0x43, 0x26, 0xc4, 0x29, 0x37, 0x41, 0x26, 0xa9, 0x6c,
	0x88, 0x3f, 0x0d, 0x4b, 0xae, 0x03, 0x2a, 0xc1, 0x4b, 0xcd, 0x86, 0x53, 0x69, 0x5b, 0x26, 0x15,
	0x13, 0x5b, 0x15, 0xbd, 0xa6, 0xb1, 0x73, 0x61, 0x42, 0x9c, 0xa6, 0x39, 0x2e, 0x75, 0x27, 0x76,
	0x24, 0x1b, 0xe6, 0xb9, 0x0c, 0x90, 0x50, 0x2f, 0xa0, 0xdc, 0xf5, 0x47, 0x6b, 0x70, 0xea, 0x2c,
	0x48, 0xb4, 0x0f, 0xb2, 0x3c, 0x08, 0xc2, 0x9d, 0x81, 0x28, 0xc1, 0xa4, 0x93, 0x93, 0x6c, 0x60,
	0x53, 0xc5, 0x0d, 0xc2, 0xc7, 0x59, 0x7c, 0xba, 0x7b, 0x76, 0x2c, 0xf7, 0x2f, 0x34, 0xd9, 0xb8,
	0x18, 0x5d, 0xcc, 0x2d, 0x2d, 0x5e, 0x5b, 0x59, 0x94, 0x26, 0x9c, 0xa8, 0x1d, 0x27, 0x68, 0x35,
	0xf7, 0xcc, 0x06, 0x19, 0xf8, 0x23, 0x38, 0xe7, 0x9b, 0x0c, 0xde, 0x0b, 0xc5, 0x4d, 0x76, 0xb8,
	0x5c, 0xcf, 0xdd, 0xc8, 0x7d, 0x20, 0xfe, 0x00, 0x8e, 0x7b, 0xb7, 0x99, 0x5d, 0x25, 0xc0, 0x89,
	0x0d, 0x62, 0xf4, 0x2a, 0xb1, 0x94, 0x2b, 0x7e, 0x18, 0x8e, 0xc5, 0xb8, 0xf8, 0xc2, 0x71, 0x04,
	0x26, 0xd7, 0x4d, 0xac, 0x10, 0xdc, 0x1b, 0x1d, 0x1f, 0x7f, 0x2b, 0xa3, 0xe3, 0x7f, 0x38, 0x34,
	0xf4, 0xef, 0x64, 0x68, 0x8c, 0x98, 0x15, 0xfa, 0x77, 0x32, 0x2b, 0x46, 0x8c, 0x88, 0xbd, 0x6f,
	0x61, 0x44, 0x0c, 0x99, 0x0c, 0xe5, 0x6f, 0x3c, 0x19, 0x46, 0x0d, 0x04, 0x7e, 0x60, 0x20, 0xf4,
	0x55, 0x9f, 0x1a, 0x54, 0xbd, 0x47, 0xd9, 0x85, 0x11, 0x72, 0x1d, 0x2a, 0xcc, 0xf7, 0xce, 0x15,
	0xe6, 0x10, 0x09, 0x5e, 0x1d, 0x2e, 0xc1, 0x41, 0x89, 0x4d, 0xfd, 0xfd, 0xf6, 0xc0, 0x41, 0x2a,
	0x0a, 0x03, 0x3a, 0xe2, 0x7e, 0xf3, 0x2f, 0xe0, 0xfb, 0x65, 0xe1, 0x2f, 0x11, 0x38, 0x29, 0x61,
	0xa3, 0xa6, 0xa8, 0x17, 0x1a, 0xba, 0xd0, 0xd0, 0x85, 0x86, 0xbe, 0x89, 0x86, 0xfe, 0x11, 0x81,
	0x89, 0x3b, 0x98, 0x5c, 0xe8, 0xe7, 0x42, 0x3f, 0xff, 0x47, 0xfd, 0xcc, 0xfa, 0x6f, 0x97, 0xbd,
	0xab, 0xe4, 0xf7, 0x56, 0x57, 0xd9, 0x0f, 0xe0, 0xb8, 0xf7, 0xe3, 0x0c, 0x9a, 0x84, 0x89, 0x8d,
	0xad, 0x5d, 0xf9, 0x6e, 0xf9, 0xde, 0x4e, 0x49, 0x5e, 0xe3, 0x02, 0x08, 0xc1, 0xa4, 0xe7, 0x87,
	0xb5, 0xb5, 0x35, 0x0e, 0xb0, 0x0f, 0x83, 0x81, 0xec, 0x16, 0x9c, 0x1e, 0xf6, 0x85, 0x04, 0xcd,
	0xc3, 0x19, 0x1a, 0x21, 0x95, 0x76, 0x65, 0x69, 0x7d, 0x7b, 0xa3, 0x24, 0x6f, 0x6d, 0x97, 0x24,
	0x69, 0x5b, 0xe2, 0x02, 0x68, 0x06, 0x4e, 0xf9, 0x4d, 0x6b, 0x5b, 0xf7, 0x7a, 0x78, 0x1f, 0xb3,
	0xb8, 0xb3, 0x5f, 0x75, 0xd0, 0x15, 0xc8, 0x3b, 0x51, 0x77, 0xf7, 0x4a, 0xbb, 0xe5, 0xd2, 0x86,
	0x7c, 0x77, 0xaf, 0x24, 0xdd, 0x93, 0x69, 0x46, 0x5c, 0x00, 0x5d, 0x86, 0x73, 0x3d, 0xcc, 0xd2,
	0xfa, 0xb6, 0xb4, 0x21, 0x3b, 0xa9, 0xf6, 0x91, 0xc5, 0xdf, 0x83, 0x93, 0x97, 0xe9, 0xc0, 0xe9,
	0xcb, 0x74, 0xe0, 0xcd, 0xcb, 0x34, 0x78, 0xdc, 0x49, 0x83, 0x3f, 0x76, 0xd2, 0xe0, 0x79, 0x27,
	0x0d, 0x4e, 0x3a, 0x69, 0x70, 0xda, 0x49, 0x83, 0x17, 0x9d, 0x34, 0x78, 0xdd, 0x49, 0x07, 0xde,
	0x74, 0xd2, 0xe0, 0xc9, 0xab, 0x74, 0xe0, 0xf8, 0x55, 0x1a, 0x9c, 0xbc, 0x4a, 0x07, 0x4e, 0x5f,
	0xa5, 0x03, 0x3f, 0xdf, 0x3e, 0xd0, 0x8d, 0x07, 0x07, 0xf9, 0x96, 0x5e, 0x23, 0xd8, 0x34, 0x95,
	0x7c, 0xd3, 0x2a, 0xb0, 0x87, 0xfb, 0xba, 0x59, 0xbf, 0x66, 0x98, 0x7a, 0xab, 0xaa, 0x61, 0xf3,
	0x5a, 0xd7, 0x5c, 0x30, 0xf6, 0x0f, 0xf4, 0x02, 0x7e, 0x48, 0xdc, 0x2f, 0xf6, 0x67, 0xff, 0x98,
	0xd8, 0x8f, 0xb0, 0x0f, 0xf7, 0xcb, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xb0, 0x1b, 0xc8,
	0xbc, 0x18, 0x00, 0x00,
}

func (x DNSQueryType) String() string {
	s, ok := DNSQueryType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DNSResponseRcodeType) String() string {
	s, ok := DNSResponseRcodeType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DNSResponseRecordType) String() string {
	s, ok := DNSResponseRecordType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *HttpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpHealthCheck)
	if !ok {
		that2, ok := that.(HttpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HostHeaderChoice == nil {
		if this.HostHeaderChoice != nil {
			return false
		}
	} else if this.HostHeaderChoice == nil {
		return false
	} else if !this.HostHeaderChoice.Equal(that1.HostHeaderChoice) {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if this.Headers[i] != that1.Headers[i] {
			return false
		}
	}
	if len(this.RequestHeadersToRemove) != len(that1.RequestHeadersToRemove) {
		return false
	}
	for i := range this.RequestHeadersToRemove {
		if this.RequestHeadersToRemove[i] != that1.RequestHeadersToRemove[i] {
			return false
		}
	}
	if this.UseHttp2 != that1.UseHttp2 {
		return false
	}
	if len(this.ExpectedStatusCodes) != len(that1.ExpectedStatusCodes) {
		return false
	}
	for i := range this.ExpectedStatusCodes {
		if this.ExpectedStatusCodes[i] != that1.ExpectedStatusCodes[i] {
			return false
		}
	}
	return true
}
func (this *HttpHealthCheck_UseOriginServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpHealthCheck_UseOriginServerName)
	if !ok {
		that2, ok := that.(HttpHealthCheck_UseOriginServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseOriginServerName.Equal(that1.UseOriginServerName) {
		return false
	}
	return true
}
func (this *HttpHealthCheck_HostHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpHealthCheck_HostHeader)
	if !ok {
		that2, ok := that.(HttpHealthCheck_HostHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HostHeader != that1.HostHeader {
		return false
	}
	return true
}
func (this *DnsHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DnsHealthCheck)
	if !ok {
		that2, ok := that.(DnsHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Reverse != that1.Reverse {
		return false
	}
	if this.QueryName != that1.QueryName {
		return false
	}
	if this.QueryType != that1.QueryType {
		return false
	}
	if this.ExpectedRecordType != that1.ExpectedRecordType {
		return false
	}
	if this.ExpectedRcode != that1.ExpectedRcode {
		return false
	}
	if this.ExpectedResponse != that1.ExpectedResponse {
		return false
	}
	return true
}
func (this *DnsProxyUdpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DnsProxyUdpHealthCheck)
	if !ok {
		that2, ok := that.(DnsProxyUdpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SendPayload != that1.SendPayload {
		return false
	}
	if this.ExpectedResponse != that1.ExpectedResponse {
		return false
	}
	return true
}
func (this *DnsProxyTcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DnsProxyTcpHealthCheck)
	if !ok {
		that2, ok := that.(DnsProxyTcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SendPayload != that1.SendPayload {
		return false
	}
	if this.ExpectedResponse != that1.ExpectedResponse {
		return false
	}
	return true
}
func (this *TcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TcpHealthCheck)
	if !ok {
		that2, ok := that.(TcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SendPayload != that1.SendPayload {
		return false
	}
	if this.ExpectedResponse != that1.ExpectedResponse {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HealthCheck == nil {
		if this.HealthCheck != nil {
			return false
		}
	} else if this.HealthCheck == nil {
		return false
	} else if !this.HealthCheck.Equal(that1.HealthCheck) {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	if this.Jitter != that1.Jitter {
		return false
	}
	if this.UnhealthyThreshold != that1.UnhealthyThreshold {
		return false
	}
	if this.HealthyThreshold != that1.HealthyThreshold {
		return false
	}
	if this.JitterPercent != that1.JitterPercent {
		return false
	}
	return true
}
func (this *GlobalSpecType_HttpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HttpHealthCheck)
	if !ok {
		that2, ok := that.(GlobalSpecType_HttpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpHealthCheck.Equal(that1.HttpHealthCheck) {
		return false
	}
	return true
}
func (this *GlobalSpecType_TcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_TcpHealthCheck)
	if !ok {
		that2, ok := that.(GlobalSpecType_TcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpHealthCheck.Equal(that1.TcpHealthCheck) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DnsProxyTcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DnsProxyTcpHealthCheck)
	if !ok {
		that2, ok := that.(GlobalSpecType_DnsProxyTcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DnsProxyTcpHealthCheck.Equal(that1.DnsProxyTcpHealthCheck) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DnsProxyUdpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DnsProxyUdpHealthCheck)
	if !ok {
		that2, ok := that.(GlobalSpecType_DnsProxyUdpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DnsProxyUdpHealthCheck.Equal(that1.DnsProxyUdpHealthCheck) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DnsHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DnsHealthCheck)
	if !ok {
		that2, ok := that.(GlobalSpecType_DnsHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DnsHealthCheck.Equal(that1.DnsHealthCheck) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DnsProxyIcmpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DnsProxyIcmpHealthCheck)
	if !ok {
		that2, ok := that.(GlobalSpecType_DnsProxyIcmpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DnsProxyIcmpHealthCheck.Equal(that1.DnsProxyIcmpHealthCheck) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HealthCheck == nil {
		if this.HealthCheck != nil {
			return false
		}
	} else if this.HealthCheck == nil {
		return false
	} else if !this.HealthCheck.Equal(that1.HealthCheck) {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	if this.UnhealthyThreshold != that1.UnhealthyThreshold {
		return false
	}
	if this.HealthyThreshold != that1.HealthyThreshold {
		return false
	}
	if this.JitterPercent != that1.JitterPercent {
		return false
	}
	return true
}
func (this *CreateSpecType_HttpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HttpHealthCheck)
	if !ok {
		that2, ok := that.(CreateSpecType_HttpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpHealthCheck.Equal(that1.HttpHealthCheck) {
		return false
	}
	return true
}
func (this *CreateSpecType_TcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_TcpHealthCheck)
	if !ok {
		that2, ok := that.(CreateSpecType_TcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpHealthCheck.Equal(that1.TcpHealthCheck) {
		return false
	}
	return true
}
func (this *CreateSpecType_DnsProxyTcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DnsProxyTcpHealthCheck)
	if !ok {
		that2, ok := that.(CreateSpecType_DnsProxyTcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DnsProxyTcpHealthCheck.Equal(that1.DnsProxyTcpHealthCheck) {
		return false
	}
	return true
}
func (this *CreateSpecType_DnsProxyUdpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DnsProxyUdpHealthCheck)
	if !ok {
		that2, ok := that.(CreateSpecType_DnsProxyUdpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DnsProxyUdpHealthCheck.Equal(that1.DnsProxyUdpHealthCheck) {
		return false
	}
	return true
}
func (this *CreateSpecType_DnsHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DnsHealthCheck)
	if !ok {
		that2, ok := that.(CreateSpecType_DnsHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DnsHealthCheck.Equal(that1.DnsHealthCheck) {
		return false
	}
	return true
}
func (this *CreateSpecType_DnsProxyIcmpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DnsProxyIcmpHealthCheck)
	if !ok {
		that2, ok := that.(CreateSpecType_DnsProxyIcmpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DnsProxyIcmpHealthCheck.Equal(that1.DnsProxyIcmpHealthCheck) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HealthCheck == nil {
		if this.HealthCheck != nil {
			return false
		}
	} else if this.HealthCheck == nil {
		return false
	} else if !this.HealthCheck.Equal(that1.HealthCheck) {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	if this.UnhealthyThreshold != that1.UnhealthyThreshold {
		return false
	}
	if this.HealthyThreshold != that1.HealthyThreshold {
		return false
	}
	if this.JitterPercent != that1.JitterPercent {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HttpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HttpHealthCheck)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HttpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpHealthCheck.Equal(that1.HttpHealthCheck) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_TcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_TcpHealthCheck)
	if !ok {
		that2, ok := that.(ReplaceSpecType_TcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpHealthCheck.Equal(that1.TcpHealthCheck) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DnsProxyTcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DnsProxyTcpHealthCheck)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DnsProxyTcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DnsProxyTcpHealthCheck.Equal(that1.DnsProxyTcpHealthCheck) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DnsProxyUdpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DnsProxyUdpHealthCheck)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DnsProxyUdpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DnsProxyUdpHealthCheck.Equal(that1.DnsProxyUdpHealthCheck) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DnsHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DnsHealthCheck)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DnsHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DnsHealthCheck.Equal(that1.DnsHealthCheck) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DnsProxyIcmpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DnsProxyIcmpHealthCheck)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DnsProxyIcmpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DnsProxyIcmpHealthCheck.Equal(that1.DnsProxyIcmpHealthCheck) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HealthCheck == nil {
		if this.HealthCheck != nil {
			return false
		}
	} else if this.HealthCheck == nil {
		return false
	} else if !this.HealthCheck.Equal(that1.HealthCheck) {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	if this.Jitter != that1.Jitter {
		return false
	}
	if this.UnhealthyThreshold != that1.UnhealthyThreshold {
		return false
	}
	if this.HealthyThreshold != that1.HealthyThreshold {
		return false
	}
	if this.JitterPercent != that1.JitterPercent {
		return false
	}
	return true
}
func (this *GetSpecType_HttpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HttpHealthCheck)
	if !ok {
		that2, ok := that.(GetSpecType_HttpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpHealthCheck.Equal(that1.HttpHealthCheck) {
		return false
	}
	return true
}
func (this *GetSpecType_TcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_TcpHealthCheck)
	if !ok {
		that2, ok := that.(GetSpecType_TcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TcpHealthCheck.Equal(that1.TcpHealthCheck) {
		return false
	}
	return true
}
func (this *GetSpecType_DnsProxyTcpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DnsProxyTcpHealthCheck)
	if !ok {
		that2, ok := that.(GetSpecType_DnsProxyTcpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DnsProxyTcpHealthCheck.Equal(that1.DnsProxyTcpHealthCheck) {
		return false
	}
	return true
}
func (this *GetSpecType_DnsProxyUdpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DnsProxyUdpHealthCheck)
	if !ok {
		that2, ok := that.(GetSpecType_DnsProxyUdpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DnsProxyUdpHealthCheck.Equal(that1.DnsProxyUdpHealthCheck) {
		return false
	}
	return true
}
func (this *GetSpecType_DnsHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DnsHealthCheck)
	if !ok {
		that2, ok := that.(GetSpecType_DnsHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DnsHealthCheck.Equal(that1.DnsHealthCheck) {
		return false
	}
	return true
}
func (this *GetSpecType_DnsProxyIcmpHealthCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DnsProxyIcmpHealthCheck)
	if !ok {
		that2, ok := that.(GetSpecType_DnsProxyIcmpHealthCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DnsProxyIcmpHealthCheck.Equal(that1.DnsProxyIcmpHealthCheck) {
		return false
	}
	return true
}
func (this *HttpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&healthcheck.HttpHealthCheck{")
	if this.HostHeaderChoice != nil {
		s = append(s, "HostHeaderChoice: "+fmt.Sprintf("%#v", this.HostHeaderChoice)+",\n")
	}
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	keysForHeaders := make([]string, 0, len(this.Headers))
	for k, _ := range this.Headers {
		keysForHeaders = append(keysForHeaders, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeaders)
	mapStringForHeaders := "map[string]string{"
	for _, k := range keysForHeaders {
		mapStringForHeaders += fmt.Sprintf("%#v: %#v,", k, this.Headers[k])
	}
	mapStringForHeaders += "}"
	if this.Headers != nil {
		s = append(s, "Headers: "+mapStringForHeaders+",\n")
	}
	s = append(s, "RequestHeadersToRemove: "+fmt.Sprintf("%#v", this.RequestHeadersToRemove)+",\n")
	s = append(s, "UseHttp2: "+fmt.Sprintf("%#v", this.UseHttp2)+",\n")
	s = append(s, "ExpectedStatusCodes: "+fmt.Sprintf("%#v", this.ExpectedStatusCodes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HttpHealthCheck_UseOriginServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.HttpHealthCheck_UseOriginServerName{` +
		`UseOriginServerName:` + fmt.Sprintf("%#v", this.UseOriginServerName) + `}`}, ", ")
	return s
}
func (this *HttpHealthCheck_HostHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.HttpHealthCheck_HostHeader{` +
		`HostHeader:` + fmt.Sprintf("%#v", this.HostHeader) + `}`}, ", ")
	return s
}
func (this *DnsHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&healthcheck.DnsHealthCheck{")
	s = append(s, "Reverse: "+fmt.Sprintf("%#v", this.Reverse)+",\n")
	s = append(s, "QueryName: "+fmt.Sprintf("%#v", this.QueryName)+",\n")
	s = append(s, "QueryType: "+fmt.Sprintf("%#v", this.QueryType)+",\n")
	s = append(s, "ExpectedRecordType: "+fmt.Sprintf("%#v", this.ExpectedRecordType)+",\n")
	s = append(s, "ExpectedRcode: "+fmt.Sprintf("%#v", this.ExpectedRcode)+",\n")
	s = append(s, "ExpectedResponse: "+fmt.Sprintf("%#v", this.ExpectedResponse)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DnsProxyUdpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&healthcheck.DnsProxyUdpHealthCheck{")
	s = append(s, "SendPayload: "+fmt.Sprintf("%#v", this.SendPayload)+",\n")
	s = append(s, "ExpectedResponse: "+fmt.Sprintf("%#v", this.ExpectedResponse)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DnsProxyTcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&healthcheck.DnsProxyTcpHealthCheck{")
	s = append(s, "SendPayload: "+fmt.Sprintf("%#v", this.SendPayload)+",\n")
	s = append(s, "ExpectedResponse: "+fmt.Sprintf("%#v", this.ExpectedResponse)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&healthcheck.TcpHealthCheck{")
	s = append(s, "SendPayload: "+fmt.Sprintf("%#v", this.SendPayload)+",\n")
	s = append(s, "ExpectedResponse: "+fmt.Sprintf("%#v", this.ExpectedResponse)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&healthcheck.GlobalSpecType{")
	if this.HealthCheck != nil {
		s = append(s, "HealthCheck: "+fmt.Sprintf("%#v", this.HealthCheck)+",\n")
	}
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "Interval: "+fmt.Sprintf("%#v", this.Interval)+",\n")
	s = append(s, "Jitter: "+fmt.Sprintf("%#v", this.Jitter)+",\n")
	s = append(s, "UnhealthyThreshold: "+fmt.Sprintf("%#v", this.UnhealthyThreshold)+",\n")
	s = append(s, "HealthyThreshold: "+fmt.Sprintf("%#v", this.HealthyThreshold)+",\n")
	s = append(s, "JitterPercent: "+fmt.Sprintf("%#v", this.JitterPercent)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_HttpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.GlobalSpecType_HttpHealthCheck{` +
		`HttpHealthCheck:` + fmt.Sprintf("%#v", this.HttpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_TcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.GlobalSpecType_TcpHealthCheck{` +
		`TcpHealthCheck:` + fmt.Sprintf("%#v", this.TcpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DnsProxyTcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.GlobalSpecType_DnsProxyTcpHealthCheck{` +
		`DnsProxyTcpHealthCheck:` + fmt.Sprintf("%#v", this.DnsProxyTcpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DnsProxyUdpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.GlobalSpecType_DnsProxyUdpHealthCheck{` +
		`DnsProxyUdpHealthCheck:` + fmt.Sprintf("%#v", this.DnsProxyUdpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DnsHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.GlobalSpecType_DnsHealthCheck{` +
		`DnsHealthCheck:` + fmt.Sprintf("%#v", this.DnsHealthCheck) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DnsProxyIcmpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.GlobalSpecType_DnsProxyIcmpHealthCheck{` +
		`DnsProxyIcmpHealthCheck:` + fmt.Sprintf("%#v", this.DnsProxyIcmpHealthCheck) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&healthcheck.CreateSpecType{")
	if this.HealthCheck != nil {
		s = append(s, "HealthCheck: "+fmt.Sprintf("%#v", this.HealthCheck)+",\n")
	}
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "Interval: "+fmt.Sprintf("%#v", this.Interval)+",\n")
	s = append(s, "UnhealthyThreshold: "+fmt.Sprintf("%#v", this.UnhealthyThreshold)+",\n")
	s = append(s, "HealthyThreshold: "+fmt.Sprintf("%#v", this.HealthyThreshold)+",\n")
	s = append(s, "JitterPercent: "+fmt.Sprintf("%#v", this.JitterPercent)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_HttpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.CreateSpecType_HttpHealthCheck{` +
		`HttpHealthCheck:` + fmt.Sprintf("%#v", this.HttpHealthCheck) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_TcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.CreateSpecType_TcpHealthCheck{` +
		`TcpHealthCheck:` + fmt.Sprintf("%#v", this.TcpHealthCheck) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DnsProxyTcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.CreateSpecType_DnsProxyTcpHealthCheck{` +
		`DnsProxyTcpHealthCheck:` + fmt.Sprintf("%#v", this.DnsProxyTcpHealthCheck) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DnsProxyUdpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.CreateSpecType_DnsProxyUdpHealthCheck{` +
		`DnsProxyUdpHealthCheck:` + fmt.Sprintf("%#v", this.DnsProxyUdpHealthCheck) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DnsHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.CreateSpecType_DnsHealthCheck{` +
		`DnsHealthCheck:` + fmt.Sprintf("%#v", this.DnsHealthCheck) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DnsProxyIcmpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.CreateSpecType_DnsProxyIcmpHealthCheck{` +
		`DnsProxyIcmpHealthCheck:` + fmt.Sprintf("%#v", this.DnsProxyIcmpHealthCheck) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&healthcheck.ReplaceSpecType{")
	if this.HealthCheck != nil {
		s = append(s, "HealthCheck: "+fmt.Sprintf("%#v", this.HealthCheck)+",\n")
	}
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "Interval: "+fmt.Sprintf("%#v", this.Interval)+",\n")
	s = append(s, "UnhealthyThreshold: "+fmt.Sprintf("%#v", this.UnhealthyThreshold)+",\n")
	s = append(s, "HealthyThreshold: "+fmt.Sprintf("%#v", this.HealthyThreshold)+",\n")
	s = append(s, "JitterPercent: "+fmt.Sprintf("%#v", this.JitterPercent)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_HttpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.ReplaceSpecType_HttpHealthCheck{` +
		`HttpHealthCheck:` + fmt.Sprintf("%#v", this.HttpHealthCheck) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_TcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.ReplaceSpecType_TcpHealthCheck{` +
		`TcpHealthCheck:` + fmt.Sprintf("%#v", this.TcpHealthCheck) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DnsProxyTcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.ReplaceSpecType_DnsProxyTcpHealthCheck{` +
		`DnsProxyTcpHealthCheck:` + fmt.Sprintf("%#v", this.DnsProxyTcpHealthCheck) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DnsProxyUdpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.ReplaceSpecType_DnsProxyUdpHealthCheck{` +
		`DnsProxyUdpHealthCheck:` + fmt.Sprintf("%#v", this.DnsProxyUdpHealthCheck) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DnsHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.ReplaceSpecType_DnsHealthCheck{` +
		`DnsHealthCheck:` + fmt.Sprintf("%#v", this.DnsHealthCheck) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DnsProxyIcmpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.ReplaceSpecType_DnsProxyIcmpHealthCheck{` +
		`DnsProxyIcmpHealthCheck:` + fmt.Sprintf("%#v", this.DnsProxyIcmpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&healthcheck.GetSpecType{")
	if this.HealthCheck != nil {
		s = append(s, "HealthCheck: "+fmt.Sprintf("%#v", this.HealthCheck)+",\n")
	}
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "Interval: "+fmt.Sprintf("%#v", this.Interval)+",\n")
	s = append(s, "Jitter: "+fmt.Sprintf("%#v", this.Jitter)+",\n")
	s = append(s, "UnhealthyThreshold: "+fmt.Sprintf("%#v", this.UnhealthyThreshold)+",\n")
	s = append(s, "HealthyThreshold: "+fmt.Sprintf("%#v", this.HealthyThreshold)+",\n")
	s = append(s, "JitterPercent: "+fmt.Sprintf("%#v", this.JitterPercent)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_HttpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.GetSpecType_HttpHealthCheck{` +
		`HttpHealthCheck:` + fmt.Sprintf("%#v", this.HttpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GetSpecType_TcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.GetSpecType_TcpHealthCheck{` +
		`TcpHealthCheck:` + fmt.Sprintf("%#v", this.TcpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DnsProxyTcpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.GetSpecType_DnsProxyTcpHealthCheck{` +
		`DnsProxyTcpHealthCheck:` + fmt.Sprintf("%#v", this.DnsProxyTcpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DnsProxyUdpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.GetSpecType_DnsProxyUdpHealthCheck{` +
		`DnsProxyUdpHealthCheck:` + fmt.Sprintf("%#v", this.DnsProxyUdpHealthCheck) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DnsHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.GetSpecType_DnsHealthCheck{` +
		`DnsHealthCheck:` + fmt.Sprintf("%#v", this.DnsHealthCheck) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DnsProxyIcmpHealthCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&healthcheck.GetSpecType_DnsProxyIcmpHealthCheck{` +
		`DnsProxyIcmpHealthCheck:` + fmt.Sprintf("%#v", this.DnsProxyIcmpHealthCheck) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *HttpHealthCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExpectedStatusCodes) > 0 {
		for iNdEx := len(m.ExpectedStatusCodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExpectedStatusCodes[iNdEx])
			copy(dAtA[i:], m.ExpectedStatusCodes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ExpectedStatusCodes[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.HostHeaderChoice != nil {
		{
			size := m.HostHeaderChoice.Size()
			i -= size
			if _, err := m.HostHeaderChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.UseHttp2 {
		i--
		if m.UseHttp2 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for iNdEx := len(m.RequestHeadersToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequestHeadersToRemove[iNdEx])
			copy(dAtA[i:], m.RequestHeadersToRemove[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.RequestHeadersToRemove[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Headers) > 0 {
		keysForHeaders := make([]string, 0, len(m.Headers))
		for k := range m.Headers {
			keysForHeaders = append(keysForHeaders, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForHeaders)
		for iNdEx := len(keysForHeaders) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Headers[string(keysForHeaders[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForHeaders[iNdEx])
			copy(dAtA[i:], keysForHeaders[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForHeaders[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *HttpHealthCheck_HostHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpHealthCheck_HostHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.HostHeader)
	copy(dAtA[i:], m.HostHeader)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.HostHeader)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *HttpHealthCheck_UseOriginServerName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpHealthCheck_UseOriginServerName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseOriginServerName != nil {
		{
			size, err := m.UseOriginServerName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *DnsHealthCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DnsHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DnsHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExpectedResponse) > 0 {
		i -= len(m.ExpectedResponse)
		copy(dAtA[i:], m.ExpectedResponse)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExpectedResponse)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ExpectedRcode != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ExpectedRcode))
		i--
		dAtA[i] = 0x30
	}
	if m.ExpectedRecordType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ExpectedRecordType))
		i--
		dAtA[i] = 0x28
	}
	if m.QueryType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.QueryType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.QueryName) > 0 {
		i -= len(m.QueryName)
		copy(dAtA[i:], m.QueryName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.QueryName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Reverse {
		i--
		if m.Reverse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *DnsProxyUdpHealthCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DnsProxyUdpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DnsProxyUdpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExpectedResponse) > 0 {
		i -= len(m.ExpectedResponse)
		copy(dAtA[i:], m.ExpectedResponse)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExpectedResponse)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SendPayload) > 0 {
		i -= len(m.SendPayload)
		copy(dAtA[i:], m.SendPayload)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SendPayload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DnsProxyTcpHealthCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DnsProxyTcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DnsProxyTcpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExpectedResponse) > 0 {
		i -= len(m.ExpectedResponse)
		copy(dAtA[i:], m.ExpectedResponse)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExpectedResponse)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SendPayload) > 0 {
		i -= len(m.SendPayload)
		copy(dAtA[i:], m.SendPayload)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SendPayload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TcpHealthCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TcpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExpectedResponse) > 0 {
		i -= len(m.ExpectedResponse)
		copy(dAtA[i:], m.ExpectedResponse)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExpectedResponse)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SendPayload) > 0 {
		i -= len(m.SendPayload)
		copy(dAtA[i:], m.SendPayload)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SendPayload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HealthCheck != nil {
		{
			size := m.HealthCheck.Size()
			i -= size
			if _, err := m.HealthCheck.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.JitterPercent != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.JitterPercent))
		i--
		dAtA[i] = 0x48
	}
	if m.HealthyThreshold != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HealthyThreshold))
		i--
		dAtA[i] = 0x38
	}
	if m.UnhealthyThreshold != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.UnhealthyThreshold))
		i--
		dAtA[i] = 0x30
	}
	if m.Jitter != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Jitter))
		i--
		dAtA[i] = 0x28
	}
	if m.Interval != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x20
	}
	if m.Timeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_HttpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_HttpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpHealthCheck != nil {
		{
			size, err := m.HttpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_TcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_TcpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TcpHealthCheck != nil {
		{
			size, err := m.TcpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DnsProxyTcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DnsProxyTcpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DnsProxyTcpHealthCheck != nil {
		{
			size, err := m.DnsProxyTcpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DnsProxyUdpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DnsProxyUdpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DnsProxyUdpHealthCheck != nil {
		{
			size, err := m.DnsProxyUdpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DnsHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DnsHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DnsHealthCheck != nil {
		{
			size, err := m.DnsHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DnsProxyIcmpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DnsProxyIcmpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DnsProxyIcmpHealthCheck != nil {
		{
			size, err := m.DnsProxyIcmpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HealthCheck != nil {
		{
			size := m.HealthCheck.Size()
			i -= size
			if _, err := m.HealthCheck.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.JitterPercent != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.JitterPercent))
		i--
		dAtA[i] = 0x48
	}
	if m.HealthyThreshold != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HealthyThreshold))
		i--
		dAtA[i] = 0x38
	}
	if m.UnhealthyThreshold != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.UnhealthyThreshold))
		i--
		dAtA[i] = 0x30
	}
	if m.Interval != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x20
	}
	if m.Timeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_HttpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_HttpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpHealthCheck != nil {
		{
			size, err := m.HttpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_TcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_TcpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TcpHealthCheck != nil {
		{
			size, err := m.TcpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DnsProxyTcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DnsProxyTcpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DnsProxyTcpHealthCheck != nil {
		{
			size, err := m.DnsProxyTcpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DnsProxyUdpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DnsProxyUdpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DnsProxyUdpHealthCheck != nil {
		{
			size, err := m.DnsProxyUdpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DnsHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DnsHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DnsHealthCheck != nil {
		{
			size, err := m.DnsHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DnsProxyIcmpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DnsProxyIcmpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DnsProxyIcmpHealthCheck != nil {
		{
			size, err := m.DnsProxyIcmpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HealthCheck != nil {
		{
			size := m.HealthCheck.Size()
			i -= size
			if _, err := m.HealthCheck.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.JitterPercent != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.JitterPercent))
		i--
		dAtA[i] = 0x48
	}
	if m.HealthyThreshold != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HealthyThreshold))
		i--
		dAtA[i] = 0x38
	}
	if m.UnhealthyThreshold != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.UnhealthyThreshold))
		i--
		dAtA[i] = 0x30
	}
	if m.Interval != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x20
	}
	if m.Timeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_HttpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_HttpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpHealthCheck != nil {
		{
			size, err := m.HttpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_TcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_TcpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TcpHealthCheck != nil {
		{
			size, err := m.TcpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DnsProxyTcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DnsProxyTcpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DnsProxyTcpHealthCheck != nil {
		{
			size, err := m.DnsProxyTcpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DnsProxyUdpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DnsProxyUdpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DnsProxyUdpHealthCheck != nil {
		{
			size, err := m.DnsProxyUdpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DnsHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DnsHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DnsHealthCheck != nil {
		{
			size, err := m.DnsHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DnsProxyIcmpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DnsProxyIcmpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DnsProxyIcmpHealthCheck != nil {
		{
			size, err := m.DnsProxyIcmpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HealthCheck != nil {
		{
			size := m.HealthCheck.Size()
			i -= size
			if _, err := m.HealthCheck.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.JitterPercent != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.JitterPercent))
		i--
		dAtA[i] = 0x48
	}
	if m.HealthyThreshold != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HealthyThreshold))
		i--
		dAtA[i] = 0x38
	}
	if m.UnhealthyThreshold != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.UnhealthyThreshold))
		i--
		dAtA[i] = 0x30
	}
	if m.Jitter != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Jitter))
		i--
		dAtA[i] = 0x28
	}
	if m.Interval != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x20
	}
	if m.Timeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_HttpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_HttpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpHealthCheck != nil {
		{
			size, err := m.HttpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_TcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_TcpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TcpHealthCheck != nil {
		{
			size, err := m.TcpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DnsProxyTcpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DnsProxyTcpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DnsProxyTcpHealthCheck != nil {
		{
			size, err := m.DnsProxyTcpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DnsProxyUdpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DnsProxyUdpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DnsProxyUdpHealthCheck != nil {
		{
			size, err := m.DnsProxyUdpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DnsHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DnsHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DnsHealthCheck != nil {
		{
			size, err := m.DnsHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DnsProxyIcmpHealthCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DnsProxyIcmpHealthCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DnsProxyIcmpHealthCheck != nil {
		{
			size, err := m.DnsProxyIcmpHealthCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HttpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HostHeaderChoice != nil {
		n += m.HostHeaderChoice.Size()
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.UseHttp2 {
		n += 2
	}
	if len(m.ExpectedStatusCodes) > 0 {
		for _, s := range m.ExpectedStatusCodes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *HttpHealthCheck_HostHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostHeader)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *HttpHealthCheck_UseOriginServerName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseOriginServerName != nil {
		l = m.UseOriginServerName.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DnsHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reverse {
		n += 2
	}
	l = len(m.QueryName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.QueryType != 0 {
		n += 1 + sovTypes(uint64(m.QueryType))
	}
	if m.ExpectedRecordType != 0 {
		n += 1 + sovTypes(uint64(m.ExpectedRecordType))
	}
	if m.ExpectedRcode != 0 {
		n += 1 + sovTypes(uint64(m.ExpectedRcode))
	}
	l = len(m.ExpectedResponse)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DnsProxyUdpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SendPayload)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ExpectedResponse)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DnsProxyTcpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SendPayload)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ExpectedResponse)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *TcpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SendPayload)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ExpectedResponse)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HealthCheck != nil {
		n += m.HealthCheck.Size()
	}
	if m.Timeout != 0 {
		n += 1 + sovTypes(uint64(m.Timeout))
	}
	if m.Interval != 0 {
		n += 1 + sovTypes(uint64(m.Interval))
	}
	if m.Jitter != 0 {
		n += 1 + sovTypes(uint64(m.Jitter))
	}
	if m.UnhealthyThreshold != 0 {
		n += 1 + sovTypes(uint64(m.UnhealthyThreshold))
	}
	if m.HealthyThreshold != 0 {
		n += 1 + sovTypes(uint64(m.HealthyThreshold))
	}
	if m.JitterPercent != 0 {
		n += 1 + sovTypes(uint64(m.JitterPercent))
	}
	return n
}

func (m *GlobalSpecType_HttpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpHealthCheck != nil {
		l = m.HttpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_TcpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TcpHealthCheck != nil {
		l = m.TcpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DnsProxyTcpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsProxyTcpHealthCheck != nil {
		l = m.DnsProxyTcpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DnsProxyUdpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsProxyUdpHealthCheck != nil {
		l = m.DnsProxyUdpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DnsHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsHealthCheck != nil {
		l = m.DnsHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DnsProxyIcmpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsProxyIcmpHealthCheck != nil {
		l = m.DnsProxyIcmpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HealthCheck != nil {
		n += m.HealthCheck.Size()
	}
	if m.Timeout != 0 {
		n += 1 + sovTypes(uint64(m.Timeout))
	}
	if m.Interval != 0 {
		n += 1 + sovTypes(uint64(m.Interval))
	}
	if m.UnhealthyThreshold != 0 {
		n += 1 + sovTypes(uint64(m.UnhealthyThreshold))
	}
	if m.HealthyThreshold != 0 {
		n += 1 + sovTypes(uint64(m.HealthyThreshold))
	}
	if m.JitterPercent != 0 {
		n += 1 + sovTypes(uint64(m.JitterPercent))
	}
	return n
}

func (m *CreateSpecType_HttpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpHealthCheck != nil {
		l = m.HttpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_TcpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TcpHealthCheck != nil {
		l = m.TcpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DnsProxyTcpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsProxyTcpHealthCheck != nil {
		l = m.DnsProxyTcpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DnsProxyUdpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsProxyUdpHealthCheck != nil {
		l = m.DnsProxyUdpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DnsHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsHealthCheck != nil {
		l = m.DnsHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DnsProxyIcmpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsProxyIcmpHealthCheck != nil {
		l = m.DnsProxyIcmpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HealthCheck != nil {
		n += m.HealthCheck.Size()
	}
	if m.Timeout != 0 {
		n += 1 + sovTypes(uint64(m.Timeout))
	}
	if m.Interval != 0 {
		n += 1 + sovTypes(uint64(m.Interval))
	}
	if m.UnhealthyThreshold != 0 {
		n += 1 + sovTypes(uint64(m.UnhealthyThreshold))
	}
	if m.HealthyThreshold != 0 {
		n += 1 + sovTypes(uint64(m.HealthyThreshold))
	}
	if m.JitterPercent != 0 {
		n += 1 + sovTypes(uint64(m.JitterPercent))
	}
	return n
}

func (m *ReplaceSpecType_HttpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpHealthCheck != nil {
		l = m.HttpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_TcpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TcpHealthCheck != nil {
		l = m.TcpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DnsProxyTcpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsProxyTcpHealthCheck != nil {
		l = m.DnsProxyTcpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DnsProxyUdpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsProxyUdpHealthCheck != nil {
		l = m.DnsProxyUdpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DnsHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsHealthCheck != nil {
		l = m.DnsHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DnsProxyIcmpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsProxyIcmpHealthCheck != nil {
		l = m.DnsProxyIcmpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HealthCheck != nil {
		n += m.HealthCheck.Size()
	}
	if m.Timeout != 0 {
		n += 1 + sovTypes(uint64(m.Timeout))
	}
	if m.Interval != 0 {
		n += 1 + sovTypes(uint64(m.Interval))
	}
	if m.Jitter != 0 {
		n += 1 + sovTypes(uint64(m.Jitter))
	}
	if m.UnhealthyThreshold != 0 {
		n += 1 + sovTypes(uint64(m.UnhealthyThreshold))
	}
	if m.HealthyThreshold != 0 {
		n += 1 + sovTypes(uint64(m.HealthyThreshold))
	}
	if m.JitterPercent != 0 {
		n += 1 + sovTypes(uint64(m.JitterPercent))
	}
	return n
}

func (m *GetSpecType_HttpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpHealthCheck != nil {
		l = m.HttpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_TcpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TcpHealthCheck != nil {
		l = m.TcpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DnsProxyTcpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsProxyTcpHealthCheck != nil {
		l = m.DnsProxyTcpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DnsProxyUdpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsProxyUdpHealthCheck != nil {
		l = m.DnsProxyUdpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DnsHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsHealthCheck != nil {
		l = m.DnsHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DnsProxyIcmpHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsProxyIcmpHealthCheck != nil {
		l = m.DnsProxyIcmpHealthCheck.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HttpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	keysForHeaders := make([]string, 0, len(this.Headers))
	for k, _ := range this.Headers {
		keysForHeaders = append(keysForHeaders, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeaders)
	mapStringForHeaders := "map[string]string{"
	for _, k := range keysForHeaders {
		mapStringForHeaders += fmt.Sprintf("%v: %v,", k, this.Headers[k])
	}
	mapStringForHeaders += "}"
	s := strings.Join([]string{`&HttpHealthCheck{`,
		`HostHeaderChoice:` + fmt.Sprintf("%v", this.HostHeaderChoice) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Headers:` + mapStringForHeaders + `,`,
		`RequestHeadersToRemove:` + fmt.Sprintf("%v", this.RequestHeadersToRemove) + `,`,
		`UseHttp2:` + fmt.Sprintf("%v", this.UseHttp2) + `,`,
		`ExpectedStatusCodes:` + fmt.Sprintf("%v", this.ExpectedStatusCodes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HttpHealthCheck_HostHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HttpHealthCheck_HostHeader{`,
		`HostHeader:` + fmt.Sprintf("%v", this.HostHeader) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HttpHealthCheck_UseOriginServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HttpHealthCheck_UseOriginServerName{`,
		`UseOriginServerName:` + strings.Replace(fmt.Sprintf("%v", this.UseOriginServerName), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DnsHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DnsHealthCheck{`,
		`Reverse:` + fmt.Sprintf("%v", this.Reverse) + `,`,
		`QueryName:` + fmt.Sprintf("%v", this.QueryName) + `,`,
		`QueryType:` + fmt.Sprintf("%v", this.QueryType) + `,`,
		`ExpectedRecordType:` + fmt.Sprintf("%v", this.ExpectedRecordType) + `,`,
		`ExpectedRcode:` + fmt.Sprintf("%v", this.ExpectedRcode) + `,`,
		`ExpectedResponse:` + fmt.Sprintf("%v", this.ExpectedResponse) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DnsProxyUdpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DnsProxyUdpHealthCheck{`,
		`SendPayload:` + fmt.Sprintf("%v", this.SendPayload) + `,`,
		`ExpectedResponse:` + fmt.Sprintf("%v", this.ExpectedResponse) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DnsProxyTcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DnsProxyTcpHealthCheck{`,
		`SendPayload:` + fmt.Sprintf("%v", this.SendPayload) + `,`,
		`ExpectedResponse:` + fmt.Sprintf("%v", this.ExpectedResponse) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TcpHealthCheck{`,
		`SendPayload:` + fmt.Sprintf("%v", this.SendPayload) + `,`,
		`ExpectedResponse:` + fmt.Sprintf("%v", this.ExpectedResponse) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`HealthCheck:` + fmt.Sprintf("%v", this.HealthCheck) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`Interval:` + fmt.Sprintf("%v", this.Interval) + `,`,
		`Jitter:` + fmt.Sprintf("%v", this.Jitter) + `,`,
		`UnhealthyThreshold:` + fmt.Sprintf("%v", this.UnhealthyThreshold) + `,`,
		`HealthyThreshold:` + fmt.Sprintf("%v", this.HealthyThreshold) + `,`,
		`JitterPercent:` + fmt.Sprintf("%v", this.JitterPercent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HttpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HttpHealthCheck{`,
		`HttpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpHealthCheck), "HttpHealthCheck", "HttpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_TcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_TcpHealthCheck{`,
		`TcpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.TcpHealthCheck), "TcpHealthCheck", "TcpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DnsProxyTcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DnsProxyTcpHealthCheck{`,
		`DnsProxyTcpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.DnsProxyTcpHealthCheck), "DnsProxyTcpHealthCheck", "DnsProxyTcpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DnsProxyUdpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DnsProxyUdpHealthCheck{`,
		`DnsProxyUdpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.DnsProxyUdpHealthCheck), "DnsProxyUdpHealthCheck", "DnsProxyUdpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DnsHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DnsHealthCheck{`,
		`DnsHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.DnsHealthCheck), "DnsHealthCheck", "DnsHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DnsProxyIcmpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DnsProxyIcmpHealthCheck{`,
		`DnsProxyIcmpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.DnsProxyIcmpHealthCheck), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`HealthCheck:` + fmt.Sprintf("%v", this.HealthCheck) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`Interval:` + fmt.Sprintf("%v", this.Interval) + `,`,
		`UnhealthyThreshold:` + fmt.Sprintf("%v", this.UnhealthyThreshold) + `,`,
		`HealthyThreshold:` + fmt.Sprintf("%v", this.HealthyThreshold) + `,`,
		`JitterPercent:` + fmt.Sprintf("%v", this.JitterPercent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HttpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HttpHealthCheck{`,
		`HttpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpHealthCheck), "HttpHealthCheck", "HttpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_TcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_TcpHealthCheck{`,
		`TcpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.TcpHealthCheck), "TcpHealthCheck", "TcpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DnsProxyTcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DnsProxyTcpHealthCheck{`,
		`DnsProxyTcpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.DnsProxyTcpHealthCheck), "DnsProxyTcpHealthCheck", "DnsProxyTcpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DnsProxyUdpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DnsProxyUdpHealthCheck{`,
		`DnsProxyUdpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.DnsProxyUdpHealthCheck), "DnsProxyUdpHealthCheck", "DnsProxyUdpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DnsHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DnsHealthCheck{`,
		`DnsHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.DnsHealthCheck), "DnsHealthCheck", "DnsHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DnsProxyIcmpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DnsProxyIcmpHealthCheck{`,
		`DnsProxyIcmpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.DnsProxyIcmpHealthCheck), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`HealthCheck:` + fmt.Sprintf("%v", this.HealthCheck) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`Interval:` + fmt.Sprintf("%v", this.Interval) + `,`,
		`UnhealthyThreshold:` + fmt.Sprintf("%v", this.UnhealthyThreshold) + `,`,
		`HealthyThreshold:` + fmt.Sprintf("%v", this.HealthyThreshold) + `,`,
		`JitterPercent:` + fmt.Sprintf("%v", this.JitterPercent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HttpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HttpHealthCheck{`,
		`HttpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpHealthCheck), "HttpHealthCheck", "HttpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_TcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_TcpHealthCheck{`,
		`TcpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.TcpHealthCheck), "TcpHealthCheck", "TcpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DnsProxyTcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DnsProxyTcpHealthCheck{`,
		`DnsProxyTcpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.DnsProxyTcpHealthCheck), "DnsProxyTcpHealthCheck", "DnsProxyTcpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DnsProxyUdpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DnsProxyUdpHealthCheck{`,
		`DnsProxyUdpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.DnsProxyUdpHealthCheck), "DnsProxyUdpHealthCheck", "DnsProxyUdpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DnsHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DnsHealthCheck{`,
		`DnsHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.DnsHealthCheck), "DnsHealthCheck", "DnsHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DnsProxyIcmpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DnsProxyIcmpHealthCheck{`,
		`DnsProxyIcmpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.DnsProxyIcmpHealthCheck), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`HealthCheck:` + fmt.Sprintf("%v", this.HealthCheck) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`Interval:` + fmt.Sprintf("%v", this.Interval) + `,`,
		`Jitter:` + fmt.Sprintf("%v", this.Jitter) + `,`,
		`UnhealthyThreshold:` + fmt.Sprintf("%v", this.UnhealthyThreshold) + `,`,
		`HealthyThreshold:` + fmt.Sprintf("%v", this.HealthyThreshold) + `,`,
		`JitterPercent:` + fmt.Sprintf("%v", this.JitterPercent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HttpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HttpHealthCheck{`,
		`HttpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.HttpHealthCheck), "HttpHealthCheck", "HttpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_TcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_TcpHealthCheck{`,
		`TcpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.TcpHealthCheck), "TcpHealthCheck", "TcpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DnsProxyTcpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DnsProxyTcpHealthCheck{`,
		`DnsProxyTcpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.DnsProxyTcpHealthCheck), "DnsProxyTcpHealthCheck", "DnsProxyTcpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DnsProxyUdpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DnsProxyUdpHealthCheck{`,
		`DnsProxyUdpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.DnsProxyUdpHealthCheck), "DnsProxyUdpHealthCheck", "DnsProxyUdpHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DnsHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DnsHealthCheck{`,
		`DnsHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.DnsHealthCheck), "DnsHealthCheck", "DnsHealthCheck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DnsProxyIcmpHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DnsProxyIcmpHealthCheck{`,
		`DnsProxyIcmpHealthCheck:` + strings.Replace(fmt.Sprintf("%v", this.DnsProxyIcmpHealthCheck), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HttpHealthCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpHealthCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpHealthCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostHeader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostHeaderChoice = &HttpHealthCheck_HostHeader{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToRemove = append(m.RequestHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseHttp2", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseHttp2 = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseOriginServerName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostHeaderChoice = &HttpHealthCheck_UseOriginServerName{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedStatusCodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedStatusCodes = append(m.ExpectedStatusCodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DnsHealthCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DnsHealthCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DnsHealthCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reverse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reverse = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryType", wireType)
			}
			m.QueryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryType |= DNSQueryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedRecordType", wireType)
			}
			m.ExpectedRecordType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpectedRecordType |= DNSResponseRecordType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedRcode", wireType)
			}
			m.ExpectedRcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpectedRcode |= DNSResponseRcodeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedResponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedResponse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DnsProxyUdpHealthCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DnsProxyUdpHealthCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DnsProxyUdpHealthCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendPayload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendPayload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedResponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedResponse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DnsProxyTcpHealthCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DnsProxyTcpHealthCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DnsProxyTcpHealthCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendPayload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendPayload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedResponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedResponse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpHealthCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpHealthCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpHealthCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendPayload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendPayload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedResponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedResponse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GlobalSpecType_HttpHealthCheck{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TcpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GlobalSpecType_TcpHealthCheck{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jitter", wireType)
			}
			m.Jitter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Jitter |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnhealthyThreshold", wireType)
			}
			m.UnhealthyThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnhealthyThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthyThreshold", wireType)
			}
			m.HealthyThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HealthyThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JitterPercent", wireType)
			}
			m.JitterPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JitterPercent |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsProxyTcpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DnsProxyTcpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GlobalSpecType_DnsProxyTcpHealthCheck{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsProxyUdpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DnsProxyUdpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GlobalSpecType_DnsProxyUdpHealthCheck{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DnsHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GlobalSpecType_DnsHealthCheck{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsProxyIcmpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GlobalSpecType_DnsProxyIcmpHealthCheck{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &CreateSpecType_HttpHealthCheck{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TcpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &CreateSpecType_TcpHealthCheck{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnhealthyThreshold", wireType)
			}
			m.UnhealthyThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnhealthyThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthyThreshold", wireType)
			}
			m.HealthyThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HealthyThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JitterPercent", wireType)
			}
			m.JitterPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JitterPercent |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsProxyTcpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DnsProxyTcpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &CreateSpecType_DnsProxyTcpHealthCheck{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsProxyUdpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DnsProxyUdpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &CreateSpecType_DnsProxyUdpHealthCheck{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DnsHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &CreateSpecType_DnsHealthCheck{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsProxyIcmpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &CreateSpecType_DnsProxyIcmpHealthCheck{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &ReplaceSpecType_HttpHealthCheck{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TcpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &ReplaceSpecType_TcpHealthCheck{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnhealthyThreshold", wireType)
			}
			m.UnhealthyThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnhealthyThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthyThreshold", wireType)
			}
			m.HealthyThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HealthyThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JitterPercent", wireType)
			}
			m.JitterPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JitterPercent |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsProxyTcpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DnsProxyTcpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &ReplaceSpecType_DnsProxyTcpHealthCheck{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsProxyUdpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DnsProxyUdpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &ReplaceSpecType_DnsProxyUdpHealthCheck{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DnsHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &ReplaceSpecType_DnsHealthCheck{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsProxyIcmpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &ReplaceSpecType_DnsProxyIcmpHealthCheck{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GetSpecType_HttpHealthCheck{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TcpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GetSpecType_TcpHealthCheck{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jitter", wireType)
			}
			m.Jitter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Jitter |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnhealthyThreshold", wireType)
			}
			m.UnhealthyThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnhealthyThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthyThreshold", wireType)
			}
			m.HealthyThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HealthyThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JitterPercent", wireType)
			}
			m.JitterPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JitterPercent |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsProxyTcpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DnsProxyTcpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GetSpecType_DnsProxyTcpHealthCheck{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsProxyUdpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DnsProxyUdpHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GetSpecType_DnsProxyUdpHealthCheck{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DnsHealthCheck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GetSpecType_DnsHealthCheck{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsProxyIcmpHealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HealthCheck = &GetSpecType_DnsProxyIcmpHealthCheck{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
