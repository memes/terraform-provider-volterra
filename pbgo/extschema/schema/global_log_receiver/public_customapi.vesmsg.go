//
// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package global_log_receiver

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *TestGlobalLogReceiverRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *TestGlobalLogReceiverRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *TestGlobalLogReceiverRequest) DeepCopy() *TestGlobalLogReceiverRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &TestGlobalLogReceiverRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *TestGlobalLogReceiverRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *TestGlobalLogReceiverRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return TestGlobalLogReceiverRequestValidator().Validate(ctx, m, opts...)
}

type ValidateTestGlobalLogReceiverRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateTestGlobalLogReceiverRequest) NamespaceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for namespace")
	}

	return validatorFn, nil
}

func (v *ValidateTestGlobalLogReceiverRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*TestGlobalLogReceiverRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *TestGlobalLogReceiverRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultTestGlobalLogReceiverRequestValidator = func() *ValidateTestGlobalLogReceiverRequest {
	v := &ValidateTestGlobalLogReceiverRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNamespace := v.NamespaceValidationRuleHandler
	rulesNamespace := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhNamespace(rulesNamespace)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TestGlobalLogReceiverRequest.namespace: %s", err)
		panic(errMsg)
	}
	v.FldValidators["namespace"] = vFn

	return v
}()

func TestGlobalLogReceiverRequestValidator() db.Validator {
	return DefaultTestGlobalLogReceiverRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *TestGlobalLogReceiverResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *TestGlobalLogReceiverResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *TestGlobalLogReceiverResponse) DeepCopy() *TestGlobalLogReceiverResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &TestGlobalLogReceiverResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *TestGlobalLogReceiverResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *TestGlobalLogReceiverResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return TestGlobalLogReceiverResponseValidator().Validate(ctx, m, opts...)
}

type ValidateTestGlobalLogReceiverResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateTestGlobalLogReceiverResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*TestGlobalLogReceiverResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *TestGlobalLogReceiverResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultTestGlobalLogReceiverResponseValidator = func() *ValidateTestGlobalLogReceiverResponse {
	v := &ValidateTestGlobalLogReceiverResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func TestGlobalLogReceiverResponseValidator() db.Validator {
	return DefaultTestGlobalLogReceiverResponseValidator
}
