// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/namespace/public_customapi.proto

// Namespace API
//
// x-displayName: "Namespace"
// APIs in this file are custom APIs on namespace object

package namespace

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// APIItem
//
// x-displayName: "API Item"
// An item for which API access needs to be checked - used in request and response
// The result field is ignored when processing requests
type APIItem struct {
	// method
	//
	// x-displayName: "Method"
	// x-example: "GET"
	// HTTP request method
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// path
	//
	// x-displayName: "Path"
	// x-example: "/api/web/namespaces"
	// HTTP request URL path
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// result
	//
	// x-displayName: "Result"
	// Result after evaluation
	Result bool `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *APIItem) Reset()      { *m = APIItem{} }
func (*APIItem) ProtoMessage() {}
func (*APIItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2cd67c9bbaccbd, []int{0}
}
func (m *APIItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIItem.Merge(m, src)
}
func (m *APIItem) XXX_Size() int {
	return m.Size()
}
func (m *APIItem) XXX_DiscardUnknown() {
	xxx_messageInfo_APIItem.DiscardUnknown(m)
}

var xxx_messageInfo_APIItem proto.InternalMessageInfo

func (m *APIItem) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *APIItem) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *APIItem) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// APIItemList
//
// x-displayName: "API Item List"
// An list of items for which API access needs to be checked  - used in request and response
// result will show combined AND output from the result of individual api items.
type APIItemList struct {
	// list_id
	//
	// x-displayName: "List ID"
	// x-example: "value"
	// Identifier group items
	ListId string `protobuf:"bytes,1,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
	// items
	//
	// x-displayName: "Items"
	// List of APIItem entries
	Items []*APIItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// result
	//
	// x-displayName: "Result"
	// Combined result after evaluation of items
	Result bool `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *APIItemList) Reset()      { *m = APIItemList{} }
func (*APIItemList) ProtoMessage() {}
func (*APIItemList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2cd67c9bbaccbd, []int{1}
}
func (m *APIItemList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIItemList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIItemList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIItemList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIItemList.Merge(m, src)
}
func (m *APIItemList) XXX_Size() int {
	return m.Size()
}
func (m *APIItemList) XXX_DiscardUnknown() {
	xxx_messageInfo_APIItemList.DiscardUnknown(m)
}

var xxx_messageInfo_APIItemList proto.InternalMessageInfo

func (m *APIItemList) GetListId() string {
	if m != nil {
		return m.ListId
	}
	return ""
}

func (m *APIItemList) GetItems() []*APIItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *APIItemList) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// EvaluateAPIAccessReq
//
// x-displayName: "Request for EvaluateAPIAccess"
// Request body of EvaluateAPIAccess request
type EvaluateAPIAccessReq struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "value"
	// Name of the namespace under which all the URLs in APIItems will be evaluated
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// item_lists
	//
	// x-displayName: "Item Lists"
	// List of APIItemList entries
	ItemLists []*APIItemList `protobuf:"bytes,2,rep,name=item_lists,json=itemLists,proto3" json:"item_lists,omitempty"`
}

func (m *EvaluateAPIAccessReq) Reset()      { *m = EvaluateAPIAccessReq{} }
func (*EvaluateAPIAccessReq) ProtoMessage() {}
func (*EvaluateAPIAccessReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2cd67c9bbaccbd, []int{2}
}
func (m *EvaluateAPIAccessReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateAPIAccessReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateAPIAccessReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateAPIAccessReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateAPIAccessReq.Merge(m, src)
}
func (m *EvaluateAPIAccessReq) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateAPIAccessReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateAPIAccessReq.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateAPIAccessReq proto.InternalMessageInfo

func (m *EvaluateAPIAccessReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *EvaluateAPIAccessReq) GetItemLists() []*APIItemList {
	if m != nil {
		return m.ItemLists
	}
	return nil
}

// EvaluateAPIAccessResp
//
// x-displayName: "Response for EvaluateAPIAccess"
// Response body of EvaluateAPIAccess request
type EvaluateAPIAccessResp struct {
	// item_lists
	//
	// x-displayName: "Item Lists"
	// List of APIItemList entries
	ItemLists []*APIItemList `protobuf:"bytes,1,rep,name=item_lists,json=itemLists,proto3" json:"item_lists,omitempty"`
}

func (m *EvaluateAPIAccessResp) Reset()      { *m = EvaluateAPIAccessResp{} }
func (*EvaluateAPIAccessResp) ProtoMessage() {}
func (*EvaluateAPIAccessResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2cd67c9bbaccbd, []int{3}
}
func (m *EvaluateAPIAccessResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateAPIAccessResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateAPIAccessResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateAPIAccessResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateAPIAccessResp.Merge(m, src)
}
func (m *EvaluateAPIAccessResp) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateAPIAccessResp) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateAPIAccessResp.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateAPIAccessResp proto.InternalMessageInfo

func (m *EvaluateAPIAccessResp) GetItemLists() []*APIItemList {
	if m != nil {
		return m.ItemLists
	}
	return nil
}

// LookupUserRolesReq
//
// x-displayName: "Request for LookupUserRoles"
// Request body of LookupUserRoles request
type LookupUserRolesReq struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "value"
	// Name of the namespace to lookup user roles
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *LookupUserRolesReq) Reset()      { *m = LookupUserRolesReq{} }
func (*LookupUserRolesReq) ProtoMessage() {}
func (*LookupUserRolesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2cd67c9bbaccbd, []int{4}
}
func (m *LookupUserRolesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupUserRolesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookupUserRolesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookupUserRolesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupUserRolesReq.Merge(m, src)
}
func (m *LookupUserRolesReq) XXX_Size() int {
	return m.Size()
}
func (m *LookupUserRolesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupUserRolesReq.DiscardUnknown(m)
}

var xxx_messageInfo_LookupUserRolesReq proto.InternalMessageInfo

func (m *LookupUserRolesReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// LookupUserRolesResp
//
// x-displayName: "Response for LookupUserRoles"
// Response body of LookupUserRoles request
type LookupUserRolesResp struct {
	// roles
	//
	// x-displayName: "Roles"
	// List of user roles
	Roles []string `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (m *LookupUserRolesResp) Reset()      { *m = LookupUserRolesResp{} }
func (*LookupUserRolesResp) ProtoMessage() {}
func (*LookupUserRolesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae2cd67c9bbaccbd, []int{5}
}
func (m *LookupUserRolesResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupUserRolesResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookupUserRolesResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookupUserRolesResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupUserRolesResp.Merge(m, src)
}
func (m *LookupUserRolesResp) XXX_Size() int {
	return m.Size()
}
func (m *LookupUserRolesResp) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupUserRolesResp.DiscardUnknown(m)
}

var xxx_messageInfo_LookupUserRolesResp proto.InternalMessageInfo

func (m *LookupUserRolesResp) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func init() {
	proto.RegisterType((*APIItem)(nil), "ves.io.schema.namespace.APIItem")
	golang_proto.RegisterType((*APIItem)(nil), "ves.io.schema.namespace.APIItem")
	proto.RegisterType((*APIItemList)(nil), "ves.io.schema.namespace.APIItemList")
	golang_proto.RegisterType((*APIItemList)(nil), "ves.io.schema.namespace.APIItemList")
	proto.RegisterType((*EvaluateAPIAccessReq)(nil), "ves.io.schema.namespace.EvaluateAPIAccessReq")
	golang_proto.RegisterType((*EvaluateAPIAccessReq)(nil), "ves.io.schema.namespace.EvaluateAPIAccessReq")
	proto.RegisterType((*EvaluateAPIAccessResp)(nil), "ves.io.schema.namespace.EvaluateAPIAccessResp")
	golang_proto.RegisterType((*EvaluateAPIAccessResp)(nil), "ves.io.schema.namespace.EvaluateAPIAccessResp")
	proto.RegisterType((*LookupUserRolesReq)(nil), "ves.io.schema.namespace.LookupUserRolesReq")
	golang_proto.RegisterType((*LookupUserRolesReq)(nil), "ves.io.schema.namespace.LookupUserRolesReq")
	proto.RegisterType((*LookupUserRolesResp)(nil), "ves.io.schema.namespace.LookupUserRolesResp")
	golang_proto.RegisterType((*LookupUserRolesResp)(nil), "ves.io.schema.namespace.LookupUserRolesResp")
}

func init() {
	proto.RegisterFile("ves.io/schema/namespace/public_customapi.proto", fileDescriptor_ae2cd67c9bbaccbd)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/namespace/public_customapi.proto", fileDescriptor_ae2cd67c9bbaccbd)
}

var fileDescriptor_ae2cd67c9bbaccbd = []byte{
	// 842 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xde, 0xd9, 0xd0, 0x84, 0x9d, 0xaa, 0x02, 0xdc, 0x42, 0x97, 0x25, 0xb2, 0x56, 0x86, 0x43,
	0x48, 0x32, 0x36, 0x0a, 0x82, 0x43, 0x6e, 0x21, 0x70, 0x58, 0xa9, 0x15, 0xd1, 0x56, 0x80, 0x84,
	0x90, 0x56, 0xb3, 0xf6, 0x5b, 0xef, 0x10, 0xdb, 0x33, 0xf5, 0x1b, 0x6f, 0x1a, 0x55, 0x45, 0xa8,
	0x17, 0x6e, 0x08, 0x89, 0x7f, 0x82, 0x7f, 0x00, 0x09, 0x29, 0x97, 0xde, 0xa8, 0x38, 0xa0, 0x08,
	0x0e, 0xf4, 0x06, 0xd9, 0x70, 0xe0, 0xd8, 0xff, 0x80, 0xca, 0x63, 0x67, 0xd3, 0xdd, 0xac, 0x9b,
	0x28, 0xb7, 0xf7, 0xe3, 0x9b, 0x6f, 0xbe, 0xcf, 0x33, 0xcf, 0x43, 0xdd, 0x11, 0xa0, 0x2b, 0xa4,
	0x87, 0xfe, 0x10, 0x62, 0xee, 0x25, 0x3c, 0x06, 0x54, 0xdc, 0x07, 0x4f, 0x65, 0xfd, 0x48, 0xf8,
	0x3d, 0x3f, 0x43, 0x2d, 0x63, 0xae, 0x84, 0xab, 0x52, 0xa9, 0xa5, 0x75, 0xb3, 0xc0, 0xbb, 0x05,
	0xde, 0x9d, 0xe0, 0x5b, 0x2c, 0x14, 0x7a, 0x98, 0xf5, 0x5d, 0x5f, 0xc6, 0x5e, 0x28, 0x43, 0xe9,
	0x19, 0x7c, 0x3f, 0x1b, 0x98, 0xcc, 0x24, 0x26, 0x2a, 0x78, 0x5a, 0xcb, 0xa1, 0x94, 0x61, 0x04,
	0x1e, 0x57, 0xc2, 0xe3, 0x49, 0x22, 0x35, 0xd7, 0x42, 0x26, 0x58, 0x76, 0xdf, 0xae, 0x52, 0xa5,
	0xf7, 0x15, 0x9c, 0x80, 0xde, 0x9a, 0x06, 0x49, 0xf5, 0x3c, 0xc3, 0x9b, 0xd3, 0xcd, 0xe7, 0xd7,
	0x2d, 0x4f, 0xb7, 0x46, 0x3c, 0x12, 0x01, 0xd7, 0x50, 0x76, 0x9d, 0x99, 0x2e, 0x20, 0x24, 0xa3,
	0x19, 0xf2, 0xf6, 0x0c, 0x46, 0xc0, 0x5e, 0x6f, 0x0a, 0xe1, 0xdc, 0xa6, 0x4b, 0x5b, 0x3b, 0x9d,
	0x8e, 0x86, 0xd8, 0x7a, 0x83, 0x2e, 0xc6, 0xa0, 0x87, 0x32, 0x68, 0x92, 0x36, 0x59, 0x69, 0x74,
	0xcb, 0xcc, 0xb2, 0xe8, 0x4b, 0x8a, 0xeb, 0x61, 0xb3, 0x6e, 0xaa, 0x26, 0xce, 0xb1, 0x29, 0x60,
	0x16, 0xe9, 0xe6, 0x42, 0x9b, 0xac, 0xbc, 0xdc, 0x2d, 0x33, 0xe7, 0x1b, 0x7a, 0xb5, 0xa4, 0xbb,
	0x25, 0x50, 0x5b, 0x37, 0xe9, 0x52, 0x24, 0x50, 0xf7, 0xc4, 0x84, 0x33, 0x4f, 0x3b, 0x81, 0xf5,
	0x21, 0xbd, 0x22, 0x34, 0xc4, 0xd8, 0xac, 0xb7, 0x17, 0x56, 0xae, 0x6e, 0xb4, 0xdd, 0x8a, 0xd3,
	0x72, 0x4b, 0xb6, 0x6e, 0x01, 0xaf, 0xda, 0x77, 0x73, 0xf1, 0xb7, 0x03, 0x52, 0x7f, 0x95, 0x38,
	0xfb, 0xf4, 0xc6, 0x27, 0x23, 0x1e, 0x65, 0x5c, 0xc3, 0xd6, 0x4e, 0x67, 0xcb, 0xf7, 0x01, 0xb1,
	0x0b, 0x77, 0xad, 0x65, 0xda, 0x98, 0x70, 0x96, 0x52, 0x4e, 0x0b, 0xd6, 0x36, 0xa5, 0x39, 0x7d,
	0x2f, 0x17, 0x77, 0x22, 0xe9, 0x9d, 0xf3, 0x24, 0xe5, 0x06, 0xbb, 0x0d, 0x51, 0x46, 0xe8, 0x7c,
	0x45, 0x5f, 0x9f, 0xb3, 0x35, 0xaa, 0x19, 0x76, 0x72, 0x39, 0xf6, 0x0d, 0x6a, 0xdd, 0x92, 0x72,
	0x37, 0x53, 0x9f, 0x21, 0xa4, 0x5d, 0x19, 0xc1, 0xf9, 0xb6, 0x9c, 0x35, 0x7a, 0xfd, 0xcc, 0x1a,
	0x54, 0xd6, 0x0d, 0x7a, 0x25, 0xcd, 0x13, 0x23, 0xa5, 0xd1, 0x2d, 0x92, 0x8d, 0x9f, 0x97, 0x68,
	0x63, 0xdb, 0xcc, 0xd0, 0xd6, 0x4e, 0xc7, 0xfa, 0x9f, 0xd0, 0x6b, 0xdb, 0x1c, 0x7d, 0x1e, 0xc0,
	0xc7, 0x10, 0x81, 0x06, 0x8b, 0x55, 0x2a, 0x9e, 0xc2, 0x75, 0xe1, 0x6e, 0x06, 0xa8, 0x5b, 0xee,
	0x45, 0xe1, 0xa8, 0x64, 0x82, 0xe0, 0x7c, 0x4f, 0xc6, 0xbf, 0x36, 0xbf, 0x18, 0x7c, 0x70, 0xcf,
	0x67, 0xbe, 0x4c, 0x50, 0x46, 0xc0, 0xfa, 0x1c, 0x81, 0xf1, 0x20, 0x16, 0xc9, 0x7a, 0xdb, 0x34,
	0xf2, 0xc2, 0x7a, 0x7e, 0xa5, 0x99, 0x90, 0x4c, 0x24, 0x83, 0x94, 0xa3, 0x4e, 0x33, 0x5f, 0x67,
	0x29, 0xb0, 0xbd, 0x54, 0xe8, 0xd3, 0x66, 0xc6, 0xe3, 0x62, 0x65, 0x51, 0x7f, 0xf8, 0xe7, 0xbf,
	0x3f, 0xd6, 0x99, 0xb3, 0x52, 0xfe, 0x2b, 0x4e, 0xc7, 0x14, 0xbd, 0xfb, 0x79, 0xfc, 0xc0, 0xf3,
	0x0b, 0x51, 0xbd, 0xc0, 0xa8, 0xda, 0x24, 0xab, 0xd6, 0xdf, 0x84, 0xbe, 0x76, 0xe6, 0x3c, 0x5f,
	0xf0, 0x15, 0xe6, 0x5d, 0xbb, 0x17, 0x7c, 0x85, 0xb9, 0x57, 0xc5, 0xd9, 0x7d, 0xfc, 0x4b, 0x3d,
	0xff, 0x10, 0x6b, 0xc6, 0x6f, 0x00, 0x03, 0x9e, 0x45, 0x9a, 0x71, 0x03, 0x98, 0x98, 0xdb, 0x83,
	0x7e, 0x59, 0x62, 0x29, 0xf0, 0xc0, 0x98, 0xdb, 0x70, 0xd8, 0x1c, 0x73, 0xb8, 0x8f, 0x1a, 0x62,
	0x0f, 0xca, 0xbd, 0x18, 0x57, 0xa2, 0x5c, 0x99, 0x3b, 0x3c, 0x20, 0xf4, 0xda, 0x9d, 0x2c, 0x0c,
	0x01, 0xf5, 0xe7, 0x3c, 0xca, 0x00, 0xad, 0x77, 0x2b, 0xe5, 0x4e, 0xe1, 0x72, 0x67, 0xab, 0x17,
	0x85, 0xa2, 0x72, 0xee, 0x94, 0xae, 0xae, 0x97, 0x06, 0x42, 0x48, 0x20, 0xe5, 0xd1, 0x79, 0xea,
	0xef, 0x4f, 0xe2, 0x07, 0x1e, 0x16, 0xa4, 0x6c, 0x64, 0x58, 0x73, 0xf5, 0x7f, 0x11, 0xfa, 0xca,
	0xcc, 0xed, 0xb6, 0xd6, 0x2a, 0x45, 0x9d, 0x9d, 0x9d, 0xd6, 0xfa, 0xc5, 0xc1, 0xa8, 0x1c, 0x71,
	0xd9, 0x93, 0x79, 0xcf, 0x59, 0xab, 0x3e, 0x99, 0xc8, 0xec, 0xc4, 0x32, 0x84, 0x94, 0x99, 0x31,
	0xdc, 0x24, 0xab, 0xad, 0xf5, 0x47, 0x07, 0x64, 0xe1, 0x8f, 0x03, 0x62, 0x57, 0xe9, 0xfb, 0xb4,
	0xff, 0x35, 0xf8, 0xfa, 0xe1, 0xef, 0xcd, 0xfa, 0x90, 0x7c, 0xf4, 0x1d, 0x39, 0x3c, 0xb2, 0x6b,
	0x4f, 0x8e, 0xec, 0xda, 0xd3, 0x23, 0x9b, 0x7c, 0x3b, 0xb6, 0xc9, 0x4f, 0x63, 0x9b, 0x3c, 0x1e,
	0xdb, 0xe4, 0x70, 0x6c, 0x93, 0x7f, 0xc6, 0x36, 0xf9, 0x6f, 0x6c, 0xd7, 0x9e, 0x8e, 0x6d, 0xf2,
	0xc3, 0xb1, 0x5d, 0x7b, 0x74, 0x6c, 0x93, 0xc3, 0x63, 0xbb, 0xf6, 0xe4, 0xd8, 0xae, 0x7d, 0x79,
	0x3b, 0x94, 0x6a, 0x37, 0x74, 0x47, 0x32, 0xd2, 0x90, 0xa6, 0xdc, 0xcd, 0xd0, 0x33, 0xc1, 0x40,
	0xa6, 0x31, 0x53, 0xa9, 0x1c, 0x89, 0x00, 0x52, 0x76, 0xd2, 0xf6, 0x54, 0x3f, 0x94, 0x1e, 0xdc,
	0xd3, 0xe5, 0x63, 0x32, 0xfb, 0xe4, 0xf5, 0x17, 0xcd, 0x8b, 0xf2, 0xfe, 0xb3, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x82, 0x3d, 0x6c, 0x2c, 0xaa, 0x07, 0x00, 0x00,
}

func (this *APIItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIItem)
	if !ok {
		that2, ok := that.(APIItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *APIItemList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIItemList)
	if !ok {
		that2, ok := that.(APIItemList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ListId != that1.ListId {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *EvaluateAPIAccessReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluateAPIAccessReq)
	if !ok {
		that2, ok := that.(EvaluateAPIAccessReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if len(this.ItemLists) != len(that1.ItemLists) {
		return false
	}
	for i := range this.ItemLists {
		if !this.ItemLists[i].Equal(that1.ItemLists[i]) {
			return false
		}
	}
	return true
}
func (this *EvaluateAPIAccessResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluateAPIAccessResp)
	if !ok {
		that2, ok := that.(EvaluateAPIAccessResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ItemLists) != len(that1.ItemLists) {
		return false
	}
	for i := range this.ItemLists {
		if !this.ItemLists[i].Equal(that1.ItemLists[i]) {
			return false
		}
	}
	return true
}
func (this *LookupUserRolesReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupUserRolesReq)
	if !ok {
		that2, ok := that.(LookupUserRolesReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *LookupUserRolesResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupUserRolesResp)
	if !ok {
		that2, ok := that.(LookupUserRolesResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if this.Roles[i] != that1.Roles[i] {
			return false
		}
	}
	return true
}
func (this *APIItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&namespace.APIItem{")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIItemList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&namespace.APIItemList{")
	s = append(s, "ListId: "+fmt.Sprintf("%#v", this.ListId)+",\n")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvaluateAPIAccessReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespace.EvaluateAPIAccessReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.ItemLists != nil {
		s = append(s, "ItemLists: "+fmt.Sprintf("%#v", this.ItemLists)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvaluateAPIAccessResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.EvaluateAPIAccessResp{")
	if this.ItemLists != nil {
		s = append(s, "ItemLists: "+fmt.Sprintf("%#v", this.ItemLists)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupUserRolesReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.LookupUserRolesReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupUserRolesResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.LookupUserRolesResp{")
	s = append(s, "Roles: "+fmt.Sprintf("%#v", this.Roles)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// CascadeDelete
	//
	// x-displayName: "Cascade Delete"
	// CascadeDelete will delete the namespace and all configuration objects like virtual_hosts etc.
	// under it. Use this only if the entire namespace and its contents are to be wiped out.
	CascadeDelete(ctx context.Context, in *CascadeDeleteRequest, opts ...grpc.CallOption) (*CascadeDeleteResponse, error)
	// EvaluateAPIAccess
	//
	// x-displayName: "Evaluate API Access"
	// EvaluateAPIAccess can evaluate multiple lists of API url, method under a namespace for a given user of a tenant.
	EvaluateAPIAccess(ctx context.Context, in *EvaluateAPIAccessReq, opts ...grpc.CallOption) (*EvaluateAPIAccessResp, error)
	// SuggestValues
	//
	// x-displayName: "Suggest Values"
	// SuggestValues returns suggested values for the specified field in the given Create/Replace/Custom request.
	SuggestValues(ctx context.Context, in *SuggestValuesReq, opts ...grpc.CallOption) (*SuggestValuesResp, error)
	// LookupUserRoles
	//
	// x-displayName: "Lookup User Roles"
	// LookupUserRoles returns roles for the the given user, namespace
	LookupUserRoles(ctx context.Context, in *LookupUserRolesReq, opts ...grpc.CallOption) (*LookupUserRolesResp, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) CascadeDelete(ctx context.Context, in *CascadeDeleteRequest, opts ...grpc.CallOption) (*CascadeDeleteResponse, error) {
	out := new(CascadeDeleteResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.CustomAPI/CascadeDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) EvaluateAPIAccess(ctx context.Context, in *EvaluateAPIAccessReq, opts ...grpc.CallOption) (*EvaluateAPIAccessResp, error) {
	out := new(EvaluateAPIAccessResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.CustomAPI/EvaluateAPIAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) SuggestValues(ctx context.Context, in *SuggestValuesReq, opts ...grpc.CallOption) (*SuggestValuesResp, error) {
	out := new(SuggestValuesResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.CustomAPI/SuggestValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) LookupUserRoles(ctx context.Context, in *LookupUserRolesReq, opts ...grpc.CallOption) (*LookupUserRolesResp, error) {
	out := new(LookupUserRolesResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.namespace.CustomAPI/LookupUserRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// CascadeDelete
	//
	// x-displayName: "Cascade Delete"
	// CascadeDelete will delete the namespace and all configuration objects like virtual_hosts etc.
	// under it. Use this only if the entire namespace and its contents are to be wiped out.
	CascadeDelete(context.Context, *CascadeDeleteRequest) (*CascadeDeleteResponse, error)
	// EvaluateAPIAccess
	//
	// x-displayName: "Evaluate API Access"
	// EvaluateAPIAccess can evaluate multiple lists of API url, method under a namespace for a given user of a tenant.
	EvaluateAPIAccess(context.Context, *EvaluateAPIAccessReq) (*EvaluateAPIAccessResp, error)
	// SuggestValues
	//
	// x-displayName: "Suggest Values"
	// SuggestValues returns suggested values for the specified field in the given Create/Replace/Custom request.
	SuggestValues(context.Context, *SuggestValuesReq) (*SuggestValuesResp, error)
	// LookupUserRoles
	//
	// x-displayName: "Lookup User Roles"
	// LookupUserRoles returns roles for the the given user, namespace
	LookupUserRoles(context.Context, *LookupUserRolesReq) (*LookupUserRolesResp, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) CascadeDelete(ctx context.Context, req *CascadeDeleteRequest) (*CascadeDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CascadeDelete not implemented")
}
func (*UnimplementedCustomAPIServer) EvaluateAPIAccess(ctx context.Context, req *EvaluateAPIAccessReq) (*EvaluateAPIAccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateAPIAccess not implemented")
}
func (*UnimplementedCustomAPIServer) SuggestValues(ctx context.Context, req *SuggestValuesReq) (*SuggestValuesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestValues not implemented")
}
func (*UnimplementedCustomAPIServer) LookupUserRoles(ctx context.Context, req *LookupUserRolesReq) (*LookupUserRolesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupUserRoles not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_CascadeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CascadeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).CascadeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.CustomAPI/CascadeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).CascadeDelete(ctx, req.(*CascadeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_EvaluateAPIAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateAPIAccessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).EvaluateAPIAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.CustomAPI/EvaluateAPIAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).EvaluateAPIAccess(ctx, req.(*EvaluateAPIAccessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_SuggestValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestValuesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).SuggestValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.CustomAPI/SuggestValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).SuggestValues(ctx, req.(*SuggestValuesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_LookupUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupUserRolesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).LookupUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.namespace.CustomAPI/LookupUserRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).LookupUserRoles(ctx, req.(*LookupUserRolesReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.namespace.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CascadeDelete",
			Handler:    _CustomAPI_CascadeDelete_Handler,
		},
		{
			MethodName: "EvaluateAPIAccess",
			Handler:    _CustomAPI_EvaluateAPIAccess_Handler,
		},
		{
			MethodName: "SuggestValues",
			Handler:    _CustomAPI_SuggestValues_Handler,
		},
		{
			MethodName: "LookupUserRoles",
			Handler:    _CustomAPI_LookupUserRoles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/namespace/public_customapi.proto",
}

func (m *APIItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result {
		i--
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *APIItemList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIItemList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIItemList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result {
		i--
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ListId) > 0 {
		i -= len(m.ListId)
		copy(dAtA[i:], m.ListId)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ListId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvaluateAPIAccessReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateAPIAccessReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateAPIAccessReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ItemLists) > 0 {
		for iNdEx := len(m.ItemLists) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemLists[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvaluateAPIAccessResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateAPIAccessResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateAPIAccessResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ItemLists) > 0 {
		for iNdEx := len(m.ItemLists) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemLists[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LookupUserRolesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupUserRolesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupUserRolesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupUserRolesResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupUserRolesResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupUserRolesResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Roles[iNdEx])
			copy(dAtA[i:], m.Roles[iNdEx])
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Roles[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *APIItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Result {
		n += 2
	}
	return n
}

func (m *APIItemList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ListId)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if m.Result {
		n += 2
	}
	return n
}

func (m *EvaluateAPIAccessReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.ItemLists) > 0 {
		for _, e := range m.ItemLists {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *EvaluateAPIAccessResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ItemLists) > 0 {
		for _, e := range m.ItemLists {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *LookupUserRolesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *LookupUserRolesResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for _, s := range m.Roles {
			l = len(s)
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *APIItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIItem{`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIItemList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*APIItem{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(f.String(), "APIItem", "APIItem", 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&APIItemList{`,
		`ListId:` + fmt.Sprintf("%v", this.ListId) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvaluateAPIAccessReq) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItemLists := "[]*APIItemList{"
	for _, f := range this.ItemLists {
		repeatedStringForItemLists += strings.Replace(f.String(), "APIItemList", "APIItemList", 1) + ","
	}
	repeatedStringForItemLists += "}"
	s := strings.Join([]string{`&EvaluateAPIAccessReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`ItemLists:` + repeatedStringForItemLists + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvaluateAPIAccessResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItemLists := "[]*APIItemList{"
	for _, f := range this.ItemLists {
		repeatedStringForItemLists += strings.Replace(f.String(), "APIItemList", "APIItemList", 1) + ","
	}
	repeatedStringForItemLists += "}"
	s := strings.Join([]string{`&EvaluateAPIAccessResp{`,
		`ItemLists:` + repeatedStringForItemLists + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupUserRolesReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupUserRolesReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupUserRolesResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupUserRolesResp{`,
		`Roles:` + fmt.Sprintf("%v", this.Roles) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *APIItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIItemList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &APIItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluateAPIAccessReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateAPIAccessReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateAPIAccessReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemLists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemLists = append(m.ItemLists, &APIItemList{})
			if err := m.ItemLists[len(m.ItemLists)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluateAPIAccessResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateAPIAccessResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateAPIAccessResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemLists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemLists = append(m.ItemLists, &APIItemList{})
			if err := m.ItemLists[len(m.ItemLists)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupUserRolesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupUserRolesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupUserRolesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupUserRolesResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupUserRolesResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupUserRolesResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)
