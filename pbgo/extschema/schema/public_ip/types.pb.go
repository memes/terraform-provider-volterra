// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/public_ip/types.proto

package public_ip

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GlobalSpecType
//
// x-displayName: "Global Configuration Specification"
// Configuration specification for Public IP
type GlobalSpecType struct {
	// ip_address
	//
	// x-displayName: "IP address"
	// x-required
	// x-example: "10.1.1.1"
	// IP address for this object
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// virtual_sites
	//
	// x-displayName: "Virtual Site"
	// Reference to virtual_site where this pubic IP will be available.
	VirtualSites []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=virtual_sites,json=virtualSites,proto3" json:"virtual_sites,omitempty"`
	// is_shared
	//
	// x-displayName: "Is Shared"
	// x-example: "true"
	// Is this public ip a shared vip
	IsShared bool `protobuf:"varint,3,opt,name=is_shared,json=isShared,proto3" json:"is_shared,omitempty"`
	// Label expression to select Node
	//
	// x-displayName: "Node Label Expression"
	// x-example: "vipSelector in (subset2)"
	// this expression is used if ver node should own this vip or not
	NodeSelector *schema.LabelSelectorType `protobuf:"bytes,4,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
	// Do Not Advertise
	//
	// x-displayName: "Do Not Advertise"
	// x-example: "true"
	// Is this public ip should not be advertised to infra.
	DoNotAdvertise bool `protobuf:"varint,5,opt,name=do_not_advertise,json=doNotAdvertise,proto3" json:"do_not_advertise,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_195f54ec271566c5, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *GlobalSpecType) GetVirtualSites() []*schema.ObjectRefType {
	if m != nil {
		return m.VirtualSites
	}
	return nil
}

func (m *GlobalSpecType) GetIsShared() bool {
	if m != nil {
		return m.IsShared
	}
	return false
}

func (m *GlobalSpecType) GetNodeSelector() *schema.LabelSelectorType {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *GlobalSpecType) GetDoNotAdvertise() bool {
	if m != nil {
		return m.DoNotAdvertise
	}
	return false
}

// Replace public_ip
//
// x-displayName: "Replace Public IP"
// Replacing an public_ip object will update the object by replacing the existing spec with the provided one.
// For read-then-write operations a resourceVersion mismatch will occur if the object was modified between the read and write
type ReplaceSpecType struct {
	VirtualSites []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=virtual_sites,json=virtualSites,proto3" json:"virtual_sites,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_195f54ec271566c5, []int{1}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetVirtualSites() []*schema.ObjectRefType {
	if m != nil {
		return m.VirtualSites
	}
	return nil
}

// Get public_ip
//
// x-displayName: "Get Public IP"
// Get public_ip will get the object from the storage backend for namespace metadata.namespace
type GetSpecType struct {
	Ip           string                  `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	VirtualSites []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=virtual_sites,json=virtualSites,proto3" json:"virtual_sites,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_195f54ec271566c5, []int{2}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *GetSpecType) GetVirtualSites() []*schema.ObjectRefType {
	if m != nil {
		return m.VirtualSites
	}
	return nil
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.public_ip.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.public_ip.GlobalSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.public_ip.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.public_ip.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.public_ip.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.public_ip.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/public_ip/types.proto", fileDescriptor_195f54ec271566c5)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/public_ip/types.proto", fileDescriptor_195f54ec271566c5)
}

var fileDescriptor_195f54ec271566c5 = []byte{
	// 525 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x93, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0xfd, 0x9c, 0x16, 0x5a, 0xa7, 0xbf, 0xf0, 0xd2, 0x24, 0x54, 0x27, 0x2b, 0x30, 0x64,
	0x20, 0xb6, 0x1a, 0xb6, 0x0e, 0x91, 0xc8, 0xd2, 0xa5, 0x80, 0xe4, 0x00, 0x03, 0x42, 0xb2, 0xfc,
	0xe3, 0xc5, 0x39, 0x70, 0x72, 0x27, 0xdf, 0xc5, 0xd0, 0xa1, 0x12, 0xe2, 0x2f, 0x00, 0x46, 0x16,
	0x56, 0xc4, 0x9f, 0x50, 0x18, 0x3a, 0xa2, 0x4e, 0x19, 0x33, 0x12, 0x67, 0x29, 0x5b, 0xc5, 0x5f,
	0x80, 0xe2, 0x24, 0x55, 0x1d, 0x66, 0xc4, 0x76, 0xe7, 0xef, 0xd7, 0x9f, 0xf7, 0xd5, 0x7b, 0xef,
	0xb4, 0x3b, 0x09, 0x0a, 0x93, 0x32, 0x4b, 0xf8, 0x5d, 0xec, 0xb9, 0x16, 0x1f, 0x78, 0x11, 0xf5,
	0x1d, 0xca, 0x2d, 0x79, 0xcc, 0x51, 0x98, 0x3c, 0x66, 0x92, 0xe9, 0xbb, 0x33, 0x93, 0x39, 0x33,
	0x99, 0x57, 0xa6, 0x4a, 0x3d, 0xa4, 0xb2, 0x3b, 0xf0, 0x4c, 0x9f, 0xf5, 0xac, 0x90, 0x85, 0xcc,
	0xca, 0xfc, 0xde, 0xa0, 0x93, 0xdd, 0xb2, 0x4b, 0x76, 0x9a, 0x71, 0x2a, 0xb7, 0xf3, 0xc5, 0x18,
	0x97, 0x94, 0xf5, 0xe7, 0x45, 0x2a, 0xe5, 0xbc, 0x78, 0xad, 0x7e, 0x65, 0x2f, 0x2f, 0x25, 0x6e,
	0x44, 0x03, 0x57, 0xe2, 0x5c, 0x35, 0x96, 0x54, 0x8a, 0xaf, 0x9d, 0x1c, 0xba, 0x7a, 0xaa, 0x6a,
	0x5b, 0x87, 0x11, 0xf3, 0xdc, 0xa8, 0xcd, 0xd1, 0x7f, 0x72, 0xcc, 0x51, 0x2f, 0x6b, 0x2a, 0xe5,
	0x25, 0x30, 0xa0, 0xb6, 0xde, 0x5a, 0x3f, 0xfd, 0x75, 0x56, 0x58, 0x89, 0x55, 0x0e, 0xb6, 0x4a,
	0xb9, 0xfe, 0x42, 0xdb, 0x4c, 0x68, 0x2c, 0x07, 0x6e, 0xe4, 0x08, 0x2a, 0x51, 0x94, 0x54, 0xa3,
	0x50, 0x2b, 0x36, 0xf6, 0xcc, 0x7c, 0x17, 0x1e, 0x7b, 0x2f, 0xd1, 0x97, 0x36, 0x76, 0xa6, 0xbc,
	0x56, 0xf9, 0xeb, 0xc9, 0xc6, 0xf5, 0xbf, 0xa6, 0xc8, 0xd5, 0x8f, 0xa0, 0xee, 0x80, 0xbd, 0xf8,
	0xde, 0x9e, 0xc2, 0xf4, 0xbb, 0xda, 0x3a, 0x15, 0x8e, 0xe8, 0xba, 0x31, 0x06, 0xa5, 0x82, 0x01,
	0xb5, 0xb5, 0xd6, 0xcd, 0xd1, 0x09, 0x5c, 0x7c, 0x03, 0xb0, 0xd7, 0xa8, 0x68, 0x67, 0x82, 0xfe,
	0x4c, 0xdb, 0xec, 0xb3, 0x00, 0x1d, 0x81, 0x11, 0xfa, 0x92, 0xc5, 0xa5, 0x15, 0x03, 0x6a, 0xc5,
	0x86, 0xb1, 0x94, 0xe1, 0xc8, 0xf5, 0x30, 0x6a, 0xcf, 0x3d, 0x59, 0x8e, 0xed, 0x39, 0xeb, 0xd3,
	0x77, 0x58, 0xd1, 0x54, 0x05, 0xec, 0x8d, 0x29, 0x67, 0x61, 0xd1, 0xf7, 0xb5, 0x9d, 0x80, 0x39,
	0x7d, 0x26, 0x1d, 0x37, 0x48, 0x30, 0x96, 0x54, 0x60, 0x69, 0x35, 0x1f, 0x62, 0x2b, 0x60, 0x8f,
	0x98, 0x7c, 0xb0, 0x90, 0xab, 0xef, 0x40, 0xdb, 0xb6, 0x91, 0x47, 0xae, 0x8f, 0x57, 0xdd, 0xfb,
	0xa7, 0x2d, 0x3a, 0xb8, 0x75, 0xde, 0x5c, 0x1a, 0x57, 0xf5, 0x33, 0x68, 0xc5, 0x43, 0x94, 0xff,
	0x7d, 0x7c, 0x07, 0xbb, 0x7f, 0x65, 0xfb, 0xdd, 0x2c, 0xec, 0xdf, 0x6b, 0xb4, 0x3e, 0xc0, 0x79,
	0xb3, 0x60, 0x1f, 0x3d, 0x1d, 0x8e, 0x89, 0x32, 0x1a, 0x13, 0xe5, 0x72, 0x4c, 0xe0, 0x6d, 0x4a,
	0xe0, 0x4b, 0x4a, 0xe0, 0x47, 0x4a, 0x60, 0x98, 0x12, 0x18, 0xa5, 0x04, 0x7e, 0xa6, 0x04, 0x2e,
	0x52, 0xa2, 0x5c, 0xa6, 0x04, 0xde, 0x4f, 0x88, 0x72, 0x36, 0x21, 0x30, 0x9c, 0x10, 0x65, 0x34,
	0x21, 0xca, 0xf3, 0x87, 0x21, 0xe3, 0xaf, 0x42, 0x33, 0x61, 0x91, 0xc4, 0x38, 0x76, 0xcd, 0x81,
	0xb0, 0xb2, 0x43, 0x87, 0xc5, 0xbd, 0x3a, 0x8f, 0x59, 0x42, 0x03, 0x8c, 0xeb, 0x0b, 0xd9, 0xe2,
	0x5e, 0xc8, 0x2c, 0x7c, 0x23, 0xe7, 0x9b, 0xbf, 0xfc, 0x86, 0xbd, 0x1b, 0xd9, 0xfa, 0xdf, 0xff,
	0x13, 0x00, 0x00, 0xff, 0xff, 0xf4, 0xf5, 0x1a, 0x34, 0xe5, 0x03, 0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if len(this.VirtualSites) != len(that1.VirtualSites) {
		return false
	}
	for i := range this.VirtualSites {
		if !this.VirtualSites[i].Equal(that1.VirtualSites[i]) {
			return false
		}
	}
	if this.IsShared != that1.IsShared {
		return false
	}
	if !this.NodeSelector.Equal(that1.NodeSelector) {
		return false
	}
	if this.DoNotAdvertise != that1.DoNotAdvertise {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.VirtualSites) != len(that1.VirtualSites) {
		return false
	}
	for i := range this.VirtualSites {
		if !this.VirtualSites[i].Equal(that1.VirtualSites[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if len(this.VirtualSites) != len(that1.VirtualSites) {
		return false
	}
	for i := range this.VirtualSites {
		if !this.VirtualSites[i].Equal(that1.VirtualSites[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&public_ip.GlobalSpecType{")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	if this.VirtualSites != nil {
		s = append(s, "VirtualSites: "+fmt.Sprintf("%#v", this.VirtualSites)+",\n")
	}
	s = append(s, "IsShared: "+fmt.Sprintf("%#v", this.IsShared)+",\n")
	if this.NodeSelector != nil {
		s = append(s, "NodeSelector: "+fmt.Sprintf("%#v", this.NodeSelector)+",\n")
	}
	s = append(s, "DoNotAdvertise: "+fmt.Sprintf("%#v", this.DoNotAdvertise)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&public_ip.ReplaceSpecType{")
	if this.VirtualSites != nil {
		s = append(s, "VirtualSites: "+fmt.Sprintf("%#v", this.VirtualSites)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&public_ip.GetSpecType{")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	if this.VirtualSites != nil {
		s = append(s, "VirtualSites: "+fmt.Sprintf("%#v", this.VirtualSites)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DoNotAdvertise {
		i--
		if m.DoNotAdvertise {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.NodeSelector != nil {
		{
			size, err := m.NodeSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IsShared {
		i--
		if m.IsShared {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.VirtualSites) > 0 {
		for iNdEx := len(m.VirtualSites) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VirtualSites[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VirtualSites) > 0 {
		for iNdEx := len(m.VirtualSites) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VirtualSites[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VirtualSites) > 0 {
		for iNdEx := len(m.VirtualSites) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VirtualSites[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.VirtualSites) > 0 {
		for _, e := range m.VirtualSites {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.IsShared {
		n += 2
	}
	if m.NodeSelector != nil {
		l = m.NodeSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DoNotAdvertise {
		n += 2
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VirtualSites) > 0 {
		for _, e := range m.VirtualSites {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.VirtualSites) > 0 {
		for _, e := range m.VirtualSites {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVirtualSites := "[]*ObjectRefType{"
	for _, f := range this.VirtualSites {
		repeatedStringForVirtualSites += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForVirtualSites += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`VirtualSites:` + repeatedStringForVirtualSites + `,`,
		`IsShared:` + fmt.Sprintf("%v", this.IsShared) + `,`,
		`NodeSelector:` + strings.Replace(fmt.Sprintf("%v", this.NodeSelector), "LabelSelectorType", "schema.LabelSelectorType", 1) + `,`,
		`DoNotAdvertise:` + fmt.Sprintf("%v", this.DoNotAdvertise) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVirtualSites := "[]*ObjectRefType{"
	for _, f := range this.VirtualSites {
		repeatedStringForVirtualSites += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForVirtualSites += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`VirtualSites:` + repeatedStringForVirtualSites + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVirtualSites := "[]*ObjectRefType{"
	for _, f := range this.VirtualSites {
		repeatedStringForVirtualSites += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForVirtualSites += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`VirtualSites:` + repeatedStringForVirtualSites + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualSites = append(m.VirtualSites, &schema.ObjectRefType{})
			if err := m.VirtualSites[len(m.VirtualSites)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShared", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsShared = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeSelector == nil {
				m.NodeSelector = &schema.LabelSelectorType{}
			}
			if err := m.NodeSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DoNotAdvertise = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualSites = append(m.VirtualSites, &schema.ObjectRefType{})
			if err := m.VirtualSites[len(m.VirtualSites)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualSites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualSites = append(m.VirtualSites, &schema.ObjectRefType{})
			if err := m.VirtualSites[len(m.VirtualSites)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
