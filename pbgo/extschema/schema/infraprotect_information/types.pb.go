// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/infraprotect_information/types.proto

package infraprotect_information

import (
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// information
//
// x-displayName: "Information"
// Organisation information
type GlobalSpecType struct {
	// asn
	//
	// x-displayName: "ASN"
	// x-example: "0"
	// AS Number
	Asn int32 `protobuf:"varint,1,opt,name=asn,proto3" json:"asn,omitempty"`
	// uuid
	//
	// x-displayName: "Uuid"
	// x-example: "value"
	// Organisation UUID
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// prefixes
	//
	// x-displayName: "Super prefixes"
	// x-example: "value"
	// List of tenant 'super' prefixes noted in CIDR
	Prefixes []string `protobuf:"bytes,3,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
	// L3/L4 CID
	//
	// x-displayName: "L3/L4 CID"
	// x-example: "value"
	// L3/L4 provider customer ID
	ArborCid string `protobuf:"bytes,4,opt,name=arbor_cid,json=arborCid,proto3" json:"arbor_cid,omitempty"`
	// Primary Network Name
	//
	// x-displayName: "Primary network name"
	// x-example: "defensenet_local"
	// Name of the default customer network
	PrimaryNetworkName string `protobuf:"bytes,5,opt,name=primary_network_name,json=primaryNetworkName,proto3" json:"primary_network_name,omitempty"`
	// Tunnel F5 IP Usage Choice
	//
	// x-displayName: "Tunnel F5 IP Usage Choice"
	// x-required
	// Tunnel F5 IP Usage Choice
	//
	// Types that are valid to be assigned to TunnelF5IpUsageChoice:
	//	*GlobalSpecType_ReuseIps
	//	*GlobalSpecType_UseDedicatedIps
	TunnelF5IpUsageChoice isGlobalSpecType_TunnelF5IpUsageChoice `protobuf_oneof:"tunnel_f5_ip_usage_choice"`
	// Route advertisement management choice
	//
	// x-displayName: "Route Advertisement Management Choice"
	// x-required
	// Route advertisement management choice
	//
	// Types that are valid to be assigned to RouteAdvertisementManagementChoice:
	//	*GlobalSpecType_RouteAdvertisementMgmtNotSpecified
	//	*GlobalSpecType_RouteAdvertisementMgmtUsingF5Xc
	//	*GlobalSpecType_RouteAdvertisementMgmtNotUsingF5Xc
	RouteAdvertisementManagementChoice isGlobalSpecType_RouteAdvertisementManagementChoice `protobuf_oneof:"route_advertisement_management_choice"`
	// Default tunnel BGP peer secret choice
	//
	// x-displayName: "Default tunnel BGP peer secret choice"
	// x-required
	// Default tunnel BGP peer secret choice
	//
	// Types that are valid to be assigned to DefaultTunnelBgpSecretChoice:
	//	*GlobalSpecType_DefaultTunnelBgpSecretNone
	//	*GlobalSpecType_DefaultTunnelBgpSecret
	DefaultTunnelBgpSecretChoice isGlobalSpecType_DefaultTunnelBgpSecretChoice `protobuf_oneof:"default_tunnel_bgp_secret_choice"`
	// AS Path Usage
	//
	// x-displayName: "AS Path Usage"
	// x-required
	// AS Path Usage for customer advertisements
	//
	// Types that are valid to be assigned to AsPathChoice:
	//	*GlobalSpecType_AsPathChoiceFull
	//	*GlobalSpecType_AsPathChoiceOrigin
	//	*GlobalSpecType_AsPathChoiceNone
	AsPathChoice isGlobalSpecType_AsPathChoice `protobuf_oneof:"as_path_choice"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a2a3e6209fce53f, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_TunnelF5IpUsageChoice interface {
	isGlobalSpecType_TunnelF5IpUsageChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_RouteAdvertisementManagementChoice interface {
	isGlobalSpecType_RouteAdvertisementManagementChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_DefaultTunnelBgpSecretChoice interface {
	isGlobalSpecType_DefaultTunnelBgpSecretChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_AsPathChoice interface {
	isGlobalSpecType_AsPathChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_ReuseIps struct {
	ReuseIps *schema.Empty `protobuf:"bytes,7,opt,name=reuse_ips,json=reuseIps,proto3,oneof" json:"reuse_ips,omitempty"`
}
type GlobalSpecType_UseDedicatedIps struct {
	UseDedicatedIps *schema.Empty `protobuf:"bytes,8,opt,name=use_dedicated_ips,json=useDedicatedIps,proto3,oneof" json:"use_dedicated_ips,omitempty"`
}
type GlobalSpecType_RouteAdvertisementMgmtNotSpecified struct {
	RouteAdvertisementMgmtNotSpecified *schema.Empty `protobuf:"bytes,11,opt,name=route_advertisement_mgmt_not_specified,json=routeAdvertisementMgmtNotSpecified,proto3,oneof" json:"route_advertisement_mgmt_not_specified,omitempty"`
}
type GlobalSpecType_RouteAdvertisementMgmtUsingF5Xc struct {
	RouteAdvertisementMgmtUsingF5Xc *schema.Empty `protobuf:"bytes,12,opt,name=route_advertisement_mgmt_using_f5xc,json=routeAdvertisementMgmtUsingF5xc,proto3,oneof" json:"route_advertisement_mgmt_using_f5xc,omitempty"`
}
type GlobalSpecType_RouteAdvertisementMgmtNotUsingF5Xc struct {
	RouteAdvertisementMgmtNotUsingF5Xc *schema.Empty `protobuf:"bytes,13,opt,name=route_advertisement_mgmt_not_using_f5xc,json=routeAdvertisementMgmtNotUsingF5xc,proto3,oneof" json:"route_advertisement_mgmt_not_using_f5xc,omitempty"`
}
type GlobalSpecType_DefaultTunnelBgpSecretNone struct {
	DefaultTunnelBgpSecretNone *schema.Empty `protobuf:"bytes,15,opt,name=default_tunnel_bgp_secret_none,json=defaultTunnelBgpSecretNone,proto3,oneof" json:"default_tunnel_bgp_secret_none,omitempty"`
}
type GlobalSpecType_DefaultTunnelBgpSecret struct {
	DefaultTunnelBgpSecret *schema.SecretType `protobuf:"bytes,16,opt,name=default_tunnel_bgp_secret,json=defaultTunnelBgpSecret,proto3,oneof" json:"default_tunnel_bgp_secret,omitempty"`
}
type GlobalSpecType_AsPathChoiceFull struct {
	AsPathChoiceFull *schema.Empty `protobuf:"bytes,18,opt,name=as_path_choice_full,json=asPathChoiceFull,proto3,oneof" json:"as_path_choice_full,omitempty"`
}
type GlobalSpecType_AsPathChoiceOrigin struct {
	AsPathChoiceOrigin *schema.Empty `protobuf:"bytes,19,opt,name=as_path_choice_origin,json=asPathChoiceOrigin,proto3,oneof" json:"as_path_choice_origin,omitempty"`
}
type GlobalSpecType_AsPathChoiceNone struct {
	AsPathChoiceNone *schema.Empty `protobuf:"bytes,20,opt,name=as_path_choice_none,json=asPathChoiceNone,proto3,oneof" json:"as_path_choice_none,omitempty"`
}

func (*GlobalSpecType_ReuseIps) isGlobalSpecType_TunnelF5IpUsageChoice()        {}
func (*GlobalSpecType_UseDedicatedIps) isGlobalSpecType_TunnelF5IpUsageChoice() {}
func (*GlobalSpecType_RouteAdvertisementMgmtNotSpecified) isGlobalSpecType_RouteAdvertisementManagementChoice() {
}
func (*GlobalSpecType_RouteAdvertisementMgmtUsingF5Xc) isGlobalSpecType_RouteAdvertisementManagementChoice() {
}
func (*GlobalSpecType_RouteAdvertisementMgmtNotUsingF5Xc) isGlobalSpecType_RouteAdvertisementManagementChoice() {
}
func (*GlobalSpecType_DefaultTunnelBgpSecretNone) isGlobalSpecType_DefaultTunnelBgpSecretChoice() {}
func (*GlobalSpecType_DefaultTunnelBgpSecret) isGlobalSpecType_DefaultTunnelBgpSecretChoice()     {}
func (*GlobalSpecType_AsPathChoiceFull) isGlobalSpecType_AsPathChoice()                           {}
func (*GlobalSpecType_AsPathChoiceOrigin) isGlobalSpecType_AsPathChoice()                         {}
func (*GlobalSpecType_AsPathChoiceNone) isGlobalSpecType_AsPathChoice()                           {}

func (m *GlobalSpecType) GetTunnelF5IpUsageChoice() isGlobalSpecType_TunnelF5IpUsageChoice {
	if m != nil {
		return m.TunnelF5IpUsageChoice
	}
	return nil
}
func (m *GlobalSpecType) GetRouteAdvertisementManagementChoice() isGlobalSpecType_RouteAdvertisementManagementChoice {
	if m != nil {
		return m.RouteAdvertisementManagementChoice
	}
	return nil
}
func (m *GlobalSpecType) GetDefaultTunnelBgpSecretChoice() isGlobalSpecType_DefaultTunnelBgpSecretChoice {
	if m != nil {
		return m.DefaultTunnelBgpSecretChoice
	}
	return nil
}
func (m *GlobalSpecType) GetAsPathChoice() isGlobalSpecType_AsPathChoice {
	if m != nil {
		return m.AsPathChoice
	}
	return nil
}

func (m *GlobalSpecType) GetAsn() int32 {
	if m != nil {
		return m.Asn
	}
	return 0
}

func (m *GlobalSpecType) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *GlobalSpecType) GetPrefixes() []string {
	if m != nil {
		return m.Prefixes
	}
	return nil
}

func (m *GlobalSpecType) GetArborCid() string {
	if m != nil {
		return m.ArborCid
	}
	return ""
}

func (m *GlobalSpecType) GetPrimaryNetworkName() string {
	if m != nil {
		return m.PrimaryNetworkName
	}
	return ""
}

func (m *GlobalSpecType) GetReuseIps() *schema.Empty {
	if x, ok := m.GetTunnelF5IpUsageChoice().(*GlobalSpecType_ReuseIps); ok {
		return x.ReuseIps
	}
	return nil
}

func (m *GlobalSpecType) GetUseDedicatedIps() *schema.Empty {
	if x, ok := m.GetTunnelF5IpUsageChoice().(*GlobalSpecType_UseDedicatedIps); ok {
		return x.UseDedicatedIps
	}
	return nil
}

func (m *GlobalSpecType) GetRouteAdvertisementMgmtNotSpecified() *schema.Empty {
	if x, ok := m.GetRouteAdvertisementManagementChoice().(*GlobalSpecType_RouteAdvertisementMgmtNotSpecified); ok {
		return x.RouteAdvertisementMgmtNotSpecified
	}
	return nil
}

func (m *GlobalSpecType) GetRouteAdvertisementMgmtUsingF5Xc() *schema.Empty {
	if x, ok := m.GetRouteAdvertisementManagementChoice().(*GlobalSpecType_RouteAdvertisementMgmtUsingF5Xc); ok {
		return x.RouteAdvertisementMgmtUsingF5Xc
	}
	return nil
}

func (m *GlobalSpecType) GetRouteAdvertisementMgmtNotUsingF5Xc() *schema.Empty {
	if x, ok := m.GetRouteAdvertisementManagementChoice().(*GlobalSpecType_RouteAdvertisementMgmtNotUsingF5Xc); ok {
		return x.RouteAdvertisementMgmtNotUsingF5Xc
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultTunnelBgpSecretNone() *schema.Empty {
	if x, ok := m.GetDefaultTunnelBgpSecretChoice().(*GlobalSpecType_DefaultTunnelBgpSecretNone); ok {
		return x.DefaultTunnelBgpSecretNone
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultTunnelBgpSecret() *schema.SecretType {
	if x, ok := m.GetDefaultTunnelBgpSecretChoice().(*GlobalSpecType_DefaultTunnelBgpSecret); ok {
		return x.DefaultTunnelBgpSecret
	}
	return nil
}

func (m *GlobalSpecType) GetAsPathChoiceFull() *schema.Empty {
	if x, ok := m.GetAsPathChoice().(*GlobalSpecType_AsPathChoiceFull); ok {
		return x.AsPathChoiceFull
	}
	return nil
}

func (m *GlobalSpecType) GetAsPathChoiceOrigin() *schema.Empty {
	if x, ok := m.GetAsPathChoice().(*GlobalSpecType_AsPathChoiceOrigin); ok {
		return x.AsPathChoiceOrigin
	}
	return nil
}

func (m *GlobalSpecType) GetAsPathChoiceNone() *schema.Empty {
	if x, ok := m.GetAsPathChoice().(*GlobalSpecType_AsPathChoiceNone); ok {
		return x.AsPathChoiceNone
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_ReuseIps)(nil),
		(*GlobalSpecType_UseDedicatedIps)(nil),
		(*GlobalSpecType_RouteAdvertisementMgmtNotSpecified)(nil),
		(*GlobalSpecType_RouteAdvertisementMgmtUsingF5Xc)(nil),
		(*GlobalSpecType_RouteAdvertisementMgmtNotUsingF5Xc)(nil),
		(*GlobalSpecType_DefaultTunnelBgpSecretNone)(nil),
		(*GlobalSpecType_DefaultTunnelBgpSecret)(nil),
		(*GlobalSpecType_AsPathChoiceFull)(nil),
		(*GlobalSpecType_AsPathChoiceOrigin)(nil),
		(*GlobalSpecType_AsPathChoiceNone)(nil),
	}
}

// Get InfraProtect Information
//
// x-displayName: "Get Infraprotect Information"
// Get organisation information
type GetSpecType struct {
	Asn                int32    `protobuf:"varint,1,opt,name=asn,proto3" json:"asn,omitempty"`
	Uuid               string   `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Prefixes           []string `protobuf:"bytes,3,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
	ArborCid           string   `protobuf:"bytes,4,opt,name=arbor_cid,json=arborCid,proto3" json:"arbor_cid,omitempty"`
	PrimaryNetworkName string   `protobuf:"bytes,5,opt,name=primary_network_name,json=primaryNetworkName,proto3" json:"primary_network_name,omitempty"`
	// Types that are valid to be assigned to TunnelF5IpUsageChoice:
	//	*GetSpecType_ReuseIps
	//	*GetSpecType_UseDedicatedIps
	TunnelF5IpUsageChoice isGetSpecType_TunnelF5IpUsageChoice `protobuf_oneof:"tunnel_f5_ip_usage_choice"`
	// Types that are valid to be assigned to RouteAdvertisementManagementChoice:
	//	*GetSpecType_RouteAdvertisementMgmtNotSpecified
	//	*GetSpecType_RouteAdvertisementMgmtUsingF5Xc
	//	*GetSpecType_RouteAdvertisementMgmtNotUsingF5Xc
	RouteAdvertisementManagementChoice isGetSpecType_RouteAdvertisementManagementChoice `protobuf_oneof:"route_advertisement_management_choice"`
	// Types that are valid to be assigned to DefaultTunnelBgpSecretChoice:
	//	*GetSpecType_DefaultTunnelBgpSecretNone
	//	*GetSpecType_DefaultTunnelBgpSecret
	DefaultTunnelBgpSecretChoice isGetSpecType_DefaultTunnelBgpSecretChoice `protobuf_oneof:"default_tunnel_bgp_secret_choice"`
	// Types that are valid to be assigned to AsPathChoice:
	//	*GetSpecType_AsPathChoiceFull
	//	*GetSpecType_AsPathChoiceOrigin
	//	*GetSpecType_AsPathChoiceNone
	AsPathChoice isGetSpecType_AsPathChoice `protobuf_oneof:"as_path_choice"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a2a3e6209fce53f, []int{1}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_TunnelF5IpUsageChoice interface {
	isGetSpecType_TunnelF5IpUsageChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_RouteAdvertisementManagementChoice interface {
	isGetSpecType_RouteAdvertisementManagementChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_DefaultTunnelBgpSecretChoice interface {
	isGetSpecType_DefaultTunnelBgpSecretChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_AsPathChoice interface {
	isGetSpecType_AsPathChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_ReuseIps struct {
	ReuseIps *schema.Empty `protobuf:"bytes,7,opt,name=reuse_ips,json=reuseIps,proto3,oneof" json:"reuse_ips,omitempty"`
}
type GetSpecType_UseDedicatedIps struct {
	UseDedicatedIps *schema.Empty `protobuf:"bytes,8,opt,name=use_dedicated_ips,json=useDedicatedIps,proto3,oneof" json:"use_dedicated_ips,omitempty"`
}
type GetSpecType_RouteAdvertisementMgmtNotSpecified struct {
	RouteAdvertisementMgmtNotSpecified *schema.Empty `protobuf:"bytes,11,opt,name=route_advertisement_mgmt_not_specified,json=routeAdvertisementMgmtNotSpecified,proto3,oneof" json:"route_advertisement_mgmt_not_specified,omitempty"`
}
type GetSpecType_RouteAdvertisementMgmtUsingF5Xc struct {
	RouteAdvertisementMgmtUsingF5Xc *schema.Empty `protobuf:"bytes,12,opt,name=route_advertisement_mgmt_using_f5xc,json=routeAdvertisementMgmtUsingF5xc,proto3,oneof" json:"route_advertisement_mgmt_using_f5xc,omitempty"`
}
type GetSpecType_RouteAdvertisementMgmtNotUsingF5Xc struct {
	RouteAdvertisementMgmtNotUsingF5Xc *schema.Empty `protobuf:"bytes,13,opt,name=route_advertisement_mgmt_not_using_f5xc,json=routeAdvertisementMgmtNotUsingF5xc,proto3,oneof" json:"route_advertisement_mgmt_not_using_f5xc,omitempty"`
}
type GetSpecType_DefaultTunnelBgpSecretNone struct {
	DefaultTunnelBgpSecretNone *schema.Empty `protobuf:"bytes,15,opt,name=default_tunnel_bgp_secret_none,json=defaultTunnelBgpSecretNone,proto3,oneof" json:"default_tunnel_bgp_secret_none,omitempty"`
}
type GetSpecType_DefaultTunnelBgpSecret struct {
	DefaultTunnelBgpSecret *schema.SecretType `protobuf:"bytes,16,opt,name=default_tunnel_bgp_secret,json=defaultTunnelBgpSecret,proto3,oneof" json:"default_tunnel_bgp_secret,omitempty"`
}
type GetSpecType_AsPathChoiceFull struct {
	AsPathChoiceFull *schema.Empty `protobuf:"bytes,18,opt,name=as_path_choice_full,json=asPathChoiceFull,proto3,oneof" json:"as_path_choice_full,omitempty"`
}
type GetSpecType_AsPathChoiceOrigin struct {
	AsPathChoiceOrigin *schema.Empty `protobuf:"bytes,19,opt,name=as_path_choice_origin,json=asPathChoiceOrigin,proto3,oneof" json:"as_path_choice_origin,omitempty"`
}
type GetSpecType_AsPathChoiceNone struct {
	AsPathChoiceNone *schema.Empty `protobuf:"bytes,20,opt,name=as_path_choice_none,json=asPathChoiceNone,proto3,oneof" json:"as_path_choice_none,omitempty"`
}

func (*GetSpecType_ReuseIps) isGetSpecType_TunnelF5IpUsageChoice()        {}
func (*GetSpecType_UseDedicatedIps) isGetSpecType_TunnelF5IpUsageChoice() {}
func (*GetSpecType_RouteAdvertisementMgmtNotSpecified) isGetSpecType_RouteAdvertisementManagementChoice() {
}
func (*GetSpecType_RouteAdvertisementMgmtUsingF5Xc) isGetSpecType_RouteAdvertisementManagementChoice() {
}
func (*GetSpecType_RouteAdvertisementMgmtNotUsingF5Xc) isGetSpecType_RouteAdvertisementManagementChoice() {
}
func (*GetSpecType_DefaultTunnelBgpSecretNone) isGetSpecType_DefaultTunnelBgpSecretChoice() {}
func (*GetSpecType_DefaultTunnelBgpSecret) isGetSpecType_DefaultTunnelBgpSecretChoice()     {}
func (*GetSpecType_AsPathChoiceFull) isGetSpecType_AsPathChoice()                           {}
func (*GetSpecType_AsPathChoiceOrigin) isGetSpecType_AsPathChoice()                         {}
func (*GetSpecType_AsPathChoiceNone) isGetSpecType_AsPathChoice()                           {}

func (m *GetSpecType) GetTunnelF5IpUsageChoice() isGetSpecType_TunnelF5IpUsageChoice {
	if m != nil {
		return m.TunnelF5IpUsageChoice
	}
	return nil
}
func (m *GetSpecType) GetRouteAdvertisementManagementChoice() isGetSpecType_RouteAdvertisementManagementChoice {
	if m != nil {
		return m.RouteAdvertisementManagementChoice
	}
	return nil
}
func (m *GetSpecType) GetDefaultTunnelBgpSecretChoice() isGetSpecType_DefaultTunnelBgpSecretChoice {
	if m != nil {
		return m.DefaultTunnelBgpSecretChoice
	}
	return nil
}
func (m *GetSpecType) GetAsPathChoice() isGetSpecType_AsPathChoice {
	if m != nil {
		return m.AsPathChoice
	}
	return nil
}

func (m *GetSpecType) GetAsn() int32 {
	if m != nil {
		return m.Asn
	}
	return 0
}

func (m *GetSpecType) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *GetSpecType) GetPrefixes() []string {
	if m != nil {
		return m.Prefixes
	}
	return nil
}

func (m *GetSpecType) GetArborCid() string {
	if m != nil {
		return m.ArborCid
	}
	return ""
}

func (m *GetSpecType) GetPrimaryNetworkName() string {
	if m != nil {
		return m.PrimaryNetworkName
	}
	return ""
}

func (m *GetSpecType) GetReuseIps() *schema.Empty {
	if x, ok := m.GetTunnelF5IpUsageChoice().(*GetSpecType_ReuseIps); ok {
		return x.ReuseIps
	}
	return nil
}

func (m *GetSpecType) GetUseDedicatedIps() *schema.Empty {
	if x, ok := m.GetTunnelF5IpUsageChoice().(*GetSpecType_UseDedicatedIps); ok {
		return x.UseDedicatedIps
	}
	return nil
}

func (m *GetSpecType) GetRouteAdvertisementMgmtNotSpecified() *schema.Empty {
	if x, ok := m.GetRouteAdvertisementManagementChoice().(*GetSpecType_RouteAdvertisementMgmtNotSpecified); ok {
		return x.RouteAdvertisementMgmtNotSpecified
	}
	return nil
}

func (m *GetSpecType) GetRouteAdvertisementMgmtUsingF5Xc() *schema.Empty {
	if x, ok := m.GetRouteAdvertisementManagementChoice().(*GetSpecType_RouteAdvertisementMgmtUsingF5Xc); ok {
		return x.RouteAdvertisementMgmtUsingF5Xc
	}
	return nil
}

func (m *GetSpecType) GetRouteAdvertisementMgmtNotUsingF5Xc() *schema.Empty {
	if x, ok := m.GetRouteAdvertisementManagementChoice().(*GetSpecType_RouteAdvertisementMgmtNotUsingF5Xc); ok {
		return x.RouteAdvertisementMgmtNotUsingF5Xc
	}
	return nil
}

func (m *GetSpecType) GetDefaultTunnelBgpSecretNone() *schema.Empty {
	if x, ok := m.GetDefaultTunnelBgpSecretChoice().(*GetSpecType_DefaultTunnelBgpSecretNone); ok {
		return x.DefaultTunnelBgpSecretNone
	}
	return nil
}

func (m *GetSpecType) GetDefaultTunnelBgpSecret() *schema.SecretType {
	if x, ok := m.GetDefaultTunnelBgpSecretChoice().(*GetSpecType_DefaultTunnelBgpSecret); ok {
		return x.DefaultTunnelBgpSecret
	}
	return nil
}

func (m *GetSpecType) GetAsPathChoiceFull() *schema.Empty {
	if x, ok := m.GetAsPathChoice().(*GetSpecType_AsPathChoiceFull); ok {
		return x.AsPathChoiceFull
	}
	return nil
}

func (m *GetSpecType) GetAsPathChoiceOrigin() *schema.Empty {
	if x, ok := m.GetAsPathChoice().(*GetSpecType_AsPathChoiceOrigin); ok {
		return x.AsPathChoiceOrigin
	}
	return nil
}

func (m *GetSpecType) GetAsPathChoiceNone() *schema.Empty {
	if x, ok := m.GetAsPathChoice().(*GetSpecType_AsPathChoiceNone); ok {
		return x.AsPathChoiceNone
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_ReuseIps)(nil),
		(*GetSpecType_UseDedicatedIps)(nil),
		(*GetSpecType_RouteAdvertisementMgmtNotSpecified)(nil),
		(*GetSpecType_RouteAdvertisementMgmtUsingF5Xc)(nil),
		(*GetSpecType_RouteAdvertisementMgmtNotUsingF5Xc)(nil),
		(*GetSpecType_DefaultTunnelBgpSecretNone)(nil),
		(*GetSpecType_DefaultTunnelBgpSecret)(nil),
		(*GetSpecType_AsPathChoiceFull)(nil),
		(*GetSpecType_AsPathChoiceOrigin)(nil),
		(*GetSpecType_AsPathChoiceNone)(nil),
	}
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.infraprotect_information.GlobalSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.infraprotect_information.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/infraprotect_information/types.proto", fileDescriptor_8a2a3e6209fce53f)
}

var fileDescriptor_8a2a3e6209fce53f = []byte{
	// 916 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x96, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x33, 0xdb, 0xb4, 0x75, 0xa6, 0xd0, 0xa6, 0xb3, 0x05, 0x39, 0x59, 0xd6, 0x44, 0x65,
	0x29, 0x45, 0x4a, 0xe3, 0x4d, 0xab, 0xc0, 0xb2, 0x12, 0x48, 0x78, 0xd9, 0xdd, 0x6e, 0x24, 0x0a,
	0x4a, 0x17, 0x0e, 0x2b, 0xa4, 0xd1, 0xc4, 0x9e, 0x38, 0x43, 0x6d, 0xcf, 0xc8, 0x1e, 0x67, 0x9b,
	0x1b, 0xea, 0x27, 0xe0, 0x80, 0xf8, 0x0c, 0x7c, 0x07, 0x5f, 0x7a, 0x44, 0x9c, 0x72, 0xec, 0x91,
	0xba, 0x17, 0x8e, 0x7b, 0xee, 0x09, 0x65, 0xe2, 0x2e, 0x49, 0x69, 0xb2, 0x15, 0x47, 0xd4, 0xdb,
	0xb3, 0xff, 0xef, 0xff, 0x7b, 0xf3, 0xc6, 0xd6, 0xd3, 0x83, 0xdb, 0x3d, 0x1a, 0xd5, 0x18, 0x37,
	0x23, 0xbb, 0x4b, 0x7d, 0x62, 0xb2, 0xa0, 0x13, 0x12, 0x11, 0x72, 0x49, 0x6d, 0x89, 0x59, 0xd0,
	0xe1, 0xa1, 0x4f, 0x24, 0xe3, 0x81, 0x29, 0xfb, 0x82, 0x46, 0xb5, 0xa1, 0xc2, 0xd1, 0xc6, 0xc8,
	0x53, 0x1b, 0x79, 0x6a, 0xd3, 0x3c, 0xe5, 0x2d, 0x97, 0xc9, 0x6e, 0xdc, 0xae, 0xd9, 0xdc, 0x37,
	0x5d, 0xee, 0x72, 0x53, 0xd9, 0xdb, 0x71, 0x47, 0x3d, 0xa9, 0x07, 0x15, 0x8d, 0xb0, 0xe5, 0xf7,
	0x5c, 0xce, 0x5d, 0x8f, 0x9a, 0x44, 0x30, 0x93, 0x04, 0x01, 0x97, 0x8a, 0x92, 0x15, 0x2d, 0x97,
	0x32, 0xf5, 0x35, 0x83, 0x04, 0xfd, 0x4c, 0xba, 0x33, 0xd9, 0x03, 0x17, 0xe3, 0xbe, 0xbb, 0x93,
	0xa2, 0xe8, 0x49, 0x3c, 0xd6, 0x4b, 0xb9, 0x34, 0x29, 0x8f, 0x4b, 0x95, 0x49, 0xa9, 0xc7, 0xe8,
	0x4b, 0x3c, 0xc1, 0x5e, 0x1f, 0x14, 0xe0, 0xf2, 0x53, 0x8f, 0xb7, 0x89, 0xb7, 0x2f, 0xa8, 0xfd,
	0xbc, 0x2f, 0x28, 0x2a, 0xc2, 0x39, 0x12, 0x05, 0x3a, 0xa8, 0x80, 0xcd, 0xf9, 0xd6, 0x30, 0x44,
	0x08, 0xe6, 0xe3, 0x98, 0x39, 0xfa, 0xad, 0x0a, 0xd8, 0x2c, 0xb4, 0x54, 0x8c, 0xca, 0x50, 0x13,
	0x21, 0xed, 0xb0, 0x43, 0x1a, 0xe9, 0x73, 0x95, 0xb9, 0xcd, 0x42, 0xeb, 0xf5, 0x33, 0xba, 0x03,
	0x0b, 0x24, 0x6c, 0xf3, 0x10, 0xdb, 0xcc, 0xd1, 0xf3, 0xca, 0xa4, 0xa9, 0x17, 0x8f, 0x98, 0x83,
	0xee, 0xc3, 0x35, 0x11, 0x32, 0x9f, 0x84, 0x7d, 0x1c, 0x50, 0xf9, 0x92, 0x87, 0x07, 0x38, 0x20,
	0x3e, 0xd5, 0xe7, 0x55, 0x1e, 0xca, 0xb4, 0xbd, 0x91, 0xb4, 0x47, 0x7c, 0x8a, 0x76, 0x60, 0x21,
	0xa4, 0x71, 0x44, 0x31, 0x13, 0x91, 0xbe, 0x58, 0x01, 0x9b, 0x4b, 0xdb, 0x6b, 0xb5, 0xc9, 0x0f,
	0xf8, 0xd8, 0x17, 0xb2, 0xbf, 0x9b, 0x6b, 0x69, 0x2a, 0xf1, 0x99, 0x88, 0x90, 0x05, 0x57, 0x87,
	0x16, 0x87, 0x3a, 0xcc, 0x26, 0x92, 0x3a, 0xca, 0xac, 0xcd, 0x34, 0xaf, 0xc4, 0x11, 0xfd, 0xea,
	0x22, 0x7f, 0xc8, 0xf8, 0x11, 0x6e, 0x84, 0x3c, 0x96, 0x14, 0x13, 0xa7, 0x47, 0x43, 0xc9, 0x22,
	0xea, 0xd3, 0x40, 0x62, 0xdf, 0xf5, 0x25, 0x0e, 0xb8, 0xc4, 0x91, 0xa0, 0x36, 0xeb, 0x30, 0xea,
	0xe8, 0x4b, 0x33, 0xc0, 0xa0, 0xb5, 0xae, 0x28, 0x5f, 0x8e, 0x43, 0xbe, 0x76, 0x7d, 0xb9, 0xc7,
	0xe5, 0xfe, 0x05, 0x01, 0x39, 0xf0, 0x83, 0xa9, 0xb5, 0xe2, 0x88, 0x05, 0x2e, 0xee, 0x34, 0x0e,
	0x6d, 0xfd, 0xad, 0x99, 0x85, 0xde, 0xbf, 0xba, 0xd0, 0x77, 0x43, 0xff, 0x93, 0xc6, 0xa1, 0x8d,
	0x0e, 0xe0, 0x47, 0x33, 0x3b, 0x1a, 0xab, 0xf4, 0xf6, 0x7f, 0x6c, 0xe9, 0x9f, 0x62, 0x2f, 0xa0,
	0xe1, 0xd0, 0x0e, 0x89, 0x3d, 0x89, 0x65, 0x1c, 0x04, 0xd4, 0xc3, 0x6d, 0x57, 0xe0, 0x88, 0xda,
	0x21, 0x1d, 0x56, 0x0b, 0xa8, 0xbe, 0x32, 0xa3, 0xc6, 0xad, 0x56, 0x39, 0x73, 0x3f, 0x57, 0x66,
	0xcb, 0x15, 0xfb, 0xca, 0xba, 0xc7, 0x03, 0x8a, 0xbe, 0x87, 0xa5, 0xa9, 0x6c, 0xbd, 0xa8, 0xb0,
	0xa5, 0x4b, 0xd8, 0x91, 0x7b, 0xf8, 0x8b, 0xef, 0xde, 0x6a, 0xbd, 0x7b, 0x35, 0x1b, 0x3d, 0x86,
	0xb7, 0x49, 0x84, 0x05, 0x91, 0x5d, 0x6c, 0x77, 0x39, 0xb3, 0x29, 0xee, 0xc4, 0x9e, 0xa7, 0xa3,
	0x19, 0x07, 0x9d, 0x6b, 0x15, 0x49, 0xf4, 0x2d, 0x91, 0xdd, 0x47, 0xca, 0xf0, 0x24, 0xf6, 0x3c,
	0xf4, 0x0c, 0xbe, 0x73, 0x09, 0xc3, 0x43, 0xe6, 0xb2, 0x40, 0xbf, 0x3d, 0x13, 0x84, 0xc6, 0x41,
	0xdf, 0x28, 0xc7, 0x15, 0x27, 0x52, 0x57, 0xb7, 0x76, 0xfd, 0x13, 0x0d, 0x2f, 0xcc, 0xaa, 0xc2,
	0x52, 0x76, 0x51, 0x9d, 0x06, 0x66, 0x02, 0xc7, 0x11, 0x71, 0x69, 0x46, 0x44, 0x2b, 0xc7, 0x09,
	0x58, 0x1c, 0x24, 0x60, 0x21, 0x4d, 0xc0, 0xdc, 0xa7, 0xd5, 0x07, 0xd6, 0xe7, 0xf0, 0xc3, 0x2b,
	0xff, 0x13, 0x12, 0x10, 0x77, 0x14, 0x66, 0xce, 0xb5, 0xe3, 0x04, 0x2c, 0x0d, 0x12, 0x00, 0xd3,
	0x04, 0x68, 0xf5, 0x7a, 0xb5, 0xbe, 0x5d, 0xad, 0xef, 0x58, 0x0d, 0x58, 0x99, 0xfe, 0xe5, 0x33,
	0xe7, 0xea, 0x71, 0x02, 0x56, 0x06, 0x09, 0x58, 0x4e, 0x13, 0x30, 0x5f, 0x6f, 0x54, 0xeb, 0x9f,
	0x58, 0x1b, 0x70, 0x79, 0xb2, 0x55, 0x85, 0x47, 0x83, 0x04, 0xac, 0x2a, 0xfc, 0x83, 0x6a, 0xfd,
	0xb3, 0xea, 0xf6, 0xfd, 0x66, 0x5e, 0x5b, 0x28, 0x2e, 0x36, 0xf3, 0x5a, 0xa1, 0x08, 0x9b, 0x79,
	0x0d, 0x16, 0x97, 0x9a, 0x79, 0x6d, 0xb9, 0xb8, 0xd2, 0xcc, 0x6b, 0xab, 0x45, 0xb4, 0xfe, 0x0b,
	0x84, 0x4b, 0x4f, 0xa9, 0xbc, 0x99, 0x67, 0x37, 0xf3, 0xec, 0x66, 0x9e, 0xfd, 0x5f, 0xe7, 0xd9,
	0xc3, 0xd5, 0x3f, 0xbe, 0xb8, 0xb4, 0xb8, 0x58, 0x0f, 0x67, 0x8d, 0xb8, 0xbb, 0x47, 0xe7, 0x60,
	0xba, 0x6c, 0xb5, 0xae, 0x3b, 0xf0, 0x3e, 0x3e, 0x3a, 0x07, 0xd7, 0x4b, 0xb5, 0x76, 0xaf, 0x31,
	0x05, 0xef, 0x1d, 0x9d, 0x83, 0x37, 0x66, 0x59, 0xf7, 0xfe, 0x35, 0x18, 0xd1, 0xd1, 0x39, 0xb8,
	0xf4, 0x6e, 0xf6, 0x58, 0xb4, 0x7e, 0x05, 0x83, 0x53, 0x23, 0x77, 0x72, 0x6a, 0xe4, 0x5e, 0x9d,
	0x1a, 0xe0, 0xa7, 0xd4, 0x00, 0xbf, 0xa5, 0x06, 0xf8, 0x3d, 0x35, 0xc0, 0x20, 0x35, 0xc0, 0x49,
	0x6a, 0x80, 0x3f, 0x53, 0x03, 0xfc, 0x95, 0x1a, 0xb9, 0x57, 0xa9, 0x01, 0x7e, 0x3e, 0x33, 0x72,
	0x83, 0x33, 0x23, 0x77, 0x72, 0x66, 0xe4, 0x5e, 0xfc, 0xe0, 0x72, 0x71, 0xe0, 0xd6, 0x7a, 0xdc,
	0x93, 0x34, 0x0c, 0x49, 0x2d, 0x8e, 0x4c, 0x15, 0x0c, 0xf7, 0xe4, 0x2d, 0x11, 0xf2, 0x1e, 0x73,
	0x68, 0xb8, 0x75, 0x21, 0x9b, 0xa2, 0xed, 0x72, 0x93, 0x1e, 0xca, 0x6c, 0xeb, 0x7c, 0xc3, 0x5e,
	0xde, 0x5e, 0x50, 0x9b, 0xe8, 0xce, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x39, 0x7f, 0x95,
	0xc8, 0x0b, 0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Asn != that1.Asn {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	if len(this.Prefixes) != len(that1.Prefixes) {
		return false
	}
	for i := range this.Prefixes {
		if this.Prefixes[i] != that1.Prefixes[i] {
			return false
		}
	}
	if this.ArborCid != that1.ArborCid {
		return false
	}
	if this.PrimaryNetworkName != that1.PrimaryNetworkName {
		return false
	}
	if that1.TunnelF5IpUsageChoice == nil {
		if this.TunnelF5IpUsageChoice != nil {
			return false
		}
	} else if this.TunnelF5IpUsageChoice == nil {
		return false
	} else if !this.TunnelF5IpUsageChoice.Equal(that1.TunnelF5IpUsageChoice) {
		return false
	}
	if that1.RouteAdvertisementManagementChoice == nil {
		if this.RouteAdvertisementManagementChoice != nil {
			return false
		}
	} else if this.RouteAdvertisementManagementChoice == nil {
		return false
	} else if !this.RouteAdvertisementManagementChoice.Equal(that1.RouteAdvertisementManagementChoice) {
		return false
	}
	if that1.DefaultTunnelBgpSecretChoice == nil {
		if this.DefaultTunnelBgpSecretChoice != nil {
			return false
		}
	} else if this.DefaultTunnelBgpSecretChoice == nil {
		return false
	} else if !this.DefaultTunnelBgpSecretChoice.Equal(that1.DefaultTunnelBgpSecretChoice) {
		return false
	}
	if that1.AsPathChoice == nil {
		if this.AsPathChoice != nil {
			return false
		}
	} else if this.AsPathChoice == nil {
		return false
	} else if !this.AsPathChoice.Equal(that1.AsPathChoice) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ReuseIps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ReuseIps)
	if !ok {
		that2, ok := that.(GlobalSpecType_ReuseIps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReuseIps.Equal(that1.ReuseIps) {
		return false
	}
	return true
}
func (this *GlobalSpecType_UseDedicatedIps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_UseDedicatedIps)
	if !ok {
		that2, ok := that.(GlobalSpecType_UseDedicatedIps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseDedicatedIps.Equal(that1.UseDedicatedIps) {
		return false
	}
	return true
}
func (this *GlobalSpecType_RouteAdvertisementMgmtNotSpecified) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_RouteAdvertisementMgmtNotSpecified)
	if !ok {
		that2, ok := that.(GlobalSpecType_RouteAdvertisementMgmtNotSpecified)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RouteAdvertisementMgmtNotSpecified.Equal(that1.RouteAdvertisementMgmtNotSpecified) {
		return false
	}
	return true
}
func (this *GlobalSpecType_RouteAdvertisementMgmtUsingF5Xc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_RouteAdvertisementMgmtUsingF5Xc)
	if !ok {
		that2, ok := that.(GlobalSpecType_RouteAdvertisementMgmtUsingF5Xc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RouteAdvertisementMgmtUsingF5Xc.Equal(that1.RouteAdvertisementMgmtUsingF5Xc) {
		return false
	}
	return true
}
func (this *GlobalSpecType_RouteAdvertisementMgmtNotUsingF5Xc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_RouteAdvertisementMgmtNotUsingF5Xc)
	if !ok {
		that2, ok := that.(GlobalSpecType_RouteAdvertisementMgmtNotUsingF5Xc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RouteAdvertisementMgmtNotUsingF5Xc.Equal(that1.RouteAdvertisementMgmtNotUsingF5Xc) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultTunnelBgpSecretNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultTunnelBgpSecretNone)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultTunnelBgpSecretNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultTunnelBgpSecretNone.Equal(that1.DefaultTunnelBgpSecretNone) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultTunnelBgpSecret) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultTunnelBgpSecret)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultTunnelBgpSecret)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultTunnelBgpSecret.Equal(that1.DefaultTunnelBgpSecret) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AsPathChoiceFull) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AsPathChoiceFull)
	if !ok {
		that2, ok := that.(GlobalSpecType_AsPathChoiceFull)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AsPathChoiceFull.Equal(that1.AsPathChoiceFull) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AsPathChoiceOrigin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AsPathChoiceOrigin)
	if !ok {
		that2, ok := that.(GlobalSpecType_AsPathChoiceOrigin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AsPathChoiceOrigin.Equal(that1.AsPathChoiceOrigin) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AsPathChoiceNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AsPathChoiceNone)
	if !ok {
		that2, ok := that.(GlobalSpecType_AsPathChoiceNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AsPathChoiceNone.Equal(that1.AsPathChoiceNone) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Asn != that1.Asn {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	if len(this.Prefixes) != len(that1.Prefixes) {
		return false
	}
	for i := range this.Prefixes {
		if this.Prefixes[i] != that1.Prefixes[i] {
			return false
		}
	}
	if this.ArborCid != that1.ArborCid {
		return false
	}
	if this.PrimaryNetworkName != that1.PrimaryNetworkName {
		return false
	}
	if that1.TunnelF5IpUsageChoice == nil {
		if this.TunnelF5IpUsageChoice != nil {
			return false
		}
	} else if this.TunnelF5IpUsageChoice == nil {
		return false
	} else if !this.TunnelF5IpUsageChoice.Equal(that1.TunnelF5IpUsageChoice) {
		return false
	}
	if that1.RouteAdvertisementManagementChoice == nil {
		if this.RouteAdvertisementManagementChoice != nil {
			return false
		}
	} else if this.RouteAdvertisementManagementChoice == nil {
		return false
	} else if !this.RouteAdvertisementManagementChoice.Equal(that1.RouteAdvertisementManagementChoice) {
		return false
	}
	if that1.DefaultTunnelBgpSecretChoice == nil {
		if this.DefaultTunnelBgpSecretChoice != nil {
			return false
		}
	} else if this.DefaultTunnelBgpSecretChoice == nil {
		return false
	} else if !this.DefaultTunnelBgpSecretChoice.Equal(that1.DefaultTunnelBgpSecretChoice) {
		return false
	}
	if that1.AsPathChoice == nil {
		if this.AsPathChoice != nil {
			return false
		}
	} else if this.AsPathChoice == nil {
		return false
	} else if !this.AsPathChoice.Equal(that1.AsPathChoice) {
		return false
	}
	return true
}
func (this *GetSpecType_ReuseIps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ReuseIps)
	if !ok {
		that2, ok := that.(GetSpecType_ReuseIps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReuseIps.Equal(that1.ReuseIps) {
		return false
	}
	return true
}
func (this *GetSpecType_UseDedicatedIps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_UseDedicatedIps)
	if !ok {
		that2, ok := that.(GetSpecType_UseDedicatedIps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseDedicatedIps.Equal(that1.UseDedicatedIps) {
		return false
	}
	return true
}
func (this *GetSpecType_RouteAdvertisementMgmtNotSpecified) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_RouteAdvertisementMgmtNotSpecified)
	if !ok {
		that2, ok := that.(GetSpecType_RouteAdvertisementMgmtNotSpecified)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RouteAdvertisementMgmtNotSpecified.Equal(that1.RouteAdvertisementMgmtNotSpecified) {
		return false
	}
	return true
}
func (this *GetSpecType_RouteAdvertisementMgmtUsingF5Xc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_RouteAdvertisementMgmtUsingF5Xc)
	if !ok {
		that2, ok := that.(GetSpecType_RouteAdvertisementMgmtUsingF5Xc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RouteAdvertisementMgmtUsingF5Xc.Equal(that1.RouteAdvertisementMgmtUsingF5Xc) {
		return false
	}
	return true
}
func (this *GetSpecType_RouteAdvertisementMgmtNotUsingF5Xc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_RouteAdvertisementMgmtNotUsingF5Xc)
	if !ok {
		that2, ok := that.(GetSpecType_RouteAdvertisementMgmtNotUsingF5Xc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RouteAdvertisementMgmtNotUsingF5Xc.Equal(that1.RouteAdvertisementMgmtNotUsingF5Xc) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultTunnelBgpSecretNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultTunnelBgpSecretNone)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultTunnelBgpSecretNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultTunnelBgpSecretNone.Equal(that1.DefaultTunnelBgpSecretNone) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultTunnelBgpSecret) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultTunnelBgpSecret)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultTunnelBgpSecret)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultTunnelBgpSecret.Equal(that1.DefaultTunnelBgpSecret) {
		return false
	}
	return true
}
func (this *GetSpecType_AsPathChoiceFull) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AsPathChoiceFull)
	if !ok {
		that2, ok := that.(GetSpecType_AsPathChoiceFull)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AsPathChoiceFull.Equal(that1.AsPathChoiceFull) {
		return false
	}
	return true
}
func (this *GetSpecType_AsPathChoiceOrigin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AsPathChoiceOrigin)
	if !ok {
		that2, ok := that.(GetSpecType_AsPathChoiceOrigin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AsPathChoiceOrigin.Equal(that1.AsPathChoiceOrigin) {
		return false
	}
	return true
}
func (this *GetSpecType_AsPathChoiceNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AsPathChoiceNone)
	if !ok {
		that2, ok := that.(GetSpecType_AsPathChoiceNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AsPathChoiceNone.Equal(that1.AsPathChoiceNone) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&infraprotect_information.GlobalSpecType{")
	s = append(s, "Asn: "+fmt.Sprintf("%#v", this.Asn)+",\n")
	s = append(s, "Uuid: "+fmt.Sprintf("%#v", this.Uuid)+",\n")
	s = append(s, "Prefixes: "+fmt.Sprintf("%#v", this.Prefixes)+",\n")
	s = append(s, "ArborCid: "+fmt.Sprintf("%#v", this.ArborCid)+",\n")
	s = append(s, "PrimaryNetworkName: "+fmt.Sprintf("%#v", this.PrimaryNetworkName)+",\n")
	if this.TunnelF5IpUsageChoice != nil {
		s = append(s, "TunnelF5IpUsageChoice: "+fmt.Sprintf("%#v", this.TunnelF5IpUsageChoice)+",\n")
	}
	if this.RouteAdvertisementManagementChoice != nil {
		s = append(s, "RouteAdvertisementManagementChoice: "+fmt.Sprintf("%#v", this.RouteAdvertisementManagementChoice)+",\n")
	}
	if this.DefaultTunnelBgpSecretChoice != nil {
		s = append(s, "DefaultTunnelBgpSecretChoice: "+fmt.Sprintf("%#v", this.DefaultTunnelBgpSecretChoice)+",\n")
	}
	if this.AsPathChoice != nil {
		s = append(s, "AsPathChoice: "+fmt.Sprintf("%#v", this.AsPathChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_ReuseIps) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_information.GlobalSpecType_ReuseIps{` +
		`ReuseIps:` + fmt.Sprintf("%#v", this.ReuseIps) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_UseDedicatedIps) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_information.GlobalSpecType_UseDedicatedIps{` +
		`UseDedicatedIps:` + fmt.Sprintf("%#v", this.UseDedicatedIps) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_RouteAdvertisementMgmtNotSpecified) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_information.GlobalSpecType_RouteAdvertisementMgmtNotSpecified{` +
		`RouteAdvertisementMgmtNotSpecified:` + fmt.Sprintf("%#v", this.RouteAdvertisementMgmtNotSpecified) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_RouteAdvertisementMgmtUsingF5Xc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_information.GlobalSpecType_RouteAdvertisementMgmtUsingF5Xc{` +
		`RouteAdvertisementMgmtUsingF5Xc:` + fmt.Sprintf("%#v", this.RouteAdvertisementMgmtUsingF5Xc) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_RouteAdvertisementMgmtNotUsingF5Xc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_information.GlobalSpecType_RouteAdvertisementMgmtNotUsingF5Xc{` +
		`RouteAdvertisementMgmtNotUsingF5Xc:` + fmt.Sprintf("%#v", this.RouteAdvertisementMgmtNotUsingF5Xc) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultTunnelBgpSecretNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_information.GlobalSpecType_DefaultTunnelBgpSecretNone{` +
		`DefaultTunnelBgpSecretNone:` + fmt.Sprintf("%#v", this.DefaultTunnelBgpSecretNone) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultTunnelBgpSecret) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_information.GlobalSpecType_DefaultTunnelBgpSecret{` +
		`DefaultTunnelBgpSecret:` + fmt.Sprintf("%#v", this.DefaultTunnelBgpSecret) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AsPathChoiceFull) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_information.GlobalSpecType_AsPathChoiceFull{` +
		`AsPathChoiceFull:` + fmt.Sprintf("%#v", this.AsPathChoiceFull) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AsPathChoiceOrigin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_information.GlobalSpecType_AsPathChoiceOrigin{` +
		`AsPathChoiceOrigin:` + fmt.Sprintf("%#v", this.AsPathChoiceOrigin) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AsPathChoiceNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_information.GlobalSpecType_AsPathChoiceNone{` +
		`AsPathChoiceNone:` + fmt.Sprintf("%#v", this.AsPathChoiceNone) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&infraprotect_information.GetSpecType{")
	s = append(s, "Asn: "+fmt.Sprintf("%#v", this.Asn)+",\n")
	s = append(s, "Uuid: "+fmt.Sprintf("%#v", this.Uuid)+",\n")
	s = append(s, "Prefixes: "+fmt.Sprintf("%#v", this.Prefixes)+",\n")
	s = append(s, "ArborCid: "+fmt.Sprintf("%#v", this.ArborCid)+",\n")
	s = append(s, "PrimaryNetworkName: "+fmt.Sprintf("%#v", this.PrimaryNetworkName)+",\n")
	if this.TunnelF5IpUsageChoice != nil {
		s = append(s, "TunnelF5IpUsageChoice: "+fmt.Sprintf("%#v", this.TunnelF5IpUsageChoice)+",\n")
	}
	if this.RouteAdvertisementManagementChoice != nil {
		s = append(s, "RouteAdvertisementManagementChoice: "+fmt.Sprintf("%#v", this.RouteAdvertisementManagementChoice)+",\n")
	}
	if this.DefaultTunnelBgpSecretChoice != nil {
		s = append(s, "DefaultTunnelBgpSecretChoice: "+fmt.Sprintf("%#v", this.DefaultTunnelBgpSecretChoice)+",\n")
	}
	if this.AsPathChoice != nil {
		s = append(s, "AsPathChoice: "+fmt.Sprintf("%#v", this.AsPathChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_ReuseIps) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_information.GetSpecType_ReuseIps{` +
		`ReuseIps:` + fmt.Sprintf("%#v", this.ReuseIps) + `}`}, ", ")
	return s
}
func (this *GetSpecType_UseDedicatedIps) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_information.GetSpecType_UseDedicatedIps{` +
		`UseDedicatedIps:` + fmt.Sprintf("%#v", this.UseDedicatedIps) + `}`}, ", ")
	return s
}
func (this *GetSpecType_RouteAdvertisementMgmtNotSpecified) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_information.GetSpecType_RouteAdvertisementMgmtNotSpecified{` +
		`RouteAdvertisementMgmtNotSpecified:` + fmt.Sprintf("%#v", this.RouteAdvertisementMgmtNotSpecified) + `}`}, ", ")
	return s
}
func (this *GetSpecType_RouteAdvertisementMgmtUsingF5Xc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_information.GetSpecType_RouteAdvertisementMgmtUsingF5Xc{` +
		`RouteAdvertisementMgmtUsingF5Xc:` + fmt.Sprintf("%#v", this.RouteAdvertisementMgmtUsingF5Xc) + `}`}, ", ")
	return s
}
func (this *GetSpecType_RouteAdvertisementMgmtNotUsingF5Xc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_information.GetSpecType_RouteAdvertisementMgmtNotUsingF5Xc{` +
		`RouteAdvertisementMgmtNotUsingF5Xc:` + fmt.Sprintf("%#v", this.RouteAdvertisementMgmtNotUsingF5Xc) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultTunnelBgpSecretNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_information.GetSpecType_DefaultTunnelBgpSecretNone{` +
		`DefaultTunnelBgpSecretNone:` + fmt.Sprintf("%#v", this.DefaultTunnelBgpSecretNone) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultTunnelBgpSecret) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_information.GetSpecType_DefaultTunnelBgpSecret{` +
		`DefaultTunnelBgpSecret:` + fmt.Sprintf("%#v", this.DefaultTunnelBgpSecret) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AsPathChoiceFull) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_information.GetSpecType_AsPathChoiceFull{` +
		`AsPathChoiceFull:` + fmt.Sprintf("%#v", this.AsPathChoiceFull) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AsPathChoiceOrigin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_information.GetSpecType_AsPathChoiceOrigin{` +
		`AsPathChoiceOrigin:` + fmt.Sprintf("%#v", this.AsPathChoiceOrigin) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AsPathChoiceNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_information.GetSpecType_AsPathChoiceNone{` +
		`AsPathChoiceNone:` + fmt.Sprintf("%#v", this.AsPathChoiceNone) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AsPathChoice != nil {
		{
			size := m.AsPathChoice.Size()
			i -= size
			if _, err := m.AsPathChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DefaultTunnelBgpSecretChoice != nil {
		{
			size := m.DefaultTunnelBgpSecretChoice.Size()
			i -= size
			if _, err := m.DefaultTunnelBgpSecretChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RouteAdvertisementManagementChoice != nil {
		{
			size := m.RouteAdvertisementManagementChoice.Size()
			i -= size
			if _, err := m.RouteAdvertisementManagementChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TunnelF5IpUsageChoice != nil {
		{
			size := m.TunnelF5IpUsageChoice.Size()
			i -= size
			if _, err := m.TunnelF5IpUsageChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.PrimaryNetworkName) > 0 {
		i -= len(m.PrimaryNetworkName)
		copy(dAtA[i:], m.PrimaryNetworkName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PrimaryNetworkName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ArborCid) > 0 {
		i -= len(m.ArborCid)
		copy(dAtA[i:], m.ArborCid)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ArborCid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Prefixes) > 0 {
		for iNdEx := len(m.Prefixes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Prefixes[iNdEx])
			copy(dAtA[i:], m.Prefixes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Prefixes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Asn != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Asn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_ReuseIps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ReuseIps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReuseIps != nil {
		{
			size, err := m.ReuseIps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_UseDedicatedIps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_UseDedicatedIps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseDedicatedIps != nil {
		{
			size, err := m.UseDedicatedIps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_RouteAdvertisementMgmtNotSpecified) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_RouteAdvertisementMgmtNotSpecified) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RouteAdvertisementMgmtNotSpecified != nil {
		{
			size, err := m.RouteAdvertisementMgmtNotSpecified.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_RouteAdvertisementMgmtUsingF5Xc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_RouteAdvertisementMgmtUsingF5Xc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RouteAdvertisementMgmtUsingF5Xc != nil {
		{
			size, err := m.RouteAdvertisementMgmtUsingF5Xc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_RouteAdvertisementMgmtNotUsingF5Xc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_RouteAdvertisementMgmtNotUsingF5Xc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RouteAdvertisementMgmtNotUsingF5Xc != nil {
		{
			size, err := m.RouteAdvertisementMgmtNotUsingF5Xc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultTunnelBgpSecretNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultTunnelBgpSecretNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultTunnelBgpSecretNone != nil {
		{
			size, err := m.DefaultTunnelBgpSecretNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultTunnelBgpSecret) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultTunnelBgpSecret) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultTunnelBgpSecret != nil {
		{
			size, err := m.DefaultTunnelBgpSecret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AsPathChoiceFull) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AsPathChoiceFull) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AsPathChoiceFull != nil {
		{
			size, err := m.AsPathChoiceFull.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AsPathChoiceOrigin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AsPathChoiceOrigin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AsPathChoiceOrigin != nil {
		{
			size, err := m.AsPathChoiceOrigin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AsPathChoiceNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AsPathChoiceNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AsPathChoiceNone != nil {
		{
			size, err := m.AsPathChoiceNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AsPathChoice != nil {
		{
			size := m.AsPathChoice.Size()
			i -= size
			if _, err := m.AsPathChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DefaultTunnelBgpSecretChoice != nil {
		{
			size := m.DefaultTunnelBgpSecretChoice.Size()
			i -= size
			if _, err := m.DefaultTunnelBgpSecretChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RouteAdvertisementManagementChoice != nil {
		{
			size := m.RouteAdvertisementManagementChoice.Size()
			i -= size
			if _, err := m.RouteAdvertisementManagementChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TunnelF5IpUsageChoice != nil {
		{
			size := m.TunnelF5IpUsageChoice.Size()
			i -= size
			if _, err := m.TunnelF5IpUsageChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.PrimaryNetworkName) > 0 {
		i -= len(m.PrimaryNetworkName)
		copy(dAtA[i:], m.PrimaryNetworkName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PrimaryNetworkName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ArborCid) > 0 {
		i -= len(m.ArborCid)
		copy(dAtA[i:], m.ArborCid)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ArborCid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Prefixes) > 0 {
		for iNdEx := len(m.Prefixes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Prefixes[iNdEx])
			copy(dAtA[i:], m.Prefixes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Prefixes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Asn != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Asn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_ReuseIps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ReuseIps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReuseIps != nil {
		{
			size, err := m.ReuseIps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_UseDedicatedIps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_UseDedicatedIps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseDedicatedIps != nil {
		{
			size, err := m.UseDedicatedIps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_RouteAdvertisementMgmtNotSpecified) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_RouteAdvertisementMgmtNotSpecified) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RouteAdvertisementMgmtNotSpecified != nil {
		{
			size, err := m.RouteAdvertisementMgmtNotSpecified.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_RouteAdvertisementMgmtUsingF5Xc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_RouteAdvertisementMgmtUsingF5Xc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RouteAdvertisementMgmtUsingF5Xc != nil {
		{
			size, err := m.RouteAdvertisementMgmtUsingF5Xc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_RouteAdvertisementMgmtNotUsingF5Xc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_RouteAdvertisementMgmtNotUsingF5Xc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RouteAdvertisementMgmtNotUsingF5Xc != nil {
		{
			size, err := m.RouteAdvertisementMgmtNotUsingF5Xc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultTunnelBgpSecretNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultTunnelBgpSecretNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultTunnelBgpSecretNone != nil {
		{
			size, err := m.DefaultTunnelBgpSecretNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultTunnelBgpSecret) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultTunnelBgpSecret) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultTunnelBgpSecret != nil {
		{
			size, err := m.DefaultTunnelBgpSecret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AsPathChoiceFull) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AsPathChoiceFull) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AsPathChoiceFull != nil {
		{
			size, err := m.AsPathChoiceFull.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AsPathChoiceOrigin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AsPathChoiceOrigin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AsPathChoiceOrigin != nil {
		{
			size, err := m.AsPathChoiceOrigin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AsPathChoiceNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AsPathChoiceNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AsPathChoiceNone != nil {
		{
			size, err := m.AsPathChoiceNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Asn != 0 {
		n += 1 + sovTypes(uint64(m.Asn))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Prefixes) > 0 {
		for _, s := range m.Prefixes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.ArborCid)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PrimaryNetworkName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TunnelF5IpUsageChoice != nil {
		n += m.TunnelF5IpUsageChoice.Size()
	}
	if m.RouteAdvertisementManagementChoice != nil {
		n += m.RouteAdvertisementManagementChoice.Size()
	}
	if m.DefaultTunnelBgpSecretChoice != nil {
		n += m.DefaultTunnelBgpSecretChoice.Size()
	}
	if m.AsPathChoice != nil {
		n += m.AsPathChoice.Size()
	}
	return n
}

func (m *GlobalSpecType_ReuseIps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReuseIps != nil {
		l = m.ReuseIps.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_UseDedicatedIps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseDedicatedIps != nil {
		l = m.UseDedicatedIps.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_RouteAdvertisementMgmtNotSpecified) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RouteAdvertisementMgmtNotSpecified != nil {
		l = m.RouteAdvertisementMgmtNotSpecified.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_RouteAdvertisementMgmtUsingF5Xc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RouteAdvertisementMgmtUsingF5Xc != nil {
		l = m.RouteAdvertisementMgmtUsingF5Xc.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_RouteAdvertisementMgmtNotUsingF5Xc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RouteAdvertisementMgmtNotUsingF5Xc != nil {
		l = m.RouteAdvertisementMgmtNotUsingF5Xc.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultTunnelBgpSecretNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultTunnelBgpSecretNone != nil {
		l = m.DefaultTunnelBgpSecretNone.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultTunnelBgpSecret) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultTunnelBgpSecret != nil {
		l = m.DefaultTunnelBgpSecret.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AsPathChoiceFull) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AsPathChoiceFull != nil {
		l = m.AsPathChoiceFull.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AsPathChoiceOrigin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AsPathChoiceOrigin != nil {
		l = m.AsPathChoiceOrigin.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AsPathChoiceNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AsPathChoiceNone != nil {
		l = m.AsPathChoiceNone.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Asn != 0 {
		n += 1 + sovTypes(uint64(m.Asn))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Prefixes) > 0 {
		for _, s := range m.Prefixes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.ArborCid)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PrimaryNetworkName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TunnelF5IpUsageChoice != nil {
		n += m.TunnelF5IpUsageChoice.Size()
	}
	if m.RouteAdvertisementManagementChoice != nil {
		n += m.RouteAdvertisementManagementChoice.Size()
	}
	if m.DefaultTunnelBgpSecretChoice != nil {
		n += m.DefaultTunnelBgpSecretChoice.Size()
	}
	if m.AsPathChoice != nil {
		n += m.AsPathChoice.Size()
	}
	return n
}

func (m *GetSpecType_ReuseIps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReuseIps != nil {
		l = m.ReuseIps.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_UseDedicatedIps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseDedicatedIps != nil {
		l = m.UseDedicatedIps.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_RouteAdvertisementMgmtNotSpecified) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RouteAdvertisementMgmtNotSpecified != nil {
		l = m.RouteAdvertisementMgmtNotSpecified.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_RouteAdvertisementMgmtUsingF5Xc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RouteAdvertisementMgmtUsingF5Xc != nil {
		l = m.RouteAdvertisementMgmtUsingF5Xc.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_RouteAdvertisementMgmtNotUsingF5Xc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RouteAdvertisementMgmtNotUsingF5Xc != nil {
		l = m.RouteAdvertisementMgmtNotUsingF5Xc.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultTunnelBgpSecretNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultTunnelBgpSecretNone != nil {
		l = m.DefaultTunnelBgpSecretNone.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultTunnelBgpSecret) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultTunnelBgpSecret != nil {
		l = m.DefaultTunnelBgpSecret.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AsPathChoiceFull) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AsPathChoiceFull != nil {
		l = m.AsPathChoiceFull.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AsPathChoiceOrigin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AsPathChoiceOrigin != nil {
		l = m.AsPathChoiceOrigin.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AsPathChoiceNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AsPathChoiceNone != nil {
		l = m.AsPathChoiceNone.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Asn:` + fmt.Sprintf("%v", this.Asn) + `,`,
		`Uuid:` + fmt.Sprintf("%v", this.Uuid) + `,`,
		`Prefixes:` + fmt.Sprintf("%v", this.Prefixes) + `,`,
		`ArborCid:` + fmt.Sprintf("%v", this.ArborCid) + `,`,
		`PrimaryNetworkName:` + fmt.Sprintf("%v", this.PrimaryNetworkName) + `,`,
		`TunnelF5IpUsageChoice:` + fmt.Sprintf("%v", this.TunnelF5IpUsageChoice) + `,`,
		`RouteAdvertisementManagementChoice:` + fmt.Sprintf("%v", this.RouteAdvertisementManagementChoice) + `,`,
		`DefaultTunnelBgpSecretChoice:` + fmt.Sprintf("%v", this.DefaultTunnelBgpSecretChoice) + `,`,
		`AsPathChoice:` + fmt.Sprintf("%v", this.AsPathChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ReuseIps) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ReuseIps{`,
		`ReuseIps:` + strings.Replace(fmt.Sprintf("%v", this.ReuseIps), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_UseDedicatedIps) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_UseDedicatedIps{`,
		`UseDedicatedIps:` + strings.Replace(fmt.Sprintf("%v", this.UseDedicatedIps), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_RouteAdvertisementMgmtNotSpecified) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_RouteAdvertisementMgmtNotSpecified{`,
		`RouteAdvertisementMgmtNotSpecified:` + strings.Replace(fmt.Sprintf("%v", this.RouteAdvertisementMgmtNotSpecified), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_RouteAdvertisementMgmtUsingF5Xc) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_RouteAdvertisementMgmtUsingF5Xc{`,
		`RouteAdvertisementMgmtUsingF5Xc:` + strings.Replace(fmt.Sprintf("%v", this.RouteAdvertisementMgmtUsingF5Xc), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_RouteAdvertisementMgmtNotUsingF5Xc) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_RouteAdvertisementMgmtNotUsingF5Xc{`,
		`RouteAdvertisementMgmtNotUsingF5Xc:` + strings.Replace(fmt.Sprintf("%v", this.RouteAdvertisementMgmtNotUsingF5Xc), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultTunnelBgpSecretNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultTunnelBgpSecretNone{`,
		`DefaultTunnelBgpSecretNone:` + strings.Replace(fmt.Sprintf("%v", this.DefaultTunnelBgpSecretNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultTunnelBgpSecret) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultTunnelBgpSecret{`,
		`DefaultTunnelBgpSecret:` + strings.Replace(fmt.Sprintf("%v", this.DefaultTunnelBgpSecret), "SecretType", "schema.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AsPathChoiceFull) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AsPathChoiceFull{`,
		`AsPathChoiceFull:` + strings.Replace(fmt.Sprintf("%v", this.AsPathChoiceFull), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AsPathChoiceOrigin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AsPathChoiceOrigin{`,
		`AsPathChoiceOrigin:` + strings.Replace(fmt.Sprintf("%v", this.AsPathChoiceOrigin), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AsPathChoiceNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AsPathChoiceNone{`,
		`AsPathChoiceNone:` + strings.Replace(fmt.Sprintf("%v", this.AsPathChoiceNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Asn:` + fmt.Sprintf("%v", this.Asn) + `,`,
		`Uuid:` + fmt.Sprintf("%v", this.Uuid) + `,`,
		`Prefixes:` + fmt.Sprintf("%v", this.Prefixes) + `,`,
		`ArborCid:` + fmt.Sprintf("%v", this.ArborCid) + `,`,
		`PrimaryNetworkName:` + fmt.Sprintf("%v", this.PrimaryNetworkName) + `,`,
		`TunnelF5IpUsageChoice:` + fmt.Sprintf("%v", this.TunnelF5IpUsageChoice) + `,`,
		`RouteAdvertisementManagementChoice:` + fmt.Sprintf("%v", this.RouteAdvertisementManagementChoice) + `,`,
		`DefaultTunnelBgpSecretChoice:` + fmt.Sprintf("%v", this.DefaultTunnelBgpSecretChoice) + `,`,
		`AsPathChoice:` + fmt.Sprintf("%v", this.AsPathChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ReuseIps) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ReuseIps{`,
		`ReuseIps:` + strings.Replace(fmt.Sprintf("%v", this.ReuseIps), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_UseDedicatedIps) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_UseDedicatedIps{`,
		`UseDedicatedIps:` + strings.Replace(fmt.Sprintf("%v", this.UseDedicatedIps), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_RouteAdvertisementMgmtNotSpecified) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_RouteAdvertisementMgmtNotSpecified{`,
		`RouteAdvertisementMgmtNotSpecified:` + strings.Replace(fmt.Sprintf("%v", this.RouteAdvertisementMgmtNotSpecified), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_RouteAdvertisementMgmtUsingF5Xc) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_RouteAdvertisementMgmtUsingF5Xc{`,
		`RouteAdvertisementMgmtUsingF5Xc:` + strings.Replace(fmt.Sprintf("%v", this.RouteAdvertisementMgmtUsingF5Xc), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_RouteAdvertisementMgmtNotUsingF5Xc) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_RouteAdvertisementMgmtNotUsingF5Xc{`,
		`RouteAdvertisementMgmtNotUsingF5Xc:` + strings.Replace(fmt.Sprintf("%v", this.RouteAdvertisementMgmtNotUsingF5Xc), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultTunnelBgpSecretNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultTunnelBgpSecretNone{`,
		`DefaultTunnelBgpSecretNone:` + strings.Replace(fmt.Sprintf("%v", this.DefaultTunnelBgpSecretNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultTunnelBgpSecret) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultTunnelBgpSecret{`,
		`DefaultTunnelBgpSecret:` + strings.Replace(fmt.Sprintf("%v", this.DefaultTunnelBgpSecret), "SecretType", "schema.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AsPathChoiceFull) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AsPathChoiceFull{`,
		`AsPathChoiceFull:` + strings.Replace(fmt.Sprintf("%v", this.AsPathChoiceFull), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AsPathChoiceOrigin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AsPathChoiceOrigin{`,
		`AsPathChoiceOrigin:` + strings.Replace(fmt.Sprintf("%v", this.AsPathChoiceOrigin), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AsPathChoiceNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AsPathChoiceNone{`,
		`AsPathChoiceNone:` + strings.Replace(fmt.Sprintf("%v", this.AsPathChoiceNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asn", wireType)
			}
			m.Asn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Asn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefixes = append(m.Prefixes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArborCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArborCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryNetworkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryNetworkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReuseIps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TunnelF5IpUsageChoice = &GlobalSpecType_ReuseIps{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseDedicatedIps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TunnelF5IpUsageChoice = &GlobalSpecType_UseDedicatedIps{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteAdvertisementMgmtNotSpecified", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RouteAdvertisementManagementChoice = &GlobalSpecType_RouteAdvertisementMgmtNotSpecified{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteAdvertisementMgmtUsingF5Xc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RouteAdvertisementManagementChoice = &GlobalSpecType_RouteAdvertisementMgmtUsingF5Xc{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteAdvertisementMgmtNotUsingF5Xc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RouteAdvertisementManagementChoice = &GlobalSpecType_RouteAdvertisementMgmtNotUsingF5Xc{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTunnelBgpSecretNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultTunnelBgpSecretChoice = &GlobalSpecType_DefaultTunnelBgpSecretNone{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTunnelBgpSecret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.SecretType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultTunnelBgpSecretChoice = &GlobalSpecType_DefaultTunnelBgpSecret{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsPathChoiceFull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AsPathChoice = &GlobalSpecType_AsPathChoiceFull{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsPathChoiceOrigin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AsPathChoice = &GlobalSpecType_AsPathChoiceOrigin{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsPathChoiceNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AsPathChoice = &GlobalSpecType_AsPathChoiceNone{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asn", wireType)
			}
			m.Asn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Asn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefixes = append(m.Prefixes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArborCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArborCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryNetworkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryNetworkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReuseIps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TunnelF5IpUsageChoice = &GetSpecType_ReuseIps{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseDedicatedIps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TunnelF5IpUsageChoice = &GetSpecType_UseDedicatedIps{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteAdvertisementMgmtNotSpecified", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RouteAdvertisementManagementChoice = &GetSpecType_RouteAdvertisementMgmtNotSpecified{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteAdvertisementMgmtUsingF5Xc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RouteAdvertisementManagementChoice = &GetSpecType_RouteAdvertisementMgmtUsingF5Xc{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteAdvertisementMgmtNotUsingF5Xc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RouteAdvertisementManagementChoice = &GetSpecType_RouteAdvertisementMgmtNotUsingF5Xc{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTunnelBgpSecretNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultTunnelBgpSecretChoice = &GetSpecType_DefaultTunnelBgpSecretNone{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTunnelBgpSecret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.SecretType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultTunnelBgpSecretChoice = &GetSpecType_DefaultTunnelBgpSecret{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsPathChoiceFull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AsPathChoice = &GetSpecType_AsPathChoiceFull{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsPathChoiceOrigin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AsPathChoice = &GetSpecType_AsPathChoiceOrigin{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsPathChoiceNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AsPathChoice = &GetSpecType_AsPathChoiceNone{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
