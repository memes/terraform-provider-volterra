// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/user/types.proto

package user

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// UserType
//
// x-displayName: "User Type"
// UserType is to identify the type of user
type UserType int32

const (
	// User
	// x-displayName: "User"
	// Regular User
	USER UserType = 0
	// Service User
	// x-displayName: "Service User"
	// User for accessing only APIs/services
	SERVICE UserType = 1
	// Debug
	// x-displayName: "Debug"
	// User which was created by tenant admin for volterra-support team.
	DEBUG UserType = 2 // Deprecated: Do not use.
)

var UserType_name = map[int32]string{
	0: "USER",
	1: "SERVICE",
	2: "DEBUG",
}

var UserType_value = map[string]int32{
	"USER":    0,
	"SERVICE": 1,
	"DEBUG":   2,
}

func (UserType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77a653d12f15e181, []int{0}
}

// IDM Type
//
// x-displayName: "Identity Management Type"
// IdmType is to identify who is managing the user.
type IdmType int32

const (
	// SSO User
	// x-displayName: "SSO User"
	// Externally managed Single Sign On based user imported into UAM.
	SSO IdmType = 0
	// F5XC Managed Local user
	// x-displayName: "F5XC Managed User"
	// F5XC managed local user. Full user life cycle is managed by volterra UAM and Identity.
	VOLTERRA_MANAGED IdmType = 10
	// Undefined
	// x-displayName: "Undefined"
	// Undefined IDM type
	UNDEFINED IdmType = 30
)

var IdmType_name = map[int32]string{
	0:  "SSO",
	10: "VOLTERRA_MANAGED",
	30: "UNDEFINED",
}

var IdmType_value = map[string]int32{
	"SSO":              0,
	"VOLTERRA_MANAGED": 10,
	"UNDEFINED":        30,
}

func (IdmType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77a653d12f15e181, []int{1}
}

// UserState
//
// x-displayName: "User State"
// UserState defines the state of the user
type UserState int32

const (
	// New
	//
	// x-displayName: "New"
	// User was created(request for creating user was received and object created)
	NEW UserState = 0
	// Removed
	//
	// x-displayName: "Removed"
	// User is removed
	REMOVED UserState = 2
)

var UserState_name = map[int32]string{
	0: "NEW",
	2: "REMOVED",
}

var UserState_value = map[string]int32{
	"NEW":     0,
	"REMOVED": 2,
}

func (UserState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77a653d12f15e181, []int{2}
}

// States
//
// x-displayName: "States"
// States describes possible states for user.
type FSMState int32

const (
	// StateUndefined
	//
	// x-displayName: "StateUndefined"
	// User state when it was created without any state.
	StateUndefined FSMState = 0
	// StateCreating
	//
	// x-displayName: "StateCreating"
	// User state during initial creation. It includes registering in IDM, creating user-settings object, etc...
	StateCreating FSMState = 1
	// StateCreateFailed
	//
	// x-displayName: "StateCreateFailed"
	// User state when initial creation was failed by some reason and must be retried
	// after issue is solved.
	StateCreateFailed FSMState = 2
	// StateActive
	//
	// x-displayName: "StateActive"
	// User state of completely created and available to use user.
	StateActive FSMState = 3
	// StateDisabled
	//
	// x-displayName: "StateDisabled"
	// User is currently disabled, login is not possible for this user, but it may become active again in the future.
	StateDisabled FSMState = 4
)

var FSMState_name = map[int32]string{
	0: "StateUndefined",
	1: "StateCreating",
	2: "StateCreateFailed",
	3: "StateActive",
	4: "StateDisabled",
}

var FSMState_value = map[string]int32{
	"StateUndefined":    0,
	"StateCreating":     1,
	"StateCreateFailed": 2,
	"StateActive":       3,
	"StateDisabled":     4,
}

func (FSMState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77a653d12f15e181, []int{3}
}

// OperStatus
//
// x-displayName: "OperStatus"
// OperStatus defines the operational state of the user
// which will be returned as part of API calls
type OperStatus int32

const (
	// OperStatusUndefined
	//
	// x-displayName: "Undefined"
	// User state when it was created without any state.
	OperStatusUndefined OperStatus = 0
	// OperStatusProvisioning
	//
	// x-displayName: "Provisioning"
	// User creating state
	OperStatusProvisioning OperStatus = 1
	// OperStatusProvisioningFailed
	//
	// x-displayName: "ProvisioningFailed"
	// Status for User creation failed
	OperStatusProvisioningFailed OperStatus = 2
	// OperStatusActive
	//
	// x-displayName: "Active"
	// User is created and available
	OperStatusActive OperStatus = 3
	// OperStatusDisabled
	//
	// x-displayName: "Disabled"
	// Status of the disabled user
	OperStatusDisabled OperStatus = 4
	// OperStatusNotFound
	//
	// x-displayName: "NotFound"
	// User not found.
	OperStatusNotFound OperStatus = 5
	// OperStatusInvalid
	//
	// x-displayName: "Invalid"
	// Status of state in which user attributes are not
	// correctly created in the DB or in IAM
	OperStatusInvalid OperStatus = 6
	// OperStatusFoundOnlyInIdm
	//
	// x-displayName: "FoundOnlyInIdm"
	// State of a user which is available in IDM but not in the DB
	OperStatusFoundOnlyInIdm OperStatus = 7
)

var OperStatus_name = map[int32]string{
	0: "OperStatusUndefined",
	1: "OperStatusProvisioning",
	2: "OperStatusProvisioningFailed",
	3: "OperStatusActive",
	4: "OperStatusDisabled",
	5: "OperStatusNotFound",
	6: "OperStatusInvalid",
	7: "OperStatusFoundOnlyInIdm",
}

var OperStatus_value = map[string]int32{
	"OperStatusUndefined":          0,
	"OperStatusProvisioning":       1,
	"OperStatusProvisioningFailed": 2,
	"OperStatusActive":             3,
	"OperStatusDisabled":           4,
	"OperStatusNotFound":           5,
	"OperStatusInvalid":            6,
	"OperStatusFoundOnlyInIdm":     7,
}

func (OperStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77a653d12f15e181, []int{4}
}

// AddonServiceStatus
//
// x-displayName: "Addon Service Status"
// displays current state and access of an addon service for the user of tenant.
type AddonServiceStatus struct {
	// state
	//
	// x-displayName: "Addon Service State"
	// Addon service current state
	State schema.AddonServiceState `protobuf:"varint,1,opt,name=state,proto3,enum=ves.io.schema.AddonServiceState" json:"state,omitempty"`
	// access
	//
	// x-displayName: "Access control status"
	// Access evaluation result - pbac-deny, rbac-deny or allowed.
	Access schema.AddonServiceAccess `protobuf:"varint,2,opt,name=access,proto3,enum=ves.io.schema.AddonServiceAccess" json:"access,omitempty"`
	// display_name
	//
	// x-displayName: "Display Name"
	// Name to use for display purposes
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (m *AddonServiceStatus) Reset()      { *m = AddonServiceStatus{} }
func (*AddonServiceStatus) ProtoMessage() {}
func (*AddonServiceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a653d12f15e181, []int{0}
}
func (m *AddonServiceStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddonServiceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AddonServiceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddonServiceStatus.Merge(m, src)
}
func (m *AddonServiceStatus) XXX_Size() int {
	return m.Size()
}
func (m *AddonServiceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AddonServiceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AddonServiceStatus proto.InternalMessageInfo

func (m *AddonServiceStatus) GetState() schema.AddonServiceState {
	if m != nil {
		return m.State
	}
	return schema.AS_NONE
}

func (m *AddonServiceStatus) GetAccess() schema.AddonServiceAccess {
	if m != nil {
		return m.Access
	}
	return schema.AS_AC_NONE
}

func (m *AddonServiceStatus) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

// TileAccess
//
// x-displayName: "Tile Access"
// Defines access of primary navigation tile.
type TileAccess struct {
	// state
	//
	// x-displayName: "Addon Service State"
	// Addon service current state
	State schema.TileAccessState `protobuf:"varint,1,opt,name=state,proto3,enum=ves.io.schema.TileAccessState" json:"state,omitempty"`
	// display_name
	//
	// x-displayName: "Display Name"
	// Name to use for display purposes
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (m *TileAccess) Reset()      { *m = TileAccess{} }
func (*TileAccess) ProtoMessage() {}
func (*TileAccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a653d12f15e181, []int{1}
}
func (m *TileAccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TileAccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TileAccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TileAccess.Merge(m, src)
}
func (m *TileAccess) XXX_Size() int {
	return m.Size()
}
func (m *TileAccess) XXX_DiscardUnknown() {
	xxx_messageInfo_TileAccess.DiscardUnknown(m)
}

var xxx_messageInfo_TileAccess proto.InternalMessageInfo

func (m *TileAccess) GetState() schema.TileAccessState {
	if m != nil {
		return m.State
	}
	return schema.TILE_AC_NONE
}

func (m *TileAccess) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
type GlobalSpecType struct {
	// type
	//
	// x-displayName: "Type"
	// type of the user
	Type UserType `protobuf:"varint,1,opt,name=type,proto3,enum=ves.io.schema.user.UserType" json:"type,omitempty"`
	// locale
	//
	// x-displayName: "Locale"
	// x-example: "value"
	// locale of the user (defaults to English)
	Locale string `protobuf:"bytes,2,opt,name=locale,proto3" json:"locale,omitempty"`
	// first_name
	//
	// x-displayName: "First Name"
	// x-example: "value"
	// user's first name
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// last_name
	//
	// x-displayName: "Last Name"
	// x-example: "value"
	// user's last name
	LastName string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// email
	//
	// x-displayName: "Email"
	// x-example: "value"
	// user's email
	Email string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	// contacts
	//
	// x-displayName: "Contact"
	// Contact information for user
	Contacts []*schema.ObjectRefType `protobuf:"bytes,6,rep,name=contacts,proto3" json:"contacts,omitempty"`
	// tos_accepted
	//
	// x-displayName: "TOS Accepted"
	// x-example: "1.0"
	// tos accepted version, this field is deprecated refer the fields `tos_accepted_at` and `tos_version` instead.
	TosAccepted string `protobuf:"bytes,7,opt,name=tos_accepted,json=tosAccepted,proto3" json:"tos_accepted,omitempty"` // Deprecated: Do not use.
	//  Domain Owner
	//
	// x-displayName: "Domain Owner"
	// x-example: "true"
	// Domain owner is the first user who registered or signed up the associated Tenant.
	// User created via signup flow will have this value set to true.
	// Few restrictions apply to this user w.r.t role update and deletion.
	DomainOwner bool `protobuf:"varint,8,opt,name=domain_owner,json=domainOwner,proto3" json:"domain_owner,omitempty"`
	// IDM Type
	//
	// x-displayName: "Identity Management Type"
	// Type of the identity management who is managing this user.
	IdmType IdmType `protobuf:"varint,9,opt,name=idm_type,json=idmType,proto3,enum=ves.io.schema.user.IdmType" json:"idm_type,omitempty"`
	// State
	//
	// x-displayName: "State"
	// State of the user.
	State FSMState `protobuf:"varint,10,opt,name=state,proto3,enum=ves.io.schema.user.FSMState" json:"state,omitempty"`
	// last_login_timestamp
	//
	// x-displayName: "Last Login Timestamp"
	// Last successful login timestamp of the user.
	LastLoginTimestamp *types.Timestamp `protobuf:"bytes,11,opt,name=last_login_timestamp,json=lastLoginTimestamp,proto3" json:"last_login_timestamp,omitempty"`
	// Groups
	//
	// x-displayName: "Groups"
	// Reference to the user groups.
	Groups []*schema.ObjectRefType `protobuf:"bytes,12,rep,name=groups,proto3" json:"groups,omitempty"`
	// tos_version
	//
	// x-displayName: "TOS version"
	// x-example: "v1.0"
	// tos accepted version
	TosVersion string `protobuf:"bytes,14,opt,name=tos_version,json=tosVersion,proto3" json:"tos_version,omitempty"`
	// tos_accepted_at
	//
	// x-displayName: "TOS Accepted Timestamp"
	// x-example: "2020-04-20T12:32:51.341959216Z"
	// tos accepted timestamp.
	TosAcceptedAt *types.Timestamp `protobuf:"bytes,16,opt,name=tos_accepted_at,json=tosAcceptedAt,proto3" json:"tos_accepted_at,omitempty"`
	// Sync Mode
	//
	// x-displayName: "Sync Mode"
	// x-example: "self"
	// Denotes if this is an externally managed entity imported into UAM by SCIM protocol, or self managed.
	SyncMode schema.SyncMode `protobuf:"varint,17,opt,name=sync_mode,json=syncMode,proto3,enum=ves.io.schema.SyncMode" json:"sync_mode,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a653d12f15e181, []int{2}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetType() UserType {
	if m != nil {
		return m.Type
	}
	return USER
}

func (m *GlobalSpecType) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *GlobalSpecType) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *GlobalSpecType) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *GlobalSpecType) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *GlobalSpecType) GetContacts() []*schema.ObjectRefType {
	if m != nil {
		return m.Contacts
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetTosAccepted() string {
	if m != nil {
		return m.TosAccepted
	}
	return ""
}

func (m *GlobalSpecType) GetDomainOwner() bool {
	if m != nil {
		return m.DomainOwner
	}
	return false
}

func (m *GlobalSpecType) GetIdmType() IdmType {
	if m != nil {
		return m.IdmType
	}
	return SSO
}

func (m *GlobalSpecType) GetState() FSMState {
	if m != nil {
		return m.State
	}
	return StateUndefined
}

func (m *GlobalSpecType) GetLastLoginTimestamp() *types.Timestamp {
	if m != nil {
		return m.LastLoginTimestamp
	}
	return nil
}

func (m *GlobalSpecType) GetGroups() []*schema.ObjectRefType {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *GlobalSpecType) GetTosVersion() string {
	if m != nil {
		return m.TosVersion
	}
	return ""
}

func (m *GlobalSpecType) GetTosAcceptedAt() *types.Timestamp {
	if m != nil {
		return m.TosAcceptedAt
	}
	return nil
}

func (m *GlobalSpecType) GetSyncMode() schema.SyncMode {
	if m != nil {
		return m.SyncMode
	}
	return schema.SELF
}

// CreateSpecType
//
// x-displayName: "Create User"
type CreateSpecType struct {
	Type      UserType                `protobuf:"varint,1,opt,name=type,proto3,enum=ves.io.schema.user.UserType" json:"type,omitempty"`
	Locale    string                  `protobuf:"bytes,2,opt,name=locale,proto3" json:"locale,omitempty"`
	FirstName string                  `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string                  `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Email     string                  `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Contacts  []*schema.ObjectRefType `protobuf:"bytes,6,rep,name=contacts,proto3" json:"contacts,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a653d12f15e181, []int{3}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetType() UserType {
	if m != nil {
		return m.Type
	}
	return USER
}

func (m *CreateSpecType) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *CreateSpecType) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *CreateSpecType) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *CreateSpecType) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateSpecType) GetContacts() []*schema.ObjectRefType {
	if m != nil {
		return m.Contacts
	}
	return nil
}

// ReplaceSpecType
//
// x-displayName: "Replace User"
type ReplaceSpecType struct {
	Locale    string                  `protobuf:"bytes,2,opt,name=locale,proto3" json:"locale,omitempty"`
	FirstName string                  `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string                  `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Contacts  []*schema.ObjectRefType `protobuf:"bytes,6,rep,name=contacts,proto3" json:"contacts,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a653d12f15e181, []int{4}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *ReplaceSpecType) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *ReplaceSpecType) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *ReplaceSpecType) GetContacts() []*schema.ObjectRefType {
	if m != nil {
		return m.Contacts
	}
	return nil
}

// GetSpecType
//
// x-displayName: "Get User"
type GetSpecType struct {
	Type      UserType                `protobuf:"varint,1,opt,name=type,proto3,enum=ves.io.schema.user.UserType" json:"type,omitempty"`
	Locale    string                  `protobuf:"bytes,2,opt,name=locale,proto3" json:"locale,omitempty"`
	FirstName string                  `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string                  `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Email     string                  `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Contacts  []*schema.ObjectRefType `protobuf:"bytes,6,rep,name=contacts,proto3" json:"contacts,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a653d12f15e181, []int{5}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetType() UserType {
	if m != nil {
		return m.Type
	}
	return USER
}

func (m *GetSpecType) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *GetSpecType) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *GetSpecType) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *GetSpecType) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *GetSpecType) GetContacts() []*schema.ObjectRefType {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.user.UserType", UserType_name, UserType_value)
	proto.RegisterEnum("ves.io.schema.user.IdmType", IdmType_name, IdmType_value)
	proto.RegisterEnum("ves.io.schema.user.UserState", UserState_name, UserState_value)
	proto.RegisterEnum("ves.io.schema.user.FSMState", FSMState_name, FSMState_value)
	proto.RegisterEnum("ves.io.schema.user.OperStatus", OperStatus_name, OperStatus_value)
	proto.RegisterType((*AddonServiceStatus)(nil), "ves.io.schema.user.AddonServiceStatus")
	proto.RegisterType((*TileAccess)(nil), "ves.io.schema.user.TileAccess")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.user.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.user.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.user.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.user.GetSpecType")
}

func init() { proto.RegisterFile("ves.io/schema/user/types.proto", fileDescriptor_77a653d12f15e181) }

var fileDescriptor_77a653d12f15e181 = []byte{
	// 1054 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x56, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0x8e, 0xf3, 0xd3, 0x79, 0x69, 0x52, 0x77, 0x08, 0xbb, 0x26, 0x2d, 0xde, 0xb4, 0x12, 0x52,
	0x55, 0xa9, 0xce, 0xaa, 0xac, 0x56, 0x02, 0x09, 0xa4, 0xb4, 0x49, 0x4b, 0x56, 0x6d, 0x82, 0x9c,
	0xb6, 0x48, 0x5c, 0x22, 0xc7, 0x9e, 0x7a, 0x0d, 0xb6, 0xc7, 0x78, 0x26, 0x81, 0x1c, 0x56, 0x5a,
	0xad, 0xc4, 0x9d, 0x3f, 0x03, 0xed, 0x1f, 0xc0, 0x81, 0x03, 0xe2, 0x88, 0x38, 0xf5, 0xd8, 0x13,
	0xa2, 0xe9, 0x05, 0x6e, 0xfb, 0x27, 0x20, 0x8f, 0x9d, 0x38, 0xe9, 0x2e, 0x0b, 0x97, 0x3d, 0xed,
	0x6d, 0xe6, 0xfb, 0xde, 0xf3, 0xfb, 0xde, 0x37, 0x7e, 0xa3, 0x01, 0x65, 0x8c, 0xa9, 0x6a, 0x93,
	0x06, 0x35, 0x1e, 0x63, 0x57, 0x6f, 0x8c, 0x28, 0x0e, 0x1a, 0x6c, 0xe2, 0x63, 0xaa, 0xfa, 0x01,
	0x61, 0x04, 0xa1, 0x88, 0x57, 0x23, 0x5e, 0x0d, 0xf9, 0xda, 0xae, 0x65, 0xb3, 0xc7, 0xa3, 0xa1,
	0x6a, 0x10, 0xb7, 0x61, 0x11, 0x8b, 0x34, 0x78, 0xe8, 0x70, 0x74, 0xc1, 0x77, 0x7c, 0xc3, 0x57,
	0xd1, 0x27, 0x6a, 0xf7, 0x2c, 0x42, 0x2c, 0x07, 0x27, 0x51, 0xcc, 0x76, 0x31, 0x65, 0xba, 0xeb,
	0xc7, 0x01, 0xeb, 0xcb, 0x1a, 0x88, 0xcf, 0x6c, 0xe2, 0xc5, 0x02, 0x6a, 0xef, 0x2d, 0x93, 0x0b,
	0xda, 0x6a, 0x1b, 0xcb, 0xd4, 0x58, 0x77, 0x6c, 0x53, 0x67, 0x38, 0x62, 0xb7, 0x7e, 0x12, 0x00,
	0x35, 0x4d, 0x93, 0x78, 0x7d, 0x1c, 0x8c, 0x6d, 0x03, 0xf7, 0x99, 0xce, 0x46, 0x14, 0x3d, 0x84,
	0x1c, 0x65, 0x3a, 0xc3, 0xb2, 0x50, 0x17, 0xb6, 0x2b, 0x7b, 0x75, 0x75, 0xb9, 0xc1, 0xdb, 0x19,
	0x58, 0x8b, 0xc2, 0xd1, 0x47, 0x90, 0xd7, 0x0d, 0x03, 0x53, 0x2a, 0xa7, 0x79, 0xe2, 0xe6, 0x6b,
	0x12, 0x9b, 0x3c, 0x50, 0x8b, 0x13, 0xd0, 0x2e, 0xac, 0x98, 0x36, 0xf5, 0x1d, 0x7d, 0x32, 0xf0,
	0x74, 0x17, 0xcb, 0x99, 0xba, 0xb0, 0x5d, 0xdc, 0x87, 0x9f, 0xff, 0xfe, 0x35, 0x93, 0x0b, 0x32,
	0xf2, 0xd3, 0xb4, 0x56, 0x8a, 0xf9, 0xae, 0xee, 0xe2, 0xad, 0x6f, 0x00, 0x4e, 0x6d, 0x27, 0xfe,
	0x08, 0x7a, 0xb0, 0xac, 0x57, 0xb9, 0x55, 0x36, 0x89, 0x5c, 0x52, 0x7b, 0xbb, 0x64, 0xfa, 0xf5,
	0x25, 0xa7, 0x39, 0xa8, 0x1c, 0x39, 0x64, 0xa8, 0x3b, 0x7d, 0x1f, 0x1b, 0xa7, 0x13, 0x1f, 0xa3,
	0xfb, 0x90, 0x0d, 0xbd, 0x8e, 0xcb, 0x6e, 0xa8, 0x2f, 0xff, 0x07, 0xea, 0x19, 0xc5, 0x41, 0x18,
	0xab, 0xf1, 0x48, 0x74, 0x07, 0xf2, 0x0e, 0x31, 0x74, 0x27, 0xae, 0xa6, 0xc5, 0x3b, 0xf4, 0x3e,
	0xc0, 0x85, 0x1d, 0x50, 0xb6, 0xd0, 0xbc, 0x56, 0xe4, 0x48, 0x58, 0x1b, 0xad, 0x43, 0xd1, 0xd1,
	0x67, 0x6c, 0x96, 0xb3, 0x62, 0x08, 0x70, 0xb2, 0x0a, 0x39, 0xec, 0xea, 0xb6, 0x23, 0xe7, 0x38,
	0x11, 0x6d, 0x50, 0x0b, 0x44, 0x83, 0x78, 0x4c, 0x37, 0x18, 0x95, 0xf3, 0xf5, 0xcc, 0x76, 0xe9,
	0x25, 0x7d, 0xbd, 0xe1, 0x57, 0xd8, 0x60, 0x1a, 0xbe, 0x08, 0xf5, 0xed, 0xc3, 0xf3, 0x27, 0x85,
	0x38, 0x41, 0x9b, 0x67, 0xa2, 0x0f, 0x60, 0x85, 0x11, 0x3a, 0x08, 0x0f, 0xc9, 0x67, 0xd8, 0x94,
	0x0b, 0xdc, 0xa3, 0xb4, 0x2c, 0x68, 0x25, 0x46, 0x68, 0x33, 0x86, 0xd1, 0x26, 0xac, 0x98, 0xc4,
	0xd5, 0x6d, 0x6f, 0x40, 0xbe, 0xf5, 0x70, 0x20, 0x8b, 0x75, 0x61, 0x5b, 0xd4, 0x4a, 0x11, 0xd6,
	0x0b, 0x21, 0xf4, 0x10, 0x44, 0xdb, 0x74, 0x07, 0xdc, 0xaf, 0x22, 0xf7, 0x6b, 0xfd, 0x55, 0x7e,
	0x75, 0x4c, 0x97, 0xdb, 0x55, 0xb0, 0xa3, 0x05, 0xda, 0x9b, 0x9d, 0x2d, 0xfc, 0xbb, 0xc9, 0x87,
	0xfd, 0x93, 0xa5, 0x93, 0x3d, 0x86, 0x2a, 0xb7, 0xcb, 0x21, 0x96, 0xed, 0x0d, 0xe6, 0xa3, 0x24,
	0x97, 0xea, 0xc2, 0x76, 0x69, 0xaf, 0xa6, 0x46, 0xc3, 0xa6, 0xce, 0x86, 0x4d, 0x3d, 0x9d, 0x45,
	0x68, 0x28, 0xcc, 0x3b, 0x0e, 0xd3, 0xe6, 0x18, 0x3a, 0x80, 0xbc, 0x15, 0x90, 0x91, 0x4f, 0xe5,
	0x95, 0xff, 0xe1, 0x63, 0xf9, 0xf9, 0x13, 0x08, 0x45, 0x0d, 0x78, 0x8e, 0x16, 0xa7, 0xa2, 0x7b,
	0x10, 0x1a, 0x36, 0x18, 0xe3, 0x80, 0xda, 0xc4, 0x93, 0x2b, 0xfc, 0xa8, 0x80, 0x11, 0x7a, 0x1e,
	0x21, 0x68, 0x1f, 0x56, 0x17, 0x9d, 0x1e, 0xe8, 0x4c, 0x96, 0xfe, 0x53, 0x6e, 0x79, 0xe1, 0x10,
	0x9a, 0x0c, 0x3d, 0x80, 0x22, 0x9d, 0x78, 0xc6, 0xc0, 0x25, 0x26, 0x96, 0xd7, 0xb8, 0x5f, 0x77,
	0x6f, 0x89, 0xed, 0x4f, 0x3c, 0xe3, 0x84, 0x98, 0x58, 0x13, 0x69, 0xbc, 0x7a, 0x94, 0x15, 0xcb,
	0x52, 0xe5, 0x51, 0x56, 0x5c, 0x95, 0xa4, 0xad, 0xef, 0xd3, 0x50, 0x39, 0x08, 0xb0, 0xce, 0xf0,
	0xdb, 0xf3, 0x93, 0x7f, 0xbc, 0xf6, 0xfb, 0xa7, 0xb7, 0x26, 0x7b, 0xeb, 0x17, 0x01, 0x56, 0x35,
	0xec, 0x3b, 0xba, 0x91, 0x18, 0xf1, 0x26, 0xda, 0x7a, 0x63, 0x0d, 0x3c, 0x4b, 0x43, 0xe9, 0x08,
	0xb3, 0xb7, 0xfa, 0x14, 0x77, 0xee, 0x83, 0x38, 0x6b, 0x0a, 0x89, 0x90, 0x3d, 0xeb, 0xb7, 0x35,
	0x29, 0x85, 0x4a, 0x50, 0xe8, 0xb7, 0xb5, 0xf3, 0xce, 0x41, 0x5b, 0x12, 0x50, 0x19, 0x72, 0xad,
	0xf6, 0xfe, 0xd9, 0x91, 0x94, 0xae, 0xa5, 0x45, 0x61, 0xe7, 0x13, 0x28, 0xc4, 0x37, 0x10, 0x2a,
	0x40, 0xa6, 0xdf, 0xef, 0x49, 0x29, 0x54, 0x05, 0xe9, 0xbc, 0x77, 0x7c, 0xda, 0xd6, 0xb4, 0xe6,
	0xe0, 0xa4, 0xd9, 0x6d, 0x1e, 0xb5, 0x5b, 0x12, 0xa0, 0x32, 0x14, 0xcf, 0xba, 0xad, 0xf6, 0x61,
	0xa7, 0xdb, 0x6e, 0x49, 0xca, 0x56, 0x56, 0xac, 0x4a, 0xd5, 0x9d, 0x4d, 0x28, 0x86, 0x05, 0xf9,
	0x65, 0x14, 0x7e, 0xa0, 0xdb, 0xfe, 0x22, 0x2a, 0xa8, 0xb5, 0x4f, 0x7a, 0xe7, 0xed, 0x96, 0x94,
	0xde, 0x71, 0x40, 0x9c, 0x5d, 0x57, 0x08, 0x41, 0x85, 0x2f, 0xce, 0x3c, 0x13, 0x5f, 0xd8, 0x1e,
	0x36, 0xa5, 0x14, 0x5a, 0x83, 0x32, 0xc7, 0xf8, 0x14, 0xda, 0x9e, 0x25, 0x09, 0xe8, 0x5d, 0x58,
	0x4b, 0x20, 0x7c, 0xa8, 0xdb, 0x0e, 0x36, 0xa5, 0x34, 0x5a, 0x85, 0x12, 0x87, 0x9b, 0x06, 0xb3,
	0xc7, 0x58, 0xca, 0xcc, 0x53, 0x5b, 0x36, 0xd5, 0x87, 0x61, 0x4c, 0x76, 0xe7, 0x0f, 0x01, 0xa0,
	0xe7, 0x47, 0x8a, 0x46, 0x14, 0xdd, 0x85, 0x77, 0x92, 0xdd, 0x62, 0xd5, 0x1a, 0xdc, 0x49, 0x88,
	0xcf, 0x03, 0x32, 0xb6, 0xc3, 0x4b, 0x29, 0x2a, 0x5f, 0x87, 0x8d, 0x57, 0x73, 0x73, 0x25, 0x55,
	0x90, 0x92, 0x88, 0xb9, 0x9c, 0x3b, 0x80, 0x12, 0x34, 0xd1, 0xb4, 0x8c, 0x77, 0x09, 0x3b, 0x24,
	0x23, 0xcf, 0x94, 0x72, 0x61, 0x9b, 0x09, 0xde, 0xf1, 0xf8, 0x53, 0x45, 0xca, 0xa3, 0x0d, 0x90,
	0x13, 0x98, 0xc7, 0xf6, 0x3c, 0x67, 0xd2, 0xf1, 0x3a, 0xa6, 0x2b, 0x15, 0xf6, 0x9f, 0x09, 0x97,
	0xd7, 0x4a, 0xea, 0xea, 0x5a, 0x49, 0xbd, 0xb8, 0x56, 0x84, 0xa7, 0x53, 0x45, 0xf8, 0x71, 0xaa,
	0x08, 0xbf, 0x4d, 0x15, 0xe1, 0x72, 0xaa, 0x08, 0x57, 0x53, 0x45, 0xf8, 0x73, 0xaa, 0x08, 0x7f,
	0x4d, 0x95, 0xd4, 0x8b, 0xa9, 0x22, 0xfc, 0x70, 0xa3, 0xa4, 0x2e, 0x6f, 0x94, 0xd4, 0xd5, 0x8d,
	0x92, 0xfa, 0xf2, 0x33, 0x8b, 0xf8, 0x5f, 0x5b, 0xea, 0x98, 0x38, 0x0c, 0x07, 0x41, 0x38, 0x04,
	0x0d, 0xbe, 0xb8, 0x20, 0x81, 0xbb, 0xeb, 0x87, 0x7d, 0x9a, 0x38, 0xd8, 0x9d, 0xd1, 0x0d, 0x7f,
	0x68, 0x91, 0x06, 0xfe, 0x8e, 0xc5, 0x2f, 0xa9, 0x85, 0xc7, 0xe0, 0x30, 0xcf, 0xaf, 0xe6, 0x0f,
	0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xe2, 0x6b, 0xec, 0x29, 0x0a, 0x00, 0x00,
}

func (x UserType) String() string {
	s, ok := UserType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x IdmType) String() string {
	s, ok := IdmType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x UserState) String() string {
	s, ok := UserState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x FSMState) String() string {
	s, ok := FSMState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x OperStatus) String() string {
	s, ok := OperStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *AddonServiceStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddonServiceStatus)
	if !ok {
		that2, ok := that.(AddonServiceStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Access != that1.Access {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	return true
}
func (this *TileAccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TileAccess)
	if !ok {
		that2, ok := that.(TileAccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Locale != that1.Locale {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if len(this.Contacts) != len(that1.Contacts) {
		return false
	}
	for i := range this.Contacts {
		if !this.Contacts[i].Equal(that1.Contacts[i]) {
			return false
		}
	}
	if this.TosAccepted != that1.TosAccepted {
		return false
	}
	if this.DomainOwner != that1.DomainOwner {
		return false
	}
	if this.IdmType != that1.IdmType {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if !this.LastLoginTimestamp.Equal(that1.LastLoginTimestamp) {
		return false
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	if this.TosVersion != that1.TosVersion {
		return false
	}
	if !this.TosAcceptedAt.Equal(that1.TosAcceptedAt) {
		return false
	}
	if this.SyncMode != that1.SyncMode {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Locale != that1.Locale {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if len(this.Contacts) != len(that1.Contacts) {
		return false
	}
	for i := range this.Contacts {
		if !this.Contacts[i].Equal(that1.Contacts[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Locale != that1.Locale {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if len(this.Contacts) != len(that1.Contacts) {
		return false
	}
	for i := range this.Contacts {
		if !this.Contacts[i].Equal(that1.Contacts[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Locale != that1.Locale {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if len(this.Contacts) != len(that1.Contacts) {
		return false
	}
	for i := range this.Contacts {
		if !this.Contacts[i].Equal(that1.Contacts[i]) {
			return false
		}
	}
	return true
}
func (this *AddonServiceStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.AddonServiceStatus{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Access: "+fmt.Sprintf("%#v", this.Access)+",\n")
	s = append(s, "DisplayName: "+fmt.Sprintf("%#v", this.DisplayName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TileAccess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&user.TileAccess{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "DisplayName: "+fmt.Sprintf("%#v", this.DisplayName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&user.GlobalSpecType{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Locale: "+fmt.Sprintf("%#v", this.Locale)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	if this.Contacts != nil {
		s = append(s, "Contacts: "+fmt.Sprintf("%#v", this.Contacts)+",\n")
	}
	s = append(s, "TosAccepted: "+fmt.Sprintf("%#v", this.TosAccepted)+",\n")
	s = append(s, "DomainOwner: "+fmt.Sprintf("%#v", this.DomainOwner)+",\n")
	s = append(s, "IdmType: "+fmt.Sprintf("%#v", this.IdmType)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.LastLoginTimestamp != nil {
		s = append(s, "LastLoginTimestamp: "+fmt.Sprintf("%#v", this.LastLoginTimestamp)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "TosVersion: "+fmt.Sprintf("%#v", this.TosVersion)+",\n")
	if this.TosAcceptedAt != nil {
		s = append(s, "TosAcceptedAt: "+fmt.Sprintf("%#v", this.TosAcceptedAt)+",\n")
	}
	s = append(s, "SyncMode: "+fmt.Sprintf("%#v", this.SyncMode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&user.CreateSpecType{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Locale: "+fmt.Sprintf("%#v", this.Locale)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	if this.Contacts != nil {
		s = append(s, "Contacts: "+fmt.Sprintf("%#v", this.Contacts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&user.ReplaceSpecType{")
	s = append(s, "Locale: "+fmt.Sprintf("%#v", this.Locale)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	if this.Contacts != nil {
		s = append(s, "Contacts: "+fmt.Sprintf("%#v", this.Contacts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&user.GetSpecType{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Locale: "+fmt.Sprintf("%#v", this.Locale)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	if this.Contacts != nil {
		s = append(s, "Contacts: "+fmt.Sprintf("%#v", this.Contacts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AddonServiceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddonServiceStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddonServiceStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Access != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Access))
		i--
		dAtA[i] = 0x10
	}
	if m.State != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TileAccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TileAccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TileAccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x12
	}
	if m.State != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SyncMode != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SyncMode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.TosAcceptedAt != nil {
		{
			size, err := m.TosAcceptedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.TosVersion) > 0 {
		i -= len(m.TosVersion)
		copy(dAtA[i:], m.TosVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TosVersion)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.LastLoginTimestamp != nil {
		{
			size, err := m.LastLoginTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.State != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x50
	}
	if m.IdmType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IdmType))
		i--
		dAtA[i] = 0x48
	}
	if m.DomainOwner {
		i--
		if m.DomainOwner {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.TosAccepted) > 0 {
		i -= len(m.TosAccepted)
		copy(dAtA[i:], m.TosAccepted)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TosAccepted)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Contacts) > 0 {
		for iNdEx := len(m.Contacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Locale) > 0 {
		i -= len(m.Locale)
		copy(dAtA[i:], m.Locale)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Locale)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Contacts) > 0 {
		for iNdEx := len(m.Contacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Locale) > 0 {
		i -= len(m.Locale)
		copy(dAtA[i:], m.Locale)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Locale)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Contacts) > 0 {
		for iNdEx := len(m.Contacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Locale) > 0 {
		i -= len(m.Locale)
		copy(dAtA[i:], m.Locale)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Locale)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Contacts) > 0 {
		for iNdEx := len(m.Contacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Locale) > 0 {
		i -= len(m.Locale)
		copy(dAtA[i:], m.Locale)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Locale)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddonServiceStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovTypes(uint64(m.State))
	}
	if m.Access != 0 {
		n += 1 + sovTypes(uint64(m.Access))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *TileAccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovTypes(uint64(m.State))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	l = len(m.Locale)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.TosAccepted)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DomainOwner {
		n += 2
	}
	if m.IdmType != 0 {
		n += 1 + sovTypes(uint64(m.IdmType))
	}
	if m.State != 0 {
		n += 1 + sovTypes(uint64(m.State))
	}
	if m.LastLoginTimestamp != nil {
		l = m.LastLoginTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.TosVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TosAcceptedAt != nil {
		l = m.TosAcceptedAt.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.SyncMode != 0 {
		n += 2 + sovTypes(uint64(m.SyncMode))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	l = len(m.Locale)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Locale)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	l = len(m.Locale)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AddonServiceStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddonServiceStatus{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Access:` + fmt.Sprintf("%v", this.Access) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TileAccess) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TileAccess{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForContacts := "[]*ObjectRefType{"
	for _, f := range this.Contacts {
		repeatedStringForContacts += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForContacts += "}"
	repeatedStringForGroups := "[]*ObjectRefType{"
	for _, f := range this.Groups {
		repeatedStringForGroups += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForGroups += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Locale:` + fmt.Sprintf("%v", this.Locale) + `,`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Contacts:` + repeatedStringForContacts + `,`,
		`TosAccepted:` + fmt.Sprintf("%v", this.TosAccepted) + `,`,
		`DomainOwner:` + fmt.Sprintf("%v", this.DomainOwner) + `,`,
		`IdmType:` + fmt.Sprintf("%v", this.IdmType) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`LastLoginTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.LastLoginTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`Groups:` + repeatedStringForGroups + `,`,
		`TosVersion:` + fmt.Sprintf("%v", this.TosVersion) + `,`,
		`TosAcceptedAt:` + strings.Replace(fmt.Sprintf("%v", this.TosAcceptedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`SyncMode:` + fmt.Sprintf("%v", this.SyncMode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForContacts := "[]*ObjectRefType{"
	for _, f := range this.Contacts {
		repeatedStringForContacts += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForContacts += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Locale:` + fmt.Sprintf("%v", this.Locale) + `,`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Contacts:` + repeatedStringForContacts + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForContacts := "[]*ObjectRefType{"
	for _, f := range this.Contacts {
		repeatedStringForContacts += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForContacts += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Locale:` + fmt.Sprintf("%v", this.Locale) + `,`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`Contacts:` + repeatedStringForContacts + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForContacts := "[]*ObjectRefType{"
	for _, f := range this.Contacts {
		repeatedStringForContacts += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForContacts += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Locale:` + fmt.Sprintf("%v", this.Locale) + `,`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Contacts:` + repeatedStringForContacts + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AddonServiceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddonServiceStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddonServiceStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= schema.AddonServiceState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Access", wireType)
			}
			m.Access = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Access |= schema.AddonServiceAccess(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TileAccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TileAccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TileAccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= schema.TileAccessState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &schema.ObjectRefType{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TosAccepted", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TosAccepted = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainOwner", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DomainOwner = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdmType", wireType)
			}
			m.IdmType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdmType |= IdmType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= FSMState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLoginTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastLoginTimestamp == nil {
				m.LastLoginTimestamp = &types.Timestamp{}
			}
			if err := m.LastLoginTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &schema.ObjectRefType{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TosVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TosVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TosAcceptedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TosAcceptedAt == nil {
				m.TosAcceptedAt = &types.Timestamp{}
			}
			if err := m.TosAcceptedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncMode", wireType)
			}
			m.SyncMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncMode |= schema.SyncMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &schema.ObjectRefType{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &schema.ObjectRefType{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &schema.ObjectRefType{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
