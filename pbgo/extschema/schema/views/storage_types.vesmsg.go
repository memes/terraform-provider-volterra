//
// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package views

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *StorageClassListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *StorageClassListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *StorageClassListType) DeepCopy() *StorageClassListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &StorageClassListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *StorageClassListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *StorageClassListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return StorageClassListTypeValidator().Validate(ctx, m, opts...)
}

type ValidateStorageClassListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateStorageClassListType) StorageClassesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for storage_classes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*StorageClassType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := StorageClassTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for storage_classes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*StorageClassType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*StorageClassType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated storage_classes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items storage_classes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateStorageClassListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*StorageClassListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *StorageClassListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["storage_classes"]; exists {
		vOpts := append(opts, db.WithValidateField("storage_classes"))
		if err := fv(ctx, m.GetStorageClasses(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultStorageClassListTypeValidator = func() *ValidateStorageClassListType {
	v := &ValidateStorageClassListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhStorageClasses := v.StorageClassesValidationRuleHandler
	rulesStorageClasses := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "4",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhStorageClasses(rulesStorageClasses)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for StorageClassListType.storage_classes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["storage_classes"] = vFn

	return v
}()

func StorageClassListTypeValidator() db.Validator {
	return DefaultStorageClassListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *StorageClassOpenebsEnterpriseType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *StorageClassOpenebsEnterpriseType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *StorageClassOpenebsEnterpriseType) DeepCopy() *StorageClassOpenebsEnterpriseType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &StorageClassOpenebsEnterpriseType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *StorageClassOpenebsEnterpriseType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *StorageClassOpenebsEnterpriseType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return StorageClassOpenebsEnterpriseTypeValidator().Validate(ctx, m, opts...)
}

type ValidateStorageClassOpenebsEnterpriseType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateStorageClassOpenebsEnterpriseType) StorageClassSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for storage_class_size")
	}

	return validatorFn, nil
}

func (v *ValidateStorageClassOpenebsEnterpriseType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*StorageClassOpenebsEnterpriseType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *StorageClassOpenebsEnterpriseType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["replication"]; exists {

		vOpts := append(opts, db.WithValidateField("replication"))
		if err := fv(ctx, m.GetReplication(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["storage_class_size"]; exists {

		vOpts := append(opts, db.WithValidateField("storage_class_size"))
		if err := fv(ctx, m.GetStorageClassSize(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultStorageClassOpenebsEnterpriseTypeValidator = func() *ValidateStorageClassOpenebsEnterpriseType {
	v := &ValidateStorageClassOpenebsEnterpriseType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhStorageClassSize := v.StorageClassSizeValidationRuleHandler
	rulesStorageClassSize := map[string]string{
		"ves.io.schema.rules.uint32.gte": "1",
		"ves.io.schema.rules.uint32.lte": "1024",
	}
	vFn, err = vrhStorageClassSize(rulesStorageClassSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for StorageClassOpenebsEnterpriseType.storage_class_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["storage_class_size"] = vFn

	return v
}()

func StorageClassOpenebsEnterpriseTypeValidator() db.Validator {
	return DefaultStorageClassOpenebsEnterpriseTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *StorageClassType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *StorageClassType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *StorageClassType) DeepCopy() *StorageClassType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &StorageClassType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *StorageClassType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *StorageClassType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return StorageClassTypeValidator().Validate(ctx, m, opts...)
}

type ValidateStorageClassType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateStorageClassType) DeviceChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for device_choice")
	}
	return validatorFn, nil
}

func (v *ValidateStorageClassType) StorageClassNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for storage_class_name")
	}

	return validatorFn, nil
}

func (v *ValidateStorageClassType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*StorageClassType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *StorageClassType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["default_storage_class"]; exists {

		vOpts := append(opts, db.WithValidateField("default_storage_class"))
		if err := fv(ctx, m.GetDefaultStorageClass(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["device_choice"]; exists {
		val := m.GetDeviceChoice()
		vOpts := append(opts,
			db.WithValidateField("device_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDeviceChoice().(type) {
	case *StorageClassType_OpenebsEnterprise:
		if fv, exists := v.FldValidators["device_choice.openebs_enterprise"]; exists {
			val := m.GetDeviceChoice().(*StorageClassType_OpenebsEnterprise).OpenebsEnterprise
			vOpts := append(opts,
				db.WithValidateField("device_choice"),
				db.WithValidateField("openebs_enterprise"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["storage_class_name"]; exists {

		vOpts := append(opts, db.WithValidateField("storage_class_name"))
		if err := fv(ctx, m.GetStorageClassName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultStorageClassTypeValidator = func() *ValidateStorageClassType {
	v := &ValidateStorageClassType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDeviceChoice := v.DeviceChoiceValidationRuleHandler
	rulesDeviceChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDeviceChoice(rulesDeviceChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for StorageClassType.device_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["device_choice"] = vFn

	vrhStorageClassName := v.StorageClassNameValidationRuleHandler
	rulesStorageClassName := map[string]string{
		"ves.io.schema.rules.message.required":       "true",
		"ves.io.schema.rules.string.ves_object_name": "true",
	}
	vFn, err = vrhStorageClassName(rulesStorageClassName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for StorageClassType.storage_class_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["storage_class_name"] = vFn

	v.FldValidators["device_choice.openebs_enterprise"] = StorageClassOpenebsEnterpriseTypeValidator().Validate

	return v
}()

func StorageClassTypeValidator() db.Validator {
	return DefaultStorageClassTypeValidator
}
