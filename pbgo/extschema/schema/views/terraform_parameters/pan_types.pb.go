// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/terraform_parameters/pan_types.proto

package terraform_parameters

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/certified_hardware"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PAN Firewall Parameters
//
// x-displayName: "Palo Alto Services Node Parameters"
// Palo Alto Services Node Parameters
type PaloAltoServicesNodeType struct {
	// Node Name
	//
	// x-displayName: "Node Name"
	// x-required
	// Node Name of the firewall
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// AWS Instance Type
	//
	// x-displayName: "t3.xlarge"
	// x-required
	// AWS Instance Type
	InstanceType string `protobuf:"bytes,2,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	// Private Subnet Id
	//
	// x-displayName: "SLI Subnet Id"
	// x-required
	// SLI subnet will be used for PAN external interface
	SliSubnetId string `protobuf:"bytes,3,opt,name=sli_subnet_id,json=sliSubnetId,proto3" json:"sli_subnet_id,omitempty"`
	// PAN Mgmt Subnet Cidr
	//
	// x-displayName: "PAN Mgmt Subnet Cidr"
	// x-required
	// PAN management subnet cidr
	MgmtSubnetCidr string `protobuf:"bytes,4,opt,name=mgmt_subnet_cidr,json=mgmtSubnetCidr,proto3" json:"mgmt_subnet_cidr,omitempty"`
	// PAN Mgmt Subnet Id
	//
	// x-displayName: "PAN Mgmt Subnet Id"
	// x-required
	// PAN management subnet Id, if mgmt subnet cidr is not provided then subnet id will be used
	MgmtSubnetId string `protobuf:"bytes,5,opt,name=mgmt_subnet_id,json=mgmtSubnetId,proto3" json:"mgmt_subnet_id,omitempty"`
	// availability_zone
	//
	// x-displayName: "Availability Zone"
	// x-example: "value"
	// An Availability Zone is a high-availability offering that protects your applications and data from datacenter failures.
	AvailabilityZone string `protobuf:"bytes,6,opt,name=availability_zone,json=availabilityZone,proto3" json:"availability_zone,omitempty"`
}

func (m *PaloAltoServicesNodeType) Reset()      { *m = PaloAltoServicesNodeType{} }
func (*PaloAltoServicesNodeType) ProtoMessage() {}
func (*PaloAltoServicesNodeType) Descriptor() ([]byte, []int) {
	return fileDescriptor_819d2dd1d18bc5e5, []int{0}
}
func (m *PaloAltoServicesNodeType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaloAltoServicesNodeType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PaloAltoServicesNodeType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaloAltoServicesNodeType.Merge(m, src)
}
func (m *PaloAltoServicesNodeType) XXX_Size() int {
	return m.Size()
}
func (m *PaloAltoServicesNodeType) XXX_DiscardUnknown() {
	xxx_messageInfo_PaloAltoServicesNodeType.DiscardUnknown(m)
}

var xxx_messageInfo_PaloAltoServicesNodeType proto.InternalMessageInfo

func (m *PaloAltoServicesNodeType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PaloAltoServicesNodeType) GetInstanceType() string {
	if m != nil {
		return m.InstanceType
	}
	return ""
}

func (m *PaloAltoServicesNodeType) GetSliSubnetId() string {
	if m != nil {
		return m.SliSubnetId
	}
	return ""
}

func (m *PaloAltoServicesNodeType) GetMgmtSubnetCidr() string {
	if m != nil {
		return m.MgmtSubnetCidr
	}
	return ""
}

func (m *PaloAltoServicesNodeType) GetMgmtSubnetId() string {
	if m != nil {
		return m.MgmtSubnetId
	}
	return ""
}

func (m *PaloAltoServicesNodeType) GetAvailabilityZone() string {
	if m != nil {
		return m.AvailabilityZone
	}
	return ""
}

// Terraform PAN Service Parameters
//
// x-displayName: "Terraform PAN Service Parameters"
// Terraform PAN Service Parameters for AWS.
type PANAWSType struct {
	// AWS Region
	//
	// x-displayName: "AWS Region"
	// x-required
	// AWS Region where the pan service will be deployed
	AwsRegion string `protobuf:"bytes,1,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty"`
	// AWS Unique Name Prefix
	//
	// x-displayName: "AWS Name Prefix"
	// x-required
	// AWS Unique Name Prefix to be used for creating aws resource objects
	AwsNamePrefix string `protobuf:"bytes,2,opt,name=aws_name_prefix,json=awsNamePrefix,proto3" json:"aws_name_prefix,omitempty"`
	// AWS Marketplace PAN VM-Series product code
	//
	// x-displayName: "AWS AMI Image Product Code"
	// AWS Marketplace AMI Image Product Code
	ProductCode string `protobuf:"bytes,3,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`
	// VPC ID
	//
	// x-displayName: "VPC ID"
	// x-required
	// VPC ID where the pan needs to be deployed
	VpcId string `protobuf:"bytes,4,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	// PAN Admin Username
	//
	// x-displayName: "PAN Admin Username"
	// x-required
	// PAN Admin Username
	AdminUsername string `protobuf:"bytes,5,opt,name=admin_username,json=adminUsername,proto3" json:"admin_username,omitempty"`
	// PAN Devices Info
	//
	// x-displayName: "PAN Devices Info"
	// x-required
	// PAN Devices Info
	Devices []*PaloAltoServicesNodeType `protobuf:"bytes,6,rep,name=devices,proto3" json:"devices,omitempty"`
	// SSH Public Key
	//
	// x-displayName: "SSH Public Key"
	// x-required
	// SSH Public Key to be programmed on PAN instance for ssh access
	SshKey string `protobuf:"bytes,7,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	// F5XC AWS Subnet Ids Info
	//
	// x-displayName: "F5XC AWS Subnet Ids"
	// x-required
	// AWS Subnet Ids used by volterra site
	VolterraSubnetIds []*views.AWSSubnetIdsType `protobuf:"bytes,8,rep,name=volterra_subnet_ids,json=volterraSubnetIds,proto3" json:"volterra_subnet_ids,omitempty"`
	// AWS Cloud Resource Tags
	//
	// x-displayName: "AWS Cloud Resource Tags"
	// AWS Tags is a label consisting of a user-defined key and value. It helps to manage, identify, organize, search for, and filter resources.
	Tags map[string]string `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Site Name
	//
	// x-displayName: "Site Name"
	// x-required
	// Site Name where the pan service will be deployed
	SiteName string `protobuf:"bytes,10,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	// AWS Marketplace PAN VM-Series version
	//
	// x-displayName: "AWS AMI Image Version"
	// AWS Marketplace AMI Image Version
	VmseriesVersion string `protobuf:"bytes,11,opt,name=vmseries_version,json=vmseriesVersion,proto3" json:"vmseries_version,omitempty"`
	// Panorama Server IP
	//
	// x-displayName: "Panorama Server"
	// Panorama Server IP
	PanoramaServer string `protobuf:"bytes,12,opt,name=panorama_server,json=panoramaServer,proto3" json:"panorama_server,omitempty"`
	// PAN Authorization Key
	//
	// x-displayName: "Palo Alto Networks Authorization Key"
	// Authorization Key of Palo Alto Networks Firewall.
	PanAuthorizationKey string `protobuf:"bytes,13,opt,name=pan_authorization_key,json=panAuthorizationKey,proto3" json:"pan_authorization_key,omitempty"`
	// PAN Authorization Key
	//
	// x-displayName: "PAN Authorization Key"
	// Authorization Key of Palo Alto Networks Firewall in clear secret format
	// This field will only be set when user configures the key in clear secret format ( To be decoded in terraform )
	PanAuthorizationKeyClearB64 string `protobuf:"bytes,14,opt,name=pan_authorization_key_clear_b64,json=panAuthorizationKeyClearB64,proto3" json:"pan_authorization_key_clear_b64,omitempty"`
	// PAN Authorization Key
	//
	// x-displayName: "PAN Authorization Key"
	// Blindfolded Authorization Key of Palo Alto Networks Firewall.
	// This field will only be set when user configures the key as blindfolded secret ( To be decrypted in tfctl )
	PanAuthorizationKeyBlindfolded string `protobuf:"bytes,15,opt,name=pan_authorization_key_blindfolded,json=panAuthorizationKeyBlindfolded,proto3" json:"pan_authorization_key_blindfolded,omitempty"`
	// Panorama Template Name
	//
	// x-displayName: "Panorama Template Name"
	// Panorama Template Name
	PanoramaTemplateName string `protobuf:"bytes,16,opt,name=panorama_template_name,json=panoramaTemplateName,proto3" json:"panorama_template_name,omitempty"`
	// AWS Name
	//
	// x-displayName: "AWS Name"
	// AWS Name
	AwsName string `protobuf:"bytes,17,opt,name=aws_name,json=awsName,proto3" json:"aws_name,omitempty"`
}

func (m *PANAWSType) Reset()      { *m = PANAWSType{} }
func (*PANAWSType) ProtoMessage() {}
func (*PANAWSType) Descriptor() ([]byte, []int) {
	return fileDescriptor_819d2dd1d18bc5e5, []int{1}
}
func (m *PANAWSType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PANAWSType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PANAWSType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PANAWSType.Merge(m, src)
}
func (m *PANAWSType) XXX_Size() int {
	return m.Size()
}
func (m *PANAWSType) XXX_DiscardUnknown() {
	xxx_messageInfo_PANAWSType.DiscardUnknown(m)
}

var xxx_messageInfo_PANAWSType proto.InternalMessageInfo

func (m *PANAWSType) GetAwsRegion() string {
	if m != nil {
		return m.AwsRegion
	}
	return ""
}

func (m *PANAWSType) GetAwsNamePrefix() string {
	if m != nil {
		return m.AwsNamePrefix
	}
	return ""
}

func (m *PANAWSType) GetProductCode() string {
	if m != nil {
		return m.ProductCode
	}
	return ""
}

func (m *PANAWSType) GetVpcId() string {
	if m != nil {
		return m.VpcId
	}
	return ""
}

func (m *PANAWSType) GetAdminUsername() string {
	if m != nil {
		return m.AdminUsername
	}
	return ""
}

func (m *PANAWSType) GetDevices() []*PaloAltoServicesNodeType {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *PANAWSType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *PANAWSType) GetVolterraSubnetIds() []*views.AWSSubnetIdsType {
	if m != nil {
		return m.VolterraSubnetIds
	}
	return nil
}

func (m *PANAWSType) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *PANAWSType) GetSiteName() string {
	if m != nil {
		return m.SiteName
	}
	return ""
}

func (m *PANAWSType) GetVmseriesVersion() string {
	if m != nil {
		return m.VmseriesVersion
	}
	return ""
}

func (m *PANAWSType) GetPanoramaServer() string {
	if m != nil {
		return m.PanoramaServer
	}
	return ""
}

func (m *PANAWSType) GetPanAuthorizationKey() string {
	if m != nil {
		return m.PanAuthorizationKey
	}
	return ""
}

func (m *PANAWSType) GetPanAuthorizationKeyClearB64() string {
	if m != nil {
		return m.PanAuthorizationKeyClearB64
	}
	return ""
}

func (m *PANAWSType) GetPanAuthorizationKeyBlindfolded() string {
	if m != nil {
		return m.PanAuthorizationKeyBlindfolded
	}
	return ""
}

func (m *PANAWSType) GetPanoramaTemplateName() string {
	if m != nil {
		return m.PanoramaTemplateName
	}
	return ""
}

func (m *PANAWSType) GetAwsName() string {
	if m != nil {
		return m.AwsName
	}
	return ""
}

func init() {
	proto.RegisterType((*PaloAltoServicesNodeType)(nil), "ves.io.schema.views.terraform_parameters.PaloAltoServicesNodeType")
	golang_proto.RegisterType((*PaloAltoServicesNodeType)(nil), "ves.io.schema.views.terraform_parameters.PaloAltoServicesNodeType")
	proto.RegisterType((*PANAWSType)(nil), "ves.io.schema.views.terraform_parameters.PANAWSType")
	golang_proto.RegisterType((*PANAWSType)(nil), "ves.io.schema.views.terraform_parameters.PANAWSType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.terraform_parameters.PANAWSType.TagsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.terraform_parameters.PANAWSType.TagsEntry")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/terraform_parameters/pan_types.proto", fileDescriptor_819d2dd1d18bc5e5)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/terraform_parameters/pan_types.proto", fileDescriptor_819d2dd1d18bc5e5)
}

var fileDescriptor_819d2dd1d18bc5e5 = []byte{
	// 916 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xc6, 0xb1, 0x1d, 0x4f, 0xfe, 0x39, 0xd3, 0x14, 0x36, 0x0e, 0x6c, 0xd3, 0xd0, 0x42,
	0x10, 0x64, 0x57, 0x2a, 0x51, 0xa9, 0x38, 0x20, 0xd9, 0x81, 0x43, 0x84, 0x14, 0x45, 0x76, 0x4a,
	0xa5, 0x1e, 0x58, 0x8d, 0x77, 0x9e, 0xd7, 0xa3, 0xee, 0xee, 0xac, 0x66, 0xc6, 0xeb, 0xba, 0x12,
	0x12, 0x1f, 0x01, 0x71, 0xe6, 0x03, 0x70, 0xe5, 0xca, 0xa9, 0xc7, 0x1e, 0x73, 0xcc, 0x91, 0x38,
	0x17, 0xb8, 0xf5, 0xc0, 0x07, 0x40, 0x3b, 0xbb, 0x1b, 0xdb, 0x60, 0x44, 0x7b, 0x9b, 0xf9, 0xbd,
	0xdf, 0x7b, 0xf3, 0xde, 0xef, 0xcd, 0x7b, 0xe8, 0x51, 0x02, 0xd2, 0x66, 0xdc, 0x91, 0xde, 0x00,
	0x42, 0xe2, 0x24, 0x0c, 0x46, 0xd2, 0x51, 0x20, 0x04, 0xe9, 0x73, 0x11, 0xba, 0x31, 0x11, 0x24,
	0x04, 0x05, 0x42, 0x3a, 0x31, 0x89, 0x5c, 0x35, 0x8e, 0x41, 0xda, 0xb1, 0xe0, 0x8a, 0xe3, 0x83,
	0xcc, 0xd3, 0xce, 0x3c, 0x6d, 0xed, 0x69, 0x2f, 0xf2, 0x6c, 0x1e, 0xfa, 0x4c, 0x0d, 0x86, 0x3d,
	0xdb, 0xe3, 0xa1, 0xe3, 0x73, 0x9f, 0x3b, 0x3a, 0x40, 0x6f, 0xd8, 0xd7, 0x37, 0x7d, 0xd1, 0xa7,
	0x2c, 0x70, 0x73, 0xc7, 0xe7, 0xdc, 0x0f, 0x60, 0xca, 0x22, 0xd1, 0x38, 0x37, 0x7d, 0x3a, 0x9f,
	0xad, 0x07, 0x42, 0xb1, 0x3e, 0x03, 0xea, 0x0e, 0x88, 0xa0, 0x23, 0x22, 0xc0, 0x99, 0xc9, 0xb0,
	0xb9, 0x3b, 0xcf, 0xe6, 0xb1, 0x62, 0x3c, 0x2a, 0x8c, 0x3b, 0xf3, 0xc6, 0x59, 0xbf, 0xf7, 0xfe,
	0xa1, 0x09, 0x09, 0x18, 0x25, 0x0a, 0x72, 0xeb, 0xde, 0xbf, 0x15, 0x73, 0xe7, 0x43, 0xdf, 0x5b,
	0xa4, 0xa9, 0x64, 0x0a, 0x66, 0xf5, 0x6b, 0x1e, 0xbd, 0xb1, 0xf2, 0xb3, 0x5e, 0x77, 0x16, 0x7a,
	0x4d, 0x09, 0xfb, 0x7f, 0x19, 0xc8, 0x3c, 0x23, 0x01, 0x6f, 0x05, 0x8a, 0x77, 0x41, 0x24, 0xcc,
	0x03, 0x79, 0xca, 0x29, 0x9c, 0x8f, 0x63, 0xc0, 0x18, 0x2d, 0x47, 0x24, 0x04, 0xd3, 0xd8, 0x33,
	0x0e, 0xea, 0x1d, 0x7d, 0xc6, 0x1f, 0xa0, 0x75, 0x16, 0x49, 0x45, 0x22, 0x2f, 0xcb, 0xcf, 0x5c,
	0xd2, 0xc6, 0xb5, 0x02, 0xd4, 0x8e, 0xfb, 0x68, 0x5d, 0x06, 0xcc, 0x95, 0xc3, 0x5e, 0x04, 0xca,
	0x65, 0xd4, 0x2c, 0x6b, 0xd2, 0xaa, 0x0c, 0x58, 0x57, 0x63, 0x27, 0x14, 0x1f, 0xa0, 0x46, 0xe8,
	0x87, 0xaa, 0x20, 0x79, 0x8c, 0x0a, 0x73, 0x59, 0xd3, 0x36, 0x52, 0x3c, 0xe3, 0x1d, 0x33, 0x2a,
	0xf0, 0x3d, 0xb4, 0x31, 0xcb, 0x64, 0xd4, 0xac, 0x64, 0x6f, 0x4e, 0x79, 0x27, 0x14, 0x7f, 0x82,
	0xb6, 0x48, 0x42, 0x58, 0x40, 0x7a, 0x2c, 0x60, 0x6a, 0xec, 0xbe, 0xe0, 0x11, 0x98, 0x55, 0x4d,
	0x6c, 0xcc, 0x1a, 0x9e, 0xf2, 0x08, 0xf6, 0x7f, 0xad, 0x21, 0x74, 0xd6, 0x3a, 0x6d, 0x3d, 0xe9,
	0xea, 0x7c, 0xdf, 0x47, 0x88, 0x8c, 0xa4, 0x2b, 0xc0, 0x67, 0x3c, 0xca, 0xcb, 0xad, 0x93, 0x91,
	0xec, 0x68, 0x00, 0x7f, 0x88, 0x36, 0x53, 0x73, 0x5a, 0xbf, 0x1b, 0x0b, 0xe8, 0xb3, 0xe7, 0x79,
	0xd5, 0xeb, 0x64, 0x24, 0x4f, 0x49, 0x08, 0x67, 0x1a, 0xc4, 0x77, 0xd1, 0x5a, 0x2c, 0x38, 0x1d,
	0x7a, 0xca, 0xf5, 0x38, 0x85, 0xa2, 0xea, 0x1c, 0x3b, 0xe6, 0x14, 0xf0, 0x6d, 0x54, 0x4d, 0x62,
	0x2f, 0xad, 0x21, 0xab, 0xb5, 0x92, 0xc4, 0xde, 0x09, 0xc5, 0xf7, 0xd1, 0x06, 0xa1, 0x21, 0x8b,
	0xdc, 0xa1, 0x04, 0xa1, 0x35, 0xaf, 0xe4, 0x0f, 0xa4, 0xe8, 0xe3, 0x1c, 0xc4, 0x02, 0xd5, 0x28,
	0xe8, 0x1e, 0x99, 0xd5, 0xbd, 0xf2, 0xc1, 0xea, 0x83, 0xb6, 0xfd, 0xa6, 0x63, 0x65, 0xff, 0x57,
	0x97, 0xdb, 0xdb, 0xbf, 0xfd, 0xf9, 0xb2, 0x5c, 0xf9, 0xc9, 0x58, 0x6a, 0x2c, 0x15, 0xa7, 0x15,
	0xa3, 0x53, 0x3c, 0x84, 0xdf, 0x45, 0x35, 0x29, 0x07, 0xee, 0x33, 0x18, 0x9b, 0x35, 0x9d, 0x53,
	0x55, 0xca, 0xc1, 0x37, 0x30, 0xc6, 0x8f, 0xd1, 0xad, 0x84, 0x07, 0xfa, 0xad, 0x69, 0x6b, 0xa4,
	0xb9, 0xa2, 0x13, 0xbb, 0xbf, 0x30, 0xb1, 0xd6, 0x93, 0x6e, 0xd1, 0x2f, 0x99, 0xbe, 0xdd, 0xd9,
	0x2a, 0x22, 0xdc, 0xc0, 0xb8, 0x83, 0x96, 0x15, 0xf1, 0xa5, 0x59, 0xd7, 0x71, 0xbe, 0x7c, 0x8b,
	0x02, 0x6f, 0xfa, 0x69, 0x9f, 0x13, 0x5f, 0x7e, 0x1d, 0x29, 0x31, 0xee, 0xe8, 0x58, 0x78, 0x17,
	0xd5, 0xf5, 0x40, 0x69, 0x65, 0x91, 0xae, 0x62, 0x25, 0x05, 0xd2, 0xde, 0xe1, 0x8f, 0x51, 0x23,
	0x09, 0x25, 0x08, 0x06, 0xd2, 0x4d, 0x40, 0xc8, 0xf4, 0x0b, 0xac, 0x6a, 0xce, 0x66, 0x81, 0x7f,
	0x9b, 0xc1, 0xf8, 0x23, 0xb4, 0x19, 0x93, 0x88, 0x0b, 0x12, 0x12, 0x57, 0x82, 0x48, 0x40, 0x98,
	0x6b, 0xd9, 0x97, 0x2d, 0xe0, 0xae, 0x46, 0xf1, 0x03, 0x74, 0x3b, 0x5d, 0x80, 0x64, 0xa8, 0x06,
	0x5c, 0xb0, 0x17, 0x24, 0x9d, 0x77, 0x2d, 0xe1, 0xba, 0xa6, 0xdf, 0x8a, 0x49, 0xd4, 0x9a, 0xb5,
	0xa5, 0x7a, 0x7e, 0x85, 0xee, 0x2c, 0xf4, 0x71, 0xbd, 0x00, 0x88, 0x70, 0x7b, 0x0f, 0x8f, 0xcc,
	0x0d, 0xed, 0xbd, 0xbb, 0xc0, 0xfb, 0x38, 0xe5, 0xb4, 0x1f, 0x1e, 0xe1, 0x53, 0x74, 0x77, 0x71,
	0x94, 0x5e, 0xc0, 0x22, 0xda, 0xe7, 0x01, 0x05, 0x6a, 0x6e, 0xa6, 0x71, 0xda, 0xe5, 0x57, 0xdf,
	0x1b, 0x1d, 0x6b, 0x41, 0xb0, 0xf6, 0x94, 0x8a, 0x8f, 0xd0, 0x3b, 0x37, 0x25, 0x2b, 0x08, 0xe3,
	0x80, 0x14, 0x3a, 0x36, 0x74, 0x32, 0xdb, 0x85, 0xf5, 0x3c, 0x37, 0x6a, 0x4d, 0x77, 0xd0, 0x4a,
	0x31, 0x31, 0xe6, 0x96, 0xe6, 0xd5, 0xf2, 0x51, 0x69, 0x7e, 0x8e, 0xea, 0x37, 0xed, 0xc1, 0x0d,
	0x54, 0x4e, 0x55, 0xc9, 0x26, 0x2e, 0x3d, 0xe2, 0x6d, 0x54, 0x49, 0x48, 0x30, 0x2c, 0xf6, 0x4a,
	0x76, 0xf9, 0x62, 0xe9, 0x91, 0xd1, 0xfe, 0xd9, 0xb8, 0xb8, 0xb2, 0x4a, 0x97, 0x57, 0x56, 0xe9,
	0xf5, 0x95, 0x65, 0xfc, 0x30, 0xb1, 0x8c, 0x5f, 0x26, 0x96, 0xf1, 0x6a, 0x62, 0x19, 0x17, 0x13,
	0xcb, 0xb8, 0x9c, 0x58, 0xc6, 0xef, 0x13, 0xcb, 0xf8, 0x63, 0x62, 0x95, 0x5e, 0x4f, 0x2c, 0xe3,
	0xc7, 0x6b, 0xab, 0xf4, 0xf2, 0xda, 0x32, 0x2e, 0xae, 0xad, 0xd2, 0xe5, 0xb5, 0x55, 0x7a, 0xfa,
	0x9d, 0xcf, 0xe3, 0x67, 0xbe, 0x5d, 0x7c, 0x38, 0x7b, 0x38, 0xb3, 0x3e, 0x0f, 0x63, 0xc1, 0x13,
	0x46, 0x41, 0x1c, 0x16, 0x66, 0x27, 0xee, 0xf9, 0xdc, 0x81, 0xe7, 0x2a, 0xdf, 0x9c, 0xff, 0xbb,
	0x76, 0x7b, 0x55, 0xbd, 0x50, 0x3f, 0xfb, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x2d, 0xc4, 0x3a,
	0x23, 0x07, 0x00, 0x00,
}

func (this *PaloAltoServicesNodeType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaloAltoServicesNodeType)
	if !ok {
		that2, ok := that.(PaloAltoServicesNodeType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.InstanceType != that1.InstanceType {
		return false
	}
	if this.SliSubnetId != that1.SliSubnetId {
		return false
	}
	if this.MgmtSubnetCidr != that1.MgmtSubnetCidr {
		return false
	}
	if this.MgmtSubnetId != that1.MgmtSubnetId {
		return false
	}
	if this.AvailabilityZone != that1.AvailabilityZone {
		return false
	}
	return true
}
func (this *PANAWSType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PANAWSType)
	if !ok {
		that2, ok := that.(PANAWSType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AwsRegion != that1.AwsRegion {
		return false
	}
	if this.AwsNamePrefix != that1.AwsNamePrefix {
		return false
	}
	if this.ProductCode != that1.ProductCode {
		return false
	}
	if this.VpcId != that1.VpcId {
		return false
	}
	if this.AdminUsername != that1.AdminUsername {
		return false
	}
	if len(this.Devices) != len(that1.Devices) {
		return false
	}
	for i := range this.Devices {
		if !this.Devices[i].Equal(that1.Devices[i]) {
			return false
		}
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if len(this.VolterraSubnetIds) != len(that1.VolterraSubnetIds) {
		return false
	}
	for i := range this.VolterraSubnetIds {
		if !this.VolterraSubnetIds[i].Equal(that1.VolterraSubnetIds[i]) {
			return false
		}
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if this.SiteName != that1.SiteName {
		return false
	}
	if this.VmseriesVersion != that1.VmseriesVersion {
		return false
	}
	if this.PanoramaServer != that1.PanoramaServer {
		return false
	}
	if this.PanAuthorizationKey != that1.PanAuthorizationKey {
		return false
	}
	if this.PanAuthorizationKeyClearB64 != that1.PanAuthorizationKeyClearB64 {
		return false
	}
	if this.PanAuthorizationKeyBlindfolded != that1.PanAuthorizationKeyBlindfolded {
		return false
	}
	if this.PanoramaTemplateName != that1.PanoramaTemplateName {
		return false
	}
	if this.AwsName != that1.AwsName {
		return false
	}
	return true
}
func (this *PaloAltoServicesNodeType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&terraform_parameters.PaloAltoServicesNodeType{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "InstanceType: "+fmt.Sprintf("%#v", this.InstanceType)+",\n")
	s = append(s, "SliSubnetId: "+fmt.Sprintf("%#v", this.SliSubnetId)+",\n")
	s = append(s, "MgmtSubnetCidr: "+fmt.Sprintf("%#v", this.MgmtSubnetCidr)+",\n")
	s = append(s, "MgmtSubnetId: "+fmt.Sprintf("%#v", this.MgmtSubnetId)+",\n")
	s = append(s, "AvailabilityZone: "+fmt.Sprintf("%#v", this.AvailabilityZone)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PANAWSType) goString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&terraform_parameters.PANAWSType{")
	s = append(s, "AwsRegion: "+fmt.Sprintf("%#v", this.AwsRegion)+",\n")
	s = append(s, "AwsNamePrefix: "+fmt.Sprintf("%#v", this.AwsNamePrefix)+",\n")
	s = append(s, "ProductCode: "+fmt.Sprintf("%#v", this.ProductCode)+",\n")
	s = append(s, "VpcId: "+fmt.Sprintf("%#v", this.VpcId)+",\n")
	s = append(s, "AdminUsername: "+fmt.Sprintf("%#v", this.AdminUsername)+",\n")
	if this.Devices != nil {
		s = append(s, "Devices: "+fmt.Sprintf("%#v", this.Devices)+",\n")
	}
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	if this.VolterraSubnetIds != nil {
		s = append(s, "VolterraSubnetIds: "+fmt.Sprintf("%#v", this.VolterraSubnetIds)+",\n")
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	s = append(s, "SiteName: "+fmt.Sprintf("%#v", this.SiteName)+",\n")
	s = append(s, "VmseriesVersion: "+fmt.Sprintf("%#v", this.VmseriesVersion)+",\n")
	s = append(s, "PanoramaServer: "+fmt.Sprintf("%#v", this.PanoramaServer)+",\n")
	s = append(s, "PanAuthorizationKey: "+fmt.Sprintf("%#v", this.PanAuthorizationKey)+",\n")
	s = append(s, "PanAuthorizationKeyClearB64: "+fmt.Sprintf("%#v", this.PanAuthorizationKeyClearB64)+",\n")
	s = append(s, "PanAuthorizationKeyBlindfolded: "+fmt.Sprintf("%#v", this.PanAuthorizationKeyBlindfolded)+",\n")
	s = append(s, "PanoramaTemplateName: "+fmt.Sprintf("%#v", this.PanoramaTemplateName)+",\n")
	s = append(s, "AwsName: "+fmt.Sprintf("%#v", this.AwsName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPanTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PaloAltoServicesNodeType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaloAltoServicesNodeType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaloAltoServicesNodeType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AvailabilityZone) > 0 {
		i -= len(m.AvailabilityZone)
		copy(dAtA[i:], m.AvailabilityZone)
		i = encodeVarintPanTypes(dAtA, i, uint64(len(m.AvailabilityZone)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MgmtSubnetId) > 0 {
		i -= len(m.MgmtSubnetId)
		copy(dAtA[i:], m.MgmtSubnetId)
		i = encodeVarintPanTypes(dAtA, i, uint64(len(m.MgmtSubnetId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MgmtSubnetCidr) > 0 {
		i -= len(m.MgmtSubnetCidr)
		copy(dAtA[i:], m.MgmtSubnetCidr)
		i = encodeVarintPanTypes(dAtA, i, uint64(len(m.MgmtSubnetCidr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SliSubnetId) > 0 {
		i -= len(m.SliSubnetId)
		copy(dAtA[i:], m.SliSubnetId)
		i = encodeVarintPanTypes(dAtA, i, uint64(len(m.SliSubnetId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InstanceType) > 0 {
		i -= len(m.InstanceType)
		copy(dAtA[i:], m.InstanceType)
		i = encodeVarintPanTypes(dAtA, i, uint64(len(m.InstanceType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPanTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PANAWSType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PANAWSType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PANAWSType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AwsName) > 0 {
		i -= len(m.AwsName)
		copy(dAtA[i:], m.AwsName)
		i = encodeVarintPanTypes(dAtA, i, uint64(len(m.AwsName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.PanoramaTemplateName) > 0 {
		i -= len(m.PanoramaTemplateName)
		copy(dAtA[i:], m.PanoramaTemplateName)
		i = encodeVarintPanTypes(dAtA, i, uint64(len(m.PanoramaTemplateName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.PanAuthorizationKeyBlindfolded) > 0 {
		i -= len(m.PanAuthorizationKeyBlindfolded)
		copy(dAtA[i:], m.PanAuthorizationKeyBlindfolded)
		i = encodeVarintPanTypes(dAtA, i, uint64(len(m.PanAuthorizationKeyBlindfolded)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.PanAuthorizationKeyClearB64) > 0 {
		i -= len(m.PanAuthorizationKeyClearB64)
		copy(dAtA[i:], m.PanAuthorizationKeyClearB64)
		i = encodeVarintPanTypes(dAtA, i, uint64(len(m.PanAuthorizationKeyClearB64)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.PanAuthorizationKey) > 0 {
		i -= len(m.PanAuthorizationKey)
		copy(dAtA[i:], m.PanAuthorizationKey)
		i = encodeVarintPanTypes(dAtA, i, uint64(len(m.PanAuthorizationKey)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.PanoramaServer) > 0 {
		i -= len(m.PanoramaServer)
		copy(dAtA[i:], m.PanoramaServer)
		i = encodeVarintPanTypes(dAtA, i, uint64(len(m.PanoramaServer)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.VmseriesVersion) > 0 {
		i -= len(m.VmseriesVersion)
		copy(dAtA[i:], m.VmseriesVersion)
		i = encodeVarintPanTypes(dAtA, i, uint64(len(m.VmseriesVersion)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SiteName) > 0 {
		i -= len(m.SiteName)
		copy(dAtA[i:], m.SiteName)
		i = encodeVarintPanTypes(dAtA, i, uint64(len(m.SiteName)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPanTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintPanTypes(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPanTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.VolterraSubnetIds) > 0 {
		for iNdEx := len(m.VolterraSubnetIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VolterraSubnetIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPanTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.SshKey) > 0 {
		i -= len(m.SshKey)
		copy(dAtA[i:], m.SshKey)
		i = encodeVarintPanTypes(dAtA, i, uint64(len(m.SshKey)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Devices) > 0 {
		for iNdEx := len(m.Devices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Devices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPanTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AdminUsername) > 0 {
		i -= len(m.AdminUsername)
		copy(dAtA[i:], m.AdminUsername)
		i = encodeVarintPanTypes(dAtA, i, uint64(len(m.AdminUsername)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VpcId) > 0 {
		i -= len(m.VpcId)
		copy(dAtA[i:], m.VpcId)
		i = encodeVarintPanTypes(dAtA, i, uint64(len(m.VpcId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProductCode) > 0 {
		i -= len(m.ProductCode)
		copy(dAtA[i:], m.ProductCode)
		i = encodeVarintPanTypes(dAtA, i, uint64(len(m.ProductCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AwsNamePrefix) > 0 {
		i -= len(m.AwsNamePrefix)
		copy(dAtA[i:], m.AwsNamePrefix)
		i = encodeVarintPanTypes(dAtA, i, uint64(len(m.AwsNamePrefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AwsRegion) > 0 {
		i -= len(m.AwsRegion)
		copy(dAtA[i:], m.AwsRegion)
		i = encodeVarintPanTypes(dAtA, i, uint64(len(m.AwsRegion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPanTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovPanTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PaloAltoServicesNodeType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPanTypes(uint64(l))
	}
	l = len(m.InstanceType)
	if l > 0 {
		n += 1 + l + sovPanTypes(uint64(l))
	}
	l = len(m.SliSubnetId)
	if l > 0 {
		n += 1 + l + sovPanTypes(uint64(l))
	}
	l = len(m.MgmtSubnetCidr)
	if l > 0 {
		n += 1 + l + sovPanTypes(uint64(l))
	}
	l = len(m.MgmtSubnetId)
	if l > 0 {
		n += 1 + l + sovPanTypes(uint64(l))
	}
	l = len(m.AvailabilityZone)
	if l > 0 {
		n += 1 + l + sovPanTypes(uint64(l))
	}
	return n
}

func (m *PANAWSType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AwsRegion)
	if l > 0 {
		n += 1 + l + sovPanTypes(uint64(l))
	}
	l = len(m.AwsNamePrefix)
	if l > 0 {
		n += 1 + l + sovPanTypes(uint64(l))
	}
	l = len(m.ProductCode)
	if l > 0 {
		n += 1 + l + sovPanTypes(uint64(l))
	}
	l = len(m.VpcId)
	if l > 0 {
		n += 1 + l + sovPanTypes(uint64(l))
	}
	l = len(m.AdminUsername)
	if l > 0 {
		n += 1 + l + sovPanTypes(uint64(l))
	}
	if len(m.Devices) > 0 {
		for _, e := range m.Devices {
			l = e.Size()
			n += 1 + l + sovPanTypes(uint64(l))
		}
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovPanTypes(uint64(l))
	}
	if len(m.VolterraSubnetIds) > 0 {
		for _, e := range m.VolterraSubnetIds {
			l = e.Size()
			n += 1 + l + sovPanTypes(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPanTypes(uint64(len(k))) + 1 + len(v) + sovPanTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovPanTypes(uint64(mapEntrySize))
		}
	}
	l = len(m.SiteName)
	if l > 0 {
		n += 1 + l + sovPanTypes(uint64(l))
	}
	l = len(m.VmseriesVersion)
	if l > 0 {
		n += 1 + l + sovPanTypes(uint64(l))
	}
	l = len(m.PanoramaServer)
	if l > 0 {
		n += 1 + l + sovPanTypes(uint64(l))
	}
	l = len(m.PanAuthorizationKey)
	if l > 0 {
		n += 1 + l + sovPanTypes(uint64(l))
	}
	l = len(m.PanAuthorizationKeyClearB64)
	if l > 0 {
		n += 1 + l + sovPanTypes(uint64(l))
	}
	l = len(m.PanAuthorizationKeyBlindfolded)
	if l > 0 {
		n += 1 + l + sovPanTypes(uint64(l))
	}
	l = len(m.PanoramaTemplateName)
	if l > 0 {
		n += 2 + l + sovPanTypes(uint64(l))
	}
	l = len(m.AwsName)
	if l > 0 {
		n += 2 + l + sovPanTypes(uint64(l))
	}
	return n
}

func sovPanTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPanTypes(x uint64) (n int) {
	return sovPanTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PaloAltoServicesNodeType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PaloAltoServicesNodeType{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`InstanceType:` + fmt.Sprintf("%v", this.InstanceType) + `,`,
		`SliSubnetId:` + fmt.Sprintf("%v", this.SliSubnetId) + `,`,
		`MgmtSubnetCidr:` + fmt.Sprintf("%v", this.MgmtSubnetCidr) + `,`,
		`MgmtSubnetId:` + fmt.Sprintf("%v", this.MgmtSubnetId) + `,`,
		`AvailabilityZone:` + fmt.Sprintf("%v", this.AvailabilityZone) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PANAWSType) string() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDevices := "[]*PaloAltoServicesNodeType{"
	for _, f := range this.Devices {
		repeatedStringForDevices += strings.Replace(f.String(), "PaloAltoServicesNodeType", "PaloAltoServicesNodeType", 1) + ","
	}
	repeatedStringForDevices += "}"
	repeatedStringForVolterraSubnetIds := "[]*AWSSubnetIdsType{"
	for _, f := range this.VolterraSubnetIds {
		repeatedStringForVolterraSubnetIds += strings.Replace(fmt.Sprintf("%v", f), "AWSSubnetIdsType", "views.AWSSubnetIdsType", 1) + ","
	}
	repeatedStringForVolterraSubnetIds += "}"
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&PANAWSType{`,
		`AwsRegion:` + fmt.Sprintf("%v", this.AwsRegion) + `,`,
		`AwsNamePrefix:` + fmt.Sprintf("%v", this.AwsNamePrefix) + `,`,
		`ProductCode:` + fmt.Sprintf("%v", this.ProductCode) + `,`,
		`VpcId:` + fmt.Sprintf("%v", this.VpcId) + `,`,
		`AdminUsername:` + fmt.Sprintf("%v", this.AdminUsername) + `,`,
		`Devices:` + repeatedStringForDevices + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`VolterraSubnetIds:` + repeatedStringForVolterraSubnetIds + `,`,
		`Tags:` + mapStringForTags + `,`,
		`SiteName:` + fmt.Sprintf("%v", this.SiteName) + `,`,
		`VmseriesVersion:` + fmt.Sprintf("%v", this.VmseriesVersion) + `,`,
		`PanoramaServer:` + fmt.Sprintf("%v", this.PanoramaServer) + `,`,
		`PanAuthorizationKey:` + fmt.Sprintf("%v", this.PanAuthorizationKey) + `,`,
		`PanAuthorizationKeyClearB64:` + fmt.Sprintf("%v", this.PanAuthorizationKeyClearB64) + `,`,
		`PanAuthorizationKeyBlindfolded:` + fmt.Sprintf("%v", this.PanAuthorizationKeyBlindfolded) + `,`,
		`PanoramaTemplateName:` + fmt.Sprintf("%v", this.PanoramaTemplateName) + `,`,
		`AwsName:` + fmt.Sprintf("%v", this.AwsName) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPanTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PaloAltoServicesNodeType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPanTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaloAltoServicesNodeType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaloAltoServicesNodeType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPanTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPanTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPanTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPanTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliSubnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPanTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPanTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SliSubnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MgmtSubnetCidr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPanTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPanTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MgmtSubnetCidr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MgmtSubnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPanTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPanTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MgmtSubnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailabilityZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPanTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPanTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailabilityZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPanTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPanTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPanTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PANAWSType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPanTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PANAWSType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PANAWSType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPanTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPanTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsNamePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPanTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPanTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsNamePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPanTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPanTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPanTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPanTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPanTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPanTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPanTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPanTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Devices = append(m.Devices, &PaloAltoServicesNodeType{})
			if err := m.Devices[len(m.Devices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPanTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPanTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSubnetIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPanTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPanTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSubnetIds = append(m.VolterraSubnetIds, &views.AWSSubnetIdsType{})
			if err := m.VolterraSubnetIds[len(m.VolterraSubnetIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPanTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPanTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPanTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPanTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPanTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPanTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPanTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPanTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPanTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPanTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPanTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPanTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPanTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmseriesVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPanTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPanTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmseriesVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PanoramaServer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPanTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPanTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PanoramaServer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PanAuthorizationKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPanTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPanTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PanAuthorizationKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PanAuthorizationKeyClearB64", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPanTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPanTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PanAuthorizationKeyClearB64 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PanAuthorizationKeyBlindfolded", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPanTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPanTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PanAuthorizationKeyBlindfolded = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PanoramaTemplateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPanTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPanTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PanoramaTemplateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPanTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPanTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPanTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPanTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPanTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPanTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPanTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPanTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPanTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPanTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPanTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPanTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPanTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPanTypes = fmt.Errorf("proto: unexpected end of group")
)
