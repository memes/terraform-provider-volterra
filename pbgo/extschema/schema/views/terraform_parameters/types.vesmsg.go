// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
package terraform_parameters

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *ApplyStatus) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ApplyStatus) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ApplyStatus) DeepCopy() *ApplyStatus {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ApplyStatus{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ApplyStatus) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ApplyStatus) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ApplyStatusValidator().Validate(ctx, m, opts...)
}

type ValidateApplyStatus struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateApplyStatus) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ApplyStatus)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ApplyStatus got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["container_version"]; exists {

		vOpts := append(opts, db.WithValidateField("container_version"))
		if err := fv(ctx, m.GetContainerVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["error_output"]; exists {

		vOpts := append(opts, db.WithValidateField("error_output"))
		if err := fv(ctx, m.GetErrorOutput(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["modification_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("modification_timestamp"))
		if err := fv(ctx, m.GetModificationTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetState().(type) {
	case *ApplyStatus_ApplyState:
		if fv, exists := v.FldValidators["state.apply_state"]; exists {
			val := m.GetState().(*ApplyStatus_ApplyState).ApplyState
			vOpts := append(opts,
				db.WithValidateField("state"),
				db.WithValidateField("apply_state"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ApplyStatus_DestroyState:
		if fv, exists := v.FldValidators["state.destroy_state"]; exists {
			val := m.GetState().(*ApplyStatus_DestroyState).DestroyState
			vOpts := append(opts,
				db.WithValidateField("state"),
				db.WithValidateField("destroy_state"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ApplyStatus_InfraState:
		if fv, exists := v.FldValidators["state.infra_state"]; exists {
			val := m.GetState().(*ApplyStatus_InfraState).InfraState
			vOpts := append(opts,
				db.WithValidateField("state"),
				db.WithValidateField("infra_state"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tf_output"]; exists {

		vOpts := append(opts, db.WithValidateField("tf_output"))
		if err := fv(ctx, m.GetTfOutput(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tf_stdout"]; exists {

		vOpts := append(opts, db.WithValidateField("tf_stdout"))
		if err := fv(ctx, m.GetTfStdout(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultApplyStatusValidator = func() *ValidateApplyStatus {
	v := &ValidateApplyStatus{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ApplyStatusValidator() db.Validator {
	return DefaultApplyStatusValidator
}

// augmented methods on protoc/std generated struct

func (m *DeploymentStatusType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DeploymentStatusType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DeploymentStatusType) DeepCopy() *DeploymentStatusType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DeploymentStatusType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DeploymentStatusType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DeploymentStatusType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DeploymentStatusTypeValidator().Validate(ctx, m, opts...)
}

type ValidateDeploymentStatusType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDeploymentStatusType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DeploymentStatusType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DeploymentStatusType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["apply_status"]; exists {

		vOpts := append(opts, db.WithValidateField("apply_status"))
		if err := fv(ctx, m.GetApplyStatus(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["expected_container_version"]; exists {

		vOpts := append(opts, db.WithValidateField("expected_container_version"))
		if err := fv(ctx, m.GetExpectedContainerVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["plan_status"]; exists {

		vOpts := append(opts, db.WithValidateField("plan_status"))
		if err := fv(ctx, m.GetPlanStatus(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDeploymentStatusTypeValidator = func() *ValidateDeploymentStatusType {
	v := &ValidateDeploymentStatusType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func DeploymentStatusTypeValidator() db.Validator {
	return DefaultDeploymentStatusTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCredsDRefInfo()

}

func (m *GlobalSpecType) GetCredsDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetCreds()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.creds[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "cloud_credentials.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "creds",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetCredsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetCredsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
	}
	for _, ref := range m.GetCreds() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["container_version"]; exists {

		vOpts := append(opts, db.WithValidateField("container_version"))
		if err := fv(ctx, m.GetContainerVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["creds"]; exists {

		vOpts := append(opts, db.WithValidateField("creds"))
		for idx, item := range m.GetCreds() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tf_objects"]; exists {

		vOpts := append(opts, db.WithValidateField("tf_objects"))
		for idx, item := range m.GetTfObjects() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *PlanStatus) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PlanStatus) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PlanStatus) DeepCopy() *PlanStatus {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PlanStatus{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PlanStatus) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PlanStatus) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PlanStatusValidator().Validate(ctx, m, opts...)
}

type ValidatePlanStatus struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePlanStatus) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PlanStatus)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PlanStatus got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["error_output"]; exists {

		vOpts := append(opts, db.WithValidateField("error_output"))
		if err := fv(ctx, m.GetErrorOutput(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["modification_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("modification_timestamp"))
		if err := fv(ctx, m.GetModificationTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetState().(type) {
	case *PlanStatus_PlanState:
		if fv, exists := v.FldValidators["state.plan_state"]; exists {
			val := m.GetState().(*PlanStatus_PlanState).PlanState
			vOpts := append(opts,
				db.WithValidateField("state"),
				db.WithValidateField("plan_state"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PlanStatus_InfraState:
		if fv, exists := v.FldValidators["state.infra_state"]; exists {
			val := m.GetState().(*PlanStatus_InfraState).InfraState
			vOpts := append(opts,
				db.WithValidateField("state"),
				db.WithValidateField("infra_state"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tf_plan_output"]; exists {

		vOpts := append(opts, db.WithValidateField("tf_plan_output"))
		if err := fv(ctx, m.GetTfPlanOutput(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPlanStatusValidator = func() *ValidatePlanStatus {
	v := &ValidatePlanStatus{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func PlanStatusValidator() db.Validator {
	return DefaultPlanStatusValidator
}

// augmented methods on protoc/std generated struct

func (m *VIPPortConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *VIPPortConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *VIPPortConfig) DeepCopy() *VIPPortConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &VIPPortConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *VIPPortConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *VIPPortConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VIPPortConfigValidator().Validate(ctx, m, opts...)
}

type ValidateVIPPortConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVIPPortConfig) PortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}

	return validatorFn, nil
}

func (v *ValidateVIPPortConfig) ProtocolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for protocol")
	}

	return validatorFn, nil
}

func (v *ValidateVIPPortConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*VIPPortConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *VIPPortConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["port"]; exists {

		vOpts := append(opts, db.WithValidateField("port"))
		if err := fv(ctx, m.GetPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protocol"]; exists {

		vOpts := append(opts, db.WithValidateField("protocol"))
		if err := fv(ctx, m.GetProtocol(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVIPPortConfigValidator = func() *ValidateVIPPortConfig {
	v := &ValidateVIPPortConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPort := v.PortValidationRuleHandler
	rulesPort := map[string]string{
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFn, err = vrhPort(rulesPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VIPPortConfig.port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port"] = vFn

	vrhProtocol := v.ProtocolValidationRuleHandler
	rulesProtocol := map[string]string{
		"ves.io.schema.rules.string.in": "[\"TCP\",\"UDP\"]",
	}
	vFn, err = vrhProtocol(rulesProtocol)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VIPPortConfig.protocol: %s", err)
		panic(errMsg)
	}
	v.FldValidators["protocol"] = vFn

	return v
}()

func VIPPortConfigValidator() db.Validator {
	return DefaultVIPPortConfigValidator
}
