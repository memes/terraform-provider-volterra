// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package terraform_parameters

import (
	"reflect"

	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/store"
	"gopkg.volterra.us/stdlib/svcfw"
)

func initializeValidatorRegistry(vr map[string]db.Validator) {
	vr["ves.io.schema.views.terraform_parameters.AWSInstanceType"] = AWSInstanceTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.AWSTGWInfoType"] = AWSTGWInfoTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.AWSTGWTunnelInfoType"] = AWSTGWTunnelInfoTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.AWSTGWType"] = AWSTGWTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.AWSVPCInfoType"] = AWSVPCInfoTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.AWSVPCType"] = AWSVPCTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.AssumeRoleType"] = AssumeRoleTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.CloudSubnetType"] = CloudSubnetTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.DeploymentInfo"] = DeploymentInfoValidator()
	vr["ves.io.schema.views.terraform_parameters.DirectConnectType"] = DirectConnectTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.DirectConnectVifInfo"] = DirectConnectVifInfoValidator()
	vr["ves.io.schema.views.terraform_parameters.SubnetType"] = SubnetTypeValidator()

	vr["ves.io.schema.views.terraform_parameters.AvailabilitySetsInfoType"] = AvailabilitySetsInfoTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.AzureExistingSubnetParamType"] = AzureExistingSubnetParamTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.AzureExpressRouteType"] = AzureExpressRouteTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.AzureInstanceType"] = AzureInstanceTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.AzureSubnetChoice"] = AzureSubnetChoiceValidator()
	vr["ves.io.schema.views.terraform_parameters.AzureSubnetParamType"] = AzureSubnetParamTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.AzureSubnetType"] = AzureSubnetTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.AzureVnetInfoType"] = AzureVnetInfoTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.AzureVnetParamsType"] = AzureVnetParamsTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.AzureVnetSiteType"] = AzureVnetSiteTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.ExpressRouteCircuitInfo"] = ExpressRouteCircuitInfoValidator()
	vr["ves.io.schema.views.terraform_parameters.SpokeVnetsInfoType"] = SpokeVnetsInfoTypeValidator()

	vr["ves.io.schema.views.terraform_parameters.BigIPAWSType"] = BigIPAWSTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.BigIPDeviceType"] = BigIPDeviceTypeValidator()

	vr["ves.io.schema.views.terraform_parameters.GCPInstanceType"] = GCPInstanceTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.GCPSubnetChoice"] = GCPSubnetChoiceValidator()
	vr["ves.io.schema.views.terraform_parameters.GCPSubnetParamType"] = GCPSubnetParamTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.GCPVPCNetworkChoice"] = GCPVPCNetworkChoiceValidator()
	vr["ves.io.schema.views.terraform_parameters.GCPVpcSiteType"] = GCPVpcSiteTypeValidator()

	vr["ves.io.schema.views.terraform_parameters.SpecType"] = SpecTypeValidator()

	vr["ves.io.schema.views.terraform_parameters.Object"] = ObjectValidator()
	vr["ves.io.schema.views.terraform_parameters.StatusObject"] = StatusObjectValidator()

	vr["ves.io.schema.views.terraform_parameters.PANAWSType"] = PANAWSTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.PaloAltoServicesNodeType"] = PaloAltoServicesNodeTypeValidator()

	vr["ves.io.schema.views.terraform_parameters.ForceDeleteRequest"] = ForceDeleteRequestValidator()
	vr["ves.io.schema.views.terraform_parameters.ForceDeleteResponse"] = ForceDeleteResponseValidator()
	vr["ves.io.schema.views.terraform_parameters.RunRequest"] = RunRequestValidator()
	vr["ves.io.schema.views.terraform_parameters.RunResponse"] = RunResponseValidator()

	vr["ves.io.schema.views.terraform_parameters.GetRequest"] = GetRequestValidator()
	vr["ves.io.schema.views.terraform_parameters.GetResponse"] = GetResponseValidator()
	vr["ves.io.schema.views.terraform_parameters.GetStatusResponse"] = GetStatusResponseValidator()

	vr["ves.io.schema.views.terraform_parameters.ApplyStatus"] = ApplyStatusValidator()
	vr["ves.io.schema.views.terraform_parameters.DeploymentStatusType"] = DeploymentStatusTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.GlobalSpecType"] = GlobalSpecTypeValidator()
	vr["ves.io.schema.views.terraform_parameters.PlanStatus"] = PlanStatusValidator()
	vr["ves.io.schema.views.terraform_parameters.VIPPortConfig"] = VIPPortConfigValidator()

}

func initializeEntryRegistry(mdr *svcfw.MDRegistry) {

	mdr.EntryFactory["ves.io.schema.views.terraform_parameters.Object"] = NewEntryObject
	mdr.EntryStoreMap["ves.io.schema.views.terraform_parameters.Object"] = store.InMemory
	mdr.EntryRegistry["ves.io.schema.views.terraform_parameters.Object"] = reflect.TypeOf(&DBObject{})
	mdr.EntryIndexers["ves.io.schema.views.terraform_parameters.Object"] = GetObjectIndexers
	mdr.EntryFactory["ves.io.schema.views.terraform_parameters.StatusObject"] = NewEntryStatusObject
	mdr.EntryStoreMap["ves.io.schema.views.terraform_parameters.StatusObject"] = store.InMemory
	mdr.EntryRegistry["ves.io.schema.views.terraform_parameters.StatusObject"] = reflect.TypeOf(&DBStatusObject{})
	mdr.EntryIndexers["ves.io.schema.views.terraform_parameters.StatusObject"] = GetStatusObjectIndexers

}

func initializeRPCRegistry(mdr *svcfw.MDRegistry) {

}

func initializeAPIGwServiceSlugsRegistry(sm map[string]string) {
	sm["ves.io.schema.views.terraform_parameters.CustomActionAPI"] = "terraform"
	sm["ves.io.schema.views.terraform_parameters.CustomAPI"] = "config"

}

func initializeP0PolicyRegistry(sm map[string]svcfw.P0PolicyInfo) {

}

func initializeCRUDServiceRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	var (
		csr       *svcfw.CRUDServiceRegistry
		customCSR *svcfw.CustomServiceRegistry
	)
	_, _ = csr, customCSR

	customCSR = mdr.PubCustomServiceRegistry

	func() {
		// set swagger jsons for our and external schemas

		customCSR.SwaggerRegistry["ves.io.schema.views.terraform_parameters.Object"] = CustomActionAPISwaggerJSON

		customCSR.GrpcClientRegistry["ves.io.schema.views.terraform_parameters.CustomActionAPI"] = NewCustomActionAPIGrpcClient
		customCSR.RestClientRegistry["ves.io.schema.views.terraform_parameters.CustomActionAPI"] = NewCustomActionAPIRestClient
		if isExternal {
			return
		}
		mdr.SvcRegisterHandlers["ves.io.schema.views.terraform_parameters.CustomActionAPI"] = RegisterCustomActionAPIServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.views.terraform_parameters.CustomActionAPI"] = RegisterGwCustomActionAPIHandler
		customCSR.ServerRegistry["ves.io.schema.views.terraform_parameters.CustomActionAPI"] = func(svc svcfw.Service) server.APIHandler {
			return NewCustomActionAPIServer(svc)
		}

	}()

	customCSR = mdr.PubCustomServiceRegistry

	func() {
		// set swagger jsons for our and external schemas

		customCSR.SwaggerRegistry["ves.io.schema.views.terraform_parameters.Object"] = CustomAPISwaggerJSON

		customCSR.GrpcClientRegistry["ves.io.schema.views.terraform_parameters.CustomAPI"] = NewCustomAPIGrpcClient
		customCSR.RestClientRegistry["ves.io.schema.views.terraform_parameters.CustomAPI"] = NewCustomAPIRestClient
		if isExternal {
			return
		}
		mdr.SvcRegisterHandlers["ves.io.schema.views.terraform_parameters.CustomAPI"] = RegisterCustomAPIServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.views.terraform_parameters.CustomAPI"] = RegisterGwCustomAPIHandler
		customCSR.ServerRegistry["ves.io.schema.views.terraform_parameters.CustomAPI"] = func(svc svcfw.Service) server.APIHandler {
			return NewCustomAPIServer(svc)
		}

	}()

}

func InitializeMDRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	initializeEntryRegistry(mdr)
	initializeValidatorRegistry(mdr.ValidatorRegistry)

	initializeCRUDServiceRegistry(mdr, isExternal)
	if isExternal {
		return
	}

	initializeRPCRegistry(mdr)
	initializeAPIGwServiceSlugsRegistry(mdr.APIGwServiceSlugs)
	initializeP0PolicyRegistry(mdr.P0PolicyRegistry)

}
