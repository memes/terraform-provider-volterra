// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package bot_defense_app_infrastructure

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) InfraChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for infra_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) TrafficTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(TrafficType)
		return int32(i)
	}
	// TrafficType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, TrafficType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for traffic_type")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["environment_type"]; exists {

		vOpts := append(opts, db.WithValidateField("environment_type"))
		if err := fv(ctx, m.GetEnvironmentType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["infra_choice"]; exists {
		val := m.GetInfraChoice()
		vOpts := append(opts,
			db.WithValidateField("infra_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInfraChoice().(type) {
	case *CreateSpecType_CloudHosted:
		if fv, exists := v.FldValidators["infra_choice.cloud_hosted"]; exists {
			val := m.GetInfraChoice().(*CreateSpecType_CloudHosted).CloudHosted
			vOpts := append(opts,
				db.WithValidateField("infra_choice"),
				db.WithValidateField("cloud_hosted"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DataCenterHosted:
		if fv, exists := v.FldValidators["infra_choice.data_center_hosted"]; exists {
			val := m.GetInfraChoice().(*CreateSpecType_DataCenterHosted).DataCenterHosted
			vOpts := append(opts,
				db.WithValidateField("infra_choice"),
				db.WithValidateField("data_center_hosted"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["traffic_type"]; exists {

		vOpts := append(opts, db.WithValidateField("traffic_type"))
		if err := fv(ctx, m.GetTrafficType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhInfraChoice := v.InfraChoiceValidationRuleHandler
	rulesInfraChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInfraChoice(rulesInfraChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.infra_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["infra_choice"] = vFn

	vrhTrafficType := v.TrafficTypeValidationRuleHandler
	rulesTrafficType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhTrafficType(rulesTrafficType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.traffic_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["traffic_type"] = vFn

	v.FldValidators["infra_choice.cloud_hosted"] = InfraF5HostedValidator().Validate
	v.FldValidators["infra_choice.data_center_hosted"] = InfraF5HostedValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *Egress) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Egress) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Egress) DeepCopy() *Egress {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Egress{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Egress) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Egress) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return EgressValidator().Validate(ctx, m, opts...)
}

type ValidateEgress struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateEgress) IpAddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip_address")
	}

	return validatorFn, nil
}

func (v *ValidateEgress) LocationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(Location)
		return int32(i)
	}
	// Location_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, Location_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for location")
	}

	return validatorFn, nil
}

func (v *ValidateEgress) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Egress)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Egress got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ip_address"]; exists {

		vOpts := append(opts, db.WithValidateField("ip_address"))
		if err := fv(ctx, m.GetIpAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["location"]; exists {

		vOpts := append(opts, db.WithValidateField("location"))
		if err := fv(ctx, m.GetLocation(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultEgressValidator = func() *ValidateEgress {
	v := &ValidateEgress{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIpAddress := v.IpAddressValidationRuleHandler
	rulesIpAddress := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.ip":        "true",
	}
	vFn, err = vrhIpAddress(rulesIpAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Egress.ip_address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ip_address"] = vFn

	vrhLocation := v.LocationValidationRuleHandler
	rulesLocation := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLocation(rulesLocation)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Egress.location: %s", err)
		panic(errMsg)
	}
	v.FldValidators["location"] = vFn

	return v
}()

func EgressValidator() db.Validator {
	return DefaultEgressValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) InfraChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for infra_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) TrafficTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(TrafficType)
		return int32(i)
	}
	// TrafficType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, TrafficType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for traffic_type")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["environment_type"]; exists {

		vOpts := append(opts, db.WithValidateField("environment_type"))
		if err := fv(ctx, m.GetEnvironmentType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["infra_choice"]; exists {
		val := m.GetInfraChoice()
		vOpts := append(opts,
			db.WithValidateField("infra_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInfraChoice().(type) {
	case *GetSpecType_CloudHosted:
		if fv, exists := v.FldValidators["infra_choice.cloud_hosted"]; exists {
			val := m.GetInfraChoice().(*GetSpecType_CloudHosted).CloudHosted
			vOpts := append(opts,
				db.WithValidateField("infra_choice"),
				db.WithValidateField("cloud_hosted"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DataCenterHosted:
		if fv, exists := v.FldValidators["infra_choice.data_center_hosted"]; exists {
			val := m.GetInfraChoice().(*GetSpecType_DataCenterHosted).DataCenterHosted
			vOpts := append(opts,
				db.WithValidateField("infra_choice"),
				db.WithValidateField("data_center_hosted"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["traffic_type"]; exists {

		vOpts := append(opts, db.WithValidateField("traffic_type"))
		if err := fv(ctx, m.GetTrafficType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhInfraChoice := v.InfraChoiceValidationRuleHandler
	rulesInfraChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInfraChoice(rulesInfraChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.infra_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["infra_choice"] = vFn

	vrhTrafficType := v.TrafficTypeValidationRuleHandler
	rulesTrafficType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhTrafficType(rulesTrafficType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.traffic_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["traffic_type"] = vFn

	v.FldValidators["infra_choice.cloud_hosted"] = InfraF5HostedValidator().Validate
	v.FldValidators["infra_choice.data_center_hosted"] = InfraF5HostedValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetViewInternalDRefInfo()

}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) InfraChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for infra_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) TrafficTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(TrafficType)
		return int32(i)
	}
	// TrafficType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, TrafficType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for traffic_type")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["environment_type"]; exists {

		vOpts := append(opts, db.WithValidateField("environment_type"))
		if err := fv(ctx, m.GetEnvironmentType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["infra_choice"]; exists {
		val := m.GetInfraChoice()
		vOpts := append(opts,
			db.WithValidateField("infra_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInfraChoice().(type) {
	case *GlobalSpecType_CloudHosted:
		if fv, exists := v.FldValidators["infra_choice.cloud_hosted"]; exists {
			val := m.GetInfraChoice().(*GlobalSpecType_CloudHosted).CloudHosted
			vOpts := append(opts,
				db.WithValidateField("infra_choice"),
				db.WithValidateField("cloud_hosted"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DataCenterHosted:
		if fv, exists := v.FldValidators["infra_choice.data_center_hosted"]; exists {
			val := m.GetInfraChoice().(*GlobalSpecType_DataCenterHosted).DataCenterHosted
			vOpts := append(opts,
				db.WithValidateField("infra_choice"),
				db.WithValidateField("data_center_hosted"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["traffic_type"]; exists {

		vOpts := append(opts, db.WithValidateField("traffic_type"))
		if err := fv(ctx, m.GetTrafficType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhInfraChoice := v.InfraChoiceValidationRuleHandler
	rulesInfraChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInfraChoice(rulesInfraChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.infra_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["infra_choice"] = vFn

	vrhTrafficType := v.TrafficTypeValidationRuleHandler
	rulesTrafficType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhTrafficType(rulesTrafficType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.traffic_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["traffic_type"] = vFn

	v.FldValidators["infra_choice.cloud_hosted"] = InfraF5HostedValidator().Validate
	v.FldValidators["infra_choice.data_center_hosted"] = InfraF5HostedValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *InfraF5Hosted) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *InfraF5Hosted) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *InfraF5Hosted) DeepCopy() *InfraF5Hosted {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &InfraF5Hosted{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *InfraF5Hosted) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *InfraF5Hosted) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return InfraF5HostedValidator().Validate(ctx, m, opts...)
}

type ValidateInfraF5Hosted struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateInfraF5Hosted) RegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(BotDefenseAdvancedRegion)
		return int32(i)
	}
	// BotDefenseAdvancedRegion_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, BotDefenseAdvancedRegion_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for region")
	}

	return validatorFn, nil
}

func (v *ValidateInfraF5Hosted) InfraHostNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for infra_host_name")
	}

	return validatorFn, nil
}

func (v *ValidateInfraF5Hosted) IngressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for ingress")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Ingress, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := IngressValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ingress")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Ingress)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Ingress, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ingress")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ingress")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateInfraF5Hosted) EgressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for egress")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Egress, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := EgressValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for egress")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Egress)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Egress, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated egress")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items egress")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateInfraF5Hosted) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*InfraF5Hosted)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *InfraF5Hosted got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["egress"]; exists {
		vOpts := append(opts, db.WithValidateField("egress"))
		if err := fv(ctx, m.GetEgress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["infra_host_name"]; exists {

		vOpts := append(opts, db.WithValidateField("infra_host_name"))
		if err := fv(ctx, m.GetInfraHostName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ingress"]; exists {
		vOpts := append(opts, db.WithValidateField("ingress"))
		if err := fv(ctx, m.GetIngress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["region"]; exists {

		vOpts := append(opts, db.WithValidateField("region"))
		if err := fv(ctx, m.GetRegion(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultInfraF5HostedValidator = func() *ValidateInfraF5Hosted {
	v := &ValidateInfraF5Hosted{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRegion := v.RegionValidationRuleHandler
	rulesRegion := map[string]string{
		"ves.io.schema.rules.enum.defined_only": "true",
		"ves.io.schema.rules.message.required":  "true",
	}
	vFn, err = vrhRegion(rulesRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for InfraF5Hosted.region: %s", err)
		panic(errMsg)
	}
	v.FldValidators["region"] = vFn

	vrhInfraHostName := v.InfraHostNameValidationRuleHandler
	rulesInfraHostName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.hostname":  "true",
	}
	vFn, err = vrhInfraHostName(rulesInfraHostName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for InfraF5Hosted.infra_host_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["infra_host_name"] = vFn

	vrhIngress := v.IngressValidationRuleHandler
	rulesIngress := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "3",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhIngress(rulesIngress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for InfraF5Hosted.ingress: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ingress"] = vFn

	vrhEgress := v.EgressValidationRuleHandler
	rulesEgress := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhEgress(rulesEgress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for InfraF5Hosted.egress: %s", err)
		panic(errMsg)
	}
	v.FldValidators["egress"] = vFn

	return v
}()

func InfraF5HostedValidator() db.Validator {
	return DefaultInfraF5HostedValidator
}

// augmented methods on protoc/std generated struct

func (m *Ingress) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Ingress) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Ingress) DeepCopy() *Ingress {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Ingress{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Ingress) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Ingress) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return IngressValidator().Validate(ctx, m, opts...)
}

type ValidateIngress struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateIngress) TypeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type_choice")
	}
	return validatorFn, nil
}

func (v *ValidateIngress) TypeChoiceHostNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_HostName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for host_name")
	}
	return oValidatorFn_HostName, nil
}
func (v *ValidateIngress) TypeChoiceIpAddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_IpAddress, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip_address")
	}
	return oValidatorFn_IpAddress, nil
}

func (v *ValidateIngress) LocationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(Location)
		return int32(i)
	}
	// Location_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, Location_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for location")
	}

	return validatorFn, nil
}

func (v *ValidateIngress) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Ingress)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Ingress got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["location"]; exists {

		vOpts := append(opts, db.WithValidateField("location"))
		if err := fv(ctx, m.GetLocation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type_choice"]; exists {
		val := m.GetTypeChoice()
		vOpts := append(opts,
			db.WithValidateField("type_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTypeChoice().(type) {
	case *Ingress_HostName:
		if fv, exists := v.FldValidators["type_choice.host_name"]; exists {
			val := m.GetTypeChoice().(*Ingress_HostName).HostName
			vOpts := append(opts,
				db.WithValidateField("type_choice"),
				db.WithValidateField("host_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Ingress_IpAddress:
		if fv, exists := v.FldValidators["type_choice.ip_address"]; exists {
			val := m.GetTypeChoice().(*Ingress_IpAddress).IpAddress
			vOpts := append(opts,
				db.WithValidateField("type_choice"),
				db.WithValidateField("ip_address"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultIngressValidator = func() *ValidateIngress {
	v := &ValidateIngress{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTypeChoice := v.TypeChoiceValidationRuleHandler
	rulesTypeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTypeChoice(rulesTypeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Ingress.type_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type_choice"] = vFn

	vrhTypeChoiceHostName := v.TypeChoiceHostNameValidationRuleHandler
	rulesTypeChoiceHostName := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
	}
	vFnMap["type_choice.host_name"], err = vrhTypeChoiceHostName(rulesTypeChoiceHostName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field Ingress.type_choice_host_name: %s", err)
		panic(errMsg)
	}
	vrhTypeChoiceIpAddress := v.TypeChoiceIpAddressValidationRuleHandler
	rulesTypeChoiceIpAddress := map[string]string{
		"ves.io.schema.rules.string.ip": "true",
	}
	vFnMap["type_choice.ip_address"], err = vrhTypeChoiceIpAddress(rulesTypeChoiceIpAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field Ingress.type_choice_ip_address: %s", err)
		panic(errMsg)
	}

	v.FldValidators["type_choice.host_name"] = vFnMap["type_choice.host_name"]
	v.FldValidators["type_choice.ip_address"] = vFnMap["type_choice.ip_address"]

	vrhLocation := v.LocationValidationRuleHandler
	rulesLocation := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLocation(rulesLocation)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Ingress.location: %s", err)
		panic(errMsg)
	}
	v.FldValidators["location"] = vFn

	return v
}()

func IngressValidator() db.Validator {
	return DefaultIngressValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) InfraChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for infra_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) TrafficTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(TrafficType)
		return int32(i)
	}
	// TrafficType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, TrafficType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for traffic_type")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["environment_type"]; exists {

		vOpts := append(opts, db.WithValidateField("environment_type"))
		if err := fv(ctx, m.GetEnvironmentType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["infra_choice"]; exists {
		val := m.GetInfraChoice()
		vOpts := append(opts,
			db.WithValidateField("infra_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInfraChoice().(type) {
	case *ReplaceSpecType_CloudHosted:
		if fv, exists := v.FldValidators["infra_choice.cloud_hosted"]; exists {
			val := m.GetInfraChoice().(*ReplaceSpecType_CloudHosted).CloudHosted
			vOpts := append(opts,
				db.WithValidateField("infra_choice"),
				db.WithValidateField("cloud_hosted"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DataCenterHosted:
		if fv, exists := v.FldValidators["infra_choice.data_center_hosted"]; exists {
			val := m.GetInfraChoice().(*ReplaceSpecType_DataCenterHosted).DataCenterHosted
			vOpts := append(opts,
				db.WithValidateField("infra_choice"),
				db.WithValidateField("data_center_hosted"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["traffic_type"]; exists {

		vOpts := append(opts, db.WithValidateField("traffic_type"))
		if err := fv(ctx, m.GetTrafficType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhInfraChoice := v.InfraChoiceValidationRuleHandler
	rulesInfraChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInfraChoice(rulesInfraChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.infra_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["infra_choice"] = vFn

	vrhTrafficType := v.TrafficTypeValidationRuleHandler
	rulesTrafficType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhTrafficType(rulesTrafficType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.traffic_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["traffic_type"] = vFn

	v.FldValidators["infra_choice.cloud_hosted"] = InfraF5HostedValidator().Validate
	v.FldValidators["infra_choice.data_center_hosted"] = InfraF5HostedValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetInfraChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.InfraChoice.(type) {
	case nil:
		o.InfraChoice = nil

	case *CreateSpecType_CloudHosted:
		o.InfraChoice = &GlobalSpecType_CloudHosted{CloudHosted: of.CloudHosted}

	case *CreateSpecType_DataCenterHosted:
		o.InfraChoice = &GlobalSpecType_DataCenterHosted{DataCenterHosted: of.DataCenterHosted}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetInfraChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.InfraChoice.(type) {
	case nil:
		r.InfraChoice = nil

	case *GlobalSpecType_CloudHosted:
		r.InfraChoice = &CreateSpecType_CloudHosted{CloudHosted: of.CloudHosted}

	case *GlobalSpecType_DataCenterHosted:
		r.InfraChoice = &CreateSpecType_DataCenterHosted{DataCenterHosted: of.DataCenterHosted}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.EnvironmentType = f.GetEnvironmentType()
	m.GetInfraChoiceFromGlobalSpecType(f)
	m.TrafficType = f.GetTrafficType()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.EnvironmentType = m1.EnvironmentType
	m1.SetInfraChoiceToGlobalSpecType(f)
	f.TrafficType = m1.TrafficType
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetInfraChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.InfraChoice.(type) {
	case nil:
		o.InfraChoice = nil

	case *GetSpecType_CloudHosted:
		o.InfraChoice = &GlobalSpecType_CloudHosted{CloudHosted: of.CloudHosted}

	case *GetSpecType_DataCenterHosted:
		o.InfraChoice = &GlobalSpecType_DataCenterHosted{DataCenterHosted: of.DataCenterHosted}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetInfraChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.InfraChoice.(type) {
	case nil:
		r.InfraChoice = nil

	case *GlobalSpecType_CloudHosted:
		r.InfraChoice = &GetSpecType_CloudHosted{CloudHosted: of.CloudHosted}

	case *GlobalSpecType_DataCenterHosted:
		r.InfraChoice = &GetSpecType_DataCenterHosted{DataCenterHosted: of.DataCenterHosted}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.EnvironmentType = f.GetEnvironmentType()
	m.GetInfraChoiceFromGlobalSpecType(f)
	m.TrafficType = f.GetTrafficType()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.EnvironmentType = m1.EnvironmentType
	m1.SetInfraChoiceToGlobalSpecType(f)
	f.TrafficType = m1.TrafficType
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetInfraChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.InfraChoice.(type) {
	case nil:
		o.InfraChoice = nil

	case *ReplaceSpecType_CloudHosted:
		o.InfraChoice = &GlobalSpecType_CloudHosted{CloudHosted: of.CloudHosted}

	case *ReplaceSpecType_DataCenterHosted:
		o.InfraChoice = &GlobalSpecType_DataCenterHosted{DataCenterHosted: of.DataCenterHosted}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetInfraChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.InfraChoice.(type) {
	case nil:
		r.InfraChoice = nil

	case *GlobalSpecType_CloudHosted:
		r.InfraChoice = &ReplaceSpecType_CloudHosted{CloudHosted: of.CloudHosted}

	case *GlobalSpecType_DataCenterHosted:
		r.InfraChoice = &ReplaceSpecType_DataCenterHosted{DataCenterHosted: of.DataCenterHosted}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.EnvironmentType = f.GetEnvironmentType()
	m.GetInfraChoiceFromGlobalSpecType(f)
	m.TrafficType = f.GetTrafficType()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.EnvironmentType = m1.EnvironmentType
	m1.SetInfraChoiceToGlobalSpecType(f)
	f.TrafficType = m1.TrafficType
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}
