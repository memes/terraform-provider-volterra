//
// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package aws_vpc_site

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema_site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *SetCloudSiteInfoRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SetCloudSiteInfoRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SetCloudSiteInfoRequest) DeepCopy() *SetCloudSiteInfoRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SetCloudSiteInfoRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SetCloudSiteInfoRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SetCloudSiteInfoRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SetCloudSiteInfoRequestValidator().Validate(ctx, m, opts...)
}

type ValidateSetCloudSiteInfoRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSetCloudSiteInfoRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SetCloudSiteInfoRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SetCloudSiteInfoRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["aws_vpc_info"]; exists {

		vOpts := append(opts, db.WithValidateField("aws_vpc_info"))
		if err := fv(ctx, m.GetAwsVpcInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["direct_connect_info"]; exists {

		vOpts := append(opts, db.WithValidateField("direct_connect_info"))
		if err := fv(ctx, m.GetDirectConnectInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSetCloudSiteInfoRequestValidator = func() *ValidateSetCloudSiteInfoRequest {
	v := &ValidateSetCloudSiteInfoRequest{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["aws_vpc_info"] = AWSVPCSiteInfoTypeValidator().Validate

	v.FldValidators["direct_connect_info"] = ves_io_schema_views.DirectConnectInfoValidator().Validate

	return v
}()

func SetCloudSiteInfoRequestValidator() db.Validator {
	return DefaultSetCloudSiteInfoRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *SetCloudSiteInfoResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SetCloudSiteInfoResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SetCloudSiteInfoResponse) DeepCopy() *SetCloudSiteInfoResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SetCloudSiteInfoResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SetCloudSiteInfoResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SetCloudSiteInfoResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SetCloudSiteInfoResponseValidator().Validate(ctx, m, opts...)
}

type ValidateSetCloudSiteInfoResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSetCloudSiteInfoResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SetCloudSiteInfoResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SetCloudSiteInfoResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSetCloudSiteInfoResponseValidator = func() *ValidateSetCloudSiteInfoResponse {
	v := &ValidateSetCloudSiteInfoResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SetCloudSiteInfoResponseValidator() db.Validator {
	return DefaultSetCloudSiteInfoResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *SetVIPInfoRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SetVIPInfoRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SetVIPInfoRequest) DeepCopy() *SetVIPInfoRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SetVIPInfoRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SetVIPInfoRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SetVIPInfoRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SetVIPInfoRequestValidator().Validate(ctx, m, opts...)
}

type ValidateSetVIPInfoRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSetVIPInfoRequest) VipParamsPerAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for vip_params_per_az")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_site.PublishVIPParamsPerAz, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_site.PublishVIPParamsPerAzValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for vip_params_per_az")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_site.PublishVIPParamsPerAz)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_site.PublishVIPParamsPerAz, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated vip_params_per_az")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items vip_params_per_az")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSetVIPInfoRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SetVIPInfoRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SetVIPInfoRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vip_params_per_az"]; exists {
		vOpts := append(opts, db.WithValidateField("vip_params_per_az"))
		if err := fv(ctx, m.GetVipParamsPerAz(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSetVIPInfoRequestValidator = func() *ValidateSetVIPInfoRequest {
	v := &ValidateSetVIPInfoRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhVipParamsPerAz := v.VipParamsPerAzValidationRuleHandler
	rulesVipParamsPerAz := map[string]string{
		"ves.io.schema.rules.repeated.num_items": "1,2,3",
	}
	vFn, err = vrhVipParamsPerAz(rulesVipParamsPerAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SetVIPInfoRequest.vip_params_per_az: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vip_params_per_az"] = vFn

	return v
}()

func SetVIPInfoRequestValidator() db.Validator {
	return DefaultSetVIPInfoRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *SetVIPInfoResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SetVIPInfoResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SetVIPInfoResponse) DeepCopy() *SetVIPInfoResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SetVIPInfoResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SetVIPInfoResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SetVIPInfoResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SetVIPInfoResponseValidator().Validate(ctx, m, opts...)
}

type ValidateSetVIPInfoResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSetVIPInfoResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SetVIPInfoResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SetVIPInfoResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSetVIPInfoResponseValidator = func() *ValidateSetVIPInfoResponse {
	v := &ValidateSetVIPInfoResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SetVIPInfoResponseValidator() db.Validator {
	return DefaultSetVIPInfoResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *SetVPCK8SHostnamesRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SetVPCK8SHostnamesRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SetVPCK8SHostnamesRequest) DeepCopy() *SetVPCK8SHostnamesRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SetVPCK8SHostnamesRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SetVPCK8SHostnamesRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SetVPCK8SHostnamesRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SetVPCK8SHostnamesRequestValidator().Validate(ctx, m, opts...)
}

type ValidateSetVPCK8SHostnamesRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSetVPCK8SHostnamesRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SetVPCK8SHostnamesRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SetVPCK8SHostnamesRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["node_names"]; exists {

		vOpts := append(opts, db.WithValidateField("node_names"))
		for idx, item := range m.GetNodeNames() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSetVPCK8SHostnamesRequestValidator = func() *ValidateSetVPCK8SHostnamesRequest {
	v := &ValidateSetVPCK8SHostnamesRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SetVPCK8SHostnamesRequestValidator() db.Validator {
	return DefaultSetVPCK8SHostnamesRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *SetVPCK8SHostnamesResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SetVPCK8SHostnamesResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SetVPCK8SHostnamesResponse) DeepCopy() *SetVPCK8SHostnamesResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SetVPCK8SHostnamesResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SetVPCK8SHostnamesResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SetVPCK8SHostnamesResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SetVPCK8SHostnamesResponseValidator().Validate(ctx, m, opts...)
}

type ValidateSetVPCK8SHostnamesResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSetVPCK8SHostnamesResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SetVPCK8SHostnamesResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SetVPCK8SHostnamesResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSetVPCK8SHostnamesResponseValidator = func() *ValidateSetVPCK8SHostnamesResponse {
	v := &ValidateSetVPCK8SHostnamesResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SetVPCK8SHostnamesResponseValidator() db.Validator {
	return DefaultSetVPCK8SHostnamesResponseValidator
}
