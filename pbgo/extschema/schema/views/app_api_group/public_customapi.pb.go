// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/app_api_group/public_customapi.proto

// app_api_group object
//
// x-displayName: "App API Group"
// The app_api_group construct provides a mechanism to classify the universal set of request APIs into a much smaller number of logical groups in order
// to make it easier to author and maintain API level access control policies. The app_api_group holds api_group child object with the same content for
// internal use by data path and other services.
//
// An app_api_group object consists of an unordered list of api group elements. The method and path from the input request API are matched against all
// elements in an app_api_group to determine if the request API belongs to the api group in question. The request API belongs to an api group if it
// matches at least one element in the api group.
//
// The App API Group may be created using API Group Builder which defines path filter and label selectors to match
// API Endpoints from a referenced object, like HTTP Loadbalancer. For example, if there is a HTTP LB with API Discovery enabled
// then all discovered API Endpoints serve as a base set and filters define which API Endpoints would be the group members.
//
//  The view creates the following child objects:
//  * api_group
//

package app_api_group

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/api_definition"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Evaluate API Group Request
//
// x-displayName: "Evaluate API Group Request"
// Request shape for Evaluate API Group
type EvaluateApiGroupReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// Namespace of the API Group for the current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// API Group
	//
	// x-displayName: "API Group"
	// API Group for the current request
	ApiGroup *GlobalSpecType `protobuf:"bytes,2,opt,name=api_group,json=apiGroup,proto3" json:"api_group,omitempty"`
}

func (m *EvaluateApiGroupReq) Reset()      { *m = EvaluateApiGroupReq{} }
func (*EvaluateApiGroupReq) ProtoMessage() {}
func (*EvaluateApiGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c56144eaf2997be3, []int{0}
}
func (m *EvaluateApiGroupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateApiGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateApiGroupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateApiGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateApiGroupReq.Merge(m, src)
}
func (m *EvaluateApiGroupReq) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateApiGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateApiGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateApiGroupReq proto.InternalMessageInfo

func (m *EvaluateApiGroupReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *EvaluateApiGroupReq) GetApiGroup() *GlobalSpecType {
	if m != nil {
		return m.ApiGroup
	}
	return nil
}

// Evaluate API Group Response
//
// x-displayName: "Evaluate API Group Response"
// Response for the Evaluate API Group request
type EvaluateApiGroupRsp struct {
	// API Group
	//
	// x-displayName: "API Group"
	// The API group as a result of evaluating API group builder against all API endpoints associated with the referenced object
	ApiGroup *GlobalSpecType `protobuf:"bytes,1,opt,name=api_group,json=apiGroup,proto3" json:"api_group,omitempty"`
	// matching_api_endpoints
	//
	// x-displayName: "Matching API Endpoints"
	// List of API Endpoints matched by the query expression.
	// The paths appear here with parameters as defined in OpenAPI spec file.
	MatchingApiEndpoints []*ApiEndpoint `protobuf:"bytes,2,rep,name=matching_api_endpoints,json=matchingApiEndpoints,proto3" json:"matching_api_endpoints,omitempty"`
	// apieps_timestamp
	//
	// x-displayName: "API Endpoints Timestamp"
	// The API endpoints timestamp indicates when the most recent update of API endpoints happened
	// For example, if the referenced object is HTTP LB then the API Discovery periodically updates
	// the API endpoints list based on application's traffic
	ApiepsTimestamp *types.Timestamp `protobuf:"bytes,3,opt,name=apieps_timestamp,json=apiepsTimestamp,proto3" json:"apieps_timestamp,omitempty"`
}

func (m *EvaluateApiGroupRsp) Reset()      { *m = EvaluateApiGroupRsp{} }
func (*EvaluateApiGroupRsp) ProtoMessage() {}
func (*EvaluateApiGroupRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c56144eaf2997be3, []int{1}
}
func (m *EvaluateApiGroupRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateApiGroupRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateApiGroupRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateApiGroupRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateApiGroupRsp.Merge(m, src)
}
func (m *EvaluateApiGroupRsp) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateApiGroupRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateApiGroupRsp.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateApiGroupRsp proto.InternalMessageInfo

func (m *EvaluateApiGroupRsp) GetApiGroup() *GlobalSpecType {
	if m != nil {
		return m.ApiGroup
	}
	return nil
}

func (m *EvaluateApiGroupRsp) GetMatchingApiEndpoints() []*ApiEndpoint {
	if m != nil {
		return m.MatchingApiEndpoints
	}
	return nil
}

func (m *EvaluateApiGroupRsp) GetApiepsTimestamp() *types.Timestamp {
	if m != nil {
		return m.ApiepsTimestamp
	}
	return nil
}

// Api Endpoint
//
// x-displayName: "API Endpoint"
// The API Endpoint according to OpenAPI specification.
type ApiEndpoint struct {
	// method
	//
	// x-displayName: "HTTP Method"
	// x-required
	// x-example: 'POST'
	// Method to match the input request API method against.
	Method schema.HttpMethod `protobuf:"varint,1,opt,name=method,proto3,enum=ves.io.schema.HttpMethod" json:"method,omitempty"`
	// path
	//
	// x-displayName: "Path"
	// x-required
	// x-example: "/api/users/{userid}"
	// An endpoint path, as specified in OpenAPI, including parameters.
	// The path should comply with RFC 3986 and may have parameters according to OpenAPI specification
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *ApiEndpoint) Reset()      { *m = ApiEndpoint{} }
func (*ApiEndpoint) ProtoMessage() {}
func (*ApiEndpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_c56144eaf2997be3, []int{2}
}
func (m *ApiEndpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiEndpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiEndpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiEndpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiEndpoint.Merge(m, src)
}
func (m *ApiEndpoint) XXX_Size() int {
	return m.Size()
}
func (m *ApiEndpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiEndpoint.DiscardUnknown(m)
}

var xxx_messageInfo_ApiEndpoint proto.InternalMessageInfo

func (m *ApiEndpoint) GetMethod() schema.HttpMethod {
	if m != nil {
		return m.Method
	}
	return schema.ANY
}

func (m *ApiEndpoint) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func init() {
	proto.RegisterType((*EvaluateApiGroupReq)(nil), "ves.io.schema.views.app_api_group.EvaluateApiGroupReq")
	golang_proto.RegisterType((*EvaluateApiGroupReq)(nil), "ves.io.schema.views.app_api_group.EvaluateApiGroupReq")
	proto.RegisterType((*EvaluateApiGroupRsp)(nil), "ves.io.schema.views.app_api_group.EvaluateApiGroupRsp")
	golang_proto.RegisterType((*EvaluateApiGroupRsp)(nil), "ves.io.schema.views.app_api_group.EvaluateApiGroupRsp")
	proto.RegisterType((*ApiEndpoint)(nil), "ves.io.schema.views.app_api_group.ApiEndpoint")
	golang_proto.RegisterType((*ApiEndpoint)(nil), "ves.io.schema.views.app_api_group.ApiEndpoint")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/app_api_group/public_customapi.proto", fileDescriptor_c56144eaf2997be3)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/app_api_group/public_customapi.proto", fileDescriptor_c56144eaf2997be3)
}

var fileDescriptor_c56144eaf2997be3 = []byte{
	// 666 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x4d, 0x6b, 0x13, 0x4f,
	0x18, 0xcf, 0x24, 0x7f, 0x4a, 0xb3, 0x85, 0x7f, 0xcb, 0x2a, 0x92, 0xc6, 0x32, 0xc6, 0x78, 0x09,
	0x42, 0x66, 0x6c, 0x84, 0x22, 0x7a, 0x6a, 0xa5, 0x54, 0x0f, 0xbe, 0x10, 0x0b, 0x82, 0x97, 0x30,
	0xd9, 0x3c, 0xdd, 0x8c, 0xee, 0xee, 0x8c, 0x3b, 0xb3, 0x6b, 0x83, 0x08, 0xa5, 0x7e, 0x81, 0xaa,
	0x5f, 0xc2, 0x8b, 0x77, 0xb1, 0x97, 0xde, 0xec, 0x49, 0x8a, 0x5e, 0x7a, 0xb4, 0x1b, 0x41, 0xbd,
	0xf5, 0x23, 0x48, 0x27, 0x9b, 0x98, 0x84, 0x4a, 0x8b, 0xde, 0x66, 0xe7, 0xf7, 0xf2, 0x3c, 0xf3,
	0xcc, 0x6f, 0xd6, 0xba, 0x16, 0x83, 0x22, 0x5c, 0x50, 0xe5, 0xb4, 0xc1, 0x67, 0x34, 0xe6, 0xf0,
	0x4c, 0x51, 0x26, 0x65, 0x83, 0x49, 0xde, 0x70, 0x43, 0x11, 0x49, 0x2a, 0xa3, 0xa6, 0xc7, 0x9d,
	0x86, 0x13, 0x29, 0x2d, 0x7c, 0x26, 0x39, 0x91, 0xa1, 0xd0, 0xc2, 0xbe, 0xd8, 0x53, 0x92, 0x9e,
	0x92, 0x18, 0x25, 0x19, 0x51, 0x16, 0xab, 0x2e, 0xd7, 0xed, 0xa8, 0x49, 0x1c, 0xe1, 0x53, 0x57,
	0xb8, 0x82, 0x1a, 0x65, 0x33, 0x5a, 0x33, 0x5f, 0xe6, 0xc3, 0xac, 0x7a, 0x8e, 0xc5, 0x39, 0x57,
	0x08, 0xd7, 0x03, 0xca, 0x24, 0xa7, 0x2c, 0x08, 0x84, 0x66, 0x9a, 0x8b, 0x40, 0xa5, 0xe8, 0x85,
	0x14, 0x1d, 0x78, 0x68, 0xee, 0x83, 0xd2, 0xcc, 0x97, 0x29, 0xe1, 0xfc, 0xe8, 0x51, 0x84, 0x1c,
	0x56, 0xcf, 0x8e, 0x82, 0xba, 0x23, 0xa1, 0x0f, 0xcd, 0x8d, 0x8d, 0x80, 0x79, 0xbc, 0xc5, 0x34,
	0xa4, 0x68, 0x79, 0x0c, 0x05, 0x05, 0x41, 0x3c, 0x66, 0x4e, 0x8e, 0x1f, 0x22, 0x6f, 0xb4, 0x60,
	0x8d, 0x07, 0xfc, 0x88, 0x3a, 0x52, 0xb1, 0x7a, 0xf2, 0xd0, 0x87, 0xe8, 0xe5, 0x97, 0xc8, 0x3a,
	0xb3, 0x1c, 0x33, 0x2f, 0x62, 0x1a, 0x16, 0x25, 0x5f, 0x39, 0x22, 0xd4, 0xe1, 0xa9, 0x3d, 0x67,
	0xe5, 0x03, 0xe6, 0x83, 0x92, 0xcc, 0x81, 0x02, 0x2a, 0xa1, 0x4a, 0xbe, 0xfe, 0x7b, 0xc3, 0xbe,
	0x6b, 0xe5, 0x07, 0x76, 0x85, 0x6c, 0x09, 0x55, 0xa6, 0x6a, 0xf3, 0xe4, 0xc4, 0x3b, 0x23, 0x2b,
	0x9e, 0x68, 0x32, 0xef, 0x81, 0x04, 0x67, 0xb5, 0x23, 0xa1, 0x3e, 0xc9, 0xd2, 0x82, 0xe5, 0xd7,
	0xd9, 0x63, 0xba, 0x50, 0x72, 0xb4, 0x0e, 0xfa, 0xe7, 0x3a, 0x76, 0xcb, 0x3a, 0xe7, 0x33, 0xed,
	0xb4, 0x79, 0xe0, 0x1a, 0x3a, 0x04, 0x2d, 0x29, 0x78, 0xa0, 0x55, 0x21, 0x5b, 0xca, 0x55, 0xa6,
	0x6a, 0xe4, 0x14, 0xe6, 0x8b, 0x92, 0x2f, 0xa7, 0xb2, 0xfa, 0xd9, 0xbe, 0xdb, 0xd0, 0xa6, 0xb2,
	0x97, 0xad, 0x19, 0x26, 0x39, 0x48, 0xd5, 0x18, 0xc4, 0xa8, 0x90, 0x33, 0xcd, 0x17, 0x49, 0x2f,
	0x68, 0xa4, 0x1f, 0x34, 0xb2, 0xda, 0x67, 0xd4, 0xa7, 0x7b, 0x9a, 0xc1, 0x46, 0x19, 0xac, 0xa9,
	0x21, 0x5b, 0x7b, 0xde, 0x9a, 0xf0, 0x41, 0xb7, 0x45, 0xcb, 0x0c, 0xe2, 0xff, 0xda, 0xec, 0x58,
	0xaf, 0xb7, 0xb4, 0x96, 0x77, 0x0c, 0xa1, 0x9e, 0x12, 0xed, 0x4b, 0xd6, 0x7f, 0x92, 0xe9, 0xb6,
	0xb9, 0xa1, 0xfc, 0xd2, 0xf4, 0x87, 0x9f, 0x3b, 0x39, 0x2b, 0x9c, 0x2c, 0xa1, 0xca, 0xc6, 0xe4,
	0x56, 0x0e, 0xd5, 0x0d, 0x58, 0x7b, 0x97, 0xb5, 0xf2, 0x37, 0xcd, 0xfb, 0x5b, 0xbc, 0x7f, 0xdb,
	0xfe, 0x8e, 0xac, 0x99, 0xf1, 0x9b, 0xb0, 0x17, 0x4e, 0x31, 0x96, 0x63, 0x42, 0x54, 0xfc, 0x2b,
	0x9d, 0x92, 0x65, 0x67, 0xf7, 0x7d, 0x16, 0x25, 0x1f, 0x0b, 0xc5, 0x18, 0x54, 0x95, 0x8b, 0xaa,
	0x0c, 0xc5, 0x7a, 0xa7, 0xaa, 0xc0, 0x89, 0x42, 0xae, 0x3b, 0xd5, 0x10, 0x58, 0x6b, 0xf3, 0xcb,
	0xb7, 0x37, 0xd9, 0x1b, 0xe5, 0x85, 0xf4, 0x0f, 0x42, 0x07, 0xd9, 0x54, 0xf4, 0xf9, 0x60, 0xfd,
	0x62, 0x34, 0xf8, 0x8a, 0x42, 0x5a, 0xec, 0x3a, 0xba, 0x5c, 0x5c, 0xd8, 0xd9, 0x46, 0xb9, 0xcf,
	0xdb, 0xa8, 0x72, 0x72, 0x8f, 0xf7, 0x9a, 0x8f, 0xc1, 0xd1, 0x9b, 0x9f, 0x0a, 0xd9, 0x2b, 0x68,
	0xe9, 0x15, 0xda, 0x3b, 0xc0, 0x99, 0xfd, 0x03, 0x9c, 0x39, 0x3c, 0xc0, 0x68, 0x23, 0xc1, 0xe8,
	0x6d, 0x82, 0xd1, 0x6e, 0x82, 0xd1, 0x5e, 0x82, 0xd1, 0xd7, 0x04, 0xa3, 0x1f, 0x09, 0xce, 0x1c,
	0x26, 0x18, 0x6d, 0x75, 0x71, 0x66, 0xa7, 0x8b, 0xd1, 0x5e, 0x17, 0x67, 0xf6, 0xbb, 0x38, 0xf3,
	0xe8, 0xa1, 0x2b, 0xe4, 0x13, 0x97, 0xc4, 0xc2, 0xd3, 0x10, 0x86, 0x8c, 0x44, 0x8a, 0x9a, 0xc5,
	0x9a, 0x08, 0xfd, 0xa3, 0x43, 0xc6, 0xbc, 0x05, 0x61, 0xb5, 0x0f, 0x53, 0xd9, 0x74, 0x05, 0x85,
	0x75, 0x9d, 0x3e, 0xe5, 0x3f, 0xbf, 0xe8, 0xe6, 0x84, 0xc9, 0xd3, 0xd5, 0x5f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x1c, 0x5b, 0x6a, 0xcd, 0x72, 0x05, 0x00, 0x00,
}

func (this *EvaluateApiGroupReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluateApiGroupReq)
	if !ok {
		that2, ok := that.(EvaluateApiGroupReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.ApiGroup.Equal(that1.ApiGroup) {
		return false
	}
	return true
}
func (this *EvaluateApiGroupRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluateApiGroupRsp)
	if !ok {
		that2, ok := that.(EvaluateApiGroupRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiGroup.Equal(that1.ApiGroup) {
		return false
	}
	if len(this.MatchingApiEndpoints) != len(that1.MatchingApiEndpoints) {
		return false
	}
	for i := range this.MatchingApiEndpoints {
		if !this.MatchingApiEndpoints[i].Equal(that1.MatchingApiEndpoints[i]) {
			return false
		}
	}
	if !this.ApiepsTimestamp.Equal(that1.ApiepsTimestamp) {
		return false
	}
	return true
}
func (this *ApiEndpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiEndpoint)
	if !ok {
		that2, ok := that.(ApiEndpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	return true
}
func (this *EvaluateApiGroupReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_api_group.EvaluateApiGroupReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.ApiGroup != nil {
		s = append(s, "ApiGroup: "+fmt.Sprintf("%#v", this.ApiGroup)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvaluateApiGroupRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&app_api_group.EvaluateApiGroupRsp{")
	if this.ApiGroup != nil {
		s = append(s, "ApiGroup: "+fmt.Sprintf("%#v", this.ApiGroup)+",\n")
	}
	if this.MatchingApiEndpoints != nil {
		s = append(s, "MatchingApiEndpoints: "+fmt.Sprintf("%#v", this.MatchingApiEndpoints)+",\n")
	}
	if this.ApiepsTimestamp != nil {
		s = append(s, "ApiepsTimestamp: "+fmt.Sprintf("%#v", this.ApiepsTimestamp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiEndpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_api_group.ApiEndpoint{")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// Evaluate API Group
	//
	// x-displayName: "Evaluate API Group"
	// Evaluate API Group Builder against all API endpoints associated with the referenced object and return the resulting API Group.
	// For example, if the referenced object is an HTTP LB then all discovered and imported endpoints are associated with it.
	EvaluateApiGroup(ctx context.Context, in *EvaluateApiGroupReq, opts ...grpc.CallOption) (*EvaluateApiGroupRsp, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) EvaluateApiGroup(ctx context.Context, in *EvaluateApiGroupReq, opts ...grpc.CallOption) (*EvaluateApiGroupRsp, error) {
	out := new(EvaluateApiGroupRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.app_api_group.CustomAPI/EvaluateApiGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// Evaluate API Group
	//
	// x-displayName: "Evaluate API Group"
	// Evaluate API Group Builder against all API endpoints associated with the referenced object and return the resulting API Group.
	// For example, if the referenced object is an HTTP LB then all discovered and imported endpoints are associated with it.
	EvaluateApiGroup(context.Context, *EvaluateApiGroupReq) (*EvaluateApiGroupRsp, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) EvaluateApiGroup(ctx context.Context, req *EvaluateApiGroupReq) (*EvaluateApiGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateApiGroup not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_EvaluateApiGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateApiGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).EvaluateApiGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.app_api_group.CustomAPI/EvaluateApiGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).EvaluateApiGroup(ctx, req.(*EvaluateApiGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.views.app_api_group.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EvaluateApiGroup",
			Handler:    _CustomAPI_EvaluateApiGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/views/app_api_group/public_customapi.proto",
}

func (m *EvaluateApiGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateApiGroupReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateApiGroupReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApiGroup != nil {
		{
			size, err := m.ApiGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvaluateApiGroupRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateApiGroupRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateApiGroupRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApiepsTimestamp != nil {
		{
			size, err := m.ApiepsTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MatchingApiEndpoints) > 0 {
		for iNdEx := len(m.MatchingApiEndpoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MatchingApiEndpoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ApiGroup != nil {
		{
			size, err := m.ApiGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApiEndpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiEndpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiEndpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if m.Method != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EvaluateApiGroupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.ApiGroup != nil {
		l = m.ApiGroup.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *EvaluateApiGroupRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiGroup != nil {
		l = m.ApiGroup.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.MatchingApiEndpoints) > 0 {
		for _, e := range m.MatchingApiEndpoints {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if m.ApiepsTimestamp != nil {
		l = m.ApiepsTimestamp.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ApiEndpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Method != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.Method))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *EvaluateApiGroupReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvaluateApiGroupReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`ApiGroup:` + strings.Replace(fmt.Sprintf("%v", this.ApiGroup), "GlobalSpecType", "GlobalSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvaluateApiGroupRsp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMatchingApiEndpoints := "[]*ApiEndpoint{"
	for _, f := range this.MatchingApiEndpoints {
		repeatedStringForMatchingApiEndpoints += strings.Replace(f.String(), "ApiEndpoint", "ApiEndpoint", 1) + ","
	}
	repeatedStringForMatchingApiEndpoints += "}"
	s := strings.Join([]string{`&EvaluateApiGroupRsp{`,
		`ApiGroup:` + strings.Replace(fmt.Sprintf("%v", this.ApiGroup), "GlobalSpecType", "GlobalSpecType", 1) + `,`,
		`MatchingApiEndpoints:` + repeatedStringForMatchingApiEndpoints + `,`,
		`ApiepsTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.ApiepsTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiEndpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiEndpoint{`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EvaluateApiGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateApiGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateApiGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiGroup == nil {
				m.ApiGroup = &GlobalSpecType{}
			}
			if err := m.ApiGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluateApiGroupRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateApiGroupRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateApiGroupRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiGroup == nil {
				m.ApiGroup = &GlobalSpecType{}
			}
			if err := m.ApiGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchingApiEndpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchingApiEndpoints = append(m.MatchingApiEndpoints, &ApiEndpoint{})
			if err := m.MatchingApiEndpoints[len(m.MatchingApiEndpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiepsTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiepsTimestamp == nil {
				m.ApiepsTimestamp = &types.Timestamp{}
			}
			if err := m.ApiepsTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiEndpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiEndpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiEndpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= schema.HttpMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)
