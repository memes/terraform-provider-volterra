// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/cdn_loadbalancer/access_log/types.proto

package access_log

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log/access_log"
	math "math"
	strconv "strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Metrics Tag options
//
// x-displayName: "Tags"
// Tags on which CDN access logs can be filtered or grouped by
type CDNAccessLogTag int32

const (
	// x-displayName: "CDN Distribution Name"
	CDN_NAME CDNAccessLogTag = 0
	// x-displayName: "Site Name"
	SITE_NAME CDNAccessLogTag = 1
	// x-displayName: "HTTP Method"
	METHOD CDNAccessLogTag = 2
	// x-displayName: "Request Path"
	REQ_PATH CDNAccessLogTag = 3
	// x-displayName: "HTTP Response Code"
	RSP_CODE CDNAccessLogTag = 4
	// x-displayName: "User Agent"
	USER_AGENT CDNAccessLogTag = 5
	// x-displayName: "Protocol Scheme"
	SCHEME CDNAccessLogTag = 6
	// x-displayName: "Country"
	COUNTRY CDNAccessLogTag = 10
	// x-displayName: "Cache Status"
	CACHE_STATUS CDNAccessLogTag = 11
	// x-displayName: "Response Content Type"
	RSP_CONTENT_TYPE CDNAccessLogTag = 12
	// x-displayName: "Host Header"
	HOST_HEADER CDNAccessLogTag = 13
	// x-displayName: "Referer"
	REFERER CDNAccessLogTag = 14
	// x-displayName: "SNI Header"
	SNI CDNAccessLogTag = 15
	// x-displayName: "Upstream Status"
	UPSTREAM_STATUS CDNAccessLogTag = 18
	// x-displayName: "HTTP Response Code Class"
	RSP_CODE_CLASS CDNAccessLogTag = 19
	// x-displayName: "Source IP Address"
	SRC_IP CDNAccessLogTag = 20
	// x-displayName: "TLS Protocol Version"
	TLS_VERSION CDNAccessLogTag = 21
	// x-displayName: "HTTP Request size"
	REQ_SIZE CDNAccessLogTag = 22
	// x-displayName: "HTTP Version"
	HTTP_VERSION CDNAccessLogTag = 23
	// x-displayName: "City"
	CITY_NAME CDNAccessLogTag = 24
	// x-displayName: "Upstream Address"
	UPSTREAM_ADDR CDNAccessLogTag = 25
)

var CDNAccessLogTag_name = map[int32]string{
	0:  "CDN_NAME",
	1:  "SITE_NAME",
	2:  "METHOD",
	3:  "REQ_PATH",
	4:  "RSP_CODE",
	5:  "USER_AGENT",
	6:  "SCHEME",
	10: "COUNTRY",
	11: "CACHE_STATUS",
	12: "RSP_CONTENT_TYPE",
	13: "HOST_HEADER",
	14: "REFERER",
	15: "SNI",
	18: "UPSTREAM_STATUS",
	19: "RSP_CODE_CLASS",
	20: "SRC_IP",
	21: "TLS_VERSION",
	22: "REQ_SIZE",
	23: "HTTP_VERSION",
	24: "CITY_NAME",
	25: "UPSTREAM_ADDR",
}

var CDNAccessLogTag_value = map[string]int32{
	"CDN_NAME":         0,
	"SITE_NAME":        1,
	"METHOD":           2,
	"REQ_PATH":         3,
	"RSP_CODE":         4,
	"USER_AGENT":       5,
	"SCHEME":           6,
	"COUNTRY":          10,
	"CACHE_STATUS":     11,
	"RSP_CONTENT_TYPE": 12,
	"HOST_HEADER":      13,
	"REFERER":          14,
	"SNI":              15,
	"UPSTREAM_STATUS":  18,
	"RSP_CODE_CLASS":   19,
	"SRC_IP":           20,
	"TLS_VERSION":      21,
	"REQ_SIZE":         22,
	"HTTP_VERSION":     23,
	"CITY_NAME":        24,
	"UPSTREAM_ADDR":    25,
}

func (CDNAccessLogTag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_abd56dd2dddfd9a0, []int{0}
}

func init() {
	proto.RegisterEnum("ves.io.schema.views.cdn_loadbalancer.access_log.CDNAccessLogTag", CDNAccessLogTag_name, CDNAccessLogTag_value)
}

func init() {
	proto.RegisterFile("ves.io/schema/views/cdn_loadbalancer/access_log/types.proto", fileDescriptor_abd56dd2dddfd9a0)
}

var fileDescriptor_abd56dd2dddfd9a0 = []byte{
	// 542 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4f, 0x73, 0x93, 0x40,
	0x1c, 0x85, 0x56, 0x5b, 0xdd, 0xe6, 0xcf, 0xba, 0xad, 0x7f, 0x1a, 0x75, 0xc7, 0xa3, 0xe3, 0x4c,
	0xe0, 0xe0, 0xd1, 0x13, 0xc2, 0x2a, 0xcc, 0x24, 0x04, 0xd9, 0x8d, 0x33, 0xe9, 0x65, 0x87, 0x10,
	0x4a, 0x19, 0x93, 0x2c, 0x03, 0x24, 0xea, 0xcd, 0x8f, 0xe0, 0x37, 0xf0, 0xea, 0x47, 0xf1, 0x98,
	0x93, 0x93, 0xa3, 0x21, 0x17, 0x8f, 0xfd, 0x08, 0x0e, 0xd0, 0xd4, 0xa6, 0xf5, 0xe0, 0xed, 0xf7,
	0xe6, 0xfd, 0xde, 0xfb, 0x3d, 0x1e, 0x00, 0x5e, 0xcd, 0x83, 0x54, 0x89, 0x84, 0x9a, 0xfa, 0x67,
	0xc1, 0xc4, 0x53, 0xe7, 0x51, 0xf0, 0x31, 0x55, 0xfd, 0xd1, 0x94, 0x8f, 0x85, 0x37, 0x1a, 0x7a,
	0x63, 0x6f, 0xea, 0x07, 0x89, 0xea, 0xf9, 0x7e, 0x90, 0xa6, 0x7c, 0x2c, 0x42, 0x35, 0xfb, 0x1c,
	0x07, 0xa9, 0x12, 0x27, 0x22, 0x13, 0x48, 0xad, 0xc4, 0x4a, 0x25, 0x56, 0x4a, 0xb1, 0x72, 0x5d,
	0xac, 0xfc, 0x15, 0xb7, 0xda, 0x61, 0x94, 0x9d, 0xcd, 0x86, 0x8a, 0x2f, 0x26, 0x6a, 0x28, 0x42,
	0xa1, 0x96, 0x3e, 0xc3, 0xd9, 0x69, 0x89, 0x4a, 0x50, 0x4e, 0x95, 0x7f, 0xeb, 0xf9, 0x76, 0xb8,
	0xe2, 0xfc, 0xbf, 0x93, 0xb4, 0x9e, 0xde, 0xdc, 0xbc, 0x4a, 0x3f, 0xde, 0xa6, 0x45, 0x9c, 0x45,
	0x62, 0xba, 0x21, 0x8f, 0xb7, 0xc9, 0xab, 0xba, 0x27, 0xd7, 0xda, 0xf1, 0xc6, 0xd1, 0xc8, 0xcb,
	0x82, 0x0b, 0xf6, 0xd9, 0xcd, 0xee, 0xf8, 0x96, 0xf5, 0x8b, 0x9f, 0x3b, 0xa0, 0xa9, 0x1b, 0xb6,
	0x56, 0x86, 0xee, 0x88, 0x90, 0x79, 0x21, 0xaa, 0x81, 0x3b, 0xba, 0x61, 0x73, 0x5b, 0xeb, 0x12,
	0x28, 0xa1, 0x3a, 0xb8, 0x4b, 0x2d, 0x46, 0x2a, 0x28, 0x23, 0x00, 0xf6, 0xba, 0x84, 0x99, 0x3d,
	0x03, 0xee, 0x14, 0x8b, 0x2e, 0x79, 0xc7, 0x1d, 0x8d, 0x99, 0x70, 0xb7, 0x44, 0xd4, 0xe1, 0x7a,
	0xcf, 0x20, 0xf0, 0x16, 0x6a, 0x00, 0xd0, 0xa7, 0xc4, 0xe5, 0xda, 0x5b, 0x62, 0x33, 0x78, 0xbb,
	0xd0, 0x51, 0xdd, 0x24, 0x5d, 0x02, 0xf7, 0xd0, 0x01, 0xd8, 0xd7, 0x7b, 0x7d, 0x9b, 0xb9, 0x03,
	0x08, 0x10, 0x04, 0x35, 0x5d, 0xd3, 0x4d, 0xc2, 0x29, 0xd3, 0x58, 0x9f, 0xc2, 0x03, 0x74, 0x04,
	0x60, 0x65, 0x64, 0x33, 0x62, 0x33, 0xce, 0x06, 0x0e, 0x81, 0x35, 0xd4, 0x04, 0x07, 0x66, 0x8f,
	0x32, 0x6e, 0x12, 0xcd, 0x20, 0x2e, 0xac, 0x17, 0x2e, 0x2e, 0x79, 0x43, 0x5c, 0xe2, 0xc2, 0x06,
	0xda, 0x07, 0xbb, 0xd4, 0xb6, 0x60, 0x13, 0x1d, 0x82, 0x66, 0xdf, 0xa1, 0xcc, 0x25, 0x5a, 0x77,
	0xe3, 0x88, 0x10, 0x02, 0x8d, 0x4d, 0x34, 0xae, 0x77, 0x34, 0x4a, 0xe1, 0x61, 0x19, 0xc8, 0xd5,
	0xb9, 0xe5, 0xc0, 0xa3, 0xc2, 0x9b, 0x75, 0x28, 0x7f, 0x4f, 0x5c, 0x6a, 0xf5, 0x6c, 0x78, 0x7f,
	0xf3, 0x64, 0xd4, 0x3a, 0x21, 0xf0, 0x41, 0x11, 0xd1, 0x64, 0xcc, 0xb9, 0xe4, 0x1f, 0x16, 0xa5,
	0xe8, 0x16, 0x1b, 0x54, 0xa5, 0x3c, 0x42, 0xf7, 0x40, 0xfd, 0xf2, 0xa8, 0x66, 0x18, 0x2e, 0x3c,
	0x7e, 0xfd, 0x4d, 0x5e, 0xac, 0xb0, 0xb4, 0x5c, 0x61, 0xe9, 0x7c, 0x85, 0xe5, 0x2f, 0x39, 0x96,
	0xbf, 0xe7, 0x58, 0xfe, 0x91, 0x63, 0x79, 0x91, 0x63, 0x79, 0x99, 0x63, 0xf9, 0x57, 0x8e, 0xe5,
	0xdf, 0x39, 0x96, 0xce, 0x73, 0x2c, 0x7f, 0x5d, 0x63, 0x69, 0xb1, 0xc6, 0xd2, 0x72, 0x8d, 0xa5,
	0x93, 0x20, 0x14, 0xf1, 0x87, 0x50, 0x99, 0x8b, 0x71, 0x16, 0x24, 0x89, 0xa7, 0xcc, 0x52, 0xb5,
	0x1c, 0x4e, 0x45, 0x32, 0x69, 0xc7, 0x89, 0x98, 0x47, 0xa3, 0x20, 0x69, 0x6f, 0x68, 0x35, 0x1e,
	0x86, 0x42, 0x0d, 0x3e, 0x65, 0x17, 0x2f, 0xf9, 0x7f, 0xff, 0x93, 0xe1, 0x5e, 0xf9, 0x05, 0xbc,
	0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x3f, 0x00, 0x3a, 0x61, 0x03, 0x00, 0x00,
}

func (x CDNAccessLogTag) String() string {
	s, ok := CDNAccessLogTag_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
