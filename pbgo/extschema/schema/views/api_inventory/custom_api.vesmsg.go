//
// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package api_inventory

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *GetPathSuggestionsReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetPathSuggestionsReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetPathSuggestionsReq) DeepCopy() *GetPathSuggestionsReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetPathSuggestionsReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetPathSuggestionsReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetPathSuggestionsReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetPathSuggestionsReqValidator().Validate(ctx, m, opts...)
}

type ValidateGetPathSuggestionsReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetPathSuggestionsReq) MatchValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for match_value")
	}

	return validatorFn, nil
}

func (v *ValidateGetPathSuggestionsReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetPathSuggestionsReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetPathSuggestionsReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["match_value"]; exists {

		vOpts := append(opts, db.WithValidateField("match_value"))
		if err := fv(ctx, m.GetMatchValue(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetPathSuggestionsReqValidator = func() *ValidateGetPathSuggestionsReq {
	v := &ValidateGetPathSuggestionsReq{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhMatchValue := v.MatchValueValidationRuleHandler
	rulesMatchValue := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhMatchValue(rulesMatchValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetPathSuggestionsReq.match_value: %s", err)
		panic(errMsg)
	}
	v.FldValidators["match_value"] = vFn

	return v
}()

func GetPathSuggestionsReqValidator() db.Validator {
	return DefaultGetPathSuggestionsReqValidator
}
