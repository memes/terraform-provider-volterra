// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/tenant_configuration/types.proto

package tenant_configuration

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BasicConfiguration
//
// x-displayName: "BasicConfiguration"
type BasicConfiguration struct {
	// Display Name
	//
	// x-displayName: "Display Name"
	// x-example: "value"
	// Tenant display name in the login screen
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (m *BasicConfiguration) Reset()      { *m = BasicConfiguration{} }
func (*BasicConfiguration) ProtoMessage() {}
func (*BasicConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_364750f54271448d, []int{0}
}
func (m *BasicConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BasicConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BasicConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicConfiguration.Merge(m, src)
}
func (m *BasicConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *BasicConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_BasicConfiguration proto.InternalMessageInfo

func (m *BasicConfiguration) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

// BruteForceDetectionSettings
//
// x-displayName: "BruteForceDetectionSettings"
type BruteForceDetectionSettings struct {
	// Max Login Failures
	//
	// x-displayName: "Max Login Failures"
	// x-example: "5"
	// How many failures before wait is triggered.
	// When login failure count is hit, user will be temporarily locked for a max duration of 15 minutes.
	MaxLoginFailures uint32 `protobuf:"varint,1,opt,name=max_login_failures,json=maxLoginFailures,proto3" json:"max_login_failures,omitempty"`
}

func (m *BruteForceDetectionSettings) Reset()      { *m = BruteForceDetectionSettings{} }
func (*BruteForceDetectionSettings) ProtoMessage() {}
func (*BruteForceDetectionSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_364750f54271448d, []int{1}
}
func (m *BruteForceDetectionSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BruteForceDetectionSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BruteForceDetectionSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BruteForceDetectionSettings.Merge(m, src)
}
func (m *BruteForceDetectionSettings) XXX_Size() int {
	return m.Size()
}
func (m *BruteForceDetectionSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_BruteForceDetectionSettings.DiscardUnknown(m)
}

var xxx_messageInfo_BruteForceDetectionSettings proto.InternalMessageInfo

func (m *BruteForceDetectionSettings) GetMaxLoginFailures() uint32 {
	if m != nil {
		return m.MaxLoginFailures
	}
	return 0
}

// PasswordPolicy
//
// x-displayName: "PasswordPolicy"
type PasswordPolicy struct {
	// Digits
	//
	// x-displayName: "Min Number Of Digits"
	// x-example: "1"
	// The number of digits required to be in the password string.
	Digits uint32 `protobuf:"varint,1,opt,name=digits,proto3" json:"digits,omitempty"`
	// Lowercase Characters
	//
	// x-displayName: "Min Number Of Lowercase Characters"
	// x-example: "8"
	// The number of lower case letters required to be in the password string.
	LowercaseCharacters uint32 `protobuf:"varint,2,opt,name=lowercase_characters,json=lowercaseCharacters,proto3" json:"lowercase_characters,omitempty"`
	// Uppercase Characters
	//
	// x-displayName: "Min Number Of Uppercase Characters"
	// x-example: "2"
	// The number of upper case letters required to be in the password string.
	UppercaseCharacters uint32 `protobuf:"varint,3,opt,name=uppercase_characters,json=uppercaseCharacters,proto3" json:"uppercase_characters,omitempty"`
	// Special Characters
	//
	// x-displayName: "Min Number Of Special Characters"
	// x-example: "1"
	// The number of special characters like '?!#%$' required to be in the password string.
	SpecialCharacters uint32 `protobuf:"varint,4,opt,name=special_characters,json=specialCharacters,proto3" json:"special_characters,omitempty"`
	// Not Username
	//
	// x-displayName: "Not Username"
	// When set, the password is not allowed to be the same as the username.
	NotUsername bool `protobuf:"varint,5,opt,name=not_username,json=notUsername,proto3" json:"not_username,omitempty"`
	// Expire Password
	//
	// x-displayName: "Expire Password"
	// x-example: "30"
	// The number of days for which the password is valid.
	// After the number of days has expired, the user is required to change their password.
	ExpirePassword uint32 `protobuf:"varint,6,opt,name=expire_password,json=expirePassword,proto3" json:"expire_password,omitempty"`
	// Not Recently Used
	//
	// x-displayName: "Not Recently Used"
	// x-example: "2"
	// This policy is used to restrict user from using previously used passwords.
	// Number that's set determines number of last passwords which user cannot use as new password.
	NotRecentlyUsed uint32 `protobuf:"varint,7,opt,name=not_recently_used,json=notRecentlyUsed,proto3" json:"not_recently_used,omitempty"`
	// Minimum Length
	//
	// x-displayName: "Minimum Length"
	// x-required
	// x-example: "12"
	// Minimum length of password.
	MinimumLength uint32 `protobuf:"varint,8,opt,name=minimum_length,json=minimumLength,proto3" json:"minimum_length,omitempty"`
}

func (m *PasswordPolicy) Reset()      { *m = PasswordPolicy{} }
func (*PasswordPolicy) ProtoMessage() {}
func (*PasswordPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_364750f54271448d, []int{2}
}
func (m *PasswordPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PasswordPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PasswordPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordPolicy.Merge(m, src)
}
func (m *PasswordPolicy) XXX_Size() int {
	return m.Size()
}
func (m *PasswordPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordPolicy proto.InternalMessageInfo

func (m *PasswordPolicy) GetDigits() uint32 {
	if m != nil {
		return m.Digits
	}
	return 0
}

func (m *PasswordPolicy) GetLowercaseCharacters() uint32 {
	if m != nil {
		return m.LowercaseCharacters
	}
	return 0
}

func (m *PasswordPolicy) GetUppercaseCharacters() uint32 {
	if m != nil {
		return m.UppercaseCharacters
	}
	return 0
}

func (m *PasswordPolicy) GetSpecialCharacters() uint32 {
	if m != nil {
		return m.SpecialCharacters
	}
	return 0
}

func (m *PasswordPolicy) GetNotUsername() bool {
	if m != nil {
		return m.NotUsername
	}
	return false
}

func (m *PasswordPolicy) GetExpirePassword() uint32 {
	if m != nil {
		return m.ExpirePassword
	}
	return 0
}

func (m *PasswordPolicy) GetNotRecentlyUsed() uint32 {
	if m != nil {
		return m.NotRecentlyUsed
	}
	return 0
}

func (m *PasswordPolicy) GetMinimumLength() uint32 {
	if m != nil {
		return m.MinimumLength
	}
	return 0
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
// Shape of the tenant configuration specification
type GlobalSpecType struct {
	// Basic Configuration
	//
	// x-displayName: "Basic Configuration"
	// Basic configuration contains general parameters which can be adjusted within tenant.
	BasicConfiguration *BasicConfiguration `protobuf:"bytes,1,opt,name=basic_configuration,json=basicConfiguration,proto3" json:"basic_configuration,omitempty"`
	// Brute Force Detection Settings
	//
	// x-displayName: "Brute Force Detection Settings"
	// Our brute force detection system uses temporary lockout algorithm.
	// Temporary lockout will disable a userâ€™s account for a time period after an attack is detected;
	// the time period for which the account is disabled increases the longer the attack continues.
	// You can adjust some parameters of the brute force detection system.
	BruteForceDetectionSettings *BruteForceDetectionSettings `protobuf:"bytes,2,opt,name=brute_force_detection_settings,json=bruteForceDetectionSettings,proto3" json:"brute_force_detection_settings,omitempty"`
	// Password Policy
	//
	// x-displayName: "Password Policy"
	// Password policy allows you to configure your own password policy within tenant.
	// Each user within tenant will have to comply with the configured policy when they set or update the password.
	PasswordPolicy *PasswordPolicy `protobuf:"bytes,3,opt,name=password_policy,json=passwordPolicy,proto3" json:"password_policy,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_364750f54271448d, []int{3}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetBasicConfiguration() *BasicConfiguration {
	if m != nil {
		return m.BasicConfiguration
	}
	return nil
}

func (m *GlobalSpecType) GetBruteForceDetectionSettings() *BruteForceDetectionSettings {
	if m != nil {
		return m.BruteForceDetectionSettings
	}
	return nil
}

func (m *GlobalSpecType) GetPasswordPolicy() *PasswordPolicy {
	if m != nil {
		return m.PasswordPolicy
	}
	return nil
}

// CreateSpecType
//
// x-displayName: "Create tenant configuration"
// Shape of the tenant configuration specification
type CreateSpecType struct {
	BasicConfiguration          *BasicConfiguration          `protobuf:"bytes,1,opt,name=basic_configuration,json=basicConfiguration,proto3" json:"basic_configuration,omitempty"`
	BruteForceDetectionSettings *BruteForceDetectionSettings `protobuf:"bytes,2,opt,name=brute_force_detection_settings,json=bruteForceDetectionSettings,proto3" json:"brute_force_detection_settings,omitempty"`
	PasswordPolicy              *PasswordPolicy              `protobuf:"bytes,3,opt,name=password_policy,json=passwordPolicy,proto3" json:"password_policy,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_364750f54271448d, []int{4}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetBasicConfiguration() *BasicConfiguration {
	if m != nil {
		return m.BasicConfiguration
	}
	return nil
}

func (m *CreateSpecType) GetBruteForceDetectionSettings() *BruteForceDetectionSettings {
	if m != nil {
		return m.BruteForceDetectionSettings
	}
	return nil
}

func (m *CreateSpecType) GetPasswordPolicy() *PasswordPolicy {
	if m != nil {
		return m.PasswordPolicy
	}
	return nil
}

// ReplaceSpecType
//
// x-displayName: "Replace tenant configuration"
// Shape of the tenant configuration specification
type ReplaceSpecType struct {
	BasicConfiguration          *BasicConfiguration          `protobuf:"bytes,1,opt,name=basic_configuration,json=basicConfiguration,proto3" json:"basic_configuration,omitempty"`
	BruteForceDetectionSettings *BruteForceDetectionSettings `protobuf:"bytes,2,opt,name=brute_force_detection_settings,json=bruteForceDetectionSettings,proto3" json:"brute_force_detection_settings,omitempty"`
	PasswordPolicy              *PasswordPolicy              `protobuf:"bytes,3,opt,name=password_policy,json=passwordPolicy,proto3" json:"password_policy,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_364750f54271448d, []int{5}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetBasicConfiguration() *BasicConfiguration {
	if m != nil {
		return m.BasicConfiguration
	}
	return nil
}

func (m *ReplaceSpecType) GetBruteForceDetectionSettings() *BruteForceDetectionSettings {
	if m != nil {
		return m.BruteForceDetectionSettings
	}
	return nil
}

func (m *ReplaceSpecType) GetPasswordPolicy() *PasswordPolicy {
	if m != nil {
		return m.PasswordPolicy
	}
	return nil
}

// GetSpecType
//
// x-displayName: "Get tenant configuration"
// Shape of the tenant configuration specification
type GetSpecType struct {
	BasicConfiguration          *BasicConfiguration          `protobuf:"bytes,1,opt,name=basic_configuration,json=basicConfiguration,proto3" json:"basic_configuration,omitempty"`
	BruteForceDetectionSettings *BruteForceDetectionSettings `protobuf:"bytes,2,opt,name=brute_force_detection_settings,json=bruteForceDetectionSettings,proto3" json:"brute_force_detection_settings,omitempty"`
	PasswordPolicy              *PasswordPolicy              `protobuf:"bytes,3,opt,name=password_policy,json=passwordPolicy,proto3" json:"password_policy,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_364750f54271448d, []int{6}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetBasicConfiguration() *BasicConfiguration {
	if m != nil {
		return m.BasicConfiguration
	}
	return nil
}

func (m *GetSpecType) GetBruteForceDetectionSettings() *BruteForceDetectionSettings {
	if m != nil {
		return m.BruteForceDetectionSettings
	}
	return nil
}

func (m *GetSpecType) GetPasswordPolicy() *PasswordPolicy {
	if m != nil {
		return m.PasswordPolicy
	}
	return nil
}

func init() {
	proto.RegisterType((*BasicConfiguration)(nil), "ves.io.schema.views.tenant_configuration.BasicConfiguration")
	golang_proto.RegisterType((*BasicConfiguration)(nil), "ves.io.schema.views.tenant_configuration.BasicConfiguration")
	proto.RegisterType((*BruteForceDetectionSettings)(nil), "ves.io.schema.views.tenant_configuration.BruteForceDetectionSettings")
	golang_proto.RegisterType((*BruteForceDetectionSettings)(nil), "ves.io.schema.views.tenant_configuration.BruteForceDetectionSettings")
	proto.RegisterType((*PasswordPolicy)(nil), "ves.io.schema.views.tenant_configuration.PasswordPolicy")
	golang_proto.RegisterType((*PasswordPolicy)(nil), "ves.io.schema.views.tenant_configuration.PasswordPolicy")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.tenant_configuration.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.tenant_configuration.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.tenant_configuration.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.tenant_configuration.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.tenant_configuration.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.tenant_configuration.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.tenant_configuration.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.tenant_configuration.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/tenant_configuration/types.proto", fileDescriptor_364750f54271448d)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/tenant_configuration/types.proto", fileDescriptor_364750f54271448d)
}

var fileDescriptor_364750f54271448d = []byte{
	// 752 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xbf, 0x6f, 0xf3, 0x44,
	0x18, 0x8e, 0x93, 0xef, 0xeb, 0xd7, 0xef, 0xf2, 0x7d, 0x49, 0xeb, 0x32, 0x98, 0x14, 0x1d, 0x6d,
	0xa6, 0xa8, 0x52, 0x6c, 0xd4, 0x22, 0x51, 0xa1, 0x8a, 0x21, 0x81, 0x76, 0xa9, 0x50, 0xe5, 0x52,
	0x06, 0x06, 0xac, 0xb3, 0xfd, 0xc6, 0x39, 0x61, 0xfb, 0x4e, 0x77, 0xe7, 0x34, 0xd9, 0x10, 0x6c,
	0x4c, 0xfc, 0x01, 0x48, 0xac, 0xfc, 0x09, 0x88, 0xa9, 0x23, 0x62, 0xea, 0xd8, 0x91, 0x3a, 0x0b,
	0x4c, 0xf4, 0x3f, 0x28, 0xb2, 0xe3, 0x94, 0xfc, 0x28, 0x50, 0x16, 0xba, 0x74, 0xf3, 0xf9, 0x7d,
	0x9e, 0xe7, 0xbd, 0x7b, 0x9f, 0xe7, 0xa4, 0x43, 0xef, 0x0e, 0x40, 0x9a, 0x94, 0x59, 0xd2, 0xeb,
	0x43, 0x44, 0xac, 0x01, 0x85, 0x73, 0x69, 0x29, 0x88, 0x49, 0xac, 0x1c, 0x8f, 0xc5, 0x3d, 0x1a,
	0x24, 0x82, 0x28, 0xca, 0x62, 0x4b, 0x8d, 0x38, 0x48, 0x93, 0x0b, 0xa6, 0x98, 0xde, 0x9a, 0xb0,
	0xcc, 0x09, 0xcb, 0xcc, 0x59, 0xe6, 0x7d, 0xac, 0x46, 0x3b, 0xa0, 0xaa, 0x9f, 0xb8, 0xa6, 0xc7,
	0x22, 0x2b, 0x60, 0x01, 0xb3, 0x72, 0x01, 0x37, 0xe9, 0xe5, 0xab, 0x7c, 0x91, 0x7f, 0x4d, 0x84,
	0x1b, 0x9b, 0xf3, 0xdb, 0x61, 0x3c, 0x13, 0x29, 0xba, 0x36, 0xde, 0x9c, 0x2f, 0xce, 0x6c, 0xa8,
	0xf1, 0xd6, 0xc2, 0x31, 0x48, 0x48, 0x7d, 0xa2, 0xa0, 0xa8, 0x6e, 0x2d, 0x1f, 0xd2, 0x99, 0x97,
	0x7e, 0xfb, 0xde, 0x31, 0xfc, 0xd5, 0xa0, 0xd9, 0x45, 0x7a, 0x87, 0x48, 0xea, 0x75, 0x67, 0x4f,
	0xa7, 0xb7, 0xd1, 0x2b, 0x9f, 0x4a, 0x1e, 0x92, 0x91, 0x13, 0x93, 0x08, 0x0c, 0x6d, 0x4b, 0x6b,
	0xbd, 0xec, 0xa0, 0x9f, 0x7e, 0xbf, 0xa8, 0x3c, 0x17, 0x15, 0xe3, 0x56, 0xb3, 0xab, 0x45, 0xfd,
	0x63, 0x12, 0x41, 0xf3, 0x53, 0xb4, 0xd9, 0x11, 0x89, 0x82, 0x43, 0x26, 0x3c, 0xf8, 0x10, 0x14,
	0x78, 0x99, 0xca, 0x29, 0x28, 0x45, 0xe3, 0x40, 0xea, 0xef, 0x21, 0x3d, 0x22, 0x43, 0x27, 0x64,
	0x01, 0x8d, 0x9d, 0x1e, 0xa1, 0x61, 0x22, 0x40, 0xe6, 0x9a, 0xaf, 0x3b, 0x2f, 0x33, 0xcd, 0x67,
	0x3b, 0x65, 0x03, 0xdb, 0x6b, 0x11, 0x19, 0x1e, 0x67, 0x98, 0xc3, 0x02, 0xd2, 0xfc, 0xbe, 0x82,
	0x6a, 0x27, 0x44, 0xca, 0x73, 0x26, 0xfc, 0x13, 0x16, 0x52, 0x6f, 0xa4, 0x6f, 0xa3, 0x15, 0x9f,
	0x06, 0x54, 0x2d, 0xf1, 0xd7, 0xec, 0xa2, 0xa0, 0x1f, 0xa0, 0x37, 0x42, 0x76, 0x0e, 0xc2, 0x23,
	0x12, 0x1c, 0xaf, 0x4f, 0x04, 0xf1, 0x14, 0x08, 0x69, 0x94, 0x17, 0x09, 0x1b, 0x77, 0xb0, 0xee,
	0x1d, 0x2a, 0x63, 0x27, 0x9c, 0x2f, 0xb3, 0x2b, 0x4b, 0xec, 0x3b, 0xd8, 0x0c, 0x7b, 0x1f, 0xe9,
	0x92, 0x83, 0x47, 0x49, 0x38, 0xcb, 0x7d, 0xb6, 0xc8, 0x5d, 0x2f, 0x40, 0x33, 0xcc, 0x6d, 0xf4,
	0x2a, 0x66, 0xca, 0x49, 0x24, 0x88, 0x7c, 0xe4, 0xcf, 0xb7, 0xb4, 0xd6, 0xaa, 0x5d, 0x8d, 0x99,
	0x3a, 0x2b, 0x7e, 0xe9, 0x7b, 0xa8, 0x0e, 0x43, 0x4e, 0x05, 0x38, 0xbc, 0x18, 0x8a, 0xb1, 0x92,
	0x2b, 0x4f, 0x8c, 0xd9, 0xa9, 0x18, 0x3f, 0xae, 0xda, 0xb5, 0x09, 0x64, 0x3a, 0x36, 0x7d, 0x07,
	0xad, 0x67, 0xba, 0x02, 0x3c, 0x88, 0x55, 0x38, 0xca, 0x1a, 0xf8, 0xc6, 0x8b, 0x8c, 0x66, 0xd7,
	0x63, 0xa6, 0xec, 0xe2, 0xff, 0x99, 0x04, 0x5f, 0x7f, 0x07, 0xd5, 0x22, 0x1a, 0xd3, 0x28, 0x89,
	0x9c, 0x10, 0xe2, 0x40, 0xf5, 0x8d, 0xd5, 0xb9, 0x9d, 0xb7, 0x5e, 0xd8, 0xaf, 0x0b, 0xc0, 0x71,
	0x5e, 0x6f, 0xfe, 0x51, 0x46, 0xb5, 0xa3, 0x90, 0xb9, 0x24, 0x3c, 0xe5, 0xe0, 0x7d, 0x32, 0xe2,
	0xa0, 0x47, 0x68, 0xc3, 0xcd, 0x12, 0x35, 0x7f, 0x61, 0x72, 0xbb, 0xaa, 0xbb, 0x07, 0xe6, 0x43,
	0x6f, 0x98, 0xb9, 0x1c, 0x4b, 0x5b, 0x77, 0x97, 0xa3, 0xfa, 0x8d, 0x86, 0xb0, 0x9b, 0x85, 0xcf,
	0xe9, 0x65, 0xe9, 0x73, 0xfc, 0x69, 0xfc, 0x1c, 0x59, 0xe4, 0x2f, 0x37, 0xbe, 0xba, 0xfb, 0xd1,
	0x7f, 0x68, 0xfd, 0xf7, 0x61, 0xb6, 0x37, 0xdd, 0x7f, 0x48, 0x3a, 0x41, 0xf5, 0xa9, 0x35, 0x0e,
	0xcf, 0x03, 0x9b, 0xe7, 0xa6, 0xba, 0xbb, 0xff, 0xf0, 0xe6, 0xf3, 0x81, 0xb7, 0x6b, 0x7c, 0x6e,
	0xdd, 0xfc, 0xaa, 0x82, 0x6a, 0x5d, 0x01, 0x44, 0xc1, 0xd3, 0xc4, 0xff, 0x97, 0x89, 0xbf, 0xbf,
	0xfe, 0xcb, 0x07, 0x0b, 0x19, 0x6f, 0x7e, 0x5d, 0x41, 0x75, 0x1b, 0x78, 0x48, 0xbc, 0x27, 0x17,
	0x1e, 0xcf, 0x85, 0xdb, 0x32, 0xaa, 0x1e, 0x81, 0x7a, 0x72, 0xe0, 0xb1, 0x1c, 0xe8, 0x7c, 0xa7,
	0x5d, 0x5e, 0xe3, 0xd2, 0xd5, 0x35, 0x2e, 0xdd, 0x5c, 0x63, 0xed, 0xcb, 0x14, 0x6b, 0x3f, 0xa4,
	0x58, 0xfb, 0x39, 0xc5, 0xda, 0x65, 0x8a, 0xb5, 0xab, 0x14, 0x6b, 0xbf, 0xa6, 0x58, 0xfb, 0x2d,
	0xc5, 0xa5, 0x9b, 0x14, 0x6b, 0xdf, 0x8e, 0x71, 0xe9, 0x62, 0x8c, 0xb5, 0xcb, 0x31, 0x2e, 0x5d,
	0x8d, 0x71, 0xe9, 0xb3, 0xcf, 0x03, 0xc6, 0xbf, 0x08, 0xcc, 0x01, 0x0b, 0x15, 0x08, 0x41, 0xcc,
	0x24, 0x7b, 0xa2, 0x09, 0x41, 0x7a, 0x4c, 0x44, 0x6d, 0x2e, 0xd8, 0x80, 0xfa, 0x20, 0xda, 0xd3,
	0xb2, 0xc5, 0xdd, 0x80, 0x59, 0x30, 0x54, 0xc5, 0x63, 0xe6, 0x5f, 0x9f, 0x76, 0xee, 0x4a, 0xfe,
	0xc6, 0xd9, 0xfb, 0x33, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x1a, 0x0f, 0x5c, 0x0d, 0x0a, 0x00, 0x00,
}

func (this *BasicConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BasicConfiguration)
	if !ok {
		that2, ok := that.(BasicConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	return true
}
func (this *BruteForceDetectionSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BruteForceDetectionSettings)
	if !ok {
		that2, ok := that.(BruteForceDetectionSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxLoginFailures != that1.MaxLoginFailures {
		return false
	}
	return true
}
func (this *PasswordPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PasswordPolicy)
	if !ok {
		that2, ok := that.(PasswordPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Digits != that1.Digits {
		return false
	}
	if this.LowercaseCharacters != that1.LowercaseCharacters {
		return false
	}
	if this.UppercaseCharacters != that1.UppercaseCharacters {
		return false
	}
	if this.SpecialCharacters != that1.SpecialCharacters {
		return false
	}
	if this.NotUsername != that1.NotUsername {
		return false
	}
	if this.ExpirePassword != that1.ExpirePassword {
		return false
	}
	if this.NotRecentlyUsed != that1.NotRecentlyUsed {
		return false
	}
	if this.MinimumLength != that1.MinimumLength {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BasicConfiguration.Equal(that1.BasicConfiguration) {
		return false
	}
	if !this.BruteForceDetectionSettings.Equal(that1.BruteForceDetectionSettings) {
		return false
	}
	if !this.PasswordPolicy.Equal(that1.PasswordPolicy) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BasicConfiguration.Equal(that1.BasicConfiguration) {
		return false
	}
	if !this.BruteForceDetectionSettings.Equal(that1.BruteForceDetectionSettings) {
		return false
	}
	if !this.PasswordPolicy.Equal(that1.PasswordPolicy) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BasicConfiguration.Equal(that1.BasicConfiguration) {
		return false
	}
	if !this.BruteForceDetectionSettings.Equal(that1.BruteForceDetectionSettings) {
		return false
	}
	if !this.PasswordPolicy.Equal(that1.PasswordPolicy) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BasicConfiguration.Equal(that1.BasicConfiguration) {
		return false
	}
	if !this.BruteForceDetectionSettings.Equal(that1.BruteForceDetectionSettings) {
		return false
	}
	if !this.PasswordPolicy.Equal(that1.PasswordPolicy) {
		return false
	}
	return true
}
func (this *BasicConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tenant_configuration.BasicConfiguration{")
	s = append(s, "DisplayName: "+fmt.Sprintf("%#v", this.DisplayName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BruteForceDetectionSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tenant_configuration.BruteForceDetectionSettings{")
	s = append(s, "MaxLoginFailures: "+fmt.Sprintf("%#v", this.MaxLoginFailures)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PasswordPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&tenant_configuration.PasswordPolicy{")
	s = append(s, "Digits: "+fmt.Sprintf("%#v", this.Digits)+",\n")
	s = append(s, "LowercaseCharacters: "+fmt.Sprintf("%#v", this.LowercaseCharacters)+",\n")
	s = append(s, "UppercaseCharacters: "+fmt.Sprintf("%#v", this.UppercaseCharacters)+",\n")
	s = append(s, "SpecialCharacters: "+fmt.Sprintf("%#v", this.SpecialCharacters)+",\n")
	s = append(s, "NotUsername: "+fmt.Sprintf("%#v", this.NotUsername)+",\n")
	s = append(s, "ExpirePassword: "+fmt.Sprintf("%#v", this.ExpirePassword)+",\n")
	s = append(s, "NotRecentlyUsed: "+fmt.Sprintf("%#v", this.NotRecentlyUsed)+",\n")
	s = append(s, "MinimumLength: "+fmt.Sprintf("%#v", this.MinimumLength)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tenant_configuration.GlobalSpecType{")
	if this.BasicConfiguration != nil {
		s = append(s, "BasicConfiguration: "+fmt.Sprintf("%#v", this.BasicConfiguration)+",\n")
	}
	if this.BruteForceDetectionSettings != nil {
		s = append(s, "BruteForceDetectionSettings: "+fmt.Sprintf("%#v", this.BruteForceDetectionSettings)+",\n")
	}
	if this.PasswordPolicy != nil {
		s = append(s, "PasswordPolicy: "+fmt.Sprintf("%#v", this.PasswordPolicy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tenant_configuration.CreateSpecType{")
	if this.BasicConfiguration != nil {
		s = append(s, "BasicConfiguration: "+fmt.Sprintf("%#v", this.BasicConfiguration)+",\n")
	}
	if this.BruteForceDetectionSettings != nil {
		s = append(s, "BruteForceDetectionSettings: "+fmt.Sprintf("%#v", this.BruteForceDetectionSettings)+",\n")
	}
	if this.PasswordPolicy != nil {
		s = append(s, "PasswordPolicy: "+fmt.Sprintf("%#v", this.PasswordPolicy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tenant_configuration.ReplaceSpecType{")
	if this.BasicConfiguration != nil {
		s = append(s, "BasicConfiguration: "+fmt.Sprintf("%#v", this.BasicConfiguration)+",\n")
	}
	if this.BruteForceDetectionSettings != nil {
		s = append(s, "BruteForceDetectionSettings: "+fmt.Sprintf("%#v", this.BruteForceDetectionSettings)+",\n")
	}
	if this.PasswordPolicy != nil {
		s = append(s, "PasswordPolicy: "+fmt.Sprintf("%#v", this.PasswordPolicy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tenant_configuration.GetSpecType{")
	if this.BasicConfiguration != nil {
		s = append(s, "BasicConfiguration: "+fmt.Sprintf("%#v", this.BasicConfiguration)+",\n")
	}
	if this.BruteForceDetectionSettings != nil {
		s = append(s, "BruteForceDetectionSettings: "+fmt.Sprintf("%#v", this.BruteForceDetectionSettings)+",\n")
	}
	if this.PasswordPolicy != nil {
		s = append(s, "PasswordPolicy: "+fmt.Sprintf("%#v", this.PasswordPolicy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BasicConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BasicConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BasicConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BruteForceDetectionSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BruteForceDetectionSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BruteForceDetectionSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxLoginFailures != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxLoginFailures))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PasswordPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasswordPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PasswordPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinimumLength != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MinimumLength))
		i--
		dAtA[i] = 0x40
	}
	if m.NotRecentlyUsed != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NotRecentlyUsed))
		i--
		dAtA[i] = 0x38
	}
	if m.ExpirePassword != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ExpirePassword))
		i--
		dAtA[i] = 0x30
	}
	if m.NotUsername {
		i--
		if m.NotUsername {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.SpecialCharacters != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SpecialCharacters))
		i--
		dAtA[i] = 0x20
	}
	if m.UppercaseCharacters != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.UppercaseCharacters))
		i--
		dAtA[i] = 0x18
	}
	if m.LowercaseCharacters != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LowercaseCharacters))
		i--
		dAtA[i] = 0x10
	}
	if m.Digits != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Digits))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PasswordPolicy != nil {
		{
			size, err := m.PasswordPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BruteForceDetectionSettings != nil {
		{
			size, err := m.BruteForceDetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BasicConfiguration != nil {
		{
			size, err := m.BasicConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PasswordPolicy != nil {
		{
			size, err := m.PasswordPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BruteForceDetectionSettings != nil {
		{
			size, err := m.BruteForceDetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BasicConfiguration != nil {
		{
			size, err := m.BasicConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PasswordPolicy != nil {
		{
			size, err := m.PasswordPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BruteForceDetectionSettings != nil {
		{
			size, err := m.BruteForceDetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BasicConfiguration != nil {
		{
			size, err := m.BasicConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PasswordPolicy != nil {
		{
			size, err := m.PasswordPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BruteForceDetectionSettings != nil {
		{
			size, err := m.BruteForceDetectionSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BasicConfiguration != nil {
		{
			size, err := m.BasicConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BasicConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *BruteForceDetectionSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxLoginFailures != 0 {
		n += 1 + sovTypes(uint64(m.MaxLoginFailures))
	}
	return n
}

func (m *PasswordPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Digits != 0 {
		n += 1 + sovTypes(uint64(m.Digits))
	}
	if m.LowercaseCharacters != 0 {
		n += 1 + sovTypes(uint64(m.LowercaseCharacters))
	}
	if m.UppercaseCharacters != 0 {
		n += 1 + sovTypes(uint64(m.UppercaseCharacters))
	}
	if m.SpecialCharacters != 0 {
		n += 1 + sovTypes(uint64(m.SpecialCharacters))
	}
	if m.NotUsername {
		n += 2
	}
	if m.ExpirePassword != 0 {
		n += 1 + sovTypes(uint64(m.ExpirePassword))
	}
	if m.NotRecentlyUsed != 0 {
		n += 1 + sovTypes(uint64(m.NotRecentlyUsed))
	}
	if m.MinimumLength != 0 {
		n += 1 + sovTypes(uint64(m.MinimumLength))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BasicConfiguration != nil {
		l = m.BasicConfiguration.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BruteForceDetectionSettings != nil {
		l = m.BruteForceDetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PasswordPolicy != nil {
		l = m.PasswordPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BasicConfiguration != nil {
		l = m.BasicConfiguration.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BruteForceDetectionSettings != nil {
		l = m.BruteForceDetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PasswordPolicy != nil {
		l = m.PasswordPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BasicConfiguration != nil {
		l = m.BasicConfiguration.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BruteForceDetectionSettings != nil {
		l = m.BruteForceDetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PasswordPolicy != nil {
		l = m.PasswordPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BasicConfiguration != nil {
		l = m.BasicConfiguration.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BruteForceDetectionSettings != nil {
		l = m.BruteForceDetectionSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PasswordPolicy != nil {
		l = m.PasswordPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BasicConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BasicConfiguration{`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BruteForceDetectionSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BruteForceDetectionSettings{`,
		`MaxLoginFailures:` + fmt.Sprintf("%v", this.MaxLoginFailures) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PasswordPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PasswordPolicy{`,
		`Digits:` + fmt.Sprintf("%v", this.Digits) + `,`,
		`LowercaseCharacters:` + fmt.Sprintf("%v", this.LowercaseCharacters) + `,`,
		`UppercaseCharacters:` + fmt.Sprintf("%v", this.UppercaseCharacters) + `,`,
		`SpecialCharacters:` + fmt.Sprintf("%v", this.SpecialCharacters) + `,`,
		`NotUsername:` + fmt.Sprintf("%v", this.NotUsername) + `,`,
		`ExpirePassword:` + fmt.Sprintf("%v", this.ExpirePassword) + `,`,
		`NotRecentlyUsed:` + fmt.Sprintf("%v", this.NotRecentlyUsed) + `,`,
		`MinimumLength:` + fmt.Sprintf("%v", this.MinimumLength) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`BasicConfiguration:` + strings.Replace(this.BasicConfiguration.String(), "BasicConfiguration", "BasicConfiguration", 1) + `,`,
		`BruteForceDetectionSettings:` + strings.Replace(this.BruteForceDetectionSettings.String(), "BruteForceDetectionSettings", "BruteForceDetectionSettings", 1) + `,`,
		`PasswordPolicy:` + strings.Replace(this.PasswordPolicy.String(), "PasswordPolicy", "PasswordPolicy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`BasicConfiguration:` + strings.Replace(this.BasicConfiguration.String(), "BasicConfiguration", "BasicConfiguration", 1) + `,`,
		`BruteForceDetectionSettings:` + strings.Replace(this.BruteForceDetectionSettings.String(), "BruteForceDetectionSettings", "BruteForceDetectionSettings", 1) + `,`,
		`PasswordPolicy:` + strings.Replace(this.PasswordPolicy.String(), "PasswordPolicy", "PasswordPolicy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`BasicConfiguration:` + strings.Replace(this.BasicConfiguration.String(), "BasicConfiguration", "BasicConfiguration", 1) + `,`,
		`BruteForceDetectionSettings:` + strings.Replace(this.BruteForceDetectionSettings.String(), "BruteForceDetectionSettings", "BruteForceDetectionSettings", 1) + `,`,
		`PasswordPolicy:` + strings.Replace(this.PasswordPolicy.String(), "PasswordPolicy", "PasswordPolicy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`BasicConfiguration:` + strings.Replace(this.BasicConfiguration.String(), "BasicConfiguration", "BasicConfiguration", 1) + `,`,
		`BruteForceDetectionSettings:` + strings.Replace(this.BruteForceDetectionSettings.String(), "BruteForceDetectionSettings", "BruteForceDetectionSettings", 1) + `,`,
		`PasswordPolicy:` + strings.Replace(this.PasswordPolicy.String(), "PasswordPolicy", "PasswordPolicy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BasicConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BasicConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BasicConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BruteForceDetectionSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BruteForceDetectionSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BruteForceDetectionSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLoginFailures", wireType)
			}
			m.MaxLoginFailures = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLoginFailures |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PasswordPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasswordPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasswordPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digits", wireType)
			}
			m.Digits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Digits |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowercaseCharacters", wireType)
			}
			m.LowercaseCharacters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowercaseCharacters |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UppercaseCharacters", wireType)
			}
			m.UppercaseCharacters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UppercaseCharacters |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialCharacters", wireType)
			}
			m.SpecialCharacters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpecialCharacters |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotUsername", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotUsername = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirePassword", wireType)
			}
			m.ExpirePassword = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirePassword |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotRecentlyUsed", wireType)
			}
			m.NotRecentlyUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotRecentlyUsed |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumLength", wireType)
			}
			m.MinimumLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumLength |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasicConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BasicConfiguration == nil {
				m.BasicConfiguration = &BasicConfiguration{}
			}
			if err := m.BasicConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BruteForceDetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BruteForceDetectionSettings == nil {
				m.BruteForceDetectionSettings = &BruteForceDetectionSettings{}
			}
			if err := m.BruteForceDetectionSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PasswordPolicy == nil {
				m.PasswordPolicy = &PasswordPolicy{}
			}
			if err := m.PasswordPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasicConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BasicConfiguration == nil {
				m.BasicConfiguration = &BasicConfiguration{}
			}
			if err := m.BasicConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BruteForceDetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BruteForceDetectionSettings == nil {
				m.BruteForceDetectionSettings = &BruteForceDetectionSettings{}
			}
			if err := m.BruteForceDetectionSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PasswordPolicy == nil {
				m.PasswordPolicy = &PasswordPolicy{}
			}
			if err := m.PasswordPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasicConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BasicConfiguration == nil {
				m.BasicConfiguration = &BasicConfiguration{}
			}
			if err := m.BasicConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BruteForceDetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BruteForceDetectionSettings == nil {
				m.BruteForceDetectionSettings = &BruteForceDetectionSettings{}
			}
			if err := m.BruteForceDetectionSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PasswordPolicy == nil {
				m.PasswordPolicy = &PasswordPolicy{}
			}
			if err := m.PasswordPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasicConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BasicConfiguration == nil {
				m.BasicConfiguration = &BasicConfiguration{}
			}
			if err := m.BasicConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BruteForceDetectionSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BruteForceDetectionSettings == nil {
				m.BruteForceDetectionSettings = &BruteForceDetectionSettings{}
			}
			if err := m.BruteForceDetectionSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PasswordPolicy == nil {
				m.PasswordPolicy = &PasswordPolicy{}
			}
			if err := m.PasswordPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
