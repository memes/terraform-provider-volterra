// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package api_definition

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *GetAPIEndpointsSchemaReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetAPIEndpointsSchemaReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetAPIEndpointsSchemaReq) DeepCopy() *GetAPIEndpointsSchemaReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetAPIEndpointsSchemaReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetAPIEndpointsSchemaReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetAPIEndpointsSchemaReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetAPIEndpointsSchemaReqValidator().Validate(ctx, m, opts...)
}

type ValidateGetAPIEndpointsSchemaReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetAPIEndpointsSchemaReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetAPIEndpointsSchemaReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetAPIEndpointsSchemaReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetAPIEndpointsSchemaReqValidator = func() *ValidateGetAPIEndpointsSchemaReq {
	v := &ValidateGetAPIEndpointsSchemaReq{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GetAPIEndpointsSchemaReqValidator() db.Validator {
	return DefaultGetAPIEndpointsSchemaReqValidator
}

// augmented methods on protoc/std generated struct

func (m *GetAPIEndpointsSchemaResp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetAPIEndpointsSchemaResp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetAPIEndpointsSchemaResp) DeepCopy() *GetAPIEndpointsSchemaResp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetAPIEndpointsSchemaResp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetAPIEndpointsSchemaResp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetAPIEndpointsSchemaResp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetAPIEndpointsSchemaRespValidator().Validate(ctx, m, opts...)
}

type ValidateGetAPIEndpointsSchemaResp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetAPIEndpointsSchemaResp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetAPIEndpointsSchemaResp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetAPIEndpointsSchemaResp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_endpoints"]; exists {

		vOpts := append(opts, db.WithValidateField("api_endpoints"))
		for idx, item := range m.GetApiEndpoints() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetAPIEndpointsSchemaRespValidator = func() *ValidateGetAPIEndpointsSchemaResp {
	v := &ValidateGetAPIEndpointsSchemaResp{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["api_endpoints"] = ApiOperationValidator().Validate

	return v
}()

func GetAPIEndpointsSchemaRespValidator() db.Validator {
	return DefaultGetAPIEndpointsSchemaRespValidator
}

// augmented methods on protoc/std generated struct

func (m *UpdateAPIEndpointsSchemaReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *UpdateAPIEndpointsSchemaReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *UpdateAPIEndpointsSchemaReq) DeepCopy() *UpdateAPIEndpointsSchemaReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &UpdateAPIEndpointsSchemaReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *UpdateAPIEndpointsSchemaReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *UpdateAPIEndpointsSchemaReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return UpdateAPIEndpointsSchemaReqValidator().Validate(ctx, m, opts...)
}

type ValidateUpdateAPIEndpointsSchemaReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateUpdateAPIEndpointsSchemaReq) ApiEndpointsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for api_endpoints")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ApiOperation, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ApiOperationValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_endpoints")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ApiOperation)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ApiOperation, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_endpoints")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_endpoints")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateUpdateAPIEndpointsSchemaReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*UpdateAPIEndpointsSchemaReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *UpdateAPIEndpointsSchemaReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_endpoints"]; exists {
		vOpts := append(opts, db.WithValidateField("api_endpoints"))
		if err := fv(ctx, m.GetApiEndpoints(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultUpdateAPIEndpointsSchemaReqValidator = func() *ValidateUpdateAPIEndpointsSchemaReq {
	v := &ValidateUpdateAPIEndpointsSchemaReq{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhApiEndpoints := v.ApiEndpointsValidationRuleHandler
	rulesApiEndpoints := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "100",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhApiEndpoints(rulesApiEndpoints)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for UpdateAPIEndpointsSchemaReq.api_endpoints: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_endpoints"] = vFn

	return v
}()

func UpdateAPIEndpointsSchemaReqValidator() db.Validator {
	return DefaultUpdateAPIEndpointsSchemaReqValidator
}

// augmented methods on protoc/std generated struct

func (m *UpdateAPIEndpointsSchemaResp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *UpdateAPIEndpointsSchemaResp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *UpdateAPIEndpointsSchemaResp) DeepCopy() *UpdateAPIEndpointsSchemaResp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &UpdateAPIEndpointsSchemaResp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *UpdateAPIEndpointsSchemaResp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *UpdateAPIEndpointsSchemaResp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return UpdateAPIEndpointsSchemaRespValidator().Validate(ctx, m, opts...)
}

type ValidateUpdateAPIEndpointsSchemaResp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateUpdateAPIEndpointsSchemaResp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*UpdateAPIEndpointsSchemaResp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *UpdateAPIEndpointsSchemaResp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultUpdateAPIEndpointsSchemaRespValidator = func() *ValidateUpdateAPIEndpointsSchemaResp {
	v := &ValidateUpdateAPIEndpointsSchemaResp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func UpdateAPIEndpointsSchemaRespValidator() db.Validator {
	return DefaultUpdateAPIEndpointsSchemaRespValidator
}
