// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/api_definition/types.proto

package api_definition

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	api_group_element "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/api_group_element"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GlobalSpecType
//
// x-displayName: "Specification"
// x-required
// Shape of api_definition in the storage backend.
type GlobalSpecType struct {
	// swagger_specs
	//
	// x-displayName: "Swagger Specs"
	// x-example: "https://my.tenant.domain/api/object_store/namespaces/my-ns/stored_objects/swagger/file-name/v1-22-01-12"
	// x-required
	// Define your application API by single or multiple swagger files.
	// 1. Upload your swagger files via Web App & API Protection-> Files-> Swagger Files.
	// 2. Select from the list of uploaded files.
	// Notice file versions. If swagger file is updated, need to select a new version here to redefine the API.
	SwaggerSpecs []string `protobuf:"bytes,1,rep,name=swagger_specs,json=swaggerSpecs,proto3" json:"swagger_specs,omitempty"`
	// default_api_groups_builders
	//
	// x-displayName: "API Groups Builders"
	// Default API Group builders define how to create default API groups from OpenAPI specification files.
	// The default groups include "all paths" and custom tags based groups.
	// The default group builders are created automatically and are read only.
	DefaultApiGroupsBuilders []*ApiGroupBuilder `protobuf:"bytes,3,rep,name=default_api_groups_builders,json=defaultApiGroupsBuilders,proto3" json:"default_api_groups_builders,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object.
	ViewInternal *views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
	// api_groups
	//
	// x-displayName: "Api Groups"
	// List of api_groups belonging to this api_definition.
	ApiGroups []*ApiGroupSummary `protobuf:"bytes,1001,rep,name=api_groups,json=apiGroups,proto3" json:"api_groups,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d394c51e1f8ccc10, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetSwaggerSpecs() []string {
	if m != nil {
		return m.SwaggerSpecs
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultApiGroupsBuilders() []*ApiGroupBuilder {
	if m != nil {
		return m.DefaultApiGroupsBuilders
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

func (m *GlobalSpecType) GetApiGroups() []*ApiGroupSummary {
	if m != nil {
		return m.ApiGroups
	}
	return nil
}

// CreateSpecType
//
// x-displayName: "Create API Definition"
// x-required
// Create API Definition.
type CreateSpecType struct {
	SwaggerSpecs []string `protobuf:"bytes,1,rep,name=swagger_specs,json=swaggerSpecs,proto3" json:"swagger_specs,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d394c51e1f8ccc10, []int{1}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetSwaggerSpecs() []string {
	if m != nil {
		return m.SwaggerSpecs
	}
	return nil
}

// GetSpecType
//
// x-displayName: "Get API Definition"
// Get API Definition.
type GetSpecType struct {
	SwaggerSpecs             []string           `protobuf:"bytes,1,rep,name=swagger_specs,json=swaggerSpecs,proto3" json:"swagger_specs,omitempty"`
	DefaultApiGroupsBuilders []*ApiGroupBuilder `protobuf:"bytes,3,rep,name=default_api_groups_builders,json=defaultApiGroupsBuilders,proto3" json:"default_api_groups_builders,omitempty"`
	ApiGroups                []*ApiGroupSummary `protobuf:"bytes,1001,rep,name=api_groups,json=apiGroups,proto3" json:"api_groups,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d394c51e1f8ccc10, []int{2}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetSwaggerSpecs() []string {
	if m != nil {
		return m.SwaggerSpecs
	}
	return nil
}

func (m *GetSpecType) GetDefaultApiGroupsBuilders() []*ApiGroupBuilder {
	if m != nil {
		return m.DefaultApiGroupsBuilders
	}
	return nil
}

func (m *GetSpecType) GetApiGroups() []*ApiGroupSummary {
	if m != nil {
		return m.ApiGroups
	}
	return nil
}

// ReplaceSpecType
//
// x-displayName: "Replace API Definition"
// x-required
// Replace API Definition.
type ReplaceSpecType struct {
	SwaggerSpecs []string `protobuf:"bytes,1,rep,name=swagger_specs,json=swaggerSpecs,proto3" json:"swagger_specs,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d394c51e1f8ccc10, []int{3}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetSwaggerSpecs() []string {
	if m != nil {
		return m.SwaggerSpecs
	}
	return nil
}

// ApiOperation
//
// x-displayName: "API Operation"
// API operation according to OpenAPI specification.
type ApiOperation struct {
	// method
	//
	// x-displayName: "HTTP Method"
	// x-required
	// x-example: 'POST'
	// Method to match the input request API method against.
	Method schema.HttpMethod `protobuf:"varint,1,opt,name=method,proto3,enum=ves.io.schema.HttpMethod" json:"method,omitempty"`
	// path
	//
	// x-displayName: "Path"
	// x-required
	// x-example: "/api/users/{userid}"
	// An endpoint path, as specified in OpenAPI, including parameters.
	// The path should comply with RFC 3986 and may have parameters according to OpenAPI specification
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *ApiOperation) Reset()      { *m = ApiOperation{} }
func (*ApiOperation) ProtoMessage() {}
func (*ApiOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_d394c51e1f8ccc10, []int{4}
}
func (m *ApiOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApiOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiOperation.Merge(m, src)
}
func (m *ApiOperation) XXX_Size() int {
	return m.Size()
}
func (m *ApiOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiOperation.DiscardUnknown(m)
}

var xxx_messageInfo_ApiOperation proto.InternalMessageInfo

func (m *ApiOperation) GetMethod() schema.HttpMethod {
	if m != nil {
		return m.Method
	}
	return schema.ANY
}

func (m *ApiOperation) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// ApiGroupBuilder
//
// x-displayName: "API Group Builder"
// Define a group of application operations using path matching and label filtering.
type ApiGroupBuilder struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// path_filter
	//
	// x-displayName: "Path Filter"
	// x-example: "/api/config/.*/path[123]/$"
	// Regular expression to match the input request API path against.
	// The match is considered to succeed if the input request API path matches the specified path regex.
	PathFilter string `protobuf:"bytes,2,opt,name=path_filter,json=pathFilter,proto3" json:"path_filter,omitempty"`
	// label_filter
	//
	// x-displayName: "Label Filter"
	// x-example: "method in (POST, DELETE), tag in (web, db)"
	// A group builder should include only labels selected by expression.
	// In the current context a label is a property of an OpenAPI operation or path.
	LabelFilter *schema.LabelSelectorType `protobuf:"bytes,3,opt,name=label_filter,json=labelFilter,proto3" json:"label_filter,omitempty"`
	// included_operations
	//
	// x-displayName: "Included Operations"
	// List of operations not matched by the filters to be included in a group.
	// The list should not include operations matched by the filters.
	// The paths appear here with parameters as defined in OpenAPI spec file.
	IncludedOperations []*ApiOperation `protobuf:"bytes,4,rep,name=included_operations,json=includedOperations,proto3" json:"included_operations,omitempty"`
	// excluded_operations
	//
	// x-displayName: "Excluded Operations"
	// List of operations matched by the filters to be excluded from a group.
	// The list should only include operations matched by the filters.
	// The paths appear here with parameters as defined in OpenAPI spec file.
	ExcludedOperations []*ApiOperation `protobuf:"bytes,5,rep,name=excluded_operations,json=excludedOperations,proto3" json:"excluded_operations,omitempty"`
}

func (m *ApiGroupBuilder) Reset()      { *m = ApiGroupBuilder{} }
func (*ApiGroupBuilder) ProtoMessage() {}
func (*ApiGroupBuilder) Descriptor() ([]byte, []int) {
	return fileDescriptor_d394c51e1f8ccc10, []int{5}
}
func (m *ApiGroupBuilder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiGroupBuilder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApiGroupBuilder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiGroupBuilder.Merge(m, src)
}
func (m *ApiGroupBuilder) XXX_Size() int {
	return m.Size()
}
func (m *ApiGroupBuilder) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiGroupBuilder.DiscardUnknown(m)
}

var xxx_messageInfo_ApiGroupBuilder proto.InternalMessageInfo

func (m *ApiGroupBuilder) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ApiGroupBuilder) GetPathFilter() string {
	if m != nil {
		return m.PathFilter
	}
	return ""
}

func (m *ApiGroupBuilder) GetLabelFilter() *schema.LabelSelectorType {
	if m != nil {
		return m.LabelFilter
	}
	return nil
}

func (m *ApiGroupBuilder) GetIncludedOperations() []*ApiOperation {
	if m != nil {
		return m.IncludedOperations
	}
	return nil
}

func (m *ApiGroupBuilder) GetExcludedOperations() []*ApiOperation {
	if m != nil {
		return m.ExcludedOperations
	}
	return nil
}

// ApiGroupSummary
//
// x-displayName: "API Group Summary"
// ApiGroupSummary
type ApiGroupSummary struct {
	// name
	//
	// x-displayName: "Name"
	// x-example: "acmecorp-web"
	// x-required
	// Name of Api Group.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// elements
	//
	// x-displayName: "API Group Elements"
	// x-required
	// List of API group elements with methods and path regex for matching requests.
	Elements []*api_group_element.GlobalSpecType `protobuf:"bytes,2,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (m *ApiGroupSummary) Reset()      { *m = ApiGroupSummary{} }
func (*ApiGroupSummary) ProtoMessage() {}
func (*ApiGroupSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_d394c51e1f8ccc10, []int{6}
}
func (m *ApiGroupSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiGroupSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApiGroupSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiGroupSummary.Merge(m, src)
}
func (m *ApiGroupSummary) XXX_Size() int {
	return m.Size()
}
func (m *ApiGroupSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiGroupSummary.DiscardUnknown(m)
}

var xxx_messageInfo_ApiGroupSummary proto.InternalMessageInfo

func (m *ApiGroupSummary) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApiGroupSummary) GetElements() []*api_group_element.GlobalSpecType {
	if m != nil {
		return m.Elements
	}
	return nil
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.api_definition.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.api_definition.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.api_definition.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.api_definition.CreateSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.api_definition.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.api_definition.GetSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.api_definition.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.api_definition.ReplaceSpecType")
	proto.RegisterType((*ApiOperation)(nil), "ves.io.schema.views.api_definition.ApiOperation")
	golang_proto.RegisterType((*ApiOperation)(nil), "ves.io.schema.views.api_definition.ApiOperation")
	proto.RegisterType((*ApiGroupBuilder)(nil), "ves.io.schema.views.api_definition.ApiGroupBuilder")
	golang_proto.RegisterType((*ApiGroupBuilder)(nil), "ves.io.schema.views.api_definition.ApiGroupBuilder")
	proto.RegisterType((*ApiGroupSummary)(nil), "ves.io.schema.views.api_definition.ApiGroupSummary")
	golang_proto.RegisterType((*ApiGroupSummary)(nil), "ves.io.schema.views.api_definition.ApiGroupSummary")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/api_definition/types.proto", fileDescriptor_d394c51e1f8ccc10)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/api_definition/types.proto", fileDescriptor_d394c51e1f8ccc10)
}

var fileDescriptor_d394c51e1f8ccc10 = []byte{
	// 1052 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcf, 0x6f, 0x1b, 0x55,
	0x10, 0xf6, 0xc4, 0x6e, 0xe2, 0x3c, 0xe7, 0x47, 0xd9, 0x46, 0x68, 0x9b, 0xc2, 0xd6, 0xda, 0x82,
	0xb4, 0xa1, 0xf2, 0x6e, 0x70, 0x84, 0x10, 0x46, 0x02, 0xea, 0x42, 0xd3, 0x02, 0xa1, 0x92, 0x83,
	0x50, 0x45, 0x54, 0xac, 0x67, 0xef, 0x78, 0xb3, 0xb0, 0xeb, 0x5d, 0xed, 0x7b, 0x76, 0x9a, 0x86,
	0x48, 0x11, 0x17, 0x38, 0x55, 0xa5, 0x02, 0xc4, 0x9f, 0x80, 0xb8, 0x70, 0x6f, 0x7a, 0x88, 0x7a,
	0x42, 0x39, 0xe5, 0x98, 0x23, 0x71, 0x2e, 0xe9, 0x89, 0x5e, 0xb9, 0xa1, 0xf7, 0xbc, 0xeb, 0xc4,
	0x4e, 0x14, 0xa8, 0x28, 0xa7, 0xcc, 0xbe, 0xf9, 0x66, 0xbe, 0x99, 0x6f, 0xc6, 0xef, 0x85, 0x98,
	0x6d, 0x64, 0xa6, 0x1b, 0x58, 0xac, 0xbe, 0x8c, 0x3e, 0xb5, 0xda, 0x2e, 0xae, 0x30, 0x8b, 0x86,
	0x6e, 0xd5, 0xc6, 0x86, 0xdb, 0x74, 0xb9, 0x1b, 0x34, 0x2d, 0xbe, 0x1a, 0x22, 0x33, 0xc3, 0x28,
	0xe0, 0x81, 0xa2, 0x77, 0xf1, 0x66, 0x17, 0x6f, 0x4a, 0xbc, 0xd9, 0x8f, 0x9f, 0x2e, 0x38, 0x2e,
	0x5f, 0x6e, 0xd5, 0xcc, 0x7a, 0xe0, 0x5b, 0x4e, 0xe0, 0x04, 0x96, 0x0c, 0xad, 0xb5, 0x1a, 0xf2,
	0x4b, 0x7e, 0x48, 0xab, 0x9b, 0x72, 0xfa, 0x72, 0x7f, 0x09, 0x22, 0x99, 0x13, 0x05, 0xad, 0xb0,
	0x8a, 0x1e, 0xfa, 0xd8, 0xe4, 0x47, 0xf9, 0xa7, 0x2f, 0xf4, 0x83, 0x83, 0x50, 0x30, 0x26, 0xce,
	0xf3, 0xfd, 0xce, 0xa3, 0x71, 0x2f, 0x0d, 0xf4, 0x49, 0x3d, 0xd7, 0xa6, 0x1c, 0x63, 0xaf, 0x3e,
	0xe0, 0x45, 0x86, 0xcd, 0xf6, 0x40, 0xf2, 0xfc, 0x71, 0xa5, 0xaa, 0xfd, 0x88, 0x8b, 0x27, 0x69,
	0x79, 0xa4, 0x08, 0xfd, 0xaf, 0x0c, 0x99, 0x98, 0xf7, 0x82, 0x1a, 0xf5, 0x16, 0x43, 0xac, 0x7f,
	0xba, 0x1a, 0xa2, 0xf2, 0xe3, 0x10, 0x19, 0x67, 0x2b, 0xd4, 0x71, 0x30, 0xaa, 0xb2, 0x10, 0xeb,
	0x4c, 0x85, 0x7c, 0xda, 0x18, 0x2d, 0xff, 0x09, 0x0f, 0x1f, 0x81, 0x9e, 0x05, 0x5d, 0x11, 0xa7,
	0x66, 0x1f, 0xc4, 0x80, 0x59, 0x28, 0x0d, 0xd7, 0x83, 0x66, 0xc3, 0x75, 0x1e, 0x3f, 0x82, 0x51,
	0x32, 0x12, 0xbb, 0x1f, 0x3e, 0xd9, 0x4a, 0xff, 0x0c, 0x0f, 0xe0, 0x07, 0xd0, 0xbf, 0x87, 0xe8,
	0x1e, 0x18, 0x1b, 0x99, 0xe2, 0x77, 0x20, 0x14, 0xb5, 0x82, 0xda, 0x97, 0x58, 0xe7, 0x55, 0xc6,
	0x83, 0x08, 0xad, 0x26, 0xf5, 0x91, 0x85, 0xb4, 0x8e, 0xcc, 0x32, 0x96, 0x68, 0xe1, 0xee, 0x6d,
	0x63, 0xa9, 0x40, 0x0b, 0x77, 0x67, 0x0b, 0x6f, 0xdd, 0x7e, 0x6d, 0x29, 0x36, 0x66, 0xde, 0x9d,
	0xb1, 0x24, 0xda, 0xae, 0x76, 0x63, 0x99, 0x15, 0xb3, 0x9c, 0x1e, 0x63, 0xb4, 0xbf, 0xfe, 0x6c,
	0x66, 0x49, 0x7c, 0x5d, 0x36, 0x0a, 0xf2, 0xef, 0x5a, 0x71, 0x7d, 0x66, 0x6d, 0x6e, 0xfd, 0x15,
	0x51, 0xdd, 0x99, 0x07, 0x30, 0x74, 0x96, 0x24, 0x56, 0x16, 0x12, 0x4b, 0x85, 0xca, 0x58, 0x9c,
	0x5e, 0x48, 0xc3, 0x94, 0x35, 0x72, 0xc1, 0xc6, 0x06, 0x6d, 0x79, 0xbc, 0xda, 0x5b, 0x08, 0x56,
	0xad, 0xb5, 0x5c, 0xcf, 0xc6, 0x88, 0xa9, 0xe9, 0x7c, 0xda, 0xc8, 0x15, 0xe7, 0xcc, 0x7f, 0xde,
	0x46, 0xf3, 0x4a, 0xe8, 0xce, 0x8b, 0xe8, 0x72, 0x37, 0xb6, 0x3c, 0xb2, 0xbb, 0x0e, 0x07, 0x9b,
	0x00, 0x15, 0x35, 0x26, 0x48, 0x00, 0x2c, 0x46, 0x30, 0xe5, 0x0b, 0x32, 0x2e, 0xc7, 0xeb, 0x36,
	0x39, 0x46, 0x4d, 0xea, 0xa9, 0x07, 0x23, 0x79, 0x30, 0x72, 0x45, 0xfd, 0x44, 0xbe, 0x9b, 0x52,
	0x9e, 0x0a, 0x36, 0xc4, 0x40, 0xcb, 0x53, 0xbf, 0xae, 0xf7, 0x07, 0x4b, 0xae, 0x31, 0x71, 0x74,
	0x23, 0x3e, 0x51, 0x6e, 0x11, 0x72, 0xd8, 0x94, 0xfa, 0x64, 0xe4, 0xd9, 0x9b, 0x59, 0x6c, 0xf9,
	0x3e, 0x8d, 0x56, 0xcb, 0xe9, 0xdd, 0x75, 0xa8, 0x8c, 0xd2, 0xa4, 0x83, 0x92, 0xfa, 0x78, 0x13,
	0xa6, 0x88, 0x42, 0xc6, 0x17, 0xbb, 0x62, 0xe6, 0xbb, 0x6a, 0xc2, 0xeb, 0xfa, 0x75, 0x32, 0x71,
	0x35, 0x42, 0xca, 0xb1, 0xb7, 0x7a, 0x97, 0x4e, 0xdc, 0xbc, 0xfe, 0x39, 0x94, 0x5e, 0xd8, 0x7e,
	0x67, 0x60, 0x65, 0xf5, 0x7b, 0x43, 0x24, 0x37, 0x8f, 0xfc, 0x99, 0xf2, 0x28, 0xd1, 0xff, 0x35,
	0xcf, 0x53, 0xc6, 0xb8, 0xf8, 0xbc, 0x64, 0x3e, 0xaa, 0xf0, 0x09, 0x82, 0xdc, 0x20, 0x93, 0x15,
	0x0c, 0x3d, 0x5a, 0xff, 0xef, 0xda, 0xb6, 0xc8, 0xd8, 0x95, 0xd0, 0xbd, 0x19, 0x62, 0x44, 0x45,
	0x21, 0xca, 0x7b, 0x64, 0xd8, 0x47, 0xbe, 0x1c, 0xd8, 0x2a, 0xe4, 0xc1, 0x98, 0x28, 0x9e, 0x1f,
	0xa8, 0xfe, 0x3a, 0xe7, 0xe1, 0x82, 0x04, 0x94, 0xc7, 0xc5, 0x6f, 0x29, 0xfb, 0x0d, 0x9c, 0x39,
	0x0b, 0x3a, 0xa4, 0x2a, 0x71, 0x9c, 0x72, 0x89, 0x64, 0x42, 0xca, 0x97, 0xd5, 0xa1, 0x3c, 0x18,
	0xa3, 0xe5, 0x49, 0x01, 0x22, 0x51, 0x36, 0x0f, 0xc6, 0x46, 0xf6, 0x7e, 0x1a, 0x2a, 0xd2, 0xa9,
	0x7f, 0x9b, 0x21, 0x93, 0x03, 0xba, 0x2a, 0x25, 0x92, 0xf5, 0x91, 0x53, 0x9b, 0x72, 0x2a, 0xc9,
	0x73, 0x45, 0x6d, 0x80, 0x7c, 0x01, 0x19, 0xa3, 0x0e, 0x2e, 0x20, 0xa7, 0xa2, 0xf8, 0x4a, 0x0f,
	0xaf, 0xbc, 0x41, 0x72, 0x22, 0x6f, 0xb5, 0xe1, 0x7a, 0x1c, 0xa3, 0x98, 0x7b, 0x4a, 0xfe, 0xd8,
	0xa3, 0xb4, 0xba, 0x91, 0x8d, 0xad, 0x2d, 0x80, 0x0a, 0x11, 0xc0, 0x6b, 0x12, 0xa7, 0x5c, 0x25,
	0x63, 0x1e, 0xad, 0xa1, 0x97, 0xc4, 0xa5, 0x25, 0x6d, 0x7e, 0x80, 0xf6, 0x63, 0x01, 0x59, 0x44,
	0x0f, 0xeb, 0x3c, 0x88, 0x24, 0x71, 0x4e, 0x46, 0xc5, 0x49, 0x56, 0xc8, 0x39, 0xb7, 0x59, 0xf7,
	0x5a, 0xb6, 0xb8, 0xb9, 0x12, 0x21, 0x99, 0x9a, 0x91, 0xd3, 0x9f, 0xfd, 0x97, 0xd3, 0xef, 0x4d,
	0x20, 0xae, 0x5a, 0x5c, 0x5b, 0xf6, 0x91, 0xcb, 0x4a, 0x49, 0x28, 0x7a, 0x40, 0x26, 0x88, 0xf1,
	0xce, 0x71, 0xe2, 0x33, 0xcf, 0x97, 0x38, 0xa1, 0x38, 0x24, 0x2e, 0x7d, 0xb8, 0xbd, 0x09, 0xd7,
	0xc8, 0xcb, 0x84, 0xc8, 0xf9, 0xe5, 0x3f, 0xa1, 0x3e, 0x4e, 0x4f, 0x92, 0xf1, 0x64, 0x1a, 0xa6,
	0xb8, 0xee, 0xc9, 0xab, 0x24, 0xf7, 0x3e, 0xb2, 0x7a, 0xe4, 0xca, 0x27, 0x6b, 0xfa, 0x45, 0x32,
	0xd5, 0xf3, 0xdb, 0x87, 0xe7, 0xfa, 0x6f, 0x70, 0xb8, 0x09, 0xf1, 0xf6, 0x2b, 0x0a, 0xc9, 0x88,
	0x14, 0x72, 0x0b, 0x46, 0x2b, 0xd2, 0x56, 0x3e, 0x22, 0xd9, 0xf8, 0x79, 0x66, 0xea, 0x90, 0xec,
	0xd0, 0x1a, 0xe8, 0xf0, 0xd8, 0x3b, 0x6e, 0xf6, 0xef, 0x7a, 0xa5, 0x97, 0xa0, 0xf4, 0xf6, 0xf6,
	0x26, 0xbc, 0x49, 0xa6, 0xfa, 0x1a, 0x18, 0xee, 0x92, 0x92, 0x8b, 0x24, 0xfb, 0x41, 0x82, 0x3b,
	0x77, 0x48, 0xaa, 0x8c, 0xb8, 0x1c, 0x7d, 0x83, 0xcd, 0x94, 0x7f, 0x82, 0x9d, 0x3d, 0x2d, 0xb5,
	0xbb, 0xa7, 0xa5, 0x9e, 0xee, 0x69, 0xb0, 0xd1, 0xd1, 0xe0, 0x97, 0x8e, 0x06, 0xbf, 0x77, 0x34,
	0xd8, 0xe9, 0x68, 0xb0, 0xdb, 0xd1, 0xe0, 0x8f, 0x8e, 0x06, 0x07, 0x1d, 0x2d, 0xf5, 0xb4, 0xa3,
	0xc1, 0xfd, 0x7d, 0x2d, 0xb5, 0xb5, 0xaf, 0xc1, 0xce, 0xbe, 0x96, 0xda, 0xdd, 0xd7, 0x52, 0x9f,
	0xdf, 0x72, 0x82, 0xf0, 0x2b, 0xc7, 0x6c, 0x07, 0x62, 0x79, 0x22, 0x6a, 0xb6, 0x98, 0x25, 0x8d,
	0x46, 0x10, 0xf9, 0x85, 0x30, 0x0a, 0xda, 0xae, 0x8d, 0x51, 0x21, 0x71, 0x5b, 0x61, 0xcd, 0x09,
	0x2c, 0xbc, 0xc3, 0xe3, 0x37, 0xfe, 0x94, 0x7f, 0x9b, 0x6a, 0xc3, 0xf2, 0xd1, 0x9f, 0xfb, 0x3b,
	0x00, 0x00, 0xff, 0xff, 0xe0, 0x03, 0xee, 0x6c, 0x63, 0x09, 0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SwaggerSpecs) != len(that1.SwaggerSpecs) {
		return false
	}
	for i := range this.SwaggerSpecs {
		if this.SwaggerSpecs[i] != that1.SwaggerSpecs[i] {
			return false
		}
	}
	if len(this.DefaultApiGroupsBuilders) != len(that1.DefaultApiGroupsBuilders) {
		return false
	}
	for i := range this.DefaultApiGroupsBuilders {
		if !this.DefaultApiGroupsBuilders[i].Equal(that1.DefaultApiGroupsBuilders[i]) {
			return false
		}
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	if len(this.ApiGroups) != len(that1.ApiGroups) {
		return false
	}
	for i := range this.ApiGroups {
		if !this.ApiGroups[i].Equal(that1.ApiGroups[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SwaggerSpecs) != len(that1.SwaggerSpecs) {
		return false
	}
	for i := range this.SwaggerSpecs {
		if this.SwaggerSpecs[i] != that1.SwaggerSpecs[i] {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SwaggerSpecs) != len(that1.SwaggerSpecs) {
		return false
	}
	for i := range this.SwaggerSpecs {
		if this.SwaggerSpecs[i] != that1.SwaggerSpecs[i] {
			return false
		}
	}
	if len(this.DefaultApiGroupsBuilders) != len(that1.DefaultApiGroupsBuilders) {
		return false
	}
	for i := range this.DefaultApiGroupsBuilders {
		if !this.DefaultApiGroupsBuilders[i].Equal(that1.DefaultApiGroupsBuilders[i]) {
			return false
		}
	}
	if len(this.ApiGroups) != len(that1.ApiGroups) {
		return false
	}
	for i := range this.ApiGroups {
		if !this.ApiGroups[i].Equal(that1.ApiGroups[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SwaggerSpecs) != len(that1.SwaggerSpecs) {
		return false
	}
	for i := range this.SwaggerSpecs {
		if this.SwaggerSpecs[i] != that1.SwaggerSpecs[i] {
			return false
		}
	}
	return true
}
func (this *ApiOperation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiOperation)
	if !ok {
		that2, ok := that.(ApiOperation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	return true
}
func (this *ApiGroupBuilder) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiGroupBuilder)
	if !ok {
		that2, ok := that.(ApiGroupBuilder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if this.PathFilter != that1.PathFilter {
		return false
	}
	if !this.LabelFilter.Equal(that1.LabelFilter) {
		return false
	}
	if len(this.IncludedOperations) != len(that1.IncludedOperations) {
		return false
	}
	for i := range this.IncludedOperations {
		if !this.IncludedOperations[i].Equal(that1.IncludedOperations[i]) {
			return false
		}
	}
	if len(this.ExcludedOperations) != len(that1.ExcludedOperations) {
		return false
	}
	for i := range this.ExcludedOperations {
		if !this.ExcludedOperations[i].Equal(that1.ExcludedOperations[i]) {
			return false
		}
	}
	return true
}
func (this *ApiGroupSummary) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiGroupSummary)
	if !ok {
		that2, ok := that.(ApiGroupSummary)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Elements) != len(that1.Elements) {
		return false
	}
	for i := range this.Elements {
		if !this.Elements[i].Equal(that1.Elements[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&api_definition.GlobalSpecType{")
	s = append(s, "SwaggerSpecs: "+fmt.Sprintf("%#v", this.SwaggerSpecs)+",\n")
	if this.DefaultApiGroupsBuilders != nil {
		s = append(s, "DefaultApiGroupsBuilders: "+fmt.Sprintf("%#v", this.DefaultApiGroupsBuilders)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	if this.ApiGroups != nil {
		s = append(s, "ApiGroups: "+fmt.Sprintf("%#v", this.ApiGroups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api_definition.CreateSpecType{")
	s = append(s, "SwaggerSpecs: "+fmt.Sprintf("%#v", this.SwaggerSpecs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api_definition.GetSpecType{")
	s = append(s, "SwaggerSpecs: "+fmt.Sprintf("%#v", this.SwaggerSpecs)+",\n")
	if this.DefaultApiGroupsBuilders != nil {
		s = append(s, "DefaultApiGroupsBuilders: "+fmt.Sprintf("%#v", this.DefaultApiGroupsBuilders)+",\n")
	}
	if this.ApiGroups != nil {
		s = append(s, "ApiGroups: "+fmt.Sprintf("%#v", this.ApiGroups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api_definition.ReplaceSpecType{")
	s = append(s, "SwaggerSpecs: "+fmt.Sprintf("%#v", this.SwaggerSpecs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiOperation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api_definition.ApiOperation{")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiGroupBuilder) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&api_definition.ApiGroupBuilder{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "PathFilter: "+fmt.Sprintf("%#v", this.PathFilter)+",\n")
	if this.LabelFilter != nil {
		s = append(s, "LabelFilter: "+fmt.Sprintf("%#v", this.LabelFilter)+",\n")
	}
	if this.IncludedOperations != nil {
		s = append(s, "IncludedOperations: "+fmt.Sprintf("%#v", this.IncludedOperations)+",\n")
	}
	if this.ExcludedOperations != nil {
		s = append(s, "ExcludedOperations: "+fmt.Sprintf("%#v", this.ExcludedOperations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiGroupSummary) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api_definition.ApiGroupSummary{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Elements != nil {
		s = append(s, "Elements: "+fmt.Sprintf("%#v", this.Elements)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiGroups) > 0 {
		for iNdEx := len(m.ApiGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApiGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xca
		}
	}
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if len(m.DefaultApiGroupsBuilders) > 0 {
		for iNdEx := len(m.DefaultApiGroupsBuilders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DefaultApiGroupsBuilders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SwaggerSpecs) > 0 {
		for iNdEx := len(m.SwaggerSpecs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SwaggerSpecs[iNdEx])
			copy(dAtA[i:], m.SwaggerSpecs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.SwaggerSpecs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwaggerSpecs) > 0 {
		for iNdEx := len(m.SwaggerSpecs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SwaggerSpecs[iNdEx])
			copy(dAtA[i:], m.SwaggerSpecs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.SwaggerSpecs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiGroups) > 0 {
		for iNdEx := len(m.ApiGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApiGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.DefaultApiGroupsBuilders) > 0 {
		for iNdEx := len(m.DefaultApiGroupsBuilders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DefaultApiGroupsBuilders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SwaggerSpecs) > 0 {
		for iNdEx := len(m.SwaggerSpecs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SwaggerSpecs[iNdEx])
			copy(dAtA[i:], m.SwaggerSpecs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.SwaggerSpecs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwaggerSpecs) > 0 {
		for iNdEx := len(m.SwaggerSpecs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SwaggerSpecs[iNdEx])
			copy(dAtA[i:], m.SwaggerSpecs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.SwaggerSpecs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApiOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiOperation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiOperation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if m.Method != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ApiGroupBuilder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiGroupBuilder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiGroupBuilder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExcludedOperations) > 0 {
		for iNdEx := len(m.ExcludedOperations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExcludedOperations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.IncludedOperations) > 0 {
		for iNdEx := len(m.IncludedOperations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncludedOperations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.LabelFilter != nil {
		{
			size, err := m.LabelFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PathFilter) > 0 {
		i -= len(m.PathFilter)
		copy(dAtA[i:], m.PathFilter)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PathFilter)))
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApiGroupSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiGroupSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiGroupSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Elements) > 0 {
		for iNdEx := len(m.Elements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Elements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SwaggerSpecs) > 0 {
		for _, s := range m.SwaggerSpecs {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DefaultApiGroupsBuilders) > 0 {
		for _, e := range m.DefaultApiGroupsBuilders {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.ApiGroups) > 0 {
		for _, e := range m.ApiGroups {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SwaggerSpecs) > 0 {
		for _, s := range m.SwaggerSpecs {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SwaggerSpecs) > 0 {
		for _, s := range m.SwaggerSpecs {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DefaultApiGroupsBuilders) > 0 {
		for _, e := range m.DefaultApiGroupsBuilders {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ApiGroups) > 0 {
		for _, e := range m.ApiGroups {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SwaggerSpecs) > 0 {
		for _, s := range m.SwaggerSpecs {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ApiOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Method != 0 {
		n += 1 + sovTypes(uint64(m.Method))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ApiGroupBuilder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PathFilter)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LabelFilter != nil {
		l = m.LabelFilter.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.IncludedOperations) > 0 {
		for _, e := range m.IncludedOperations {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ExcludedOperations) > 0 {
		for _, e := range m.ExcludedOperations {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ApiGroupSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Elements) > 0 {
		for _, e := range m.Elements {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDefaultApiGroupsBuilders := "[]*ApiGroupBuilder{"
	for _, f := range this.DefaultApiGroupsBuilders {
		repeatedStringForDefaultApiGroupsBuilders += strings.Replace(f.String(), "ApiGroupBuilder", "ApiGroupBuilder", 1) + ","
	}
	repeatedStringForDefaultApiGroupsBuilders += "}"
	repeatedStringForApiGroups := "[]*ApiGroupSummary{"
	for _, f := range this.ApiGroups {
		repeatedStringForApiGroups += strings.Replace(f.String(), "ApiGroupSummary", "ApiGroupSummary", 1) + ","
	}
	repeatedStringForApiGroups += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`SwaggerSpecs:` + fmt.Sprintf("%v", this.SwaggerSpecs) + `,`,
		`DefaultApiGroupsBuilders:` + repeatedStringForDefaultApiGroupsBuilders + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`ApiGroups:` + repeatedStringForApiGroups + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`SwaggerSpecs:` + fmt.Sprintf("%v", this.SwaggerSpecs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDefaultApiGroupsBuilders := "[]*ApiGroupBuilder{"
	for _, f := range this.DefaultApiGroupsBuilders {
		repeatedStringForDefaultApiGroupsBuilders += strings.Replace(f.String(), "ApiGroupBuilder", "ApiGroupBuilder", 1) + ","
	}
	repeatedStringForDefaultApiGroupsBuilders += "}"
	repeatedStringForApiGroups := "[]*ApiGroupSummary{"
	for _, f := range this.ApiGroups {
		repeatedStringForApiGroups += strings.Replace(f.String(), "ApiGroupSummary", "ApiGroupSummary", 1) + ","
	}
	repeatedStringForApiGroups += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`SwaggerSpecs:` + fmt.Sprintf("%v", this.SwaggerSpecs) + `,`,
		`DefaultApiGroupsBuilders:` + repeatedStringForDefaultApiGroupsBuilders + `,`,
		`ApiGroups:` + repeatedStringForApiGroups + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`SwaggerSpecs:` + fmt.Sprintf("%v", this.SwaggerSpecs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiOperation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiOperation{`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiGroupBuilder) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForIncludedOperations := "[]*ApiOperation{"
	for _, f := range this.IncludedOperations {
		repeatedStringForIncludedOperations += strings.Replace(f.String(), "ApiOperation", "ApiOperation", 1) + ","
	}
	repeatedStringForIncludedOperations += "}"
	repeatedStringForExcludedOperations := "[]*ApiOperation{"
	for _, f := range this.ExcludedOperations {
		repeatedStringForExcludedOperations += strings.Replace(f.String(), "ApiOperation", "ApiOperation", 1) + ","
	}
	repeatedStringForExcludedOperations += "}"
	s := strings.Join([]string{`&ApiGroupBuilder{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`PathFilter:` + fmt.Sprintf("%v", this.PathFilter) + `,`,
		`LabelFilter:` + strings.Replace(fmt.Sprintf("%v", this.LabelFilter), "LabelSelectorType", "schema.LabelSelectorType", 1) + `,`,
		`IncludedOperations:` + repeatedStringForIncludedOperations + `,`,
		`ExcludedOperations:` + repeatedStringForExcludedOperations + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiGroupSummary) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForElements := "[]*GlobalSpecType{"
	for _, f := range this.Elements {
		repeatedStringForElements += strings.Replace(fmt.Sprintf("%v", f), "GlobalSpecType", "api_group_element.GlobalSpecType", 1) + ","
	}
	repeatedStringForElements += "}"
	s := strings.Join([]string{`&ApiGroupSummary{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Elements:` + repeatedStringForElements + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwaggerSpecs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwaggerSpecs = append(m.SwaggerSpecs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultApiGroupsBuilders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultApiGroupsBuilders = append(m.DefaultApiGroupsBuilders, &ApiGroupBuilder{})
			if err := m.DefaultApiGroupsBuilders[len(m.DefaultApiGroupsBuilders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiGroups = append(m.ApiGroups, &ApiGroupSummary{})
			if err := m.ApiGroups[len(m.ApiGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwaggerSpecs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwaggerSpecs = append(m.SwaggerSpecs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwaggerSpecs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwaggerSpecs = append(m.SwaggerSpecs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultApiGroupsBuilders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultApiGroupsBuilders = append(m.DefaultApiGroupsBuilders, &ApiGroupBuilder{})
			if err := m.DefaultApiGroupsBuilders[len(m.DefaultApiGroupsBuilders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiGroups = append(m.ApiGroups, &ApiGroupSummary{})
			if err := m.ApiGroups[len(m.ApiGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwaggerSpecs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwaggerSpecs = append(m.SwaggerSpecs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= schema.HttpMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiGroupBuilder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiGroupBuilder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiGroupBuilder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathFilter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LabelFilter == nil {
				m.LabelFilter = &schema.LabelSelectorType{}
			}
			if err := m.LabelFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludedOperations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludedOperations = append(m.IncludedOperations, &ApiOperation{})
			if err := m.IncludedOperations[len(m.IncludedOperations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludedOperations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludedOperations = append(m.ExcludedOperations, &ApiOperation{})
			if err := m.ExcludedOperations[len(m.ExcludedOperations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiGroupSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiGroupSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiGroupSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Elements = append(m.Elements, &api_group_element.GlobalSpecType{})
			if err := m.Elements[len(m.Elements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
