// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/k8s_manifest_params/types.proto

package k8s_manifest_params

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeployStatus int32

const (
	RUNNING                    DeployStatus = 0
	STOPPED                    DeployStatus = 1
	PROVISIONING               DeployStatus = 2
	STARTING                   DeployStatus = 3
	PAUSED                     DeployStatus = 4
	STOPPING                   DeployStatus = 5
	TERMINATING                DeployStatus = 6
	CRASHLOOP_BACKOFF          DeployStatus = 7
	MIGRATING                  DeployStatus = 8
	UNKNOWN                    DeployStatus = 9
	ERROR_RUN_SCHEDULABLE      DeployStatus = 10
	ERR_IMAGE_PULL             DeployStatus = 11
	IMAGE_PULL_BACKOFF         DeployStatus = 12
	ERROR_PVC_NOTFOUND         DeployStatus = 13
	DATA_VOLUME_ERROR          DeployStatus = 14
	WAITING_FOR_VOLUME_BINDING DeployStatus = 15
)

var DeployStatus_name = map[int32]string{
	0:  "RUNNING",
	1:  "STOPPED",
	2:  "PROVISIONING",
	3:  "STARTING",
	4:  "PAUSED",
	5:  "STOPPING",
	6:  "TERMINATING",
	7:  "CRASHLOOP_BACKOFF",
	8:  "MIGRATING",
	9:  "UNKNOWN",
	10: "ERROR_RUN_SCHEDULABLE",
	11: "ERR_IMAGE_PULL",
	12: "IMAGE_PULL_BACKOFF",
	13: "ERROR_PVC_NOTFOUND",
	14: "DATA_VOLUME_ERROR",
	15: "WAITING_FOR_VOLUME_BINDING",
}

var DeployStatus_value = map[string]int32{
	"RUNNING":                    0,
	"STOPPED":                    1,
	"PROVISIONING":               2,
	"STARTING":                   3,
	"PAUSED":                     4,
	"STOPPING":                   5,
	"TERMINATING":                6,
	"CRASHLOOP_BACKOFF":          7,
	"MIGRATING":                  8,
	"UNKNOWN":                    9,
	"ERROR_RUN_SCHEDULABLE":      10,
	"ERR_IMAGE_PULL":             11,
	"IMAGE_PULL_BACKOFF":         12,
	"ERROR_PVC_NOTFOUND":         13,
	"DATA_VOLUME_ERROR":          14,
	"WAITING_FOR_VOLUME_BINDING": 15,
}

func (DeployStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_56bd34ec845d1f02, []int{0}
}

// Big-IP Device Configuration Parameters
//
// x-displayName: "Big-IP Device Parameters"
// Big-IP Device Configuration Parameters
type BigIpBareMetalDeviceK8SParams struct {
	// Node Name
	//
	// x-displayName: "Node Name"
	// x-example: "node1"
	// x-required
	// Node Name will be used to assign as hostname to the service
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// BIG-IP License Key
	//
	// x-displayName: "License Key"
	// x-example: "X1507-61193-79022-21602-7036987"
	// x-required
	// License key for the BIG-IP
	LicenseKey string `protobuf:"bytes,2,opt,name=license_key,json=licenseKey,proto3" json:"license_key,omitempty"`
	// BIG-IP Internal Network Self IP
	//
	// x-displayName: "Internal Network Self IP"
	// x-example: "10.2.3.0/24"
	// x-required
	// BIG-IP internal network self ip
	InternalNetworkSelfip string `protobuf:"bytes,3,opt,name=internal_network_selfip,json=internalNetworkSelfip,proto3" json:"internal_network_selfip,omitempty"`
	// BIG-IP Internal Network Default Gateway
	//
	// x-displayName: "Internal Network Default Gateway"
	// x-example: "10.2.3.0"
	// x-required
	// Internal network interface default gateway
	InternalNetworkGateway string `protobuf:"bytes,4,opt,name=internal_network_gateway,json=internalNetworkGateway,proto3" json:"internal_network_gateway,omitempty"`
	// BIG-IP External Network Self IP
	//
	// x-displayName: "External Network Self IP"
	// x-example: "10.2.3.0/24"
	// x-required
	// BIG-IP external network self ip
	ExternalNetworkSelfip string `protobuf:"bytes,5,opt,name=external_network_selfip,json=externalNetworkSelfip,proto3" json:"external_network_selfip,omitempty"`
	// BIG-IP External Network Default Gateway
	//
	// x-displayName: "External Network Default Gateway"
	// x-example: "10.2.3.0"
	// x-required
	// External network interface default gateway
	ExternalNetworkGateway string `protobuf:"bytes,6,opt,name=external_network_gateway,json=externalNetworkGateway,proto3" json:"external_network_gateway,omitempty"`
	// BIG-IP External Network Attachment Defintion/Subnet Object
	//
	// x-displayName: "External Network Attachment Defintion/"
	// x-example: "subnet_object_name"
	// x-required
	// BIG-IP External Network Attachment Defintion/Subnet Object
	NadForExternalInterface string `protobuf:"bytes,7,opt,name=nad_for_external_interface,json=nadForExternalInterface,proto3" json:"nad_for_external_interface,omitempty"`
	// BIG-IP Internal Network Attachment Defintion/Subnet Object
	//
	// x-displayName: "Internal Network Attachment Defintion/"
	// x-example: "subnet_object_name"
	// x-required
	// BIG-IP Internal Network Attachment Defintion/Subnet Object
	NadForInternalInterface string `protobuf:"bytes,8,opt,name=nad_for_internal_interface,json=nadForInternalInterface,proto3" json:"nad_for_internal_interface,omitempty"`
}

func (m *BigIpBareMetalDeviceK8SParams) Reset()      { *m = BigIpBareMetalDeviceK8SParams{} }
func (*BigIpBareMetalDeviceK8SParams) ProtoMessage() {}
func (*BigIpBareMetalDeviceK8SParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_56bd34ec845d1f02, []int{0}
}
func (m *BigIpBareMetalDeviceK8SParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BigIpBareMetalDeviceK8SParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BigIpBareMetalDeviceK8SParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BigIpBareMetalDeviceK8SParams.Merge(m, src)
}
func (m *BigIpBareMetalDeviceK8SParams) XXX_Size() int {
	return m.Size()
}
func (m *BigIpBareMetalDeviceK8SParams) XXX_DiscardUnknown() {
	xxx_messageInfo_BigIpBareMetalDeviceK8SParams.DiscardUnknown(m)
}

var xxx_messageInfo_BigIpBareMetalDeviceK8SParams proto.InternalMessageInfo

func (m *BigIpBareMetalDeviceK8SParams) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *BigIpBareMetalDeviceK8SParams) GetLicenseKey() string {
	if m != nil {
		return m.LicenseKey
	}
	return ""
}

func (m *BigIpBareMetalDeviceK8SParams) GetInternalNetworkSelfip() string {
	if m != nil {
		return m.InternalNetworkSelfip
	}
	return ""
}

func (m *BigIpBareMetalDeviceK8SParams) GetInternalNetworkGateway() string {
	if m != nil {
		return m.InternalNetworkGateway
	}
	return ""
}

func (m *BigIpBareMetalDeviceK8SParams) GetExternalNetworkSelfip() string {
	if m != nil {
		return m.ExternalNetworkSelfip
	}
	return ""
}

func (m *BigIpBareMetalDeviceK8SParams) GetExternalNetworkGateway() string {
	if m != nil {
		return m.ExternalNetworkGateway
	}
	return ""
}

func (m *BigIpBareMetalDeviceK8SParams) GetNadForExternalInterface() string {
	if m != nil {
		return m.NadForExternalInterface
	}
	return ""
}

func (m *BigIpBareMetalDeviceK8SParams) GetNadForInternalInterface() string {
	if m != nil {
		return m.NadForInternalInterface
	}
	return ""
}

type BigIpBareMetalK8SType struct {
	// Big-IP Admin Username
	//
	// x-displayName: "Big-IP Admin Username"
	// x-required
	// Big-IP Admin Username
	AdminUsername string `protobuf:"bytes,1,opt,name=admin_username,json=adminUsername,proto3" json:"admin_username,omitempty"`
	// SSH Public Key
	//
	// x-displayName: "SSH Public Key"
	// x-required
	// SSH Public Key to be programmed on bigip instance for ssh access
	SshKey string `protobuf:"bytes,2,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	// public URL where BIG-IP image is hosted.
	//
	// x-displayName: "Image path"
	// x-required
	// public URL where BIG-IP image VE edition is hosted.
	PublicDownloadUrl string `protobuf:"bytes,4,opt,name=public_download_url,json=publicDownloadUrl,proto3" json:"public_download_url,omitempty"`
	// Big-IP Devices Info
	//
	// x-displayName: "Big-IP Devices Info"
	// x-required
	// Big-IP Devices Info
	Devices []*BigIpBareMetalDeviceK8SParams `protobuf:"bytes,3,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (m *BigIpBareMetalK8SType) Reset()      { *m = BigIpBareMetalK8SType{} }
func (*BigIpBareMetalK8SType) ProtoMessage() {}
func (*BigIpBareMetalK8SType) Descriptor() ([]byte, []int) {
	return fileDescriptor_56bd34ec845d1f02, []int{1}
}
func (m *BigIpBareMetalK8SType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BigIpBareMetalK8SType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BigIpBareMetalK8SType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BigIpBareMetalK8SType.Merge(m, src)
}
func (m *BigIpBareMetalK8SType) XXX_Size() int {
	return m.Size()
}
func (m *BigIpBareMetalK8SType) XXX_DiscardUnknown() {
	xxx_messageInfo_BigIpBareMetalK8SType.DiscardUnknown(m)
}

var xxx_messageInfo_BigIpBareMetalK8SType proto.InternalMessageInfo

func (m *BigIpBareMetalK8SType) GetAdminUsername() string {
	if m != nil {
		return m.AdminUsername
	}
	return ""
}

func (m *BigIpBareMetalK8SType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *BigIpBareMetalK8SType) GetPublicDownloadUrl() string {
	if m != nil {
		return m.PublicDownloadUrl
	}
	return ""
}

func (m *BigIpBareMetalK8SType) GetDevices() []*BigIpBareMetalDeviceK8SParams {
	if m != nil {
		return m.Devices
	}
	return nil
}

// GlobalSpecType
//
// x-displayName: "View Kubernetes Manifest Specification"
// Shape of the view Kubernetes Manifest specification
type GlobalSpecType struct {
	// F5 App Stack Bare Metal
	//
	// x-displayName: "Kubernetes Manifest Params"
	// Data specific to F5 Bare Metal Kubernetes parameters
	//
	// Types that are valid to be assigned to F5K8SType:
	//	*GlobalSpecType_F5BareMetalK8SParams
	F5K8SType isGlobalSpecType_F5K8SType `protobuf_oneof:"f5_k8s_type"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_56bd34ec845d1f02, []int{2}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_F5K8SType interface {
	isGlobalSpecType_F5K8SType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_F5BareMetalK8SParams struct {
	F5BareMetalK8SParams *BigIpBareMetalK8SType `protobuf:"bytes,2,opt,name=f5_bare_metal_k8s_params,json=f5BareMetalK8sParams,proto3,oneof" json:"f5_bare_metal_k8s_params,omitempty"`
}

func (*GlobalSpecType_F5BareMetalK8SParams) isGlobalSpecType_F5K8SType() {}

func (m *GlobalSpecType) GetF5K8SType() isGlobalSpecType_F5K8SType {
	if m != nil {
		return m.F5K8SType
	}
	return nil
}

func (m *GlobalSpecType) GetF5BareMetalK8SParams() *BigIpBareMetalK8SType {
	if x, ok := m.GetF5K8SType().(*GlobalSpecType_F5BareMetalK8SParams); ok {
		return x.F5BareMetalK8SParams
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_F5BareMetalK8SParams)(nil),
	}
}

type DeploymentStatusType struct {
	// Status
	//
	// x-displayName: "Status"
	// Status
	Status DeployStatus `protobuf:"varint,1,opt,name=status,proto3,enum=ves.io.schema.views.k8s_manifest_params.DeployStatus" json:"status,omitempty"`
	// Status Output
	//
	// x-displayName: "Status Output"
	// Status Output
	StatusOutput string `protobuf:"bytes,2,opt,name=status_output,json=statusOutput,proto3" json:"status_output,omitempty"`
}

func (m *DeploymentStatusType) Reset()      { *m = DeploymentStatusType{} }
func (*DeploymentStatusType) ProtoMessage() {}
func (*DeploymentStatusType) Descriptor() ([]byte, []int) {
	return fileDescriptor_56bd34ec845d1f02, []int{3}
}
func (m *DeploymentStatusType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentStatusType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DeploymentStatusType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentStatusType.Merge(m, src)
}
func (m *DeploymentStatusType) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentStatusType) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentStatusType.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentStatusType proto.InternalMessageInfo

func (m *DeploymentStatusType) GetStatus() DeployStatus {
	if m != nil {
		return m.Status
	}
	return RUNNING
}

func (m *DeploymentStatusType) GetStatusOutput() string {
	if m != nil {
		return m.StatusOutput
	}
	return ""
}

func init() {
	proto.RegisterEnum("ves.io.schema.views.k8s_manifest_params.DeployStatus", DeployStatus_name, DeployStatus_value)
	golang_proto.RegisterEnum("ves.io.schema.views.k8s_manifest_params.DeployStatus", DeployStatus_name, DeployStatus_value)
	proto.RegisterType((*BigIpBareMetalDeviceK8SParams)(nil), "ves.io.schema.views.k8s_manifest_params.BigIpBareMetalDeviceK8sParams")
	golang_proto.RegisterType((*BigIpBareMetalDeviceK8SParams)(nil), "ves.io.schema.views.k8s_manifest_params.BigIpBareMetalDeviceK8sParams")
	proto.RegisterType((*BigIpBareMetalK8SType)(nil), "ves.io.schema.views.k8s_manifest_params.BigIpBareMetalK8sType")
	golang_proto.RegisterType((*BigIpBareMetalK8SType)(nil), "ves.io.schema.views.k8s_manifest_params.BigIpBareMetalK8sType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.k8s_manifest_params.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.k8s_manifest_params.GlobalSpecType")
	proto.RegisterType((*DeploymentStatusType)(nil), "ves.io.schema.views.k8s_manifest_params.DeploymentStatusType")
	golang_proto.RegisterType((*DeploymentStatusType)(nil), "ves.io.schema.views.k8s_manifest_params.DeploymentStatusType")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/k8s_manifest_params/types.proto", fileDescriptor_56bd34ec845d1f02)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/k8s_manifest_params/types.proto", fileDescriptor_56bd34ec845d1f02)
}

var fileDescriptor_56bd34ec845d1f02 = []byte{
	// 988 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcf, 0x4f, 0xe3, 0x46,
	0x14, 0xce, 0x24, 0x10, 0xc2, 0x04, 0x58, 0xef, 0x14, 0x96, 0x2c, 0xdb, 0x1a, 0x44, 0x5b, 0x75,
	0x55, 0x09, 0x47, 0x62, 0x45, 0x85, 0x54, 0xa9, 0x52, 0x42, 0x12, 0x70, 0x49, 0xec, 0xc8, 0x49,
	0x58, 0xa9, 0x52, 0x35, 0x9a, 0x24, 0x93, 0x60, 0x61, 0x7b, 0x2c, 0xcf, 0x24, 0x90, 0x5b, 0xcf,
	0x3d, 0x55, 0xbd, 0xf6, 0x1f, 0x68, 0xff, 0x85, 0xd2, 0x03, 0xc7, 0x1e, 0x39, 0x72, 0x2c, 0xe1,
	0xd2, 0xde, 0xf6, 0x3f, 0x68, 0xe5, 0xb1, 0x03, 0xe1, 0x87, 0xda, 0x55, 0x6f, 0xf3, 0xde, 0xf7,
	0xbe, 0xef, 0x7b, 0xf3, 0x9e, 0x7f, 0xc0, 0x37, 0x43, 0xca, 0x35, 0x9b, 0xe5, 0x79, 0xe7, 0x98,
	0xba, 0x24, 0x3f, 0xb4, 0xe9, 0x29, 0xcf, 0x9f, 0xec, 0x72, 0xec, 0x12, 0xcf, 0xee, 0x51, 0x2e,
	0xb0, 0x4f, 0x02, 0xe2, 0xf2, 0xbc, 0x18, 0xf9, 0x94, 0x6b, 0x7e, 0xc0, 0x04, 0x43, 0x9f, 0x45,
	0x24, 0x2d, 0x22, 0x69, 0x92, 0xa4, 0x3d, 0x41, 0x5a, 0xdb, 0xea, 0xdb, 0xe2, 0x78, 0xd0, 0xd6,
	0x3a, 0xcc, 0xcd, 0xf7, 0x59, 0x9f, 0xe5, 0x25, 0xbf, 0x3d, 0xe8, 0xc9, 0x48, 0x06, 0xf2, 0x14,
	0xe9, 0xae, 0xbd, 0xec, 0x33, 0xd6, 0x77, 0xe8, 0x5d, 0x15, 0xf1, 0x46, 0x31, 0xb4, 0xfe, 0x10,
	0x12, 0xb6, 0x4b, 0xb9, 0x20, 0xae, 0x1f, 0x17, 0xbc, 0xba, 0x7f, 0x11, 0xe6, 0x0b, 0x9b, 0x79,
	0x7c, 0x22, 0x7c, 0x1f, 0x9c, 0xba, 0xcb, 0xda, 0x87, 0x0f, 0x06, 0x40, 0x1c, 0xbb, 0x4b, 0x04,
	0x8d, 0xd1, 0x8d, 0xc7, 0xe3, 0xc1, 0xf7, 0xa5, 0x3f, 0x79, 0x6a, 0x80, 0xdc, 0x16, 0x14, 0x4f,
	0xbb, 0xac, 0x3f, 0x55, 0x35, 0x55, 0xb0, 0x79, 0x9e, 0x82, 0x1f, 0x15, 0xed, 0xbe, 0xee, 0x17,
	0x49, 0x40, 0x6b, 0x54, 0x10, 0xa7, 0x44, 0x87, 0x76, 0x87, 0x1e, 0xee, 0xf2, 0xba, 0x9c, 0x25,
	0x7a, 0x05, 0xe7, 0x3d, 0xd6, 0xa5, 0xd8, 0x23, 0x2e, 0xcd, 0x81, 0x0d, 0xf0, 0x7a, 0xde, 0xca,
	0x84, 0x09, 0x83, 0xb8, 0x14, 0xad, 0xc3, 0xac, 0x63, 0x77, 0xa8, 0xc7, 0x29, 0x3e, 0xa1, 0xa3,
	0x5c, 0x52, 0xc2, 0x30, 0x4e, 0x1d, 0xd2, 0x11, 0xfa, 0x02, 0xae, 0xda, 0x9e, 0xa0, 0x81, 0x47,
	0x1c, 0xec, 0x51, 0x71, 0xca, 0x82, 0x13, 0xcc, 0xa9, 0xd3, 0xb3, 0xfd, 0x5c, 0x4a, 0x16, 0xaf,
	0x4c, 0x60, 0x23, 0x42, 0x1b, 0x12, 0x44, 0xbb, 0x30, 0xf7, 0x88, 0xd7, 0x27, 0x82, 0x9e, 0x92,
	0x51, 0x6e, 0x46, 0x12, 0x5f, 0x3c, 0x20, 0xee, 0x47, 0x68, 0xe8, 0x48, 0xcf, 0x9e, 0x76, 0x9c,
	0x8d, 0x1c, 0x27, 0xf0, 0x23, 0xc7, 0x47, 0xbc, 0x89, 0x63, 0x3a, 0x72, 0x7c, 0x40, 0x9c, 0x38,
	0x7e, 0x09, 0xd7, 0x3c, 0xd2, 0xc5, 0x3d, 0x16, 0xe0, 0x5b, 0x05, 0xd9, 0x5c, 0x8f, 0x74, 0x68,
	0x6e, 0x4e, 0x72, 0x57, 0x3d, 0xd2, 0xad, 0xb0, 0xa0, 0x1c, 0xe3, 0xfa, 0x04, 0x9e, 0x26, 0xdf,
	0x5e, 0xf8, 0x8e, 0x9c, 0x99, 0x26, 0xeb, 0xde, 0x03, 0xf2, 0xe6, 0xdf, 0x00, 0xae, 0xdc, 0xdf,
	0xde, 0xe1, 0x2e, 0x6f, 0x8e, 0x7c, 0x8a, 0x3e, 0x85, 0x4b, 0xa4, 0xeb, 0xda, 0x1e, 0x1e, 0xf0,
	0x90, 0x73, 0xbb, 0xba, 0x45, 0x99, 0x6d, 0xc5, 0x49, 0xb4, 0x0a, 0xe7, 0x38, 0x3f, 0x9e, 0xda,
	0x5d, 0x9a, 0xf3, 0xe3, 0x70, 0x6f, 0x1a, 0xfc, 0xc0, 0x1f, 0xb4, 0x1d, 0xbb, 0x83, 0xbb, 0xec,
	0xd4, 0x73, 0x18, 0xe9, 0xe2, 0x41, 0xe0, 0xc4, 0xa3, 0x7f, 0x1e, 0x41, 0xa5, 0x18, 0x69, 0x05,
	0x0e, 0x1a, 0xc2, 0xb9, 0xae, 0x7c, 0x70, 0x78, 0x2e, 0xb5, 0x91, 0x7a, 0x9d, 0xdd, 0xae, 0x68,
	0xef, 0xf9, 0xb2, 0x6a, 0xff, 0xfa, 0xf8, 0x15, 0x97, 0x7f, 0xfd, 0xeb, 0x22, 0x35, 0xfb, 0x23,
	0x48, 0x2a, 0x60, 0x72, 0xca, 0x00, 0x6b, 0x62, 0xb6, 0xf9, 0x0b, 0x80, 0x4b, 0xfb, 0x0e, 0x6b,
	0x13, 0xa7, 0xe1, 0xd3, 0x8e, 0xbc, 0xfa, 0x19, 0xcc, 0xf5, 0x76, 0x70, 0x9b, 0x04, 0x14, 0xbb,
	0xa1, 0x22, 0x0e, 0x4d, 0x23, 0x2f, 0x79, 0xc9, 0xec, 0xf6, 0x57, 0xff, 0xb3, 0xb7, 0x78, 0xb8,
	0x07, 0x09, 0x6b, 0xb9, 0xb7, 0x33, 0x9d, 0x8d, 0x7b, 0x5d, 0x85, 0xd9, 0xde, 0x8e, 0xb4, 0x0b,
	0x5f, 0x31, 0x94, 0xb9, 0x38, 0x07, 0xc9, 0xcb, 0x73, 0x00, 0xbe, 0x9e, 0xc9, 0x00, 0x25, 0xb9,
	0xf9, 0x3d, 0x80, 0xcb, 0x25, 0xea, 0x3b, 0x6c, 0xe4, 0x52, 0x4f, 0x34, 0x04, 0x11, 0x83, 0x68,
	0x59, 0x35, 0x98, 0xe6, 0x32, 0x92, 0x4b, 0x5a, 0xda, 0xde, 0x79, 0xef, 0xfe, 0x22, 0xb9, 0x48,
	0xca, 0x8a, 0x45, 0xd0, 0xc7, 0x70, 0x31, 0x3a, 0x61, 0x36, 0x10, 0xfe, 0x40, 0xc4, 0xab, 0x5d,
	0x88, 0x92, 0xa6, 0xcc, 0x7d, 0xfe, 0x5b, 0x12, 0x2e, 0x4c, 0xb3, 0x51, 0x16, 0xce, 0x59, 0x2d,
	0xc3, 0xd0, 0x8d, 0x7d, 0x25, 0x11, 0x06, 0x8d, 0xa6, 0x59, 0xaf, 0x97, 0x4b, 0x0a, 0x40, 0x0a,
	0x5c, 0xa8, 0x5b, 0xe6, 0x91, 0xde, 0xd0, 0x4d, 0x09, 0x27, 0xd1, 0x02, 0xcc, 0x34, 0x9a, 0x05,
	0xab, 0x19, 0x46, 0x29, 0x04, 0x61, 0xba, 0x5e, 0x68, 0x35, 0xca, 0x25, 0x65, 0x26, 0x42, 0xcc,
	0x7a, 0x3d, 0x44, 0x66, 0xd1, 0x33, 0x98, 0x6d, 0x96, 0xad, 0x9a, 0x6e, 0x14, 0x64, 0x69, 0x1a,
	0xad, 0xc0, 0xe7, 0x7b, 0x56, 0xa1, 0x71, 0x50, 0x35, 0xcd, 0x3a, 0x2e, 0x16, 0xf6, 0x0e, 0xcd,
	0x4a, 0x45, 0x99, 0x43, 0x8b, 0x70, 0xbe, 0xa6, 0xef, 0x5b, 0x51, 0x55, 0x26, 0x74, 0x6f, 0x19,
	0x87, 0x86, 0xf9, 0xd6, 0x50, 0xe6, 0xd1, 0x4b, 0xb8, 0x52, 0xb6, 0x2c, 0xd3, 0xc2, 0x56, 0xcb,
	0xc0, 0x8d, 0xbd, 0x83, 0x72, 0xa9, 0x55, 0x2d, 0x14, 0xab, 0x65, 0x05, 0x22, 0x04, 0x97, 0xca,
	0x96, 0x85, 0xf5, 0x5a, 0x61, 0xbf, 0x8c, 0xeb, 0xad, 0x6a, 0x55, 0xc9, 0xa2, 0x17, 0x10, 0xdd,
	0xc5, 0xb7, 0x16, 0x0b, 0x61, 0x3e, 0x92, 0xa9, 0x1f, 0xed, 0x61, 0xc3, 0x6c, 0x56, 0xcc, 0x96,
	0x51, 0x52, 0x16, 0xc3, 0x8e, 0x4a, 0x85, 0x66, 0x01, 0x1f, 0x99, 0xd5, 0x56, 0xad, 0x8c, 0x65,
	0x8d, 0xb2, 0x84, 0x54, 0xb8, 0xf6, 0xb6, 0xa0, 0x87, 0xfd, 0xe0, 0x8a, 0x69, 0x4d, 0xd0, 0xa2,
	0x6e, 0x94, 0xc2, 0x16, 0x9f, 0x15, 0x7f, 0x02, 0x97, 0xd7, 0x6a, 0xe2, 0xea, 0x5a, 0x4d, 0xbc,
	0xbb, 0x56, 0xc1, 0x77, 0x63, 0x15, 0xfc, 0x3c, 0x56, 0xc1, 0xef, 0x63, 0x15, 0x5c, 0x8e, 0x55,
	0x70, 0x35, 0x56, 0xc1, 0x1f, 0x63, 0x15, 0xfc, 0x39, 0x56, 0x13, 0xef, 0xc6, 0x2a, 0xf8, 0xe1,
	0x46, 0x4d, 0x5c, 0xdc, 0xa8, 0xe0, 0xf2, 0x46, 0x4d, 0x5c, 0xdd, 0xa8, 0x89, 0x6f, 0xbe, 0xed,
	0x33, 0xff, 0xa4, 0xaf, 0x0d, 0x99, 0x23, 0x68, 0x10, 0x10, 0x6d, 0xc0, 0xf3, 0xf2, 0xd0, 0x63,
	0x81, 0xbb, 0xe5, 0x07, 0x6c, 0x68, 0x77, 0x69, 0xb0, 0x35, 0x81, 0xf3, 0x7e, 0xbb, 0xcf, 0xf2,
	0xf4, 0x4c, 0xc4, 0x9f, 0xf1, 0xff, 0xfa, 0x69, 0xb6, 0xd3, 0xf2, 0xe3, 0xfe, 0xe6, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x05, 0x7f, 0xa1, 0xd5, 0x66, 0x07, 0x00, 0x00,
}

func (x DeployStatus) String() string {
	s, ok := DeployStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *BigIpBareMetalDeviceK8SParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BigIpBareMetalDeviceK8SParams)
	if !ok {
		that2, ok := that.(BigIpBareMetalDeviceK8SParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeName != that1.NodeName {
		return false
	}
	if this.LicenseKey != that1.LicenseKey {
		return false
	}
	if this.InternalNetworkSelfip != that1.InternalNetworkSelfip {
		return false
	}
	if this.InternalNetworkGateway != that1.InternalNetworkGateway {
		return false
	}
	if this.ExternalNetworkSelfip != that1.ExternalNetworkSelfip {
		return false
	}
	if this.ExternalNetworkGateway != that1.ExternalNetworkGateway {
		return false
	}
	if this.NadForExternalInterface != that1.NadForExternalInterface {
		return false
	}
	if this.NadForInternalInterface != that1.NadForInternalInterface {
		return false
	}
	return true
}
func (this *BigIpBareMetalK8SType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BigIpBareMetalK8SType)
	if !ok {
		that2, ok := that.(BigIpBareMetalK8SType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AdminUsername != that1.AdminUsername {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if this.PublicDownloadUrl != that1.PublicDownloadUrl {
		return false
	}
	if len(this.Devices) != len(that1.Devices) {
		return false
	}
	for i := range this.Devices {
		if !this.Devices[i].Equal(that1.Devices[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.F5K8SType == nil {
		if this.F5K8SType != nil {
			return false
		}
	} else if this.F5K8SType == nil {
		return false
	} else if !this.F5K8SType.Equal(that1.F5K8SType) {
		return false
	}
	return true
}
func (this *GlobalSpecType_F5BareMetalK8SParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_F5BareMetalK8SParams)
	if !ok {
		that2, ok := that.(GlobalSpecType_F5BareMetalK8SParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.F5BareMetalK8SParams.Equal(that1.F5BareMetalK8SParams) {
		return false
	}
	return true
}
func (this *DeploymentStatusType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeploymentStatusType)
	if !ok {
		that2, ok := that.(DeploymentStatusType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.StatusOutput != that1.StatusOutput {
		return false
	}
	return true
}
func (this *BigIpBareMetalDeviceK8SParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&k8s_manifest_params.BigIpBareMetalDeviceK8SParams{")
	s = append(s, "NodeName: "+fmt.Sprintf("%#v", this.NodeName)+",\n")
	s = append(s, "LicenseKey: "+fmt.Sprintf("%#v", this.LicenseKey)+",\n")
	s = append(s, "InternalNetworkSelfip: "+fmt.Sprintf("%#v", this.InternalNetworkSelfip)+",\n")
	s = append(s, "InternalNetworkGateway: "+fmt.Sprintf("%#v", this.InternalNetworkGateway)+",\n")
	s = append(s, "ExternalNetworkSelfip: "+fmt.Sprintf("%#v", this.ExternalNetworkSelfip)+",\n")
	s = append(s, "ExternalNetworkGateway: "+fmt.Sprintf("%#v", this.ExternalNetworkGateway)+",\n")
	s = append(s, "NadForExternalInterface: "+fmt.Sprintf("%#v", this.NadForExternalInterface)+",\n")
	s = append(s, "NadForInternalInterface: "+fmt.Sprintf("%#v", this.NadForInternalInterface)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BigIpBareMetalK8SType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&k8s_manifest_params.BigIpBareMetalK8SType{")
	s = append(s, "AdminUsername: "+fmt.Sprintf("%#v", this.AdminUsername)+",\n")
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	s = append(s, "PublicDownloadUrl: "+fmt.Sprintf("%#v", this.PublicDownloadUrl)+",\n")
	if this.Devices != nil {
		s = append(s, "Devices: "+fmt.Sprintf("%#v", this.Devices)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&k8s_manifest_params.GlobalSpecType{")
	if this.F5K8SType != nil {
		s = append(s, "F5K8SType: "+fmt.Sprintf("%#v", this.F5K8SType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_F5BareMetalK8SParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_manifest_params.GlobalSpecType_F5BareMetalK8SParams{` +
		`F5BareMetalK8SParams:` + fmt.Sprintf("%#v", this.F5BareMetalK8SParams) + `}`}, ", ")
	return s
}
func (this *DeploymentStatusType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&k8s_manifest_params.DeploymentStatusType{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "StatusOutput: "+fmt.Sprintf("%#v", this.StatusOutput)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BigIpBareMetalDeviceK8SParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BigIpBareMetalDeviceK8SParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BigIpBareMetalDeviceK8SParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NadForInternalInterface) > 0 {
		i -= len(m.NadForInternalInterface)
		copy(dAtA[i:], m.NadForInternalInterface)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NadForInternalInterface)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.NadForExternalInterface) > 0 {
		i -= len(m.NadForExternalInterface)
		copy(dAtA[i:], m.NadForExternalInterface)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NadForExternalInterface)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ExternalNetworkGateway) > 0 {
		i -= len(m.ExternalNetworkGateway)
		copy(dAtA[i:], m.ExternalNetworkGateway)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExternalNetworkGateway)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ExternalNetworkSelfip) > 0 {
		i -= len(m.ExternalNetworkSelfip)
		copy(dAtA[i:], m.ExternalNetworkSelfip)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExternalNetworkSelfip)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.InternalNetworkGateway) > 0 {
		i -= len(m.InternalNetworkGateway)
		copy(dAtA[i:], m.InternalNetworkGateway)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InternalNetworkGateway)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InternalNetworkSelfip) > 0 {
		i -= len(m.InternalNetworkSelfip)
		copy(dAtA[i:], m.InternalNetworkSelfip)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InternalNetworkSelfip)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LicenseKey) > 0 {
		i -= len(m.LicenseKey)
		copy(dAtA[i:], m.LicenseKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LicenseKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BigIpBareMetalK8SType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BigIpBareMetalK8SType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BigIpBareMetalK8SType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicDownloadUrl) > 0 {
		i -= len(m.PublicDownloadUrl)
		copy(dAtA[i:], m.PublicDownloadUrl)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PublicDownloadUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Devices) > 0 {
		for iNdEx := len(m.Devices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Devices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SshKey) > 0 {
		i -= len(m.SshKey)
		copy(dAtA[i:], m.SshKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SshKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AdminUsername) > 0 {
		i -= len(m.AdminUsername)
		copy(dAtA[i:], m.AdminUsername)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AdminUsername)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.F5K8SType != nil {
		{
			size := m.F5K8SType.Size()
			i -= size
			if _, err := m.F5K8SType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_F5BareMetalK8SParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_F5BareMetalK8SParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.F5BareMetalK8SParams != nil {
		{
			size, err := m.F5BareMetalK8SParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DeploymentStatusType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentStatusType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentStatusType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StatusOutput) > 0 {
		i -= len(m.StatusOutput)
		copy(dAtA[i:], m.StatusOutput)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.StatusOutput)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BigIpBareMetalDeviceK8SParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.LicenseKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.InternalNetworkSelfip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.InternalNetworkGateway)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ExternalNetworkSelfip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ExternalNetworkGateway)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.NadForExternalInterface)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.NadForInternalInterface)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *BigIpBareMetalK8SType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AdminUsername)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Devices) > 0 {
		for _, e := range m.Devices {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.PublicDownloadUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F5K8SType != nil {
		n += m.F5K8SType.Size()
	}
	return n
}

func (m *GlobalSpecType_F5BareMetalK8SParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F5BareMetalK8SParams != nil {
		l = m.F5BareMetalK8SParams.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DeploymentStatusType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	l = len(m.StatusOutput)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BigIpBareMetalDeviceK8SParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BigIpBareMetalDeviceK8SParams{`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`LicenseKey:` + fmt.Sprintf("%v", this.LicenseKey) + `,`,
		`InternalNetworkSelfip:` + fmt.Sprintf("%v", this.InternalNetworkSelfip) + `,`,
		`InternalNetworkGateway:` + fmt.Sprintf("%v", this.InternalNetworkGateway) + `,`,
		`ExternalNetworkSelfip:` + fmt.Sprintf("%v", this.ExternalNetworkSelfip) + `,`,
		`ExternalNetworkGateway:` + fmt.Sprintf("%v", this.ExternalNetworkGateway) + `,`,
		`NadForExternalInterface:` + fmt.Sprintf("%v", this.NadForExternalInterface) + `,`,
		`NadForInternalInterface:` + fmt.Sprintf("%v", this.NadForInternalInterface) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BigIpBareMetalK8SType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDevices := "[]*BigIpBareMetalDeviceK8SParams{"
	for _, f := range this.Devices {
		repeatedStringForDevices += strings.Replace(fmt.Sprintf("%v", f), "BigIpBareMetalDeviceK8SParams", "BigIpBareMetalDeviceK8SParams", 1) + ","
	}
	repeatedStringForDevices += "}"
	s := strings.Join([]string{`&BigIpBareMetalK8SType{`,
		`AdminUsername:` + fmt.Sprintf("%v", this.AdminUsername) + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`Devices:` + repeatedStringForDevices + `,`,
		`PublicDownloadUrl:` + fmt.Sprintf("%v", this.PublicDownloadUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`F5K8SType:` + fmt.Sprintf("%v", this.F5K8SType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_F5BareMetalK8SParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_F5BareMetalK8SParams{`,
		`F5BareMetalK8SParams:` + strings.Replace(fmt.Sprintf("%v", this.F5BareMetalK8SParams), "BigIpBareMetalK8SType", "BigIpBareMetalK8SType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeploymentStatusType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeploymentStatusType{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`StatusOutput:` + fmt.Sprintf("%v", this.StatusOutput) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BigIpBareMetalDeviceK8SParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BigIpBareMetalDeviceK8sParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BigIpBareMetalDeviceK8sParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LicenseKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LicenseKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalNetworkSelfip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalNetworkSelfip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalNetworkGateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalNetworkGateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalNetworkSelfip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalNetworkSelfip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalNetworkGateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalNetworkGateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NadForExternalInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NadForExternalInterface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NadForInternalInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NadForInternalInterface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BigIpBareMetalK8SType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BigIpBareMetalK8sType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BigIpBareMetalK8sType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Devices = append(m.Devices, &BigIpBareMetalDeviceK8SParams{})
			if err := m.Devices[len(m.Devices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicDownloadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicDownloadUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5BareMetalK8SParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BigIpBareMetalK8SType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.F5K8SType = &GlobalSpecType_F5BareMetalK8SParams{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentStatusType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentStatusType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentStatusType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DeployStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusOutput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusOutput = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
