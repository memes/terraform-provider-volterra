// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/virtual_host/public_apiep_customapi.proto

// Virtual host
//
// x-displayName: "Virtual Host"
// Virtual host is main anchor configuration for a proxy. Primary application for virtual host configuration is
// reverse proxy.  Virtual host object is used to create a Loadbalancer, virtual service Or API gateway.
// It can also be viewed as base object to define application routing.
//
// Terminology
//
// Downstream: A downstream host connects to F5XC ADC, sends requests, and receives responses.
// Upstream: An upstream host receives connections and requests from F5XC ADC and returns responses.

package virtual_host

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	app_type "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_type"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// APIEPActivityMetricType
//
// x-displayName: "API Activity Metric Type"
// Activity metric calculation type per API Endpoint
type APIEPActivityMetricType int32

const (
	// x-displayName: "Top Attacked APIEPs By Security Events Percentage Of Requests Per API Endpoint"
	// If specified, API returns top attacked APIEPs summary by sec_event percentage for given virtual host.
	// The percentage is calculated as sec_events_percentage(apiep) = #sec-events(apiep)/#requests(apiep) * 100
	ACTIVITY_METRIC_TYPE_SEC_EVENTS_PERCENTAGE APIEPActivityMetricType = 0
	// x-displayName: "Top Active APIEPs By Request Percentage"
	// If specified, API returns top active APIEPs summary by request ratio for given virtual host.
	// The percentage is calculated as request_percentage(apiep) = #requests(apiep)/#requests(all apiep) * 100
	ACTIVITY_METRIC_TYPE_REQ_PERCENTAGE APIEPActivityMetricType = 1
)

var APIEPActivityMetricType_name = map[int32]string{
	0: "ACTIVITY_METRIC_TYPE_SEC_EVENTS_PERCENTAGE",
	1: "ACTIVITY_METRIC_TYPE_REQ_PERCENTAGE",
}

var APIEPActivityMetricType_value = map[string]int32{
	"ACTIVITY_METRIC_TYPE_SEC_EVENTS_PERCENTAGE": 0,
	"ACTIVITY_METRIC_TYPE_REQ_PERCENTAGE":        1,
}

func (APIEPActivityMetricType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{0}
}

// Risk Level
//
// x-displayName: "Risk Level"
// Risk level of the vulnerability found
type VulnRiskLevel int32

const (
	// x-displayName: "Vulnerability has No Risk level"
	// Risk level is not detected (for example, when no traffic).
	RISK_LEVEL_NONE VulnRiskLevel = 0
	// x-displayName: "Vulnerability has Low Risk"
	// Vulnerability has low security risk.
	RISK_LEVEL_LOW VulnRiskLevel = 1
	// x-displayName: "Vulnerability has Medium Risk"
	// Vulnerability has medium security risk.
	RISK_LEVEL_MED VulnRiskLevel = 2
	// x-displayName: "Vulnerability has High Risk"
	// Vulnerability has high security risk.
	RISK_LEVEL_HIGH VulnRiskLevel = 3
	// x-displayName: "Vulnerability has Critical Risk"
	// Vulnerability has critical security risk.
	RISK_LEVEL_CRITICAL VulnRiskLevel = 4
)

var VulnRiskLevel_name = map[int32]string{
	0: "RISK_LEVEL_NONE",
	1: "RISK_LEVEL_LOW",
	2: "RISK_LEVEL_MED",
	3: "RISK_LEVEL_HIGH",
	4: "RISK_LEVEL_CRITICAL",
}

var VulnRiskLevel_value = map[string]int32{
	"RISK_LEVEL_NONE":     0,
	"RISK_LEVEL_LOW":      1,
	"RISK_LEVEL_MED":      2,
	"RISK_LEVEL_HIGH":     3,
	"RISK_LEVEL_CRITICAL": 4,
}

func (VulnRiskLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{1}
}

// EvidenceType
//
// x-displayName: "Evidence Type"
// Evidence Type where vulnerability found
type VulnEvidenceType int32

const (
	// x-displayName: "Vulnerability has evidence in requests"
	// Vulnerability has been identified in requests.
	EVIDENCE_TYPE_REQUESTS VulnEvidenceType = 0
	// x-displayName: "Vulnerability has evidence in sec-events"
	// Vulnerability has been identified in sec-events.
	EVIDENCE_TYPE_SEC_EVENTS VulnEvidenceType = 1
)

var VulnEvidenceType_name = map[int32]string{
	0: "EVIDENCE_TYPE_REQUESTS",
	1: "EVIDENCE_TYPE_SEC_EVENTS",
}

var VulnEvidenceType_value = map[string]int32{
	"EVIDENCE_TYPE_REQUESTS":   0,
	"EVIDENCE_TYPE_SEC_EVENTS": 1,
}

func (VulnEvidenceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{2}
}

// Context
//
// x-displayName: "Context"
// Context of where vulnerability found
type VulnContext int32

const (
	// x-displayName: "Vulnerability has API Endpoint Context"
	// Vulnerability has been identified at API Endpoint level.
	CONTEXT_API_ENDPOINT VulnContext = 0
	// x-displayName: "Vulnerability has API BasePath Context"
	// Vulnerability has been identified at API BasePath level.
	CONTEXT_API_BASEPATH VulnContext = 1
	// x-displayName: "Vulnerability has Domain Context"
	// Vulnerability has been identified at Domain level.
	CONTEXT_API_DOMAIN VulnContext = 2
)

var VulnContext_name = map[int32]string{
	0: "CONTEXT_API_ENDPOINT",
	1: "CONTEXT_API_BASEPATH",
	2: "CONTEXT_API_DOMAIN",
}

var VulnContext_value = map[string]int32{
	"CONTEXT_API_ENDPOINT": 0,
	"CONTEXT_API_BASEPATH": 1,
	"CONTEXT_API_DOMAIN":   2,
}

func (VulnContext) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{3}
}

// Status
//
// x-displayName: "Status"
// Status of vulnerability found
type VulnStatus int32

const (
	// x-displayName: "No Status"
	// Vulnerability has no status
	STATUS_NONE VulnStatus = 0
	// x-displayName: "Vulnerability has Open Status"
	// Vulnerability has no status
	STATUS_OPEN VulnStatus = 1
	// x-displayName: "Vulnerability has Resolution Confirmed Status"
	// Vulnerability has resolution confirmed status
	STATUS_RESOLUTION_CONFIRMED VulnStatus = 3
)

var VulnStatus_name = map[int32]string{
	0: "STATUS_NONE",
	1: "STATUS_OPEN",
	3: "STATUS_RESOLUTION_CONFIRMED",
}

var VulnStatus_value = map[string]int32{
	"STATUS_NONE":                 0,
	"STATUS_OPEN":                 1,
	"STATUS_RESOLUTION_CONFIRMED": 3,
}

func (VulnStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{4}
}

// Api Endpoints stats request
//
// x-displayName: "Api Endpoints Stats Request"
// Request shape for GET Api Endpoints Stats
type ApiEndpointsStatsReq struct {
	// Virtual Host Name
	//
	// x-displayName: "Virtual Host Name"
	// x-example: "blogging-app"
	// Virtual Host for current request
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// Namespace of the App type for current request
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *ApiEndpointsStatsReq) Reset()      { *m = ApiEndpointsStatsReq{} }
func (*ApiEndpointsStatsReq) ProtoMessage() {}
func (*ApiEndpointsStatsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{0}
}
func (m *ApiEndpointsStatsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiEndpointsStatsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiEndpointsStatsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiEndpointsStatsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiEndpointsStatsReq.Merge(m, src)
}
func (m *ApiEndpointsStatsReq) XXX_Size() int {
	return m.Size()
}
func (m *ApiEndpointsStatsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiEndpointsStatsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ApiEndpointsStatsReq proto.InternalMessageInfo

func (m *ApiEndpointsStatsReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApiEndpointsStatsReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// Api Endpoints stats Response
//
// x-displayName: "Api Endpoints Stats Response"
// Response shape for GET API endpoints Stats.
type ApiEndpointsStatsRsp struct {
	// number of endpoints
	//
	// x-displayName: "Total Endpoints"
	// total endpoints
	TotalEndpoints int32 `protobuf:"varint,1,opt,name=total_endpoints,json=totalEndpoints,proto3" json:"total_endpoints,omitempty"`
	// number of discovered endpoints
	//
	// x-displayName: "Discovered"
	// number of endpoints that categorized as discover
	Discovered int32 `protobuf:"varint,2,opt,name=discovered,proto3" json:"discovered,omitempty"`
	// number of inventory endpoints
	//
	// x-displayName: "Inventory"
	// number of endpoints that categorized as inventory
	Inventory int32 `protobuf:"varint,3,opt,name=inventory,proto3" json:"inventory,omitempty"`
	// number of shadow endpoints
	//
	// x-displayName: "Shadow"
	// number of endpoints that categorized as shadow
	Shadow int32 `protobuf:"varint,4,opt,name=shadow,proto3" json:"shadow,omitempty"`
	// number of pii endpoints
	//
	// x-displayName: "PII Detected"
	//number of endpoints that detected with pii
	PiiDetected int32 `protobuf:"varint,5,opt,name=pii_detected,json=piiDetected,proto3" json:"pii_detected,omitempty"`
}

func (m *ApiEndpointsStatsRsp) Reset()      { *m = ApiEndpointsStatsRsp{} }
func (*ApiEndpointsStatsRsp) ProtoMessage() {}
func (*ApiEndpointsStatsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{1}
}
func (m *ApiEndpointsStatsRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiEndpointsStatsRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiEndpointsStatsRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiEndpointsStatsRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiEndpointsStatsRsp.Merge(m, src)
}
func (m *ApiEndpointsStatsRsp) XXX_Size() int {
	return m.Size()
}
func (m *ApiEndpointsStatsRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiEndpointsStatsRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ApiEndpointsStatsRsp proto.InternalMessageInfo

func (m *ApiEndpointsStatsRsp) GetTotalEndpoints() int32 {
	if m != nil {
		return m.TotalEndpoints
	}
	return 0
}

func (m *ApiEndpointsStatsRsp) GetDiscovered() int32 {
	if m != nil {
		return m.Discovered
	}
	return 0
}

func (m *ApiEndpointsStatsRsp) GetInventory() int32 {
	if m != nil {
		return m.Inventory
	}
	return 0
}

func (m *ApiEndpointsStatsRsp) GetShadow() int32 {
	if m != nil {
		return m.Shadow
	}
	return 0
}

func (m *ApiEndpointsStatsRsp) GetPiiDetected() int32 {
	if m != nil {
		return m.PiiDetected
	}
	return 0
}

// API endpoints GET request Per Virtual Host
//
// x-displayName: "API Endpoints Request per Virtual Host"
// Request shape for GET API endpoints API
type APIEndpointsReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "blogging-app"
	// Namespace of the virtual host for current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Virtual Host Name
	//
	// x-displayName: "Virtual Host Name"
	// x-example: "blogging-app-vhost"
	// Virtual Host name for current request
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Api Endpoint Info Request
	//
	// x-displayName: "Api Endpoint Info Request"
	// List of additional things that needs to be sent as part of the request
	ApiEndpointInfoRequest []app_type.ApiEndpointInfoRequest `protobuf:"varint,3,rep,packed,name=api_endpoint_info_request,json=apiEndpointInfoRequest,proto3,enum=ves.io.schema.app_type.ApiEndpointInfoRequest" json:"api_endpoint_info_request,omitempty"`
	// List of Domain
	//
	// x-displayName: "List of Domain"
	// x-example: "www.example.com"
	// List of domains that needs to be sent as part of the request
	// Optional filter by domains. If absent, all domains are considered.
	Domains []string `protobuf:"bytes,4,rep,name=domains,proto3" json:"domains,omitempty"`
	// start time
	//
	// x-displayName: "Start Time"
	// x-example: "2019-09-23T12:30:11.733Z"
	// format: unix_timestamp|rfc 3339
	// Filters the APIEPs with access time >= start_time. Considered only to calculate activity metrics, based on #sec-events and #requests.
	// Optional: If not specified, then the start_time will be evaluated to end_time-2h
	//           If end_time is not specified, then the start_time will be evaluated to <current time>-10m
	StartTime string `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// end time
	//
	// x-displayName: "End Time"
	// x-example: "2019-09-24T12:30:11.733Z"
	// format: unix_timestamp|rfc 3339
	// Filters the APIEPs with access time < end_time. Considered only to calculate activity metrics, based on #sec-events and #requests.
	// Optional: If not specified, then the end_time will be evaluated to start_time+2h
	//           If start_time is not specified, then the end_time will be evaluated to <current time>
	EndTime string `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// APIEP Category
	//
	// x-displayName: "APIEP Category"
	// x-example: "DISCOVERED"
	// Category of api endpoints. Can be DISCOVERED, INVENTORY or SHADOW API.
	// Optional filter by api_category. If absent, endpoints of all categories are considered.
	ApiepCategory []app_type.APIEPCategory `protobuf:"varint,7,rep,packed,name=apiep_category,json=apiepCategory,proto3,enum=ves.io.schema.app_type.APIEPCategory" json:"apiep_category,omitempty"`
}

func (m *APIEndpointsReq) Reset()      { *m = APIEndpointsReq{} }
func (*APIEndpointsReq) ProtoMessage() {}
func (*APIEndpointsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{2}
}
func (m *APIEndpointsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIEndpointsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIEndpointsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIEndpointsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIEndpointsReq.Merge(m, src)
}
func (m *APIEndpointsReq) XXX_Size() int {
	return m.Size()
}
func (m *APIEndpointsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_APIEndpointsReq.DiscardUnknown(m)
}

var xxx_messageInfo_APIEndpointsReq proto.InternalMessageInfo

func (m *APIEndpointsReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *APIEndpointsReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *APIEndpointsReq) GetApiEndpointInfoRequest() []app_type.ApiEndpointInfoRequest {
	if m != nil {
		return m.ApiEndpointInfoRequest
	}
	return nil
}

func (m *APIEndpointsReq) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *APIEndpointsReq) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *APIEndpointsReq) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *APIEndpointsReq) GetApiepCategory() []app_type.APIEPCategory {
	if m != nil {
		return m.ApiepCategory
	}
	return nil
}

// Swagger spec request
//
// x-displayName: "Swagger spec Request"
// Request shape for GET Swagger Spec API
type SwaggerSpecReq struct {
	// Virtual Host Name
	//
	// x-displayName: "Virtual Host Name"
	// x-example: "blogging-app"
	// Virtual Host for current request
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// Namespace of the App type for current request
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// List of Domain
	//
	// x-displayName: "List of Domain"
	// x-example: "www.example.com"
	// List of domains that needs to be sent as part of the request
	// Optional filter by domains. If absent, all domains are considered.
	Domains []string `protobuf:"bytes,3,rep,name=domains,proto3" json:"domains,omitempty"`
}

func (m *SwaggerSpecReq) Reset()      { *m = SwaggerSpecReq{} }
func (*SwaggerSpecReq) ProtoMessage() {}
func (*SwaggerSpecReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{3}
}
func (m *SwaggerSpecReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwaggerSpecReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwaggerSpecReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwaggerSpecReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwaggerSpecReq.Merge(m, src)
}
func (m *SwaggerSpecReq) XXX_Size() int {
	return m.Size()
}
func (m *SwaggerSpecReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SwaggerSpecReq.DiscardUnknown(m)
}

var xxx_messageInfo_SwaggerSpecReq proto.InternalMessageInfo

func (m *SwaggerSpecReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SwaggerSpecReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SwaggerSpecReq) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

// Swagger Spec Response
//
// x-displayName: "Swagger Spec Response"
// Json encoded swagger spec for the given vhost.
type SwaggerSpecRsp struct {
	// Swagger Spec
	//
	// x-displayName: "Swagger Spec"
	// x-example: "{\"info\": {\"description\": \"\",\"title\": \"\",\"version\": \"\"},\"paths\": {\"\/api\/Addresss\": {\"post\": {\"consumes\": [\"application\/json\"],\"description\": \"Swagger auto-generated from learnt schema\",\"parameters\": [{\"description\": \"\",\"in\": \"query\",\"name\": \"test1\",\"type\": \"string\"},{\"description\": \"\",\"in\": \"query\",\"items\": {\"description\": \"Integer\",\"pattern\": \"-?\\\\d+\",\"type\": \"string\"},\"name\": \"test\",\"type\": \"array\"},{\"description\": \"\",\"in\": \"body\",\"name\": \"body\",\"schema\": {\"example\": [\"{\\\"country\\\": \\\"dummy\\\", \\\"fullName\\\": \\\"dummy\\\", \\\"mobileNum\\\": 1234567890, \\\"zipCode\\\": \\\"121\\\", \\\"streetAddress\\\": \\\"dummy\\\", \\\"city\\\": \\\"dummy\\\", \\\"state\\\": \\\"dummy\\\", \\\"test\\\": \\\"Hello, \\\\u4e16\\\\u754c\\\", \\\"abc\\\": \\\"def\\\"}\"],\"properties\": {\"abc\": {\"description\": \"Word\",\"pattern\": \"[a-z0-9-]+\",\"type\": \"string\"},\"city\": {\"description\": \"Word\",\"pattern\": \"[a-z0-9-]+\",\"type\": \"string\"},\"country\": {\"description\": \"Word\",\"pattern\": \"[a-z0-9-]+\",\"type\": \"string\"},\"fullName\": {\"description\": \"Word\",\"pattern\": \"[a-z0-9-]+\",\"type\": \"string\"},\"mobileNum\": {\"type\": \"integer\"},\"state\": {\"description\": \"Word\",\"pattern\": \"[a-z0-9-]+\",\"type\": \"string\"},\"streetAddress\": {\"description\": \"Word\",\"pattern\": \"[a-z0-9-]+\",\"type\": \"string\"},\"test\": {\"type\": \"string\"},\"zipCode\": {\"description\": \"Integer\",\"pattern\": \"-?\\\\d+\",\"type\": \"string\"}},\"required\": [\"fullName\",\"mobileNum\",\"city\",\"test\",\"zipCode\",\"state\",\"streetAddress\",\"country\",\"abc\"],\"type\": \"object\"}}],\"responses\": {\"200\": {\"description\": \"\"}}}},\"\/api\/Cards\": {\"post\": {\"consumes\": [\"application\/json\"],\"description\": \"Swagger auto-generated from learnt schema\",\"parameters\": [{\"description\": \"\",\"in\": \"body\",\"name\": \"body\",\"schema\": {\"example\": [\"{\\\"fullName\\\": \\\"dummy\\\", \\\"cardNum\\\": 0, \\\"expMonth\\\": \\\"0\\\", \\\"expYear\\\": \\\"0\\\"}\"],\"properties\": {\"cardNum\": {\"type\": \"integer\"},\"expMonth\": {\"description\": \"Integer\",\"pattern\": \"-?\\\\d+\",\"type\": \"string\"},\"expYear\": {\"description\": \"Integer\",\"pattern\": \"-?\\\\d+\",\"type\": \"string\"},\"fullName\": {\"description\": \"Word\",\"pattern\": \"[a-z0-9-]+\",\"type\": \"string\"}},\"required\": [\"expMonth\",\"expYear\",\"fullName\",\"cardNum\"],\"type\": \"object\"}}],\"responses\": {\"200\": {\"description\": \"\"}}}},\"\/rest\/basket\/6\/checkout\": {\"post\": {\"consumes\": [\"application\/json\"],\"description\": \"Swagger auto-generated from learnt schema\",\"parameters\": [{\"description\": \"\",\"in\": \"body\",\"name\": \"body\",\"schema\": {\"example\": [\"{\\\"couponData\\\": \\\"MTIzNDU2Nzg5MC0xNTg3MzM3MjAwMDAw\\\", \\\"orderDetails\\\": {\\\"paymentId\\\": \\\"9792\\\", \\\"addressId\\\": \\\"21189\\\", \\\"deliveryMethodId\\\": \\\"1\\\"}}\",\"{\\\"couponData\\\": \\\"MTIzNDU2Nzg5MC0xNTg3MzM3MjAwMDAw\\\", \\\"orderDetails\\\": {\\\"paymentId\\\": \\\"9814\\\", \\\"addressId\\\": \\\"21409\\\", \\\"deliveryMethodId\\\": \\\"1\\\"}}\",\"{\\\"couponData\\\": \\\"MTIzNDU2Nzg5MC0xNTg3MzM3MjAwMDAw\\\", \\\"orderDetails\\\": {\\\"paymentId\\\": \\\"9822\\\", \\\"addressId\\\": \\\"21489\\\", \\\"deliveryMethodId\\\": \\\"1\\\"}}\",\"{\\\"couponData\\\": \\\"MTIzNDU2Nzg5MC0xNTg3MzM3MjAwMDAw\\\", \\\"orderDetails\\\": {\\\"paymentId\\\": \\\"9793\\\", \\\"addressId\\\": \\\"21199\\\", \\\"deliveryMethodId\\\": \\\"1\\\"}}\",\"{\\\"couponData\\\": \\\"MTIzNDU2Nzg5MC0xNTg3MzM3MjAwMDAw\\\", \\\"orderDetails\\\": {\\\"paymentId\\\": \\\"9817\\\", \\\"addressId\\\": \\\"21439\\\", \\\"deliveryMethodId\\\": \\\"1\\\"}}\"],\"properties\": {\"couponData\": {\"type\": \"string\"},\"orderDetails\": {\"properties\": {\"addressId\": {\"description\": \"Integer\",\"pattern\": \"-?\\\\d+\",\"type\": \"string\"},\"deliveryMethodId\": {\"description\": \"Integer\",\"pattern\": \"-?\\\\d+\",\"type\": \"string\"},\"paymentId\": {\"description\": \"Integer\",\"pattern\": \"-?\\\\d+\",\"type\": \"string\"}},\"required\": [\"addressId\",\"paymentId\",\"deliveryMethodId\"],\"type\": \"object\"}},\"required\": [\"orderDetails\",\"couponData\"],\"type\": \"object\"}}],\"responses\": {\"200\": {\"description\": \"\"}}}},\"\/rest\/products\/1\/reviews\": {\"put\": {\"consumes\": [\"application\/json\"],\"description\": \"Swagger auto-generated from learnt schema\",\"parameters\": [],\"responses\": {\"200\": {\"description\": \"\"}}}},\"\/rest\/user\/login\": {\"post\": {\"consumes\": [\"application\/json\"],\"description\": \"Swagger auto-generated from learnt schema\",\"parameters\": [{\"description\": \"\",\"in\": \"body\",\"name\": \"body\",\"schema\": {\"example\": [\"{\\\"email\\\":\\\"dummy0@dummy.com\\\",\\\"password\\\":\\\"redacted\\\",\\\"test\\\":\\\"Hello, \u4E16\u754C\\\"}\",\"{\\\"email\\\":\\\"dummy1@dummy.com\\\",\\\"password\\\":\\\"redacted\\\",\\\"test\\\":\\\"Hello, \u4E16\u754C\\\"}\",\"{\\\"email\\\":\\\"dummy2@dummy.com\\\",\\\"password\\\":\\\"redacted\\\",\\\"test\\\":\\\"Hello, \u4E16\u754C\\\"}\",\"{\\\"email\\\":\\\"dummy3@dummy.com\\\",\\\"password\\\":\\\"redacted\\\",\\\"test\\\":\\\"Hello, \u4E16\u754C\\\"}\"],\"properties\": {\"email\": {\"description\": \"Email\",\"pattern\": \".+@.+\",\"type\": \"string\",\"x-pii\": {\"examples\": [\"dummy0@dummy.com\",\"dummy1@dummy.com\",\"dummy2@dummy.com\",\"dummy3@dummy.com\"]}},\"password\": {\"description\": \"Word\",\"pattern\": \"[a-z0-9-]+\",\"type\": \"string\"},\"test\": {\"type\": \"string\"}},\"required\": [\"email\",\"test\",\"password\"],\"type\": \"object\"}}],\"responses\": {\"200\": {\"description\": \"\"}}}}},\"schemes\": [\"https\",\"http\"],\"swagger\": \"2.0\"}"
	// Swagger spec json encoded string for current request
	SwaggerSpec string `protobuf:"bytes,1,opt,name=swagger_spec,json=swaggerSpec,proto3" json:"swagger_spec,omitempty"`
}

func (m *SwaggerSpecRsp) Reset()      { *m = SwaggerSpecRsp{} }
func (*SwaggerSpecRsp) ProtoMessage() {}
func (*SwaggerSpecRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{4}
}
func (m *SwaggerSpecRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwaggerSpecRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwaggerSpecRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwaggerSpecRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwaggerSpecRsp.Merge(m, src)
}
func (m *SwaggerSpecRsp) XXX_Size() int {
	return m.Size()
}
func (m *SwaggerSpecRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SwaggerSpecRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SwaggerSpecRsp proto.InternalMessageInfo

func (m *SwaggerSpecRsp) GetSwaggerSpec() string {
	if m != nil {
		return m.SwaggerSpec
	}
	return ""
}

// API endpoint PDF request Per Virtual Host
//
// x-displayName: "PDF Request per Virtual Host"
// shape of request to get PDF for a given API endpoint Per Virtual Host
type APIEndpointPDFReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "blogging-app"
	// Namespace of the App type for current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Virtual Host
	//
	// x-displayName: "Virtual Host Name"
	// x-example: "blogging-app-vhost"
	// Virtual Host Name for current request
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Discovered API URL
	//
	// x-displayName: "API URL"
	// x-example: "api/v1/user_id/DYN/vehicle_id/DYN"
	// API endpoint for which PDFs are requested.
	CollapsedUrl string `protobuf:"bytes,3,opt,name=collapsed_url,json=collapsedUrl,proto3" json:"collapsed_url,omitempty"`
	// Method of current API URL
	//
	// x-displayName: "Method"
	// x-example: "GET"
	// method of API endpoint for which PDFs are requested.
	Method string `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
}

func (m *APIEndpointPDFReq) Reset()      { *m = APIEndpointPDFReq{} }
func (*APIEndpointPDFReq) ProtoMessage() {}
func (*APIEndpointPDFReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{5}
}
func (m *APIEndpointPDFReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIEndpointPDFReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIEndpointPDFReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIEndpointPDFReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIEndpointPDFReq.Merge(m, src)
}
func (m *APIEndpointPDFReq) XXX_Size() int {
	return m.Size()
}
func (m *APIEndpointPDFReq) XXX_DiscardUnknown() {
	xxx_messageInfo_APIEndpointPDFReq.DiscardUnknown(m)
}

var xxx_messageInfo_APIEndpointPDFReq proto.InternalMessageInfo

func (m *APIEndpointPDFReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *APIEndpointPDFReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *APIEndpointPDFReq) GetCollapsedUrl() string {
	if m != nil {
		return m.CollapsedUrl
	}
	return ""
}

func (m *APIEndpointPDFReq) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

// API endpoint Learnt Schema request Per Virtual Host
//
// x-displayName: "API endpoint Learnt Schema request per Virtual Host"
// shape of request to get API endpoint Learnt Schema request for a given API endpoint Per Virtual Host
type APIEndpointLearntSchemaReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "blogging-app"
	// Namespace of the App type for current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Virtual Host
	//
	// x-displayName: "Virtual Host Name"
	// x-example: "blogging-app-vhost"
	// Virtual Host Name for current request
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Discovered API URL
	//
	// x-displayName: "API URL"
	// x-example: "api/v1/user_id/DYN/vehicle_id/DYN"
	// API endpoint for which PDFs are requested.
	CollapsedUrl string `protobuf:"bytes,3,opt,name=collapsed_url,json=collapsedUrl,proto3" json:"collapsed_url,omitempty"`
	// Method of current API URL
	//
	// x-displayName: "Method"
	// x-example: "GET"
	// method of API endpoint for which PDFs are requested.
	Method string `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	// List of Domain
	//
	// x-displayName: "List of Domain"
	// x-example: "www.example.com"
	// List of domains that needs to be sent as part of the request
	// Optional filter by domains. If absent, all domains are considered.
	Domains []string `protobuf:"bytes,5,rep,name=domains,proto3" json:"domains,omitempty"`
	// Api Endpoint Info Request
	//
	// x-displayName: "Api Endpoint Info Request"
	// List of additional things that needs to be sent as part of the request
	ApiEndpointInfoRequest []app_type.ApiEndpointInfoRequest `protobuf:"varint,6,rep,packed,name=api_endpoint_info_request,json=apiEndpointInfoRequest,proto3,enum=ves.io.schema.app_type.ApiEndpointInfoRequest" json:"api_endpoint_info_request,omitempty"`
}

func (m *APIEndpointLearntSchemaReq) Reset()      { *m = APIEndpointLearntSchemaReq{} }
func (*APIEndpointLearntSchemaReq) ProtoMessage() {}
func (*APIEndpointLearntSchemaReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{6}
}
func (m *APIEndpointLearntSchemaReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIEndpointLearntSchemaReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIEndpointLearntSchemaReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIEndpointLearntSchemaReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIEndpointLearntSchemaReq.Merge(m, src)
}
func (m *APIEndpointLearntSchemaReq) XXX_Size() int {
	return m.Size()
}
func (m *APIEndpointLearntSchemaReq) XXX_DiscardUnknown() {
	xxx_messageInfo_APIEndpointLearntSchemaReq.DiscardUnknown(m)
}

var xxx_messageInfo_APIEndpointLearntSchemaReq proto.InternalMessageInfo

func (m *APIEndpointLearntSchemaReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *APIEndpointLearntSchemaReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *APIEndpointLearntSchemaReq) GetCollapsedUrl() string {
	if m != nil {
		return m.CollapsedUrl
	}
	return ""
}

func (m *APIEndpointLearntSchemaReq) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *APIEndpointLearntSchemaReq) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *APIEndpointLearntSchemaReq) GetApiEndpointInfoRequest() []app_type.ApiEndpointInfoRequest {
	if m != nil {
		return m.ApiEndpointInfoRequest
	}
	return nil
}

// API endpoints GET response
//
// x-displayName: "API Endpoints Response"
// Response shape for GET API endpoints API. It is list of API endpoints discovered
type APIEndpointsRsp struct {
	// API endpoints list
	//
	// x-displayName: "API Endpoints"
	// list of API endpoints discovered
	ApiepList []*app_type.APIEPInfo `protobuf:"bytes,1,rep,name=apiep_list,json=apiepList,proto3" json:"apiep_list,omitempty"`
}

func (m *APIEndpointsRsp) Reset()      { *m = APIEndpointsRsp{} }
func (*APIEndpointsRsp) ProtoMessage() {}
func (*APIEndpointsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{7}
}
func (m *APIEndpointsRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIEndpointsRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIEndpointsRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIEndpointsRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIEndpointsRsp.Merge(m, src)
}
func (m *APIEndpointsRsp) XXX_Size() int {
	return m.Size()
}
func (m *APIEndpointsRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_APIEndpointsRsp.DiscardUnknown(m)
}

var xxx_messageInfo_APIEndpointsRsp proto.InternalMessageInfo

func (m *APIEndpointsRsp) GetApiepList() []*app_type.APIEPInfo {
	if m != nil {
		return m.ApiepList
	}
	return nil
}

// API endpoint PDF response
//
// x-displayName: "PDF Response"
// shape of response to get PDF for a given API endpoint.
type APIEndpointPDFRsp struct {
	// PDF data
	//
	// x-displayName: "PDF Data"
	// PDF data for request API endpoint.
	PdfInfo *app_type.APIEPPDFInfo `protobuf:"bytes,1,opt,name=pdf_info,json=pdfInfo,proto3" json:"pdf_info,omitempty"`
}

func (m *APIEndpointPDFRsp) Reset()      { *m = APIEndpointPDFRsp{} }
func (*APIEndpointPDFRsp) ProtoMessage() {}
func (*APIEndpointPDFRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{8}
}
func (m *APIEndpointPDFRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIEndpointPDFRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIEndpointPDFRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIEndpointPDFRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIEndpointPDFRsp.Merge(m, src)
}
func (m *APIEndpointPDFRsp) XXX_Size() int {
	return m.Size()
}
func (m *APIEndpointPDFRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_APIEndpointPDFRsp.DiscardUnknown(m)
}

var xxx_messageInfo_APIEndpointPDFRsp proto.InternalMessageInfo

func (m *APIEndpointPDFRsp) GetPdfInfo() *app_type.APIEPPDFInfo {
	if m != nil {
		return m.PdfInfo
	}
	return nil
}

// API endpoint Req Body Schema response
//
// x-displayName: "Req Body Schema Response"
// shape of response to get req body schema for a given API endpoint.
type APIEndpointLearntSchemaRsp struct {
	// Discovered Schema
	//
	// x-displayName: "Discovered Schema"
	// Discovered Schema for request API endpoint.
	DiscoveredSchema *app_type.DiscoveredSchema `protobuf:"bytes,6,opt,name=discovered_schema,json=discoveredSchema,proto3" json:"discovered_schema,omitempty"`
	// Discovered OpenAPI Spec
	//
	// x-displayName: "Discovered OpenAPI Spec"
	// x-example: "{\"info\":{\"description\":\"\",\"title\":\"\",\"version\":\"\"},\"paths\":{\"\/api\/Addresss\":{\"get\":{\"consumes\":[\"application\/json\"],\"description\":\"Swagger auto-generated from learnt schema\",\"parameters\":[{\"description\":\"\",\"in\":\"query\",\"name\":\"test\",\"type\":\"string\"},{\"description\":\"\",\"in\":\"query\",\"name\":\"test1\",\"type\":\"string\"}],\"responses\":{\"200\":{\"description\":\"\"}}}}},\"schemes\":[\"https\",\"http\"],\"swagger\":\"2.0\"}"
	// Discovered OpenAPI spec for request API endpoint.
	DiscoveredOpenapiSpec string `protobuf:"bytes,2,opt,name=discovered_openapi_spec,json=discoveredOpenapiSpec,proto3" json:"discovered_openapi_spec,omitempty"`
	// List of sensitive data
	//
	// x-displayName: "List of Sensitive Data"
	// List of sensitive data for request API endpoint.
	SensitiveData []*app_type.SensitiveData `protobuf:"bytes,7,rep,name=sensitive_data,json=sensitiveData,proto3" json:"sensitive_data,omitempty"`
	// Inventory OpenAPI Spec
	//
	// x-displayName: "Inventory OpenAPI Spec"
	// x-example: "{\"info\":{\"description\":\"\",\"title\":\"\",\"version\":\"\"},\"paths\":{\"\/api\/Addresss\":{\"get\":{\"consumes\":[\"application\/json\"],\"description\":\"Swagger auto-generated from learnt schema\",\"parameters\":[{\"description\":\"\",\"in\":\"query\",\"name\":\"test\",\"type\":\"string\"},{\"description\":\"\",\"in\":\"query\",\"name\":\"test1\",\"type\":\"string\"}],\"responses\":{\"200\":{\"description\":\"\"}}}}},\"schemes\":[\"https\",\"http\"],\"swagger\":\"2.0\"}"
	// Inventory OpenAPI spec for request API endpoint.
	InventoryOpenapiSpec string `protobuf:"bytes,5,opt,name=inventory_openapi_spec,json=inventoryOpenapiSpec,proto3" json:"inventory_openapi_spec,omitempty"`
	// Probability Density Function
	//
	// x-displayName: "PDF(Value)"
	// Metrics supported currently are request_size response_size latency_with_data, latency_no_data, request_rate, error_rate, response_throughput.
	// PDF is calculated for each combination of (Tenant, App type, API endpoint).
	// API endpoint is determined from automatically identified API (collapsed_url) and method.
	PdfInfo *app_type.APIEPPDFInfo `protobuf:"bytes,8,opt,name=pdf_info,json=pdfInfo,proto3" json:"pdf_info,omitempty"`
	// Authentication
	//
	// x-displayName: "Authentication"
	// Authentication data for request API endpoint.
	Authentication *app_type.Authentication `protobuf:"bytes,9,opt,name=authentication,proto3" json:"authentication,omitempty"`
}

func (m *APIEndpointLearntSchemaRsp) Reset()      { *m = APIEndpointLearntSchemaRsp{} }
func (*APIEndpointLearntSchemaRsp) ProtoMessage() {}
func (*APIEndpointLearntSchemaRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{9}
}
func (m *APIEndpointLearntSchemaRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIEndpointLearntSchemaRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIEndpointLearntSchemaRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIEndpointLearntSchemaRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIEndpointLearntSchemaRsp.Merge(m, src)
}
func (m *APIEndpointLearntSchemaRsp) XXX_Size() int {
	return m.Size()
}
func (m *APIEndpointLearntSchemaRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_APIEndpointLearntSchemaRsp.DiscardUnknown(m)
}

var xxx_messageInfo_APIEndpointLearntSchemaRsp proto.InternalMessageInfo

func (m *APIEndpointLearntSchemaRsp) GetDiscoveredSchema() *app_type.DiscoveredSchema {
	if m != nil {
		return m.DiscoveredSchema
	}
	return nil
}

func (m *APIEndpointLearntSchemaRsp) GetDiscoveredOpenapiSpec() string {
	if m != nil {
		return m.DiscoveredOpenapiSpec
	}
	return ""
}

func (m *APIEndpointLearntSchemaRsp) GetSensitiveData() []*app_type.SensitiveData {
	if m != nil {
		return m.SensitiveData
	}
	return nil
}

func (m *APIEndpointLearntSchemaRsp) GetInventoryOpenapiSpec() string {
	if m != nil {
		return m.InventoryOpenapiSpec
	}
	return ""
}

func (m *APIEndpointLearntSchemaRsp) GetPdfInfo() *app_type.APIEPPDFInfo {
	if m != nil {
		return m.PdfInfo
	}
	return nil
}

func (m *APIEndpointLearntSchemaRsp) GetAuthentication() *app_type.Authentication {
	if m != nil {
		return m.Authentication
	}
	return nil
}

// API endpoint GET request Per Virtual Host
//
// x-displayName: "API Endpoint Request per Virtual Host"
// Request shape for GET API endpoint API
type APIEndpointReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "blogging-app"
	// Namespace of the virtual host for current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Virtual Host Name
	//
	// x-displayName: "Virtual Host Name"
	// x-example: "blogging-app-vhost"
	// Virtual Host name for current request
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Api Endpoint Info Request
	//
	// x-displayName: "Api Endpoint Info Request"
	// List of additional things that needs to be sent as part of the request
	ApiEndpointInfoRequest []app_type.ApiEndpointInfoRequest `protobuf:"varint,3,rep,packed,name=api_endpoint_info_request,json=apiEndpointInfoRequest,proto3,enum=ves.io.schema.app_type.ApiEndpointInfoRequest" json:"api_endpoint_info_request,omitempty"`
	// API URL
	//
	// x-displayName: "API URL"
	// x-required
	// x-example: "api/v1/user_id/DYN/vehicle_id/DYN"
	// Requested API endPoint for api url.
	CollapsedUrl string `protobuf:"bytes,4,opt,name=collapsed_url,json=collapsedUrl,proto3" json:"collapsed_url,omitempty"`
	// Method of current API URL
	//
	// x-displayName: "Method"
	// x-required
	// x-example: "GET"
	// Requested API endPoint for method.
	Method string `protobuf:"bytes,5,opt,name=method,proto3" json:"method,omitempty"`
	// List of Domain
	//
	// x-displayName: "List of Domain"
	// x-example: "www.example.com"
	// List of domains that needs to be sent as part of the request
	// Optional filter by domains. If absent, all domains are considered.
	Domains []string `protobuf:"bytes,6,rep,name=domains,proto3" json:"domains,omitempty"`
}

func (m *APIEndpointReq) Reset()      { *m = APIEndpointReq{} }
func (*APIEndpointReq) ProtoMessage() {}
func (*APIEndpointReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{10}
}
func (m *APIEndpointReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIEndpointReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIEndpointReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIEndpointReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIEndpointReq.Merge(m, src)
}
func (m *APIEndpointReq) XXX_Size() int {
	return m.Size()
}
func (m *APIEndpointReq) XXX_DiscardUnknown() {
	xxx_messageInfo_APIEndpointReq.DiscardUnknown(m)
}

var xxx_messageInfo_APIEndpointReq proto.InternalMessageInfo

func (m *APIEndpointReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *APIEndpointReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *APIEndpointReq) GetApiEndpointInfoRequest() []app_type.ApiEndpointInfoRequest {
	if m != nil {
		return m.ApiEndpointInfoRequest
	}
	return nil
}

func (m *APIEndpointReq) GetCollapsedUrl() string {
	if m != nil {
		return m.CollapsedUrl
	}
	return ""
}

func (m *APIEndpointReq) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *APIEndpointReq) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

// API endpoint GET response
//
// x-displayName: "API Endpoint Response"
// Response shape for GET API endpoint API.
type APIEndpointRsp struct {
	// API endpoint
	//
	// x-displayName: "API Endpoint"
	// API endpoint
	Apiep *app_type.APIEPInfo `protobuf:"bytes,1,opt,name=apiep,proto3" json:"apiep,omitempty"`
}

func (m *APIEndpointRsp) Reset()      { *m = APIEndpointRsp{} }
func (*APIEndpointRsp) ProtoMessage() {}
func (*APIEndpointRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{11}
}
func (m *APIEndpointRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIEndpointRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIEndpointRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIEndpointRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIEndpointRsp.Merge(m, src)
}
func (m *APIEndpointRsp) XXX_Size() int {
	return m.Size()
}
func (m *APIEndpointRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_APIEndpointRsp.DiscardUnknown(m)
}

var xxx_messageInfo_APIEndpointRsp proto.InternalMessageInfo

func (m *APIEndpointRsp) GetApiep() *app_type.APIEPInfo {
	if m != nil {
		return m.Apiep
	}
	return nil
}

// Top attacked/active API endpoints request per virtual host
//
// x-displayName: "Top Attacked/Active API Endpoints per Virtual Host"
// Request model for GetTopAPIEndpointsReq API
type GetTopAPIEndpointsReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "blogging-app"
	// Namespace of the virtual host for current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Virtual Host Name
	//
	// x-displayName: "Virtual Host Name"
	// x-example: "blogging-app-vhost"
	// Virtual Host name for current request
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// apiep_summary_filter
	//
	// x-displayName: "Summary Block Filter"
	// Filter object for summary block.
	ApiepSummaryFilter *APIEPSummaryFilter `protobuf:"bytes,3,opt,name=apiep_summary_filter,json=apiepSummaryFilter,proto3" json:"apiep_summary_filter,omitempty"`
	// top_by_metric
	//
	// x-displayName: "Top API endpoints by"
	// x-example: "TOP_APIEPS_BY_SEC_EVENTS, TOP_APIEPS_BY_REQ_COUNT"
	// x-required
	// returns top api endpoints by security_events or requests metrics.
	TopByMetric APIEPActivityMetricType `protobuf:"varint,4,opt,name=top_by_metric,json=topByMetric,proto3,enum=ves.io.schema.virtual_host.APIEPActivityMetricType" json:"top_by_metric,omitempty"`
	// topk
	//
	// x-displayName: "Number of Top API Endpoints"
	// x-example: "5"
	// Number of top API endpoints to return in the response.
	Topk uint32 `protobuf:"varint,5,opt,name=topk,proto3" json:"topk,omitempty"`
}

func (m *GetTopAPIEndpointsReq) Reset()      { *m = GetTopAPIEndpointsReq{} }
func (*GetTopAPIEndpointsReq) ProtoMessage() {}
func (*GetTopAPIEndpointsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{12}
}
func (m *GetTopAPIEndpointsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopAPIEndpointsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopAPIEndpointsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTopAPIEndpointsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopAPIEndpointsReq.Merge(m, src)
}
func (m *GetTopAPIEndpointsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetTopAPIEndpointsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopAPIEndpointsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopAPIEndpointsReq proto.InternalMessageInfo

func (m *GetTopAPIEndpointsReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetTopAPIEndpointsReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetTopAPIEndpointsReq) GetApiepSummaryFilter() *APIEPSummaryFilter {
	if m != nil {
		return m.ApiepSummaryFilter
	}
	return nil
}

func (m *GetTopAPIEndpointsReq) GetTopByMetric() APIEPActivityMetricType {
	if m != nil {
		return m.TopByMetric
	}
	return ACTIVITY_METRIC_TYPE_SEC_EVENTS_PERCENTAGE
}

func (m *GetTopAPIEndpointsReq) GetTopk() uint32 {
	if m != nil {
		return m.Topk
	}
	return 0
}

// API endpoint GET response
//
// x-displayName: "API Endpoint Response"
// Response model for GetTopAttackedAPIEndpoints API.
type GetTopAPIEndpointsRsp struct {
	// top_apieps
	//
	// x-displayName: "Top Attacked Endpoints"
	// Top Attacked API endpoints
	TopApieps []*APIEPActivityMetrics `protobuf:"bytes,1,rep,name=top_apieps,json=topApieps,proto3" json:"top_apieps,omitempty"`
}

func (m *GetTopAPIEndpointsRsp) Reset()      { *m = GetTopAPIEndpointsRsp{} }
func (*GetTopAPIEndpointsRsp) ProtoMessage() {}
func (*GetTopAPIEndpointsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{13}
}
func (m *GetTopAPIEndpointsRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopAPIEndpointsRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopAPIEndpointsRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTopAPIEndpointsRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopAPIEndpointsRsp.Merge(m, src)
}
func (m *GetTopAPIEndpointsRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetTopAPIEndpointsRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopAPIEndpointsRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopAPIEndpointsRsp proto.InternalMessageInfo

func (m *GetTopAPIEndpointsRsp) GetTopApieps() []*APIEPActivityMetrics {
	if m != nil {
		return m.TopApieps
	}
	return nil
}

// APIEPActivityMetrics
//
// x-displayName: "API Endpoint Activity Metrics"
// This represents the API endpoint's activity metrics.
type APIEPActivityMetrics struct {
	// apiep_url
	//
	// x-displayName: "API endpoint URL"
	// x-example: "/api/v1/user/{user_id}/vehicle/{vehicle_id}"
	// URL for API endpoint.
	ApiepUrl string `protobuf:"bytes,1,opt,name=apiep_url,json=apiepUrl,proto3" json:"apiep_url,omitempty"`
	// HTTP method
	//
	// x-displayName: "HTTP Method"
	// x-example: "GET"
	// HTTP method for the API.
	Method schema.HttpMethod `protobuf:"varint,2,opt,name=method,proto3,enum=ves.io.schema.HttpMethod" json:"method,omitempty"`
	// top_by_metric_value
	//
	// x-displayName: "Top By Metric Value"
	// The field `top_by_metric_value` returns one of the following values based on the metric type passed in the request field `top_by_metric`
	TopByMetricValue int32 `protobuf:"varint,3,opt,name=top_by_metric_value,json=topByMetricValue,proto3" json:"top_by_metric_value,omitempty"`
}

func (m *APIEPActivityMetrics) Reset()      { *m = APIEPActivityMetrics{} }
func (*APIEPActivityMetrics) ProtoMessage() {}
func (*APIEPActivityMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{14}
}
func (m *APIEPActivityMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIEPActivityMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIEPActivityMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIEPActivityMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIEPActivityMetrics.Merge(m, src)
}
func (m *APIEPActivityMetrics) XXX_Size() int {
	return m.Size()
}
func (m *APIEPActivityMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_APIEPActivityMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_APIEPActivityMetrics proto.InternalMessageInfo

func (m *APIEPActivityMetrics) GetApiepUrl() string {
	if m != nil {
		return m.ApiepUrl
	}
	return ""
}

func (m *APIEPActivityMetrics) GetMethod() schema.HttpMethod {
	if m != nil {
		return m.Method
	}
	return schema.ANY
}

func (m *APIEPActivityMetrics) GetTopByMetricValue() int32 {
	if m != nil {
		return m.TopByMetricValue
	}
	return 0
}

// GetTopSensitiveDataReq
//
// x-displayName: "Get Top Sensitive Data Request Object"
// Request model for GetTopSensitiveDataReq API
type GetTopSensitiveDataReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "blogging-app"
	// Namespace of the virtual host for current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Virtual Host Name
	//
	// x-displayName: "Virtual Host Name"
	// x-example: "blogging-app-vhost"
	// Virtual Host name for current request
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// List of Domain
	//
	// x-displayName: "List of Domain"
	// x-example: "www.example.com"
	// List of domains for which top api endpoints summary should be returned.
	// Optional filter by domains. If absent, endpoints for all domains are considered.
	Domains []string `protobuf:"bytes,3,rep,name=domains,proto3" json:"domains,omitempty"`
	// APIEP Category
	//
	// x-displayName: "APIEP Category"
	// x-example: "DISCOVERED"
	// Category of api endpoints. Can be DISCOVERED, INVENTORY or SHADOW API.
	ApiepCategory []app_type.APIEPCategory `protobuf:"varint,4,rep,packed,name=apiep_category,json=apiepCategory,proto3,enum=ves.io.schema.app_type.APIEPCategory" json:"apiep_category,omitempty"`
	// topk
	//
	// x-displayName: "Number of Top API Endpoints"
	// x-example: "5"
	// Number of top API endpoints to return in the response.
	Topk uint32 `protobuf:"varint,5,opt,name=topk,proto3" json:"topk,omitempty"`
}

func (m *GetTopSensitiveDataReq) Reset()      { *m = GetTopSensitiveDataReq{} }
func (*GetTopSensitiveDataReq) ProtoMessage() {}
func (*GetTopSensitiveDataReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{15}
}
func (m *GetTopSensitiveDataReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopSensitiveDataReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopSensitiveDataReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTopSensitiveDataReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopSensitiveDataReq.Merge(m, src)
}
func (m *GetTopSensitiveDataReq) XXX_Size() int {
	return m.Size()
}
func (m *GetTopSensitiveDataReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopSensitiveDataReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopSensitiveDataReq proto.InternalMessageInfo

func (m *GetTopSensitiveDataReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetTopSensitiveDataReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetTopSensitiveDataReq) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GetTopSensitiveDataReq) GetApiepCategory() []app_type.APIEPCategory {
	if m != nil {
		return m.ApiepCategory
	}
	return nil
}

func (m *GetTopSensitiveDataReq) GetTopk() uint32 {
	if m != nil {
		return m.Topk
	}
	return 0
}

// GetTopSensitiveDataRsp
//
// x-displayName: "SensitiveDataSummary API Response"
// Response model for GetTopSensitiveDataRsp API.
type GetTopSensitiveDataRsp struct {
	// top_sensitive_data
	//
	// x-displayName: "Top Sensitive Data"
	// Top k (max 10) sensitive data types with highest APIs count.
	TopSensitiveData []*SensitiveDataCount `protobuf:"bytes,1,rep,name=top_sensitive_data,json=topSensitiveData,proto3" json:"top_sensitive_data,omitempty"`
}

func (m *GetTopSensitiveDataRsp) Reset()      { *m = GetTopSensitiveDataRsp{} }
func (*GetTopSensitiveDataRsp) ProtoMessage() {}
func (*GetTopSensitiveDataRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{16}
}
func (m *GetTopSensitiveDataRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopSensitiveDataRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopSensitiveDataRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTopSensitiveDataRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopSensitiveDataRsp.Merge(m, src)
}
func (m *GetTopSensitiveDataRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetTopSensitiveDataRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopSensitiveDataRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopSensitiveDataRsp proto.InternalMessageInfo

func (m *GetTopSensitiveDataRsp) GetTopSensitiveData() []*SensitiveDataCount {
	if m != nil {
		return m.TopSensitiveData
	}
	return nil
}

// GetAPICallSummaryReq
//
// x-displayName: "Get API Call Summary Request"
// Request model for GetAPICallSummary API
type GetAPICallSummaryReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "blogging-app"
	// Namespace of the virtual host for current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Virtual Host Name
	//
	// x-displayName: "Virtual Host Name"
	// x-example: "blogging-app-vhost"
	// Virtual Host name for current request
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// apiep_summary_filter
	//
	// x-displayName: "Summary Block Filter"
	// Filter object for summary block.
	ApiepSummaryFilter *APIEPSummaryFilter `protobuf:"bytes,3,opt,name=apiep_summary_filter,json=apiepSummaryFilter,proto3" json:"apiep_summary_filter,omitempty"`
}

func (m *GetAPICallSummaryReq) Reset()      { *m = GetAPICallSummaryReq{} }
func (*GetAPICallSummaryReq) ProtoMessage() {}
func (*GetAPICallSummaryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{17}
}
func (m *GetAPICallSummaryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAPICallSummaryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAPICallSummaryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAPICallSummaryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAPICallSummaryReq.Merge(m, src)
}
func (m *GetAPICallSummaryReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAPICallSummaryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAPICallSummaryReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAPICallSummaryReq proto.InternalMessageInfo

func (m *GetAPICallSummaryReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetAPICallSummaryReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetAPICallSummaryReq) GetApiepSummaryFilter() *APIEPSummaryFilter {
	if m != nil {
		return m.ApiepSummaryFilter
	}
	return nil
}

// GetAPICallSummaryRsp
//
// x-displayName: "GetAPICallSummary API Response"
// Response model for GetSensitiveDataSummaryRsp API.
type GetAPICallSummaryRsp struct {
	// total_calls
	//
	// x-displayName: "Total API Calls"
	// Total API calls.
	TotalCalls uint64 `protobuf:"varint,1,opt,name=total_calls,json=totalCalls,proto3" json:"total_calls,omitempty"`
	// request_count_per_rsp_code
	//
	// x-displayName: "API Calls Per Response Type"
	// Number of API calls for each category of response.
	RequestCountPerRspCode []*RequestCountPerResponseClass `protobuf:"bytes,2,rep,name=request_count_per_rsp_code,json=requestCountPerRspCode,proto3" json:"request_count_per_rsp_code,omitempty"`
}

func (m *GetAPICallSummaryRsp) Reset()      { *m = GetAPICallSummaryRsp{} }
func (*GetAPICallSummaryRsp) ProtoMessage() {}
func (*GetAPICallSummaryRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{18}
}
func (m *GetAPICallSummaryRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAPICallSummaryRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAPICallSummaryRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAPICallSummaryRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAPICallSummaryRsp.Merge(m, src)
}
func (m *GetAPICallSummaryRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetAPICallSummaryRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAPICallSummaryRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetAPICallSummaryRsp proto.InternalMessageInfo

func (m *GetAPICallSummaryRsp) GetTotalCalls() uint64 {
	if m != nil {
		return m.TotalCalls
	}
	return 0
}

func (m *GetAPICallSummaryRsp) GetRequestCountPerRspCode() []*RequestCountPerResponseClass {
	if m != nil {
		return m.RequestCountPerRspCode
	}
	return nil
}

// RequestCountPerResponseClass
//
// x-displayName: "Request Count Per Response Class"
// Request count per response class.
type RequestCountPerResponseClass struct {
	// rsp_code
	//
	// x-displayName: "Response Class"
	// The category of response code(e.g. 1XX, 2XX etc).
	RspCodeClass schema.HttpResponseCodeClass `protobuf:"varint,1,opt,name=rsp_code_class,json=rspCodeClass,proto3,enum=ves.io.schema.HttpResponseCodeClass" json:"rsp_code_class,omitempty"`
	// count
	//
	// x-displayName: "Request Count For Response Class."
	// Request count for this response code class/category.
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *RequestCountPerResponseClass) Reset()      { *m = RequestCountPerResponseClass{} }
func (*RequestCountPerResponseClass) ProtoMessage() {}
func (*RequestCountPerResponseClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{19}
}
func (m *RequestCountPerResponseClass) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCountPerResponseClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCountPerResponseClass.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCountPerResponseClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCountPerResponseClass.Merge(m, src)
}
func (m *RequestCountPerResponseClass) XXX_Size() int {
	return m.Size()
}
func (m *RequestCountPerResponseClass) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCountPerResponseClass.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCountPerResponseClass proto.InternalMessageInfo

func (m *RequestCountPerResponseClass) GetRspCodeClass() schema.HttpResponseCodeClass {
	if m != nil {
		return m.RspCodeClass
	}
	return schema.HTTP_RESPONSE_CODE_CLASS_UNKNOWN
}

func (m *RequestCountPerResponseClass) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// SensitiveDataCount
//
// x-displayName: "Sensitive Data Count"
// Response model for GetTopSensitiveDataRsp API.
type SensitiveDataCount struct {
	// sensitive_data_type
	//
	// x-displayName: "Type Of Sensitive Data"
	// The type of sensitive data detected in APIs.
	SensitiveDataType app_type.SensitiveDataType `protobuf:"varint,1,opt,name=sensitive_data_type,json=sensitiveDataType,proto3,enum=ves.io.schema.app_type.SensitiveDataType" json:"sensitive_data_type,omitempty"` // Deprecated: Do not use.
	// sensitive_data_type
	//
	// x-displayName: "Type Of Sensitive Data"
	// The type of sensitive data detected in APIs.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// count
	//
	// x-displayName: "API Count With This Sensitive Data Type"
	// Number of APIEP detected this sensitive data type.
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *SensitiveDataCount) Reset()      { *m = SensitiveDataCount{} }
func (*SensitiveDataCount) ProtoMessage() {}
func (*SensitiveDataCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{20}
}
func (m *SensitiveDataCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SensitiveDataCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SensitiveDataCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SensitiveDataCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensitiveDataCount.Merge(m, src)
}
func (m *SensitiveDataCount) XXX_Size() int {
	return m.Size()
}
func (m *SensitiveDataCount) XXX_DiscardUnknown() {
	xxx_messageInfo_SensitiveDataCount.DiscardUnknown(m)
}

var xxx_messageInfo_SensitiveDataCount proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *SensitiveDataCount) GetSensitiveDataType() app_type.SensitiveDataType {
	if m != nil {
		return m.SensitiveDataType
	}
	return app_type.SENSITIVE_DATA_TYPE_CCN
}

func (m *SensitiveDataCount) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SensitiveDataCount) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// APIEPSummaryFilter
//
// x-displayName: "APIEP Summary Filter"
// Filter object for summary block.
type APIEPSummaryFilter struct {
	// List of Domain
	//
	// x-displayName: "List of Domains"
	// x-example: "www.example.com"
	// List of domains for which top api endpoints summary should be returned.
	// Optional filter by domains. If absent, endpoints for all domains are considered.
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// start time
	//
	// x-displayName: "Start Time"
	// x-example: "2019-09-23T12:30:11.733Z"
	// format: unix_timestamp|rfc 3339
	// Filters the APIEPs with access time >= start_time.
	// Optional: If not specified, then the start_time will be evaluated to end_time-2h
	//           If end_time is not specified, then the start_time will be evaluated to <current time>-10m
	StartTime string `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// end time
	//
	// x-displayName: "End Time"
	// x-example: "2019-09-24T12:30:11.733Z"
	// format: unix_timestamp|rfc 3339
	// Filters the APIEPs with access time < end_time.
	// Optional: If not specified, then the end_time will be evaluated to start_time+2h
	//           If start_time is not specified, then the end_time will be evaluated to <current time>
	EndTime string `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// APIEP Category
	//
	// x-displayName: "APIEP Category"
	// x-example: "DISCOVERED"
	// Category of api endpoints. Can be DISCOVERED, INVENTORY or SHADOW API.
	// Optional filter by api_category. If absent, endpoints of all categories are considered.
	ApiepCategory []app_type.APIEPCategory `protobuf:"varint,4,rep,packed,name=apiep_category,json=apiepCategory,proto3,enum=ves.io.schema.app_type.APIEPCategory" json:"apiep_category,omitempty"`
}

func (m *APIEPSummaryFilter) Reset()      { *m = APIEPSummaryFilter{} }
func (*APIEPSummaryFilter) ProtoMessage() {}
func (*APIEPSummaryFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{21}
}
func (m *APIEPSummaryFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIEPSummaryFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIEPSummaryFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIEPSummaryFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIEPSummaryFilter.Merge(m, src)
}
func (m *APIEPSummaryFilter) XXX_Size() int {
	return m.Size()
}
func (m *APIEPSummaryFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_APIEPSummaryFilter.DiscardUnknown(m)
}

var xxx_messageInfo_APIEPSummaryFilter proto.InternalMessageInfo

func (m *APIEPSummaryFilter) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *APIEPSummaryFilter) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *APIEPSummaryFilter) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *APIEPSummaryFilter) GetApiepCategory() []app_type.APIEPCategory {
	if m != nil {
		return m.ApiepCategory
	}
	return nil
}

// GetVulnerabilitiesReq
//
// x-displayName: "Get Vulnerabilities Request"
// Request model for GetVulnerabilitiesReq API
type GetVulnerabilitiesReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "blogging-app"
	// Namespace of the virtual host for current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Virtual Host Name
	//
	// x-displayName: "Virtual Host Name"
	// x-example: "blogging-app-vhost"
	// Virtual Host name for current request
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// List of Domain
	//
	// x-displayName: "List of Domain"
	// x-example: "www.example.com"
	// List of domains for which vulnerabilities should be returned.
	// Optional filter by domains. If absent, vulnerabilities for all domains are considered.
	Domains []string `protobuf:"bytes,3,rep,name=domains,proto3" json:"domains,omitempty"`
	// Context
	//
	// x-displayName: "Context of vulnerability appeared"
	// Context of the vulnerability appeared
	//
	// Types that are valid to be assigned to Context:
	//	*GetVulnerabilitiesReq_ApiEndpoint
	Context isGetVulnerabilitiesReq_Context `protobuf_oneof:"context"`
}

func (m *GetVulnerabilitiesReq) Reset()      { *m = GetVulnerabilitiesReq{} }
func (*GetVulnerabilitiesReq) ProtoMessage() {}
func (*GetVulnerabilitiesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{22}
}
func (m *GetVulnerabilitiesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVulnerabilitiesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVulnerabilitiesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVulnerabilitiesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVulnerabilitiesReq.Merge(m, src)
}
func (m *GetVulnerabilitiesReq) XXX_Size() int {
	return m.Size()
}
func (m *GetVulnerabilitiesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVulnerabilitiesReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetVulnerabilitiesReq proto.InternalMessageInfo

type isGetVulnerabilitiesReq_Context interface {
	isGetVulnerabilitiesReq_Context()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetVulnerabilitiesReq_ApiEndpoint struct {
	ApiEndpoint *APIEndpoint `protobuf:"bytes,5,opt,name=api_endpoint,json=apiEndpoint,proto3,oneof" json:"api_endpoint,omitempty"`
}

func (*GetVulnerabilitiesReq_ApiEndpoint) isGetVulnerabilitiesReq_Context() {}

func (m *GetVulnerabilitiesReq) GetContext() isGetVulnerabilitiesReq_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *GetVulnerabilitiesReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetVulnerabilitiesReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetVulnerabilitiesReq) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GetVulnerabilitiesReq) GetApiEndpoint() *APIEndpoint {
	if x, ok := m.GetContext().(*GetVulnerabilitiesReq_ApiEndpoint); ok {
		return x.ApiEndpoint
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetVulnerabilitiesReq) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetVulnerabilitiesReq_ApiEndpoint)(nil),
	}
}

// APIEndpoint
//
// x-displayName: "API Endpoint"
// APIEndpoint Object.
type APIEndpoint struct {
	// API URL
	//
	// x-displayName: "API URL"
	// x-example: "api/v1/user_id/DYN/vehicle_id/DYN"
	// Requested API endPoint for api url.
	CollapsedUrl string `protobuf:"bytes,1,opt,name=collapsed_url,json=collapsedUrl,proto3" json:"collapsed_url,omitempty"`
	// Method of current API URL
	//
	// x-displayName: "Method"
	// x-example: "GET"
	// Requested API endPoint for method.
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
}

func (m *APIEndpoint) Reset()      { *m = APIEndpoint{} }
func (*APIEndpoint) ProtoMessage() {}
func (*APIEndpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{23}
}
func (m *APIEndpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIEndpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIEndpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIEndpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIEndpoint.Merge(m, src)
}
func (m *APIEndpoint) XXX_Size() int {
	return m.Size()
}
func (m *APIEndpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_APIEndpoint.DiscardUnknown(m)
}

var xxx_messageInfo_APIEndpoint proto.InternalMessageInfo

func (m *APIEndpoint) GetCollapsedUrl() string {
	if m != nil {
		return m.CollapsedUrl
	}
	return ""
}

func (m *APIEndpoint) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

// GetVulnerabilitiesRsp
//
// x-displayName: "GetVulnerabilitiesRsp API Response"
// Response model for GetVulnerabilitiesRsp API.
type GetVulnerabilitiesRsp struct {
	// vulnerabilities
	//
	// x-displayName: "List of vulnerabilities"
	// List of vulnerabilities found in context.
	Vulnerabilities []*Vulnerability `protobuf:"bytes,1,rep,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`
}

func (m *GetVulnerabilitiesRsp) Reset()      { *m = GetVulnerabilitiesRsp{} }
func (*GetVulnerabilitiesRsp) ProtoMessage() {}
func (*GetVulnerabilitiesRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{24}
}
func (m *GetVulnerabilitiesRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVulnerabilitiesRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVulnerabilitiesRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVulnerabilitiesRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVulnerabilitiesRsp.Merge(m, src)
}
func (m *GetVulnerabilitiesRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetVulnerabilitiesRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVulnerabilitiesRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetVulnerabilitiesRsp proto.InternalMessageInfo

func (m *GetVulnerabilitiesRsp) GetVulnerabilities() []*Vulnerability {
	if m != nil {
		return m.Vulnerabilities
	}
	return nil
}

// Vulnerability
//
// x-displayName: "Vulnerability"
// Vulnerability object.
type Vulnerability struct {
	// title
	//
	// x-displayName: "Title"
	// Title of the vulnerability found.
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// category
	//
	// x-displayName: "Category"
	// Category of the vulnerability found.
	Category string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	// Context
	//
	// x-displayName: "Context"
	// Context of the vulnerability found.
	Context VulnContext `protobuf:"varint,3,opt,name=context,proto3,enum=ves.io.schema.virtual_host.VulnContext" json:"context,omitempty"`
	// description
	//
	// x-displayName: "Description"
	// Description of the vulnerability found.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// status
	//
	// x-displayName: "Status"
	// Status of the vulnerability found.
	Status VulnStatus `protobuf:"varint,5,opt,name=status,proto3,enum=ves.io.schema.virtual_host.VulnStatus" json:"status,omitempty"`
	// status_change_time
	//
	// x-displayName: "Status Change Time"
	// status_change_time is the time when the vulnerability
	// status was updated by the discovery mechanism.
	// It is the UTC time and represented in RFC3339 form.
	StatusChangeTime *types.Timestamp `protobuf:"bytes,6,opt,name=status_change_time,json=statusChangeTime,proto3" json:"status_change_time,omitempty"`
	// creation_time
	//
	// x-displayName: "Creation Time"
	// creation_time is the time when the vulnerability
	// was created by the discovery mechanism.
	// It is the UTC time and represented in RFC3339 form.
	CreationTime *types.Timestamp `protobuf:"bytes,7,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// last_observed_time
	//
	// x-displayName: "Last Observed Time"
	// last_observed_time is the time when the vulnerability
	// was last observed by the discovery mechanism.
	// It is the UTC time and represented in RFC3339 form.
	LastObservedTime *types.Timestamp `protobuf:"bytes,8,opt,name=last_observed_time,json=lastObservedTime,proto3" json:"last_observed_time,omitempty"`
	// risk
	//
	// x-displayName: "Risk"
	// Risk of the vulnerability found.
	Risk *VulnRisk `protobuf:"bytes,9,opt,name=risk,proto3" json:"risk,omitempty"`
	// evidence
	//
	// x-displayName: "Evidence"
	// Evidence of the vulnerability found.
	Evidence *VulnEvidence `protobuf:"bytes,10,opt,name=evidence,proto3" json:"evidence,omitempty"`
	// remediation
	//
	// x-displayName: "Remediation"
	// Remediation of the vulnerability found.
	Remediation []string `protobuf:"bytes,11,rep,name=remediation,proto3" json:"remediation,omitempty"`
}

func (m *Vulnerability) Reset()      { *m = Vulnerability{} }
func (*Vulnerability) ProtoMessage() {}
func (*Vulnerability) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{25}
}
func (m *Vulnerability) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vulnerability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vulnerability.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vulnerability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vulnerability.Merge(m, src)
}
func (m *Vulnerability) XXX_Size() int {
	return m.Size()
}
func (m *Vulnerability) XXX_DiscardUnknown() {
	xxx_messageInfo_Vulnerability.DiscardUnknown(m)
}

var xxx_messageInfo_Vulnerability proto.InternalMessageInfo

func (m *Vulnerability) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Vulnerability) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Vulnerability) GetContext() VulnContext {
	if m != nil {
		return m.Context
	}
	return CONTEXT_API_ENDPOINT
}

func (m *Vulnerability) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Vulnerability) GetStatus() VulnStatus {
	if m != nil {
		return m.Status
	}
	return STATUS_NONE
}

func (m *Vulnerability) GetStatusChangeTime() *types.Timestamp {
	if m != nil {
		return m.StatusChangeTime
	}
	return nil
}

func (m *Vulnerability) GetCreationTime() *types.Timestamp {
	if m != nil {
		return m.CreationTime
	}
	return nil
}

func (m *Vulnerability) GetLastObservedTime() *types.Timestamp {
	if m != nil {
		return m.LastObservedTime
	}
	return nil
}

func (m *Vulnerability) GetRisk() *VulnRisk {
	if m != nil {
		return m.Risk
	}
	return nil
}

func (m *Vulnerability) GetEvidence() *VulnEvidence {
	if m != nil {
		return m.Evidence
	}
	return nil
}

func (m *Vulnerability) GetRemediation() []string {
	if m != nil {
		return m.Remediation
	}
	return nil
}

// Risk
//
// x-displayName: "Risk"
// Risk of the vulnerability found.
type VulnRisk struct {
	// score
	//
	// x-displayName: "Score"
	// Risk score of the vulnerability found.
	Score float32 `protobuf:"fixed32,1,opt,name=score,proto3" json:"score,omitempty"`
	// level
	//
	// x-displayName: "Level"
	// Risk level of the vulnerability found.
	Level VulnRiskLevel `protobuf:"varint,2,opt,name=level,proto3,enum=ves.io.schema.virtual_host.VulnRiskLevel" json:"level,omitempty"`
}

func (m *VulnRisk) Reset()      { *m = VulnRisk{} }
func (*VulnRisk) ProtoMessage() {}
func (*VulnRisk) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{26}
}
func (m *VulnRisk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VulnRisk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VulnRisk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VulnRisk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnRisk.Merge(m, src)
}
func (m *VulnRisk) XXX_Size() int {
	return m.Size()
}
func (m *VulnRisk) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnRisk.DiscardUnknown(m)
}

var xxx_messageInfo_VulnRisk proto.InternalMessageInfo

func (m *VulnRisk) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *VulnRisk) GetLevel() VulnRiskLevel {
	if m != nil {
		return m.Level
	}
	return RISK_LEVEL_NONE
}

// Evidence
//
// x-displayName: "Evidence"
// Evidence of the vulnerability found.
type VulnEvidence struct {
	// samples
	//
	// x-displayName: "Samples"
	// Samples due to which vulnerability was found.
	Samples []*VulnEvidenceSample `protobuf:"bytes,1,rep,name=samples,proto3" json:"samples,omitempty"`
	// evidence_type
	//
	// x-displayName: "Evidence type"
	// Type of evidence where vulnerability was found.
	EvidenceType VulnEvidenceType `protobuf:"varint,3,opt,name=evidence_type,json=evidenceType,proto3,enum=ves.io.schema.virtual_host.VulnEvidenceType" json:"evidence_type,omitempty"`
	// start_time
	//
	// x-displayName: "Start Time"
	// start_time is the time when vulnerability evidence
	// appeared first.
	// It is the UTC time and represented in RFC3339 form.
	StartTime *types.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// end_time
	//
	// x-displayName: "End Time"
	// end_time is the time when vulnerability evidence
	// appeared last.
	// It is the UTC time and represented in RFC3339 form.
	EndTime *types.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *VulnEvidence) Reset()      { *m = VulnEvidence{} }
func (*VulnEvidence) ProtoMessage() {}
func (*VulnEvidence) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{27}
}
func (m *VulnEvidence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VulnEvidence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VulnEvidence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VulnEvidence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnEvidence.Merge(m, src)
}
func (m *VulnEvidence) XXX_Size() int {
	return m.Size()
}
func (m *VulnEvidence) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnEvidence.DiscardUnknown(m)
}

var xxx_messageInfo_VulnEvidence proto.InternalMessageInfo

func (m *VulnEvidence) GetSamples() []*VulnEvidenceSample {
	if m != nil {
		return m.Samples
	}
	return nil
}

func (m *VulnEvidence) GetEvidenceType() VulnEvidenceType {
	if m != nil {
		return m.EvidenceType
	}
	return EVIDENCE_TYPE_REQUESTS
}

func (m *VulnEvidence) GetStartTime() *types.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *VulnEvidence) GetEndTime() *types.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

// VulnEvidenceSample
//
// x-displayName: "Vulnerability evidence sample"
// Vulnerability evidence sample due to which vulnerability was found
type VulnEvidenceSample struct {
	// req_id
	//
	// x-displayName: "Request id"
	// Request id where vulnerability was found.
	ReqId string `protobuf:"bytes,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	// details
	//
	// x-displayName: "List of details"
	// List of details due to which vulnerability was found.
	Details []string `protobuf:"bytes,2,rep,name=details,proto3" json:"details,omitempty"`
}

func (m *VulnEvidenceSample) Reset()      { *m = VulnEvidenceSample{} }
func (*VulnEvidenceSample) ProtoMessage() {}
func (*VulnEvidenceSample) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ff43449ad67ea61, []int{28}
}
func (m *VulnEvidenceSample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VulnEvidenceSample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VulnEvidenceSample.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VulnEvidenceSample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnEvidenceSample.Merge(m, src)
}
func (m *VulnEvidenceSample) XXX_Size() int {
	return m.Size()
}
func (m *VulnEvidenceSample) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnEvidenceSample.DiscardUnknown(m)
}

var xxx_messageInfo_VulnEvidenceSample proto.InternalMessageInfo

func (m *VulnEvidenceSample) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *VulnEvidenceSample) GetDetails() []string {
	if m != nil {
		return m.Details
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.virtual_host.APIEPActivityMetricType", APIEPActivityMetricType_name, APIEPActivityMetricType_value)
	golang_proto.RegisterEnum("ves.io.schema.virtual_host.APIEPActivityMetricType", APIEPActivityMetricType_name, APIEPActivityMetricType_value)
	proto.RegisterEnum("ves.io.schema.virtual_host.VulnRiskLevel", VulnRiskLevel_name, VulnRiskLevel_value)
	golang_proto.RegisterEnum("ves.io.schema.virtual_host.VulnRiskLevel", VulnRiskLevel_name, VulnRiskLevel_value)
	proto.RegisterEnum("ves.io.schema.virtual_host.VulnEvidenceType", VulnEvidenceType_name, VulnEvidenceType_value)
	golang_proto.RegisterEnum("ves.io.schema.virtual_host.VulnEvidenceType", VulnEvidenceType_name, VulnEvidenceType_value)
	proto.RegisterEnum("ves.io.schema.virtual_host.VulnContext", VulnContext_name, VulnContext_value)
	golang_proto.RegisterEnum("ves.io.schema.virtual_host.VulnContext", VulnContext_name, VulnContext_value)
	proto.RegisterEnum("ves.io.schema.virtual_host.VulnStatus", VulnStatus_name, VulnStatus_value)
	golang_proto.RegisterEnum("ves.io.schema.virtual_host.VulnStatus", VulnStatus_name, VulnStatus_value)
	proto.RegisterType((*ApiEndpointsStatsReq)(nil), "ves.io.schema.virtual_host.ApiEndpointsStatsReq")
	golang_proto.RegisterType((*ApiEndpointsStatsReq)(nil), "ves.io.schema.virtual_host.ApiEndpointsStatsReq")
	proto.RegisterType((*ApiEndpointsStatsRsp)(nil), "ves.io.schema.virtual_host.ApiEndpointsStatsRsp")
	golang_proto.RegisterType((*ApiEndpointsStatsRsp)(nil), "ves.io.schema.virtual_host.ApiEndpointsStatsRsp")
	proto.RegisterType((*APIEndpointsReq)(nil), "ves.io.schema.virtual_host.APIEndpointsReq")
	golang_proto.RegisterType((*APIEndpointsReq)(nil), "ves.io.schema.virtual_host.APIEndpointsReq")
	proto.RegisterType((*SwaggerSpecReq)(nil), "ves.io.schema.virtual_host.SwaggerSpecReq")
	golang_proto.RegisterType((*SwaggerSpecReq)(nil), "ves.io.schema.virtual_host.SwaggerSpecReq")
	proto.RegisterType((*SwaggerSpecRsp)(nil), "ves.io.schema.virtual_host.SwaggerSpecRsp")
	golang_proto.RegisterType((*SwaggerSpecRsp)(nil), "ves.io.schema.virtual_host.SwaggerSpecRsp")
	proto.RegisterType((*APIEndpointPDFReq)(nil), "ves.io.schema.virtual_host.APIEndpointPDFReq")
	golang_proto.RegisterType((*APIEndpointPDFReq)(nil), "ves.io.schema.virtual_host.APIEndpointPDFReq")
	proto.RegisterType((*APIEndpointLearntSchemaReq)(nil), "ves.io.schema.virtual_host.APIEndpointLearntSchemaReq")
	golang_proto.RegisterType((*APIEndpointLearntSchemaReq)(nil), "ves.io.schema.virtual_host.APIEndpointLearntSchemaReq")
	proto.RegisterType((*APIEndpointsRsp)(nil), "ves.io.schema.virtual_host.APIEndpointsRsp")
	golang_proto.RegisterType((*APIEndpointsRsp)(nil), "ves.io.schema.virtual_host.APIEndpointsRsp")
	proto.RegisterType((*APIEndpointPDFRsp)(nil), "ves.io.schema.virtual_host.APIEndpointPDFRsp")
	golang_proto.RegisterType((*APIEndpointPDFRsp)(nil), "ves.io.schema.virtual_host.APIEndpointPDFRsp")
	proto.RegisterType((*APIEndpointLearntSchemaRsp)(nil), "ves.io.schema.virtual_host.APIEndpointLearntSchemaRsp")
	golang_proto.RegisterType((*APIEndpointLearntSchemaRsp)(nil), "ves.io.schema.virtual_host.APIEndpointLearntSchemaRsp")
	proto.RegisterType((*APIEndpointReq)(nil), "ves.io.schema.virtual_host.APIEndpointReq")
	golang_proto.RegisterType((*APIEndpointReq)(nil), "ves.io.schema.virtual_host.APIEndpointReq")
	proto.RegisterType((*APIEndpointRsp)(nil), "ves.io.schema.virtual_host.APIEndpointRsp")
	golang_proto.RegisterType((*APIEndpointRsp)(nil), "ves.io.schema.virtual_host.APIEndpointRsp")
	proto.RegisterType((*GetTopAPIEndpointsReq)(nil), "ves.io.schema.virtual_host.GetTopAPIEndpointsReq")
	golang_proto.RegisterType((*GetTopAPIEndpointsReq)(nil), "ves.io.schema.virtual_host.GetTopAPIEndpointsReq")
	proto.RegisterType((*GetTopAPIEndpointsRsp)(nil), "ves.io.schema.virtual_host.GetTopAPIEndpointsRsp")
	golang_proto.RegisterType((*GetTopAPIEndpointsRsp)(nil), "ves.io.schema.virtual_host.GetTopAPIEndpointsRsp")
	proto.RegisterType((*APIEPActivityMetrics)(nil), "ves.io.schema.virtual_host.APIEPActivityMetrics")
	golang_proto.RegisterType((*APIEPActivityMetrics)(nil), "ves.io.schema.virtual_host.APIEPActivityMetrics")
	proto.RegisterType((*GetTopSensitiveDataReq)(nil), "ves.io.schema.virtual_host.GetTopSensitiveDataReq")
	golang_proto.RegisterType((*GetTopSensitiveDataReq)(nil), "ves.io.schema.virtual_host.GetTopSensitiveDataReq")
	proto.RegisterType((*GetTopSensitiveDataRsp)(nil), "ves.io.schema.virtual_host.GetTopSensitiveDataRsp")
	golang_proto.RegisterType((*GetTopSensitiveDataRsp)(nil), "ves.io.schema.virtual_host.GetTopSensitiveDataRsp")
	proto.RegisterType((*GetAPICallSummaryReq)(nil), "ves.io.schema.virtual_host.GetAPICallSummaryReq")
	golang_proto.RegisterType((*GetAPICallSummaryReq)(nil), "ves.io.schema.virtual_host.GetAPICallSummaryReq")
	proto.RegisterType((*GetAPICallSummaryRsp)(nil), "ves.io.schema.virtual_host.GetAPICallSummaryRsp")
	golang_proto.RegisterType((*GetAPICallSummaryRsp)(nil), "ves.io.schema.virtual_host.GetAPICallSummaryRsp")
	proto.RegisterType((*RequestCountPerResponseClass)(nil), "ves.io.schema.virtual_host.RequestCountPerResponseClass")
	golang_proto.RegisterType((*RequestCountPerResponseClass)(nil), "ves.io.schema.virtual_host.RequestCountPerResponseClass")
	proto.RegisterType((*SensitiveDataCount)(nil), "ves.io.schema.virtual_host.SensitiveDataCount")
	golang_proto.RegisterType((*SensitiveDataCount)(nil), "ves.io.schema.virtual_host.SensitiveDataCount")
	proto.RegisterType((*APIEPSummaryFilter)(nil), "ves.io.schema.virtual_host.APIEPSummaryFilter")
	golang_proto.RegisterType((*APIEPSummaryFilter)(nil), "ves.io.schema.virtual_host.APIEPSummaryFilter")
	proto.RegisterType((*GetVulnerabilitiesReq)(nil), "ves.io.schema.virtual_host.GetVulnerabilitiesReq")
	golang_proto.RegisterType((*GetVulnerabilitiesReq)(nil), "ves.io.schema.virtual_host.GetVulnerabilitiesReq")
	proto.RegisterType((*APIEndpoint)(nil), "ves.io.schema.virtual_host.APIEndpoint")
	golang_proto.RegisterType((*APIEndpoint)(nil), "ves.io.schema.virtual_host.APIEndpoint")
	proto.RegisterType((*GetVulnerabilitiesRsp)(nil), "ves.io.schema.virtual_host.GetVulnerabilitiesRsp")
	golang_proto.RegisterType((*GetVulnerabilitiesRsp)(nil), "ves.io.schema.virtual_host.GetVulnerabilitiesRsp")
	proto.RegisterType((*Vulnerability)(nil), "ves.io.schema.virtual_host.Vulnerability")
	golang_proto.RegisterType((*Vulnerability)(nil), "ves.io.schema.virtual_host.Vulnerability")
	proto.RegisterType((*VulnRisk)(nil), "ves.io.schema.virtual_host.VulnRisk")
	golang_proto.RegisterType((*VulnRisk)(nil), "ves.io.schema.virtual_host.VulnRisk")
	proto.RegisterType((*VulnEvidence)(nil), "ves.io.schema.virtual_host.VulnEvidence")
	golang_proto.RegisterType((*VulnEvidence)(nil), "ves.io.schema.virtual_host.VulnEvidence")
	proto.RegisterType((*VulnEvidenceSample)(nil), "ves.io.schema.virtual_host.VulnEvidenceSample")
	golang_proto.RegisterType((*VulnEvidenceSample)(nil), "ves.io.schema.virtual_host.VulnEvidenceSample")
}

func init() {
	proto.RegisterFile("ves.io/schema/virtual_host/public_apiep_customapi.proto", fileDescriptor_6ff43449ad67ea61)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/virtual_host/public_apiep_customapi.proto", fileDescriptor_6ff43449ad67ea61)
}

var fileDescriptor_6ff43449ad67ea61 = []byte{
	// 2779 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x1a, 0x4b, 0x6c, 0x1b, 0xc7,
	0x55, 0xc3, 0x8f, 0x24, 0x0e, 0x25, 0x9a, 0x1e, 0x29, 0x0a, 0xcd, 0x38, 0x8c, 0xb2, 0x49, 0x1b,
	0x47, 0x8d, 0xc8, 0x44, 0x29, 0x92, 0xc0, 0x87, 0x24, 0xfc, 0xac, 0x24, 0xa6, 0x12, 0xc9, 0x2c,
	0x29, 0x27, 0x6e, 0x13, 0x6c, 0x56, 0xdc, 0x11, 0xb5, 0xf1, 0x92, 0x3b, 0xde, 0x19, 0x32, 0x51,
	0x8a, 0x14, 0x86, 0x51, 0xb4, 0x40, 0x80, 0x02, 0x81, 0x7b, 0x6d, 0x4e, 0x3d, 0x34, 0x2d, 0xd0,
	0x5b, 0x0f, 0x41, 0x7d, 0xf1, 0xa5, 0x68, 0x4e, 0x85, 0xdb, 0x5e, 0x82, 0x9e, 0x6a, 0xb9, 0x2d,
	0x5a, 0xa0, 0x87, 0x00, 0x05, 0xda, 0x63, 0x8b, 0x99, 0x5d, 0x52, 0xbb, 0x24, 0x45, 0x52, 0xb2,
	0x13, 0xa4, 0x17, 0x69, 0xe6, 0xfd, 0xe6, 0xbd, 0x37, 0xef, 0xbd, 0x79, 0x33, 0x4b, 0xf8, 0x7c,
	0x07, 0xd3, 0xb4, 0x61, 0x65, 0x68, 0x7d, 0x1f, 0x37, 0xb5, 0x4c, 0xc7, 0xb0, 0x59, 0x5b, 0x33,
	0xd5, 0x7d, 0x8b, 0xb2, 0x0c, 0x69, 0xef, 0x9a, 0x46, 0x5d, 0xd5, 0x88, 0x81, 0x89, 0x5a, 0x6f,
	0x53, 0x66, 0x35, 0x35, 0x62, 0xa4, 0x89, 0x6d, 0x31, 0x0b, 0x25, 0x1d, 0xc6, 0xb4, 0xc3, 0x98,
	0xf6, 0x32, 0x26, 0x57, 0x1b, 0x06, 0xdb, 0x6f, 0xef, 0xa6, 0xeb, 0x56, 0x33, 0xd3, 0xb0, 0x1a,
	0x56, 0x46, 0xb0, 0xec, 0xb6, 0xf7, 0xc4, 0x4c, 0x4c, 0xc4, 0xc8, 0x11, 0x95, 0x3c, 0xdf, 0xb0,
	0xac, 0x86, 0x89, 0x33, 0x1a, 0x31, 0x32, 0x5a, 0xab, 0x65, 0x31, 0x8d, 0x19, 0x56, 0x8b, 0xba,
	0xd8, 0x73, 0x1e, 0xec, 0x3e, 0x63, 0x64, 0xd7, 0xd2, 0x0f, 0x5c, 0xd4, 0x23, 0x2e, 0xaa, 0x27,
	0x9e, 0x19, 0x4d, 0x4c, 0x99, 0xd6, 0x24, 0x2e, 0x81, 0xe4, 0xb7, 0x4e, 0x23, 0x44, 0x65, 0x07,
	0x04, 0x67, 0xf8, 0x9f, 0xae, 0xfc, 0x87, 0xfc, 0x34, 0x16, 0xf1, 0x2d, 0xee, 0x47, 0x7a, 0xf9,
	0xce, 0xf7, 0x79, 0x4e, 0x33, 0x0d, 0x5d, 0x63, 0x78, 0xf8, 0xca, 0x1d, 0x4c, 0x71, 0xab, 0xd3,
	0x27, 0x7c, 0xb9, 0xdf, 0xf7, 0xf8, 0x1d, 0xd5, 0x47, 0x21, 0x6d, 0xc2, 0xc5, 0x2c, 0x31, 0xe4,
	0x96, 0x4e, 0x2c, 0xa3, 0xc5, 0x68, 0x95, 0x69, 0x8c, 0x2a, 0xf8, 0x2a, 0x42, 0x30, 0xd4, 0xd2,
	0x9a, 0x38, 0x01, 0x96, 0xc1, 0x85, 0x88, 0x22, 0xc6, 0xe8, 0x3c, 0x8c, 0xf0, 0xff, 0x94, 0x68,
	0x75, 0x9c, 0x08, 0x08, 0xc4, 0x11, 0x40, 0xfa, 0x04, 0x0c, 0x13, 0x45, 0x09, 0x7a, 0x02, 0x9e,
	0x61, 0x16, 0xd3, 0x4c, 0x15, 0x77, 0x51, 0x42, 0x6a, 0x58, 0x89, 0x09, 0x70, 0x8f, 0x01, 0xa5,
	0x20, 0xd4, 0x0d, 0x5a, 0xb7, 0x3a, 0xd8, 0xc6, 0xba, 0x58, 0x20, 0xac, 0x78, 0x20, 0x7c, 0x7d,
	0xa3, 0xd5, 0xc1, 0x2d, 0x66, 0xd9, 0x07, 0x89, 0xa0, 0x40, 0x1f, 0x01, 0xd0, 0x12, 0x9c, 0xa6,
	0xfb, 0x9a, 0x6e, 0xbd, 0x93, 0x08, 0x09, 0x94, 0x3b, 0x43, 0x8f, 0xc2, 0x39, 0x62, 0x18, 0xaa,
	0x8e, 0x19, 0xae, 0x33, 0xac, 0x27, 0xc2, 0x02, 0x1b, 0x25, 0x86, 0x51, 0x70, 0x41, 0xd2, 0x47,
	0x41, 0x78, 0x26, 0x5b, 0x29, 0xf6, 0x34, 0xe1, 0x0e, 0xf0, 0x19, 0x0b, 0xfa, 0x8c, 0xed, 0xb9,
	0x27, 0xe0, 0x71, 0x4f, 0x1b, 0x9e, 0xd3, 0x88, 0xd1, 0xb3, 0x52, 0x35, 0x5a, 0x7b, 0x96, 0x6a,
	0xe3, 0xab, 0x6d, 0x4c, 0x59, 0x22, 0xb8, 0x1c, 0xbc, 0x10, 0x5b, 0x4b, 0xa7, 0xfd, 0x31, 0xdd,
	0x0d, 0x97, 0xb4, 0xc7, 0x71, 0xc5, 0xd6, 0x9e, 0xa5, 0x38, 0x5c, 0x39, 0xf8, 0xeb, 0x7f, 0xdc,
	0x0a, 0x86, 0x6f, 0x80, 0x40, 0x02, 0x28, 0x4b, 0xda, 0x50, 0x1a, 0x74, 0x19, 0xce, 0xe8, 0x56,
	0x53, 0x33, 0x5a, 0x34, 0x11, 0x5a, 0x0e, 0x5e, 0x88, 0xe4, 0x5e, 0xe2, 0x4c, 0x91, 0x1b, 0x60,
	0x5a, 0x0a, 0xd9, 0x81, 0x7d, 0xc0, 0x67, 0xf0, 0x06, 0x98, 0x91, 0xc2, 0x76, 0x30, 0x71, 0x2d,
	0xe0, 0x45, 0xc6, 0x41, 0x57, 0x7e, 0x3c, 0xec, 0x59, 0xa9, 0x2b, 0x0f, 0x3d, 0x0c, 0x21, 0x65,
	0x9a, 0xcd, 0x54, 0x1e, 0xf5, 0xc2, 0x71, 0x11, 0x25, 0x22, 0x20, 0x35, 0xa3, 0x89, 0xd1, 0x39,
	0x38, 0x8b, 0x5b, 0xba, 0x83, 0x9c, 0x16, 0xc8, 0x19, 0xdc, 0xd2, 0x05, 0x6a, 0x0b, 0xc6, 0xdc,
	0xa4, 0xd6, 0x18, 0x6e, 0xf0, 0xfd, 0x9a, 0x11, 0x0e, 0xf8, 0xda, 0xb1, 0x0e, 0xa8, 0x14, 0xe5,
	0x4a, 0xde, 0x25, 0x56, 0xe6, 0x05, 0x73, 0x77, 0x2a, 0xed, 0xc3, 0x58, 0xf5, 0x1d, 0xad, 0xd1,
	0xc0, 0x76, 0x95, 0xe0, 0xfa, 0xa9, 0xc2, 0x13, 0x3d, 0x7e, 0xe4, 0xa6, 0xa0, 0x70, 0x13, 0x1c,
	0x62, 0xb1, 0xf4, 0xac, 0x7f, 0x25, 0x4a, 0x78, 0xf8, 0x50, 0x07, 0xa2, 0x52, 0x82, 0xeb, 0xee,
	0x8a, 0x51, 0x7a, 0x44, 0x25, 0x5d, 0x07, 0xf0, 0xac, 0x27, 0x7c, 0x2a, 0x85, 0xf5, 0xd3, 0x05,
	0xd0, 0x63, 0x70, 0xbe, 0x6e, 0x99, 0xa6, 0x46, 0x28, 0xd6, 0xd5, 0xb6, 0x6d, 0x8a, 0x18, 0x8f,
	0x28, 0x73, 0x3d, 0xe0, 0x8e, 0x6d, 0xf2, 0x30, 0x6f, 0x62, 0xb6, 0x6f, 0xe9, 0x22, 0xcc, 0x23,
	0x8a, 0x3b, 0x93, 0x3e, 0x0e, 0xc0, 0xa4, 0x47, 0x89, 0x2d, 0xac, 0xd9, 0x2d, 0x56, 0x15, 0x5e,
	0xfe, 0xf2, 0xb5, 0xf1, 0x7a, 0x3b, 0x7c, 0xac, 0xb7, 0x47, 0x67, 0xcc, 0xf4, 0x17, 0x95, 0x31,
	0x52, 0xb5, 0x2f, 0xdb, 0x29, 0x41, 0x2f, 0x43, 0xe8, 0xc4, 0xab, 0x69, 0x50, 0x96, 0x00, 0xcb,
	0xc1, 0x0b, 0xd1, 0xb5, 0x47, 0x47, 0xc6, 0xaa, 0x10, 0x18, 0x11, 0x4c, 0x5b, 0x06, 0x65, 0x52,
	0x6d, 0x20, 0x06, 0x28, 0x41, 0x2f, 0xc1, 0x59, 0xa2, 0xef, 0x09, 0xbb, 0x84, 0xd3, 0xa3, 0x6b,
	0x8f, 0x8f, 0x14, 0x5a, 0x29, 0xac, 0x0b, 0xb9, 0x33, 0x44, 0xdf, 0xe3, 0x03, 0xe9, 0x56, 0xf0,
	0xf8, 0x5d, 0xa5, 0x04, 0xed, 0xc0, 0xb3, 0x47, 0xf5, 0x51, 0x75, 0x44, 0x8a, 0x54, 0x8c, 0xae,
	0x5d, 0x38, 0x6e, 0xa1, 0x42, 0x8f, 0xc1, 0x95, 0x13, 0xd7, 0xfb, 0x20, 0xe8, 0x39, 0xf8, 0xa0,
	0x47, 0xac, 0x45, 0x70, 0x8b, 0x6f, 0x93, 0x08, 0x7f, 0x27, 0x42, 0x1e, 0x38, 0x42, 0x97, 0x1d,
	0x2c, 0x4f, 0x04, 0x9e, 0xf5, 0x14, 0xb7, 0xa8, 0xc1, 0x8c, 0x0e, 0x56, 0x75, 0x8d, 0x69, 0x22,
	0xeb, 0xa3, 0xc7, 0x67, 0x7d, 0xb5, 0x4b, 0x5d, 0xd0, 0x98, 0xa6, 0xcc, 0x53, 0xef, 0x14, 0x7d,
	0x13, 0x2e, 0xf5, 0xaa, 0xbb, 0x5f, 0x09, 0xa7, 0x12, 0x2d, 0xf6, 0xb0, 0x5e, 0x1d, 0xbc, 0x2e,
	0x9f, 0x3d, 0x85, 0xcb, 0x51, 0x09, 0xc6, 0xb4, 0x36, 0xdb, 0xc7, 0x2d, 0x66, 0xd4, 0x45, 0x9b,
	0x90, 0x88, 0x08, 0x31, 0x5f, 0x3f, 0x56, 0x8c, 0x8f, 0x5a, 0xe9, 0xe3, 0x96, 0x7e, 0x12, 0x80,
	0x31, 0xcf, 0x16, 0xfe, 0x5f, 0x9d, 0x2d, 0x03, 0x35, 0x20, 0x34, 0xb2, 0x06, 0x84, 0x8f, 0xab,
	0x01, 0xd3, 0xc7, 0x57, 0xdc, 0xa2, 0xdf, 0x3b, 0x94, 0xa0, 0xe7, 0x61, 0x58, 0xa4, 0x95, 0x9b,
	0x31, 0x13, 0xa4, 0xa1, 0x43, 0x2f, 0xfd, 0x34, 0x00, 0x1f, 0xd8, 0xc0, 0xac, 0x66, 0x91, 0x7b,
	0x3f, 0xcc, 0xdf, 0x82, 0x8b, 0x4e, 0x41, 0xa0, 0xed, 0x66, 0x53, 0xb3, 0x0f, 0xd4, 0x3d, 0xc3,
	0x64, 0xd8, 0x16, 0x45, 0x30, 0x3a, 0xe0, 0x6b, 0x6f, 0x6f, 0xea, 0xe8, 0x55, 0x75, 0xd8, 0xd6,
	0x05, 0x97, 0x82, 0x84, 0x2c, 0x1f, 0x0c, 0xbd, 0x06, 0xe7, 0x99, 0x45, 0xd4, 0xdd, 0x03, 0xb5,
	0x89, 0x99, 0x6d, 0xd4, 0x85, 0x6f, 0x63, 0x6b, 0xcf, 0x8e, 0x15, 0x9d, 0xad, 0x33, 0xa3, 0x63,
	0xb0, 0x83, 0x6d, 0xc1, 0x56, 0x3b, 0x20, 0x58, 0x89, 0x32, 0x8b, 0xe4, 0x5c, 0x00, 0x7a, 0x18,
	0x86, 0x98, 0x45, 0xae, 0x88, 0xdd, 0x98, 0xcf, 0x45, 0xb8, 0xd3, 0x43, 0x2b, 0x81, 0x04, 0x54,
	0x04, 0x58, 0xfa, 0xde, 0x50, 0x27, 0x51, 0x82, 0x30, 0x84, 0x5c, 0x21, 0xa1, 0x2a, 0x75, 0x6b,
	0xe0, 0xd3, 0x27, 0xd4, 0x86, 0xe6, 0x16, 0x7b, 0x2d, 0x85, 0x77, 0xbb, 0x23, 0xcc, 0x22, 0x59,
	0x21, 0x58, 0xfa, 0x15, 0xef, 0x13, 0x87, 0x70, 0xa2, 0x8b, 0xd0, 0x29, 0xa7, 0x22, 0xd0, 0xc4,
	0x26, 0xe5, 0x1e, 0x16, 0x22, 0xec, 0xe0, 0x85, 0x6b, 0xb3, 0xc2, 0x0c, 0x3b, 0xb0, 0x0c, 0x5c,
	0xd0, 0x87, 0x41, 0xa0, 0xcc, 0x0a, 0x7a, 0x1e, 0x83, 0xcf, 0xf4, 0x62, 0x30, 0x20, 0xbc, 0x78,
	0xae, 0x4f, 0xef, 0x4d, 0xc6, 0xc8, 0xb6, 0x20, 0xe8, 0x85, 0xe7, 0x2a, 0x5c, 0xf0, 0xf9, 0x5f,
	0xed, 0x68, 0x66, 0x1b, 0xbb, 0x7d, 0x65, 0xdc, 0xe3, 0xd0, 0x4b, 0x1c, 0x2e, 0xdd, 0x08, 0xc0,
	0x25, 0xc7, 0x6f, 0xfe, 0xa2, 0x75, 0xaa, 0xe8, 0xba, 0xdc, 0xdf, 0x8c, 0xdc, 0xbf, 0x9e, 0x6d,
	0xb0, 0xf3, 0x0a, 0x9d, 0xbe, 0xf3, 0x1a, 0x17, 0x4b, 0x9d, 0xe1, 0x3e, 0xa1, 0x04, 0xbd, 0x01,
	0x11, 0xf7, 0x6e, 0xdf, 0x71, 0xe0, 0x04, 0xd5, 0xc8, 0xec, 0xf1, 0x49, 0xca, 0x5b, 0xed, 0x16,
	0x13, 0x9b, 0xe1, 0x03, 0x4b, 0xbf, 0x00, 0x70, 0x71, 0x03, 0xb3, 0x6c, 0xa5, 0x98, 0xd7, 0x4c,
	0xd3, 0xcd, 0xab, 0xaf, 0x68, 0xa2, 0x4b, 0xbf, 0x1c, 0xaa, 0x2c, 0x25, 0xe8, 0x11, 0x18, 0x75,
	0x2e, 0x46, 0x75, 0xcd, 0x34, 0x9d, 0x4b, 0x51, 0x48, 0x81, 0x02, 0xc4, 0x29, 0x29, 0x62, 0x30,
	0xe9, 0xd6, 0x78, 0xb5, 0xce, 0x3d, 0xa1, 0x12, 0x6c, 0xab, 0x36, 0x25, 0x6a, 0xdd, 0xd2, 0xb9,
	0x15, 0xdc, 0x99, 0x2f, 0x8c, 0xd2, 0xd0, 0xad, 0xe3, 0xc2, 0x8d, 0x15, 0x6c, 0x2b, 0x98, 0x12,
	0xab, 0x45, 0x71, 0xde, 0xd4, 0x28, 0x55, 0x96, 0xec, 0x3e, 0x2c, 0x25, 0x79, 0x4b, 0xc7, 0xd2,
	0x35, 0x00, 0xcf, 0x8f, 0x62, 0x44, 0xaf, 0xc0, 0x58, 0x57, 0x09, 0xb5, 0xce, 0x21, 0x42, 0xf5,
	0xd8, 0xc0, 0x41, 0xcb, 0x93, 0xae, 0xc7, 0x69, 0xe9, 0xee, 0xb2, 0x73, 0xb6, 0xb3, 0x8e, 0x23,
	0x6b, 0x11, 0x86, 0x85, 0x69, 0xee, 0x75, 0xcf, 0x99, 0x48, 0x1f, 0x01, 0x88, 0x06, 0x03, 0x01,
	0xbd, 0x09, 0x17, 0xfc, 0x01, 0x25, 0x22, 0xd8, 0x5d, 0xfd, 0xc9, 0x89, 0x9a, 0x0c, 0x5e, 0x2e,
	0x73, 0x3c, 0x61, 0xce, 0xd2, 0x7e, 0x30, 0x0f, 0x0f, 0x21, 0xcf, 0x69, 0x74, 0xc5, 0xf8, 0x18,
	0xfd, 0xfe, 0x03, 0x20, 0x1a, 0xdc, 0x7d, 0x6f, 0x5a, 0x83, 0x2f, 0xf4, 0x2a, 0x16, 0x18, 0x75,
	0x15, 0x0b, 0x8e, 0xbb, 0x8a, 0xdd, 0x43, 0x41, 0x90, 0x7e, 0xe4, 0x9c, 0xb1, 0x97, 0xda, 0x66,
	0x0b, 0xdb, 0xda, 0xae, 0x61, 0x1a, 0xcc, 0xc0, 0xf4, 0x2b, 0x58, 0x05, 0xe7, 0xbc, 0xfd, 0x92,
	0xa8, 0x5f, 0xd1, 0xb5, 0x27, 0xc6, 0x65, 0xb3, 0x4b, 0xbe, 0x39, 0xa5, 0x44, 0x3d, 0x1d, 0x51,
	0x6e, 0x01, 0xce, 0xd4, 0xad, 0x16, 0xc3, 0xef, 0x32, 0x34, 0x7b, 0xeb, 0x26, 0x08, 0xdf, 0xbe,
	0x09, 0x42, 0xaf, 0x84, 0x66, 0x43, 0xf1, 0xb0, 0xf4, 0x2f, 0x00, 0xa3, 0x1e, 0x4e, 0xf4, 0x42,
	0x7f, 0xc7, 0xe4, 0x1c, 0x64, 0x0b, 0xee, 0xa9, 0xe5, 0x9a, 0x21, 0x2c, 0xe8, 0x6b, 0xa3, 0x7e,
	0x0e, 0x7c, 0x67, 0x58, 0x24, 0xf7, 0xa1, 0xb0, 0xf1, 0x03, 0x60, 0xff, 0x10, 0x28, 0xdf, 0x07,
	0xdf, 0x91, 0x36, 0xe4, 0x9a, 0xf4, 0xd4, 0xb2, 0x54, 0x29, 0x57, 0xc5, 0xff, 0x4d, 0x39, 0x5b,
	0x10, 0xf3, 0x1d, 0x31, 0x2d, 0xc8, 0x5b, 0x72, 0x4d, 0xe6, 0xa3, 0x72, 0xa5, 0x56, 0x2c, 0x97,
	0xaa, 0x7c, 0xa8, 0xc8, 0x1b, 0xc5, 0x6a, 0x4d, 0x56, 0x1c, 0x82, 0xdc, 0xce, 0x86, 0x60, 0x50,
	0xca, 0x95, 0xf5, 0x62, 0xc9, 0x61, 0xce, 0xd6, 0xf2, 0x9b, 0x7c, 0x90, 0x2f, 0x97, 0x4a, 0x72,
	0x5e, 0x48, 0xaa, 0xca, 0x59, 0xc5, 0x01, 0x16, 0x4b, 0x05, 0xf9, 0x75, 0x3e, 0xa8, 0x29, 0xd9,
	0xbc, 0x2c, 0xbd, 0xd9, 0xbb, 0x6c, 0x9a, 0x43, 0x83, 0x80, 0x12, 0x54, 0x85, 0x67, 0x3a, 0x7e,
	0xa8, 0x5b, 0xf3, 0x9f, 0x1c, 0xe5, 0x7a, 0xaf, 0xa0, 0x03, 0xa5, 0x5f, 0x82, 0xf4, 0xcf, 0x10,
	0x9c, 0xf7, 0x91, 0xf0, 0xac, 0x64, 0x06, 0x33, 0xbb, 0x71, 0xe6, 0x4c, 0x50, 0x12, 0xce, 0xf6,
	0x62, 0xdc, 0x89, 0xb3, 0xde, 0x1c, 0x65, 0x7b, 0x5b, 0x28, 0xf2, 0x23, 0x36, 0x3a, 0x16, 0xf8,
	0x6a, 0x79, 0x87, 0x5c, 0xe9, 0x6d, 0xfd, 0x32, 0x8c, 0xea, 0x98, 0xd6, 0x6d, 0x43, 0x3c, 0xa0,
	0xb9, 0xad, 0xb0, 0x17, 0x84, 0x5e, 0x84, 0xd3, 0x94, 0x69, 0xac, 0x4d, 0x45, 0xbc, 0xc5, 0x06,
	0xae, 0x0c, 0x03, 0x6b, 0x54, 0x05, 0xb5, 0xe2, 0x72, 0xa1, 0x6d, 0x88, 0x9c, 0x91, 0x5a, 0xdf,
	0xd7, 0x5a, 0x0d, 0x7c, 0xf4, 0xb4, 0x12, 0x5d, 0x4b, 0xa6, 0x9d, 0xa7, 0xc8, 0x74, 0xf7, 0x29,
	0x32, 0x5d, 0xeb, 0x3e, 0x45, 0xe6, 0x82, 0xb7, 0xdf, 0x07, 0x4a, 0xdc, 0x61, 0xcd, 0x0b, 0x4e,
	0x91, 0xf9, 0x05, 0x38, 0x5f, 0xb7, 0xb1, 0xb8, 0x85, 0x38, 0x92, 0x66, 0x26, 0x93, 0x34, 0xd7,
	0xe5, 0x12, 0x52, 0xb6, 0x21, 0x32, 0x35, 0xca, 0x54, 0x6b, 0x97, 0x62, 0xbb, 0x83, 0xdd, 0x22,
	0x33, 0x3b, 0xa1, 0x52, 0x9c, 0xb5, 0xec, 0x72, 0x0a, 0x71, 0x2f, 0xc0, 0x90, 0x6d, 0xd0, 0x2b,
	0xee, 0xa5, 0xea, 0xf1, 0x71, 0x1e, 0x52, 0x0c, 0x7a, 0x45, 0x11, 0x1c, 0xa8, 0x00, 0x67, 0x71,
	0xc7, 0xd0, 0x71, 0xab, 0x8e, 0x13, 0x70, 0xe8, 0x1d, 0x77, 0x80, 0x5b, 0x76, 0xe9, 0x95, 0x1e,
	0x27, 0xdf, 0x45, 0x1b, 0x37, 0xb1, 0x6e, 0x38, 0x77, 0xbb, 0x28, 0x2f, 0x3c, 0x8a, 0x17, 0x24,
	0x69, 0x70, 0xb6, 0xbb, 0x32, 0x0f, 0x34, 0x5a, 0xb7, 0x6c, 0x27, 0xd0, 0x02, 0x8a, 0x33, 0x41,
	0x2f, 0xc1, 0xb0, 0x89, 0x3b, 0xd8, 0x74, 0x9b, 0xcd, 0x27, 0x27, 0x31, 0x62, 0x8b, 0x33, 0x28,
	0x0e, 0x9f, 0xf4, 0xb3, 0x00, 0x9c, 0xf3, 0xea, 0x87, 0x36, 0xe1, 0x0c, 0xd5, 0x9a, 0xc4, 0xec,
	0xe5, 0x4b, 0x7a, 0x52, 0xd3, 0xaa, 0x82, 0x4d, 0xe9, 0xb2, 0xa3, 0x57, 0xe1, 0x7c, 0xd7, 0x56,
	0xb5, 0x77, 0x9a, 0xc5, 0xd6, 0x9e, 0x9a, 0x54, 0x9e, 0xb8, 0x4f, 0xcc, 0x61, 0xcf, 0x0c, 0xbd,
	0x38, 0x70, 0xf6, 0x4c, 0xb0, 0xf3, 0x9e, 0xc3, 0xe9, 0xa2, 0xe7, 0x70, 0x0a, 0x4d, 0xc6, 0xdd,
	0x3d, 0xbd, 0x24, 0x19, 0xa2, 0x41, 0x6b, 0xd1, 0x03, 0x70, 0xda, 0xc6, 0x57, 0x55, 0x43, 0xef,
	0x16, 0x00, 0x1b, 0x5f, 0x2d, 0xea, 0x28, 0x01, 0x67, 0x74, 0xcc, 0x34, 0xc3, 0xa4, 0xa2, 0x39,
	0x8a, 0x28, 0xdd, 0xe9, 0x8a, 0x0d, 0x1f, 0x3c, 0xe6, 0xee, 0x84, 0xd2, 0x70, 0x25, 0x9b, 0xaf,
	0x15, 0x2f, 0x15, 0x6b, 0x97, 0xd5, 0x6d, 0xb9, 0xa6, 0x14, 0xf3, 0x6a, 0xed, 0x72, 0x45, 0x56,
	0xab, 0x72, 0x5e, 0x95, 0x2f, 0xc9, 0xa5, 0x5a, 0x55, 0xad, 0xc8, 0x4a, 0x5e, 0x2e, 0xd5, 0xb2,
	0x1b, 0x72, 0x7c, 0x0a, 0x3d, 0x01, 0x1f, 0x1b, 0x4a, 0xaf, 0xc8, 0xaf, 0x7a, 0x09, 0xc1, 0xca,
	0x7b, 0x4e, 0xd5, 0xea, 0x6d, 0x3e, 0x5a, 0x80, 0x67, 0x94, 0x62, 0xf5, 0x5b, 0xea, 0x96, 0x7c,
	0x49, 0xde, 0x52, 0x4b, 0xe5, 0x12, 0x17, 0x87, 0x60, 0xcc, 0x03, 0xdc, 0x2a, 0xbf, 0x16, 0x07,
	0x7d, 0xb0, 0x6d, 0xb9, 0x10, 0x0f, 0xf4, 0x31, 0x6f, 0x16, 0x37, 0x36, 0xe3, 0x41, 0xf4, 0x20,
	0x5c, 0xf0, 0x00, 0xf3, 0x4a, 0xb1, 0x56, 0xcc, 0x67, 0xb7, 0xe2, 0xa1, 0x95, 0x2d, 0x18, 0xef,
	0xdf, 0x54, 0x94, 0x84, 0x4b, 0xf2, 0xa5, 0x62, 0x41, 0x2e, 0xe5, 0xe5, 0x9e, 0xc6, 0x3b, 0x72,
	0xb5, 0x56, 0x8d, 0x4f, 0xa1, 0xf3, 0x30, 0xe1, 0xc7, 0x1d, 0x59, 0x1f, 0x07, 0x2b, 0x97, 0x61,
	0xd4, 0x53, 0x11, 0x51, 0x02, 0x2e, 0xe6, 0xcb, 0xa5, 0x9a, 0xfc, 0x7a, 0x4d, 0xcd, 0x56, 0x8a,
	0xaa, 0x5c, 0x2a, 0x54, 0xca, 0xc5, 0x52, 0x2d, 0x3e, 0xd5, 0x8f, 0xc9, 0x65, 0xab, 0x72, 0x25,
	0x5b, 0xdb, 0x8c, 0x03, 0xb4, 0x04, 0x91, 0x17, 0x53, 0x28, 0x6f, 0x67, 0x8b, 0xa5, 0x78, 0x60,
	0xa5, 0x0c, 0xe1, 0x51, 0x21, 0x44, 0x67, 0x60, 0xb4, 0x5a, 0xcb, 0xd6, 0x76, 0xaa, 0x5d, 0xef,
	0x1c, 0x01, 0xca, 0x15, 0xb9, 0x14, 0x07, 0xe8, 0x11, 0xf8, 0x90, 0x0b, 0x50, 0xe4, 0x6a, 0x79,
	0x6b, 0x87, 0x1f, 0x75, 0x6a, 0xbe, 0x5c, 0x5a, 0x2f, 0x2a, 0xdc, 0x4f, 0xc1, 0xb5, 0x3b, 0x08,
	0xc6, 0xc4, 0x4d, 0x33, 0x2f, 0x3e, 0x27, 0x65, 0x2b, 0x45, 0xf4, 0x7b, 0x00, 0xcf, 0x38, 0x0d,
	0xf8, 0xd1, 0xb7, 0x86, 0x6f, 0x4c, 0xd8, 0x0a, 0xf0, 0xd6, 0x26, 0x39, 0x39, 0x31, 0x25, 0x92,
	0xfe, 0xe9, 0x27, 0x01, 0x70, 0xf8, 0xdb, 0xc4, 0x42, 0x07, 0xd3, 0x55, 0xc3, 0x5a, 0x6d, 0x60,
	0x7e, 0x70, 0x99, 0xab, 0x36, 0xd6, 0xf4, 0xeb, 0x7f, 0xfc, 0xcb, 0x8f, 0x03, 0x79, 0x94, 0x75,
	0x3f, 0x7c, 0x65, 0x7a, 0xfd, 0x11, 0xcd, 0x7c, 0xb7, 0x37, 0x7e, 0xdf, 0xf7, 0x8d, 0xcc, 0xc5,
	0xbc, 0x9f, 0xf1, 0xf6, 0x33, 0x14, 0xdd, 0x06, 0x30, 0xe6, 0xb7, 0x09, 0xad, 0x4c, 0xa8, 0x25,
	0xb7, 0x68, 0x62, 0x5a, 0x4a, 0xa4, 0xbd, 0x71, 0x06, 0xc9, 0xd2, 0xcb, 0xf7, 0x6a, 0xd0, 0x45,
	0xb0, 0x82, 0xfe, 0x04, 0xe0, 0x59, 0xbf, 0x49, 0x95, 0xc2, 0x3a, 0x5a, 0x9d, 0x50, 0x53, 0xe7,
	0xd5, 0x3d, 0x79, 0x12, 0x72, 0x4a, 0xa4, 0xc6, 0x38, 0xdb, 0xd6, 0x51, 0xe1, 0x5e, 0x6d, 0xcb,
	0x10, 0x7d, 0x0f, 0xfd, 0x17, 0xc0, 0xa4, 0xdf, 0x38, 0xef, 0x5b, 0x2e, 0x7a, 0x6e, 0x42, 0xb5,
	0xfb, 0x9e, 0xf5, 0x93, 0xa7, 0xe2, 0xa3, 0x44, 0xba, 0x3a, 0xce, 0xee, 0x0a, 0x2a, 0xdd, 0xb3,
	0xdd, 0xa6, 0x58, 0xd4, 0x7d, 0x96, 0x46, 0xbf, 0x71, 0x22, 0xd6, 0xf3, 0x79, 0x65, 0x74, 0xc4,
	0xfa, 0xbf, 0xf8, 0x24, 0x17, 0xbb, 0x47, 0x86, 0x46, 0x0c, 0x71, 0xb3, 0xcc, 0x59, 0xfa, 0xc1,
	0x97, 0x62, 0x07, 0xcd, 0x78, 0x3f, 0x00, 0xa1, 0xbf, 0xb9, 0xd7, 0xf9, 0xfe, 0x4f, 0x9d, 0x68,
	0xf4, 0x5b, 0xd9, 0x90, 0x8f, 0xac, 0xc9, 0x13, 0x72, 0x50, 0x22, 0xbd, 0x3d, 0xce, 0xde, 0x22,
	0xda, 0xb8, 0x0f, 0xf6, 0x0a, 0x7b, 0xfe, 0x0d, 0x20, 0x1a, 0x7c, 0x29, 0x44, 0xcf, 0x8c, 0x52,
	0x7a, 0xe8, 0xf3, 0x6b, 0xf2, 0xa4, 0x2c, 0x94, 0x48, 0xef, 0x8d, 0x33, 0xf4, 0xb2, 0x54, 0xbb,
	0x0f, 0x86, 0x3a, 0xd7, 0xf7, 0x8c, 0x78, 0xf7, 0xe4, 0xad, 0x01, 0xe6, 0x85, 0xe8, 0x7a, 0x00,
	0x2e, 0x0c, 0x79, 0xd6, 0x42, 0x6b, 0xe3, 0xcd, 0xe8, 0x7f, 0x1b, 0x4c, 0x9e, 0x98, 0x87, 0x12,
	0xe9, 0x3a, 0x18, 0x67, 0xbc, 0x26, 0xbd, 0x71, 0x7f, 0x8d, 0xf7, 0x3f, 0xab, 0x70, 0x27, 0x5c,
	0x0b, 0x74, 0xab, 0xb1, 0xe7, 0xd5, 0x6a, 0x74, 0x8c, 0x0f, 0x7b, 0x91, 0x4b, 0x9e, 0x90, 0x83,
	0x12, 0xe9, 0x07, 0x63, 0xcd, 0xc7, 0xd2, 0x5b, 0xf7, 0xcf, 0x7c, 0xf1, 0xf8, 0xa6, 0xee, 0x1e,
	0xa8, 0xb6, 0xfb, 0x54, 0x25, 0x1e, 0xb6, 0xb8, 0x0b, 0xfe, 0xea, 0x24, 0x40, 0xdf, 0x35, 0x77,
	0x6c, 0x02, 0x0c, 0xbe, 0x8d, 0x24, 0x4f, 0xca, 0x42, 0x89, 0x64, 0x8c, 0x73, 0xc2, 0xa6, 0x94,
	0x3f, 0x8d, 0x13, 0xfa, 0x2e, 0xd7, 0x17, 0xc1, 0x4a, 0x32, 0x73, 0xeb, 0x26, 0x08, 0xfe, 0xe1,
	0x26, 0x78, 0x74, 0x84, 0x92, 0xe5, 0xdd, 0xb7, 0x71, 0x9d, 0x5d, 0xff, 0x5d, 0x22, 0xf0, 0x34,
	0xc8, 0x7d, 0x00, 0x6e, 0xdf, 0x49, 0x4d, 0x7d, 0x76, 0x27, 0x35, 0xf5, 0xf9, 0x9d, 0x14, 0xb8,
	0x76, 0x98, 0x02, 0x1f, 0x1f, 0xa6, 0xc0, 0xa7, 0x87, 0x29, 0x70, 0xfb, 0x30, 0x05, 0xfe, 0x7c,
	0x98, 0x02, 0x7f, 0x3f, 0x4c, 0x4d, 0x7d, 0x7e, 0x98, 0x02, 0x1f, 0xde, 0x4d, 0x4d, 0xdd, 0xba,
	0x9b, 0x02, 0xb7, 0xef, 0xa6, 0xa6, 0x3e, 0xbb, 0x9b, 0x9a, 0xfa, 0x76, 0xa5, 0x61, 0x91, 0x2b,
	0x8d, 0x74, 0xc7, 0x32, 0x19, 0xb6, 0x6d, 0x2d, 0xdd, 0xa6, 0x19, 0x31, 0xd8, 0xb3, 0xec, 0xe6,
	0x2a, 0xb1, 0x2d, 0xde, 0xb0, 0xda, 0xab, 0x5d, 0x74, 0x86, 0xec, 0x36, 0xac, 0x0c, 0x7e, 0x97,
	0xb9, 0x3f, 0x60, 0x19, 0xf2, 0x1b, 0xa2, 0xdd, 0x69, 0x71, 0x87, 0x78, 0xf6, 0x7f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xf2, 0x20, 0xf2, 0x3d, 0x68, 0x24, 0x00, 0x00,
}

func (x APIEPActivityMetricType) String() string {
	s, ok := APIEPActivityMetricType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x VulnRiskLevel) String() string {
	s, ok := VulnRiskLevel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x VulnEvidenceType) String() string {
	s, ok := VulnEvidenceType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x VulnContext) String() string {
	s, ok := VulnContext_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x VulnStatus) String() string {
	s, ok := VulnStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ApiEndpointsStatsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiEndpointsStatsReq)
	if !ok {
		that2, ok := that.(ApiEndpointsStatsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *ApiEndpointsStatsRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiEndpointsStatsRsp)
	if !ok {
		that2, ok := that.(ApiEndpointsStatsRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalEndpoints != that1.TotalEndpoints {
		return false
	}
	if this.Discovered != that1.Discovered {
		return false
	}
	if this.Inventory != that1.Inventory {
		return false
	}
	if this.Shadow != that1.Shadow {
		return false
	}
	if this.PiiDetected != that1.PiiDetected {
		return false
	}
	return true
}
func (this *APIEndpointsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEndpointsReq)
	if !ok {
		that2, ok := that.(APIEndpointsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.ApiEndpointInfoRequest) != len(that1.ApiEndpointInfoRequest) {
		return false
	}
	for i := range this.ApiEndpointInfoRequest {
		if this.ApiEndpointInfoRequest[i] != that1.ApiEndpointInfoRequest[i] {
			return false
		}
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if len(this.ApiepCategory) != len(that1.ApiepCategory) {
		return false
	}
	for i := range this.ApiepCategory {
		if this.ApiepCategory[i] != that1.ApiepCategory[i] {
			return false
		}
	}
	return true
}
func (this *SwaggerSpecReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SwaggerSpecReq)
	if !ok {
		that2, ok := that.(SwaggerSpecReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	return true
}
func (this *SwaggerSpecRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SwaggerSpecRsp)
	if !ok {
		that2, ok := that.(SwaggerSpecRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SwaggerSpec != that1.SwaggerSpec {
		return false
	}
	return true
}
func (this *APIEndpointPDFReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEndpointPDFReq)
	if !ok {
		that2, ok := that.(APIEndpointPDFReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.CollapsedUrl != that1.CollapsedUrl {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	return true
}
func (this *APIEndpointLearntSchemaReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEndpointLearntSchemaReq)
	if !ok {
		that2, ok := that.(APIEndpointLearntSchemaReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.CollapsedUrl != that1.CollapsedUrl {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if len(this.ApiEndpointInfoRequest) != len(that1.ApiEndpointInfoRequest) {
		return false
	}
	for i := range this.ApiEndpointInfoRequest {
		if this.ApiEndpointInfoRequest[i] != that1.ApiEndpointInfoRequest[i] {
			return false
		}
	}
	return true
}
func (this *APIEndpointsRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEndpointsRsp)
	if !ok {
		that2, ok := that.(APIEndpointsRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ApiepList) != len(that1.ApiepList) {
		return false
	}
	for i := range this.ApiepList {
		if !this.ApiepList[i].Equal(that1.ApiepList[i]) {
			return false
		}
	}
	return true
}
func (this *APIEndpointPDFRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEndpointPDFRsp)
	if !ok {
		that2, ok := that.(APIEndpointPDFRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PdfInfo.Equal(that1.PdfInfo) {
		return false
	}
	return true
}
func (this *APIEndpointLearntSchemaRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEndpointLearntSchemaRsp)
	if !ok {
		that2, ok := that.(APIEndpointLearntSchemaRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DiscoveredSchema.Equal(that1.DiscoveredSchema) {
		return false
	}
	if this.DiscoveredOpenapiSpec != that1.DiscoveredOpenapiSpec {
		return false
	}
	if len(this.SensitiveData) != len(that1.SensitiveData) {
		return false
	}
	for i := range this.SensitiveData {
		if !this.SensitiveData[i].Equal(that1.SensitiveData[i]) {
			return false
		}
	}
	if this.InventoryOpenapiSpec != that1.InventoryOpenapiSpec {
		return false
	}
	if !this.PdfInfo.Equal(that1.PdfInfo) {
		return false
	}
	if !this.Authentication.Equal(that1.Authentication) {
		return false
	}
	return true
}
func (this *APIEndpointReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEndpointReq)
	if !ok {
		that2, ok := that.(APIEndpointReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.ApiEndpointInfoRequest) != len(that1.ApiEndpointInfoRequest) {
		return false
	}
	for i := range this.ApiEndpointInfoRequest {
		if this.ApiEndpointInfoRequest[i] != that1.ApiEndpointInfoRequest[i] {
			return false
		}
	}
	if this.CollapsedUrl != that1.CollapsedUrl {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	return true
}
func (this *APIEndpointRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEndpointRsp)
	if !ok {
		that2, ok := that.(APIEndpointRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Apiep.Equal(that1.Apiep) {
		return false
	}
	return true
}
func (this *GetTopAPIEndpointsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTopAPIEndpointsReq)
	if !ok {
		that2, ok := that.(GetTopAPIEndpointsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.ApiepSummaryFilter.Equal(that1.ApiepSummaryFilter) {
		return false
	}
	if this.TopByMetric != that1.TopByMetric {
		return false
	}
	if this.Topk != that1.Topk {
		return false
	}
	return true
}
func (this *GetTopAPIEndpointsRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTopAPIEndpointsRsp)
	if !ok {
		that2, ok := that.(GetTopAPIEndpointsRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TopApieps) != len(that1.TopApieps) {
		return false
	}
	for i := range this.TopApieps {
		if !this.TopApieps[i].Equal(that1.TopApieps[i]) {
			return false
		}
	}
	return true
}
func (this *APIEPActivityMetrics) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEPActivityMetrics)
	if !ok {
		that2, ok := that.(APIEPActivityMetrics)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiepUrl != that1.ApiepUrl {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if this.TopByMetricValue != that1.TopByMetricValue {
		return false
	}
	return true
}
func (this *GetTopSensitiveDataReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTopSensitiveDataReq)
	if !ok {
		that2, ok := that.(GetTopSensitiveDataReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if len(this.ApiepCategory) != len(that1.ApiepCategory) {
		return false
	}
	for i := range this.ApiepCategory {
		if this.ApiepCategory[i] != that1.ApiepCategory[i] {
			return false
		}
	}
	if this.Topk != that1.Topk {
		return false
	}
	return true
}
func (this *GetTopSensitiveDataRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTopSensitiveDataRsp)
	if !ok {
		that2, ok := that.(GetTopSensitiveDataRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TopSensitiveData) != len(that1.TopSensitiveData) {
		return false
	}
	for i := range this.TopSensitiveData {
		if !this.TopSensitiveData[i].Equal(that1.TopSensitiveData[i]) {
			return false
		}
	}
	return true
}
func (this *GetAPICallSummaryReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAPICallSummaryReq)
	if !ok {
		that2, ok := that.(GetAPICallSummaryReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.ApiepSummaryFilter.Equal(that1.ApiepSummaryFilter) {
		return false
	}
	return true
}
func (this *GetAPICallSummaryRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAPICallSummaryRsp)
	if !ok {
		that2, ok := that.(GetAPICallSummaryRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalCalls != that1.TotalCalls {
		return false
	}
	if len(this.RequestCountPerRspCode) != len(that1.RequestCountPerRspCode) {
		return false
	}
	for i := range this.RequestCountPerRspCode {
		if !this.RequestCountPerRspCode[i].Equal(that1.RequestCountPerRspCode[i]) {
			return false
		}
	}
	return true
}
func (this *RequestCountPerResponseClass) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestCountPerResponseClass)
	if !ok {
		that2, ok := that.(RequestCountPerResponseClass)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RspCodeClass != that1.RspCodeClass {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *SensitiveDataCount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SensitiveDataCount)
	if !ok {
		that2, ok := that.(SensitiveDataCount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SensitiveDataType != that1.SensitiveDataType {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *APIEPSummaryFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEPSummaryFilter)
	if !ok {
		that2, ok := that.(APIEPSummaryFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if len(this.ApiepCategory) != len(that1.ApiepCategory) {
		return false
	}
	for i := range this.ApiepCategory {
		if this.ApiepCategory[i] != that1.ApiepCategory[i] {
			return false
		}
	}
	return true
}
func (this *GetVulnerabilitiesReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetVulnerabilitiesReq)
	if !ok {
		that2, ok := that.(GetVulnerabilitiesReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.Context == nil {
		if this.Context != nil {
			return false
		}
	} else if this.Context == nil {
		return false
	} else if !this.Context.Equal(that1.Context) {
		return false
	}
	return true
}
func (this *GetVulnerabilitiesReq_ApiEndpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetVulnerabilitiesReq_ApiEndpoint)
	if !ok {
		that2, ok := that.(GetVulnerabilitiesReq_ApiEndpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiEndpoint.Equal(that1.ApiEndpoint) {
		return false
	}
	return true
}
func (this *APIEndpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEndpoint)
	if !ok {
		that2, ok := that.(APIEndpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CollapsedUrl != that1.CollapsedUrl {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	return true
}
func (this *GetVulnerabilitiesRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetVulnerabilitiesRsp)
	if !ok {
		that2, ok := that.(GetVulnerabilitiesRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Vulnerabilities) != len(that1.Vulnerabilities) {
		return false
	}
	for i := range this.Vulnerabilities {
		if !this.Vulnerabilities[i].Equal(that1.Vulnerabilities[i]) {
			return false
		}
	}
	return true
}
func (this *Vulnerability) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Vulnerability)
	if !ok {
		that2, ok := that.(Vulnerability)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Category != that1.Category {
		return false
	}
	if this.Context != that1.Context {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.StatusChangeTime.Equal(that1.StatusChangeTime) {
		return false
	}
	if !this.CreationTime.Equal(that1.CreationTime) {
		return false
	}
	if !this.LastObservedTime.Equal(that1.LastObservedTime) {
		return false
	}
	if !this.Risk.Equal(that1.Risk) {
		return false
	}
	if !this.Evidence.Equal(that1.Evidence) {
		return false
	}
	if len(this.Remediation) != len(that1.Remediation) {
		return false
	}
	for i := range this.Remediation {
		if this.Remediation[i] != that1.Remediation[i] {
			return false
		}
	}
	return true
}
func (this *VulnRisk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VulnRisk)
	if !ok {
		that2, ok := that.(VulnRisk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	return true
}
func (this *VulnEvidence) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VulnEvidence)
	if !ok {
		that2, ok := that.(VulnEvidence)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Samples) != len(that1.Samples) {
		return false
	}
	for i := range this.Samples {
		if !this.Samples[i].Equal(that1.Samples[i]) {
			return false
		}
	}
	if this.EvidenceType != that1.EvidenceType {
		return false
	}
	if !this.StartTime.Equal(that1.StartTime) {
		return false
	}
	if !this.EndTime.Equal(that1.EndTime) {
		return false
	}
	return true
}
func (this *VulnEvidenceSample) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VulnEvidenceSample)
	if !ok {
		that2, ok := that.(VulnEvidenceSample)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ReqId != that1.ReqId {
		return false
	}
	if len(this.Details) != len(that1.Details) {
		return false
	}
	for i := range this.Details {
		if this.Details[i] != that1.Details[i] {
			return false
		}
	}
	return true
}
func (this *ApiEndpointsStatsReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&virtual_host.ApiEndpointsStatsReq{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiEndpointsStatsRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&virtual_host.ApiEndpointsStatsRsp{")
	s = append(s, "TotalEndpoints: "+fmt.Sprintf("%#v", this.TotalEndpoints)+",\n")
	s = append(s, "Discovered: "+fmt.Sprintf("%#v", this.Discovered)+",\n")
	s = append(s, "Inventory: "+fmt.Sprintf("%#v", this.Inventory)+",\n")
	s = append(s, "Shadow: "+fmt.Sprintf("%#v", this.Shadow)+",\n")
	s = append(s, "PiiDetected: "+fmt.Sprintf("%#v", this.PiiDetected)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEndpointsReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&virtual_host.APIEndpointsReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ApiEndpointInfoRequest: "+fmt.Sprintf("%#v", this.ApiEndpointInfoRequest)+",\n")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "ApiepCategory: "+fmt.Sprintf("%#v", this.ApiepCategory)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SwaggerSpecReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&virtual_host.SwaggerSpecReq{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SwaggerSpecRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_host.SwaggerSpecRsp{")
	s = append(s, "SwaggerSpec: "+fmt.Sprintf("%#v", this.SwaggerSpec)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEndpointPDFReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&virtual_host.APIEndpointPDFReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "CollapsedUrl: "+fmt.Sprintf("%#v", this.CollapsedUrl)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEndpointLearntSchemaReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&virtual_host.APIEndpointLearntSchemaReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "CollapsedUrl: "+fmt.Sprintf("%#v", this.CollapsedUrl)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	s = append(s, "ApiEndpointInfoRequest: "+fmt.Sprintf("%#v", this.ApiEndpointInfoRequest)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEndpointsRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_host.APIEndpointsRsp{")
	if this.ApiepList != nil {
		s = append(s, "ApiepList: "+fmt.Sprintf("%#v", this.ApiepList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEndpointPDFRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_host.APIEndpointPDFRsp{")
	if this.PdfInfo != nil {
		s = append(s, "PdfInfo: "+fmt.Sprintf("%#v", this.PdfInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEndpointLearntSchemaRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&virtual_host.APIEndpointLearntSchemaRsp{")
	if this.DiscoveredSchema != nil {
		s = append(s, "DiscoveredSchema: "+fmt.Sprintf("%#v", this.DiscoveredSchema)+",\n")
	}
	s = append(s, "DiscoveredOpenapiSpec: "+fmt.Sprintf("%#v", this.DiscoveredOpenapiSpec)+",\n")
	if this.SensitiveData != nil {
		s = append(s, "SensitiveData: "+fmt.Sprintf("%#v", this.SensitiveData)+",\n")
	}
	s = append(s, "InventoryOpenapiSpec: "+fmt.Sprintf("%#v", this.InventoryOpenapiSpec)+",\n")
	if this.PdfInfo != nil {
		s = append(s, "PdfInfo: "+fmt.Sprintf("%#v", this.PdfInfo)+",\n")
	}
	if this.Authentication != nil {
		s = append(s, "Authentication: "+fmt.Sprintf("%#v", this.Authentication)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEndpointReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&virtual_host.APIEndpointReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ApiEndpointInfoRequest: "+fmt.Sprintf("%#v", this.ApiEndpointInfoRequest)+",\n")
	s = append(s, "CollapsedUrl: "+fmt.Sprintf("%#v", this.CollapsedUrl)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEndpointRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_host.APIEndpointRsp{")
	if this.Apiep != nil {
		s = append(s, "Apiep: "+fmt.Sprintf("%#v", this.Apiep)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTopAPIEndpointsReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&virtual_host.GetTopAPIEndpointsReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.ApiepSummaryFilter != nil {
		s = append(s, "ApiepSummaryFilter: "+fmt.Sprintf("%#v", this.ApiepSummaryFilter)+",\n")
	}
	s = append(s, "TopByMetric: "+fmt.Sprintf("%#v", this.TopByMetric)+",\n")
	s = append(s, "Topk: "+fmt.Sprintf("%#v", this.Topk)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTopAPIEndpointsRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_host.GetTopAPIEndpointsRsp{")
	if this.TopApieps != nil {
		s = append(s, "TopApieps: "+fmt.Sprintf("%#v", this.TopApieps)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEPActivityMetrics) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&virtual_host.APIEPActivityMetrics{")
	s = append(s, "ApiepUrl: "+fmt.Sprintf("%#v", this.ApiepUrl)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "TopByMetricValue: "+fmt.Sprintf("%#v", this.TopByMetricValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTopSensitiveDataReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&virtual_host.GetTopSensitiveDataReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	s = append(s, "ApiepCategory: "+fmt.Sprintf("%#v", this.ApiepCategory)+",\n")
	s = append(s, "Topk: "+fmt.Sprintf("%#v", this.Topk)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTopSensitiveDataRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_host.GetTopSensitiveDataRsp{")
	if this.TopSensitiveData != nil {
		s = append(s, "TopSensitiveData: "+fmt.Sprintf("%#v", this.TopSensitiveData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAPICallSummaryReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&virtual_host.GetAPICallSummaryReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.ApiepSummaryFilter != nil {
		s = append(s, "ApiepSummaryFilter: "+fmt.Sprintf("%#v", this.ApiepSummaryFilter)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAPICallSummaryRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&virtual_host.GetAPICallSummaryRsp{")
	s = append(s, "TotalCalls: "+fmt.Sprintf("%#v", this.TotalCalls)+",\n")
	if this.RequestCountPerRspCode != nil {
		s = append(s, "RequestCountPerRspCode: "+fmt.Sprintf("%#v", this.RequestCountPerRspCode)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestCountPerResponseClass) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&virtual_host.RequestCountPerResponseClass{")
	s = append(s, "RspCodeClass: "+fmt.Sprintf("%#v", this.RspCodeClass)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SensitiveDataCount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&virtual_host.SensitiveDataCount{")
	s = append(s, "SensitiveDataType: "+fmt.Sprintf("%#v", this.SensitiveDataType)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEPSummaryFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&virtual_host.APIEPSummaryFilter{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "ApiepCategory: "+fmt.Sprintf("%#v", this.ApiepCategory)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetVulnerabilitiesReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&virtual_host.GetVulnerabilitiesReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetVulnerabilitiesReq_ApiEndpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetVulnerabilitiesReq_ApiEndpoint{` +
		`ApiEndpoint:` + fmt.Sprintf("%#v", this.ApiEndpoint) + `}`}, ", ")
	return s
}
func (this *APIEndpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&virtual_host.APIEndpoint{")
	s = append(s, "CollapsedUrl: "+fmt.Sprintf("%#v", this.CollapsedUrl)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetVulnerabilitiesRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_host.GetVulnerabilitiesRsp{")
	if this.Vulnerabilities != nil {
		s = append(s, "Vulnerabilities: "+fmt.Sprintf("%#v", this.Vulnerabilities)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vulnerability) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&virtual_host.Vulnerability{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.StatusChangeTime != nil {
		s = append(s, "StatusChangeTime: "+fmt.Sprintf("%#v", this.StatusChangeTime)+",\n")
	}
	if this.CreationTime != nil {
		s = append(s, "CreationTime: "+fmt.Sprintf("%#v", this.CreationTime)+",\n")
	}
	if this.LastObservedTime != nil {
		s = append(s, "LastObservedTime: "+fmt.Sprintf("%#v", this.LastObservedTime)+",\n")
	}
	if this.Risk != nil {
		s = append(s, "Risk: "+fmt.Sprintf("%#v", this.Risk)+",\n")
	}
	if this.Evidence != nil {
		s = append(s, "Evidence: "+fmt.Sprintf("%#v", this.Evidence)+",\n")
	}
	s = append(s, "Remediation: "+fmt.Sprintf("%#v", this.Remediation)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VulnRisk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&virtual_host.VulnRisk{")
	s = append(s, "Score: "+fmt.Sprintf("%#v", this.Score)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VulnEvidence) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&virtual_host.VulnEvidence{")
	if this.Samples != nil {
		s = append(s, "Samples: "+fmt.Sprintf("%#v", this.Samples)+",\n")
	}
	s = append(s, "EvidenceType: "+fmt.Sprintf("%#v", this.EvidenceType)+",\n")
	if this.StartTime != nil {
		s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	}
	if this.EndTime != nil {
		s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VulnEvidenceSample) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&virtual_host.VulnEvidenceSample{")
	s = append(s, "ReqId: "+fmt.Sprintf("%#v", this.ReqId)+",\n")
	s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicApiepCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ApiepCustomAPIClient is the client API for ApiepCustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApiepCustomAPIClient interface {
	// Get API endpoints Per Virtual Host
	//
	// x-displayName: "Get API Endpoints"
	// Get all autodiscovered API endpoints for Virtual Host
	GetAPIEndpoints(ctx context.Context, in *APIEndpointsReq, opts ...grpc.CallOption) (*APIEndpointsRsp, error)
	// Get API endpoint Per Virtual Host
	//
	// x-displayName: "Get API Endpoint"
	// Get API endpoint for Virtual Host
	GetAPIEndpoint(ctx context.Context, in *APIEndpointReq, opts ...grpc.CallOption) (*APIEndpointRsp, error)
	// Get PDF for API endpoint Per Virtual Host
	//
	// x-displayName: "Get API Endpoint PDF"
	// Get PDF of all metrics for a given auto discovered API endpoint for Virtual Host
	GetAPIEndpointPDF(ctx context.Context, in *APIEndpointPDFReq, opts ...grpc.CallOption) (*APIEndpointPDFRsp, error)
	// Get Learnt Schema per API endpoint
	//
	// x-displayName: "Get Get Learnt Schema per API endpoint"
	// Get Learnt Schema per API endpoint for a given auto discovered API endpoint for Virtual Host
	GetAPIEndpointLearntSchema(ctx context.Context, in *APIEndpointLearntSchemaReq, opts ...grpc.CallOption) (*APIEndpointLearntSchemaRsp, error)
	// Get Swagger Spec for App Type
	//
	// x-displayName: "Get Swagger Spec for App Type"
	// Get the corresponding Swagger spec for the given app type
	GetSwaggerSpec(ctx context.Context, in *SwaggerSpecReq, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// Get Api Endpoints Stats
	//
	// x-displayName: "Get Api Endpoints Stats for Virtual Host"
	// Get api endpoints stats for the given Virtual Host
	GetApiEndpointsStats(ctx context.Context, in *ApiEndpointsStatsReq, opts ...grpc.CallOption) (*ApiEndpointsStatsRsp, error)
	// GetTopAPIEndpoints
	//
	// x-displayName: "Get Top APIs Endpoints for Virtual Host"
	// Top APIs by requested activity metric. For example most-active APIs or most-attacked APIs.
	GetTopAPIEndpoints(ctx context.Context, in *GetTopAPIEndpointsReq, opts ...grpc.CallOption) (*GetTopAPIEndpointsRsp, error)
	// GetTopSensitiveData
	//
	// x-displayName: "Get Sensitive Data Summary for Virtual Host"
	// Get sensitive data summary for the given Virtual Host.
	// For each sensitive data type (e.g. SSN, CC, Email) we count the number of APIEPs having the respective
	// sensitive data type and return top k (max 10) types with maximum APIEPs.
	GetTopSensitiveData(ctx context.Context, in *GetTopSensitiveDataReq, opts ...grpc.CallOption) (*GetTopSensitiveDataRsp, error)
	// GetAPICallSummary
	//
	// x-displayName: "Get Total API Calls for Virtual Host"
	// Get total api calls for the given Virtual Host
	GetAPICallSummary(ctx context.Context, in *GetAPICallSummaryReq, opts ...grpc.CallOption) (*GetAPICallSummaryRsp, error)
	// GetVulnerabilities
	//
	// x-displayName: "Get Vulnerabilities for Virtual Host"
	// Get vulnerabilities for the given Virtual Host
	GetVulnerabilities(ctx context.Context, in *GetVulnerabilitiesReq, opts ...grpc.CallOption) (*GetVulnerabilitiesRsp, error)
}

type apiepCustomAPIClient struct {
	cc *grpc.ClientConn
}

func NewApiepCustomAPIClient(cc *grpc.ClientConn) ApiepCustomAPIClient {
	return &apiepCustomAPIClient{cc}
}

func (c *apiepCustomAPIClient) GetAPIEndpoints(ctx context.Context, in *APIEndpointsReq, opts ...grpc.CallOption) (*APIEndpointsRsp, error) {
	out := new(APIEndpointsRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.virtual_host.ApiepCustomAPI/GetAPIEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiepCustomAPIClient) GetAPIEndpoint(ctx context.Context, in *APIEndpointReq, opts ...grpc.CallOption) (*APIEndpointRsp, error) {
	out := new(APIEndpointRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.virtual_host.ApiepCustomAPI/GetAPIEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiepCustomAPIClient) GetAPIEndpointPDF(ctx context.Context, in *APIEndpointPDFReq, opts ...grpc.CallOption) (*APIEndpointPDFRsp, error) {
	out := new(APIEndpointPDFRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.virtual_host.ApiepCustomAPI/GetAPIEndpointPDF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiepCustomAPIClient) GetAPIEndpointLearntSchema(ctx context.Context, in *APIEndpointLearntSchemaReq, opts ...grpc.CallOption) (*APIEndpointLearntSchemaRsp, error) {
	out := new(APIEndpointLearntSchemaRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.virtual_host.ApiepCustomAPI/GetAPIEndpointLearntSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiepCustomAPIClient) GetSwaggerSpec(ctx context.Context, in *SwaggerSpecReq, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/ves.io.schema.virtual_host.ApiepCustomAPI/GetSwaggerSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiepCustomAPIClient) GetApiEndpointsStats(ctx context.Context, in *ApiEndpointsStatsReq, opts ...grpc.CallOption) (*ApiEndpointsStatsRsp, error) {
	out := new(ApiEndpointsStatsRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.virtual_host.ApiepCustomAPI/GetApiEndpointsStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiepCustomAPIClient) GetTopAPIEndpoints(ctx context.Context, in *GetTopAPIEndpointsReq, opts ...grpc.CallOption) (*GetTopAPIEndpointsRsp, error) {
	out := new(GetTopAPIEndpointsRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.virtual_host.ApiepCustomAPI/GetTopAPIEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiepCustomAPIClient) GetTopSensitiveData(ctx context.Context, in *GetTopSensitiveDataReq, opts ...grpc.CallOption) (*GetTopSensitiveDataRsp, error) {
	out := new(GetTopSensitiveDataRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.virtual_host.ApiepCustomAPI/GetTopSensitiveData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiepCustomAPIClient) GetAPICallSummary(ctx context.Context, in *GetAPICallSummaryReq, opts ...grpc.CallOption) (*GetAPICallSummaryRsp, error) {
	out := new(GetAPICallSummaryRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.virtual_host.ApiepCustomAPI/GetAPICallSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiepCustomAPIClient) GetVulnerabilities(ctx context.Context, in *GetVulnerabilitiesReq, opts ...grpc.CallOption) (*GetVulnerabilitiesRsp, error) {
	out := new(GetVulnerabilitiesRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.virtual_host.ApiepCustomAPI/GetVulnerabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiepCustomAPIServer is the server API for ApiepCustomAPI service.
type ApiepCustomAPIServer interface {
	// Get API endpoints Per Virtual Host
	//
	// x-displayName: "Get API Endpoints"
	// Get all autodiscovered API endpoints for Virtual Host
	GetAPIEndpoints(context.Context, *APIEndpointsReq) (*APIEndpointsRsp, error)
	// Get API endpoint Per Virtual Host
	//
	// x-displayName: "Get API Endpoint"
	// Get API endpoint for Virtual Host
	GetAPIEndpoint(context.Context, *APIEndpointReq) (*APIEndpointRsp, error)
	// Get PDF for API endpoint Per Virtual Host
	//
	// x-displayName: "Get API Endpoint PDF"
	// Get PDF of all metrics for a given auto discovered API endpoint for Virtual Host
	GetAPIEndpointPDF(context.Context, *APIEndpointPDFReq) (*APIEndpointPDFRsp, error)
	// Get Learnt Schema per API endpoint
	//
	// x-displayName: "Get Get Learnt Schema per API endpoint"
	// Get Learnt Schema per API endpoint for a given auto discovered API endpoint for Virtual Host
	GetAPIEndpointLearntSchema(context.Context, *APIEndpointLearntSchemaReq) (*APIEndpointLearntSchemaRsp, error)
	// Get Swagger Spec for App Type
	//
	// x-displayName: "Get Swagger Spec for App Type"
	// Get the corresponding Swagger spec for the given app type
	GetSwaggerSpec(context.Context, *SwaggerSpecReq) (*httpbody.HttpBody, error)
	// Get Api Endpoints Stats
	//
	// x-displayName: "Get Api Endpoints Stats for Virtual Host"
	// Get api endpoints stats for the given Virtual Host
	GetApiEndpointsStats(context.Context, *ApiEndpointsStatsReq) (*ApiEndpointsStatsRsp, error)
	// GetTopAPIEndpoints
	//
	// x-displayName: "Get Top APIs Endpoints for Virtual Host"
	// Top APIs by requested activity metric. For example most-active APIs or most-attacked APIs.
	GetTopAPIEndpoints(context.Context, *GetTopAPIEndpointsReq) (*GetTopAPIEndpointsRsp, error)
	// GetTopSensitiveData
	//
	// x-displayName: "Get Sensitive Data Summary for Virtual Host"
	// Get sensitive data summary for the given Virtual Host.
	// For each sensitive data type (e.g. SSN, CC, Email) we count the number of APIEPs having the respective
	// sensitive data type and return top k (max 10) types with maximum APIEPs.
	GetTopSensitiveData(context.Context, *GetTopSensitiveDataReq) (*GetTopSensitiveDataRsp, error)
	// GetAPICallSummary
	//
	// x-displayName: "Get Total API Calls for Virtual Host"
	// Get total api calls for the given Virtual Host
	GetAPICallSummary(context.Context, *GetAPICallSummaryReq) (*GetAPICallSummaryRsp, error)
	// GetVulnerabilities
	//
	// x-displayName: "Get Vulnerabilities for Virtual Host"
	// Get vulnerabilities for the given Virtual Host
	GetVulnerabilities(context.Context, *GetVulnerabilitiesReq) (*GetVulnerabilitiesRsp, error)
}

// UnimplementedApiepCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedApiepCustomAPIServer struct {
}

func (*UnimplementedApiepCustomAPIServer) GetAPIEndpoints(ctx context.Context, req *APIEndpointsReq) (*APIEndpointsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIEndpoints not implemented")
}
func (*UnimplementedApiepCustomAPIServer) GetAPIEndpoint(ctx context.Context, req *APIEndpointReq) (*APIEndpointRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIEndpoint not implemented")
}
func (*UnimplementedApiepCustomAPIServer) GetAPIEndpointPDF(ctx context.Context, req *APIEndpointPDFReq) (*APIEndpointPDFRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIEndpointPDF not implemented")
}
func (*UnimplementedApiepCustomAPIServer) GetAPIEndpointLearntSchema(ctx context.Context, req *APIEndpointLearntSchemaReq) (*APIEndpointLearntSchemaRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIEndpointLearntSchema not implemented")
}
func (*UnimplementedApiepCustomAPIServer) GetSwaggerSpec(ctx context.Context, req *SwaggerSpecReq) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwaggerSpec not implemented")
}
func (*UnimplementedApiepCustomAPIServer) GetApiEndpointsStats(ctx context.Context, req *ApiEndpointsStatsReq) (*ApiEndpointsStatsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiEndpointsStats not implemented")
}
func (*UnimplementedApiepCustomAPIServer) GetTopAPIEndpoints(ctx context.Context, req *GetTopAPIEndpointsReq) (*GetTopAPIEndpointsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopAPIEndpoints not implemented")
}
func (*UnimplementedApiepCustomAPIServer) GetTopSensitiveData(ctx context.Context, req *GetTopSensitiveDataReq) (*GetTopSensitiveDataRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopSensitiveData not implemented")
}
func (*UnimplementedApiepCustomAPIServer) GetAPICallSummary(ctx context.Context, req *GetAPICallSummaryReq) (*GetAPICallSummaryRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPICallSummary not implemented")
}
func (*UnimplementedApiepCustomAPIServer) GetVulnerabilities(ctx context.Context, req *GetVulnerabilitiesReq) (*GetVulnerabilitiesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVulnerabilities not implemented")
}

func RegisterApiepCustomAPIServer(s *grpc.Server, srv ApiepCustomAPIServer) {
	s.RegisterService(&_ApiepCustomAPI_serviceDesc, srv)
}

func _ApiepCustomAPI_GetAPIEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIEndpointsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiepCustomAPIServer).GetAPIEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.virtual_host.ApiepCustomAPI/GetAPIEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiepCustomAPIServer).GetAPIEndpoints(ctx, req.(*APIEndpointsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiepCustomAPI_GetAPIEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIEndpointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiepCustomAPIServer).GetAPIEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.virtual_host.ApiepCustomAPI/GetAPIEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiepCustomAPIServer).GetAPIEndpoint(ctx, req.(*APIEndpointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiepCustomAPI_GetAPIEndpointPDF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIEndpointPDFReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiepCustomAPIServer).GetAPIEndpointPDF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.virtual_host.ApiepCustomAPI/GetAPIEndpointPDF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiepCustomAPIServer).GetAPIEndpointPDF(ctx, req.(*APIEndpointPDFReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiepCustomAPI_GetAPIEndpointLearntSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIEndpointLearntSchemaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiepCustomAPIServer).GetAPIEndpointLearntSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.virtual_host.ApiepCustomAPI/GetAPIEndpointLearntSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiepCustomAPIServer).GetAPIEndpointLearntSchema(ctx, req.(*APIEndpointLearntSchemaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiepCustomAPI_GetSwaggerSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwaggerSpecReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiepCustomAPIServer).GetSwaggerSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.virtual_host.ApiepCustomAPI/GetSwaggerSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiepCustomAPIServer).GetSwaggerSpec(ctx, req.(*SwaggerSpecReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiepCustomAPI_GetApiEndpointsStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiEndpointsStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiepCustomAPIServer).GetApiEndpointsStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.virtual_host.ApiepCustomAPI/GetApiEndpointsStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiepCustomAPIServer).GetApiEndpointsStats(ctx, req.(*ApiEndpointsStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiepCustomAPI_GetTopAPIEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopAPIEndpointsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiepCustomAPIServer).GetTopAPIEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.virtual_host.ApiepCustomAPI/GetTopAPIEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiepCustomAPIServer).GetTopAPIEndpoints(ctx, req.(*GetTopAPIEndpointsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiepCustomAPI_GetTopSensitiveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopSensitiveDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiepCustomAPIServer).GetTopSensitiveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.virtual_host.ApiepCustomAPI/GetTopSensitiveData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiepCustomAPIServer).GetTopSensitiveData(ctx, req.(*GetTopSensitiveDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiepCustomAPI_GetAPICallSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPICallSummaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiepCustomAPIServer).GetAPICallSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.virtual_host.ApiepCustomAPI/GetAPICallSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiepCustomAPIServer).GetAPICallSummary(ctx, req.(*GetAPICallSummaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiepCustomAPI_GetVulnerabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVulnerabilitiesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiepCustomAPIServer).GetVulnerabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.virtual_host.ApiepCustomAPI/GetVulnerabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiepCustomAPIServer).GetVulnerabilities(ctx, req.(*GetVulnerabilitiesReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiepCustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.virtual_host.ApiepCustomAPI",
	HandlerType: (*ApiepCustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIEndpoints",
			Handler:    _ApiepCustomAPI_GetAPIEndpoints_Handler,
		},
		{
			MethodName: "GetAPIEndpoint",
			Handler:    _ApiepCustomAPI_GetAPIEndpoint_Handler,
		},
		{
			MethodName: "GetAPIEndpointPDF",
			Handler:    _ApiepCustomAPI_GetAPIEndpointPDF_Handler,
		},
		{
			MethodName: "GetAPIEndpointLearntSchema",
			Handler:    _ApiepCustomAPI_GetAPIEndpointLearntSchema_Handler,
		},
		{
			MethodName: "GetSwaggerSpec",
			Handler:    _ApiepCustomAPI_GetSwaggerSpec_Handler,
		},
		{
			MethodName: "GetApiEndpointsStats",
			Handler:    _ApiepCustomAPI_GetApiEndpointsStats_Handler,
		},
		{
			MethodName: "GetTopAPIEndpoints",
			Handler:    _ApiepCustomAPI_GetTopAPIEndpoints_Handler,
		},
		{
			MethodName: "GetTopSensitiveData",
			Handler:    _ApiepCustomAPI_GetTopSensitiveData_Handler,
		},
		{
			MethodName: "GetAPICallSummary",
			Handler:    _ApiepCustomAPI_GetAPICallSummary_Handler,
		},
		{
			MethodName: "GetVulnerabilities",
			Handler:    _ApiepCustomAPI_GetVulnerabilities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/virtual_host/public_apiep_customapi.proto",
}

func (m *ApiEndpointsStatsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiEndpointsStatsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiEndpointsStatsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApiEndpointsStatsRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiEndpointsStatsRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiEndpointsStatsRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PiiDetected != 0 {
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(m.PiiDetected))
		i--
		dAtA[i] = 0x28
	}
	if m.Shadow != 0 {
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(m.Shadow))
		i--
		dAtA[i] = 0x20
	}
	if m.Inventory != 0 {
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(m.Inventory))
		i--
		dAtA[i] = 0x18
	}
	if m.Discovered != 0 {
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(m.Discovered))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalEndpoints != 0 {
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(m.TotalEndpoints))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *APIEndpointsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEndpointsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIEndpointsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiepCategory) > 0 {
		dAtA2 := make([]byte, len(m.ApiepCategory)*10)
		var j1 int
		for _, num := range m.ApiepCategory {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ApiEndpointInfoRequest) > 0 {
		dAtA4 := make([]byte, len(m.ApiEndpointInfoRequest)*10)
		var j3 int
		for _, num := range m.ApiEndpointInfoRequest {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwaggerSpecReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwaggerSpecReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwaggerSpecReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwaggerSpecRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwaggerSpecRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwaggerSpecRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwaggerSpec) > 0 {
		i -= len(m.SwaggerSpec)
		copy(dAtA[i:], m.SwaggerSpec)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.SwaggerSpec)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *APIEndpointPDFReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEndpointPDFReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIEndpointPDFReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CollapsedUrl) > 0 {
		i -= len(m.CollapsedUrl)
		copy(dAtA[i:], m.CollapsedUrl)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.CollapsedUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *APIEndpointLearntSchemaReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEndpointLearntSchemaReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIEndpointLearntSchemaReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiEndpointInfoRequest) > 0 {
		dAtA6 := make([]byte, len(m.ApiEndpointInfoRequest)*10)
		var j5 int
		for _, num := range m.ApiEndpointInfoRequest {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CollapsedUrl) > 0 {
		i -= len(m.CollapsedUrl)
		copy(dAtA[i:], m.CollapsedUrl)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.CollapsedUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *APIEndpointsRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEndpointsRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIEndpointsRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiepList) > 0 {
		for iNdEx := len(m.ApiepList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApiepList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *APIEndpointPDFRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEndpointPDFRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIEndpointPDFRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PdfInfo != nil {
		{
			size, err := m.PdfInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *APIEndpointLearntSchemaRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEndpointLearntSchemaRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIEndpointLearntSchemaRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Authentication != nil {
		{
			size, err := m.Authentication.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.PdfInfo != nil {
		{
			size, err := m.PdfInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.SensitiveData) > 0 {
		for iNdEx := len(m.SensitiveData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SensitiveData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.DiscoveredSchema != nil {
		{
			size, err := m.DiscoveredSchema.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.InventoryOpenapiSpec) > 0 {
		i -= len(m.InventoryOpenapiSpec)
		copy(dAtA[i:], m.InventoryOpenapiSpec)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.InventoryOpenapiSpec)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DiscoveredOpenapiSpec) > 0 {
		i -= len(m.DiscoveredOpenapiSpec)
		copy(dAtA[i:], m.DiscoveredOpenapiSpec)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.DiscoveredOpenapiSpec)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *APIEndpointReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEndpointReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIEndpointReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CollapsedUrl) > 0 {
		i -= len(m.CollapsedUrl)
		copy(dAtA[i:], m.CollapsedUrl)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.CollapsedUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ApiEndpointInfoRequest) > 0 {
		dAtA12 := make([]byte, len(m.ApiEndpointInfoRequest)*10)
		var j11 int
		for _, num := range m.ApiEndpointInfoRequest {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *APIEndpointRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEndpointRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIEndpointRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Apiep != nil {
		{
			size, err := m.Apiep.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTopAPIEndpointsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopAPIEndpointsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTopAPIEndpointsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Topk != 0 {
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(m.Topk))
		i--
		dAtA[i] = 0x28
	}
	if m.TopByMetric != 0 {
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(m.TopByMetric))
		i--
		dAtA[i] = 0x20
	}
	if m.ApiepSummaryFilter != nil {
		{
			size, err := m.ApiepSummaryFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTopAPIEndpointsRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopAPIEndpointsRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTopAPIEndpointsRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TopApieps) > 0 {
		for iNdEx := len(m.TopApieps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TopApieps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *APIEPActivityMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEPActivityMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIEPActivityMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopByMetricValue != 0 {
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(m.TopByMetricValue))
		i--
		dAtA[i] = 0x18
	}
	if m.Method != 0 {
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ApiepUrl) > 0 {
		i -= len(m.ApiepUrl)
		copy(dAtA[i:], m.ApiepUrl)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.ApiepUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTopSensitiveDataReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopSensitiveDataReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTopSensitiveDataReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Topk != 0 {
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(m.Topk))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ApiepCategory) > 0 {
		dAtA16 := make([]byte, len(m.ApiepCategory)*10)
		var j15 int
		for _, num := range m.ApiepCategory {
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTopSensitiveDataRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopSensitiveDataRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTopSensitiveDataRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TopSensitiveData) > 0 {
		for iNdEx := len(m.TopSensitiveData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TopSensitiveData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAPICallSummaryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAPICallSummaryReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAPICallSummaryReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApiepSummaryFilter != nil {
		{
			size, err := m.ApiepSummaryFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAPICallSummaryRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAPICallSummaryRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAPICallSummaryRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestCountPerRspCode) > 0 {
		for iNdEx := len(m.RequestCountPerRspCode) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestCountPerRspCode[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TotalCalls != 0 {
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(m.TotalCalls))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestCountPerResponseClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCountPerResponseClass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCountPerResponseClass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.RspCodeClass != 0 {
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(m.RspCodeClass))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SensitiveDataCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SensitiveDataCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SensitiveDataCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Count != 0 {
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.SensitiveDataType != 0 {
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(m.SensitiveDataType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *APIEPSummaryFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEPSummaryFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIEPSummaryFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiepCategory) > 0 {
		dAtA19 := make([]byte, len(m.ApiepCategory)*10)
		var j18 int
		for _, num := range m.ApiepCategory {
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		i -= j18
		copy(dAtA[i:], dAtA19[:j18])
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(j18))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetVulnerabilitiesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVulnerabilitiesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVulnerabilitiesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Context != nil {
		{
			size := m.Context.Size()
			i -= size
			if _, err := m.Context.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetVulnerabilitiesReq_ApiEndpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVulnerabilitiesReq_ApiEndpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiEndpoint != nil {
		{
			size, err := m.ApiEndpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *APIEndpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEndpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIEndpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollapsedUrl) > 0 {
		i -= len(m.CollapsedUrl)
		copy(dAtA[i:], m.CollapsedUrl)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.CollapsedUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetVulnerabilitiesRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVulnerabilitiesRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVulnerabilitiesRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vulnerabilities) > 0 {
		for iNdEx := len(m.Vulnerabilities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vulnerabilities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vulnerability) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vulnerability) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vulnerability) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Remediation) > 0 {
		for iNdEx := len(m.Remediation) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Remediation[iNdEx])
			copy(dAtA[i:], m.Remediation[iNdEx])
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Remediation[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.Evidence != nil {
		{
			size, err := m.Evidence.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Risk != nil {
		{
			size, err := m.Risk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.LastObservedTime != nil {
		{
			size, err := m.LastObservedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.CreationTime != nil {
		{
			size, err := m.CreationTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.StatusChangeTime != nil {
		{
			size, err := m.StatusChangeTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Status != 0 {
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if m.Context != 0 {
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(m.Context))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VulnRisk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VulnRisk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnRisk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if m.Score != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Score))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *VulnEvidence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VulnEvidence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnEvidence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndTime != nil {
		{
			size, err := m.EndTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.EvidenceType != 0 {
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(m.EvidenceType))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Samples) > 0 {
		for iNdEx := len(m.Samples) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Samples[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VulnEvidenceSample) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VulnEvidenceSample) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VulnEvidenceSample) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		for iNdEx := len(m.Details) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Details[iNdEx])
			copy(dAtA[i:], m.Details[iNdEx])
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Details[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ReqId) > 0 {
		i -= len(m.ReqId)
		copy(dAtA[i:], m.ReqId)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.ReqId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicApiepCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicApiepCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ApiEndpointsStatsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	return n
}

func (m *ApiEndpointsStatsRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalEndpoints != 0 {
		n += 1 + sovPublicApiepCustomapi(uint64(m.TotalEndpoints))
	}
	if m.Discovered != 0 {
		n += 1 + sovPublicApiepCustomapi(uint64(m.Discovered))
	}
	if m.Inventory != 0 {
		n += 1 + sovPublicApiepCustomapi(uint64(m.Inventory))
	}
	if m.Shadow != 0 {
		n += 1 + sovPublicApiepCustomapi(uint64(m.Shadow))
	}
	if m.PiiDetected != 0 {
		n += 1 + sovPublicApiepCustomapi(uint64(m.PiiDetected))
	}
	return n
}

func (m *APIEndpointsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if len(m.ApiEndpointInfoRequest) > 0 {
		l = 0
		for _, e := range m.ApiEndpointInfoRequest {
			l += sovPublicApiepCustomapi(uint64(e))
		}
		n += 1 + sovPublicApiepCustomapi(uint64(l)) + l
	}
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if len(m.ApiepCategory) > 0 {
		l = 0
		for _, e := range m.ApiepCategory {
			l += sovPublicApiepCustomapi(uint64(e))
		}
		n += 1 + sovPublicApiepCustomapi(uint64(l)) + l
	}
	return n
}

func (m *SwaggerSpecReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	return n
}

func (m *SwaggerSpecRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SwaggerSpec)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	return n
}

func (m *APIEndpointPDFReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.CollapsedUrl)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	return n
}

func (m *APIEndpointLearntSchemaReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.CollapsedUrl)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	if len(m.ApiEndpointInfoRequest) > 0 {
		l = 0
		for _, e := range m.ApiEndpointInfoRequest {
			l += sovPublicApiepCustomapi(uint64(e))
		}
		n += 1 + sovPublicApiepCustomapi(uint64(l)) + l
	}
	return n
}

func (m *APIEndpointsRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApiepList) > 0 {
		for _, e := range m.ApiepList {
			l = e.Size()
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	return n
}

func (m *APIEndpointPDFRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PdfInfo != nil {
		l = m.PdfInfo.Size()
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	return n
}

func (m *APIEndpointLearntSchemaRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DiscoveredOpenapiSpec)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.InventoryOpenapiSpec)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if m.DiscoveredSchema != nil {
		l = m.DiscoveredSchema.Size()
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if len(m.SensitiveData) > 0 {
		for _, e := range m.SensitiveData {
			l = e.Size()
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	if m.PdfInfo != nil {
		l = m.PdfInfo.Size()
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if m.Authentication != nil {
		l = m.Authentication.Size()
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	return n
}

func (m *APIEndpointReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if len(m.ApiEndpointInfoRequest) > 0 {
		l = 0
		for _, e := range m.ApiEndpointInfoRequest {
			l += sovPublicApiepCustomapi(uint64(e))
		}
		n += 1 + sovPublicApiepCustomapi(uint64(l)) + l
	}
	l = len(m.CollapsedUrl)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	return n
}

func (m *APIEndpointRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Apiep != nil {
		l = m.Apiep.Size()
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	return n
}

func (m *GetTopAPIEndpointsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if m.ApiepSummaryFilter != nil {
		l = m.ApiepSummaryFilter.Size()
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if m.TopByMetric != 0 {
		n += 1 + sovPublicApiepCustomapi(uint64(m.TopByMetric))
	}
	if m.Topk != 0 {
		n += 1 + sovPublicApiepCustomapi(uint64(m.Topk))
	}
	return n
}

func (m *GetTopAPIEndpointsRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TopApieps) > 0 {
		for _, e := range m.TopApieps {
			l = e.Size()
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	return n
}

func (m *APIEPActivityMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiepUrl)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if m.Method != 0 {
		n += 1 + sovPublicApiepCustomapi(uint64(m.Method))
	}
	if m.TopByMetricValue != 0 {
		n += 1 + sovPublicApiepCustomapi(uint64(m.TopByMetricValue))
	}
	return n
}

func (m *GetTopSensitiveDataReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	if len(m.ApiepCategory) > 0 {
		l = 0
		for _, e := range m.ApiepCategory {
			l += sovPublicApiepCustomapi(uint64(e))
		}
		n += 1 + sovPublicApiepCustomapi(uint64(l)) + l
	}
	if m.Topk != 0 {
		n += 1 + sovPublicApiepCustomapi(uint64(m.Topk))
	}
	return n
}

func (m *GetTopSensitiveDataRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TopSensitiveData) > 0 {
		for _, e := range m.TopSensitiveData {
			l = e.Size()
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	return n
}

func (m *GetAPICallSummaryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if m.ApiepSummaryFilter != nil {
		l = m.ApiepSummaryFilter.Size()
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	return n
}

func (m *GetAPICallSummaryRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalCalls != 0 {
		n += 1 + sovPublicApiepCustomapi(uint64(m.TotalCalls))
	}
	if len(m.RequestCountPerRspCode) > 0 {
		for _, e := range m.RequestCountPerRspCode {
			l = e.Size()
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	return n
}

func (m *RequestCountPerResponseClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RspCodeClass != 0 {
		n += 1 + sovPublicApiepCustomapi(uint64(m.RspCodeClass))
	}
	if m.Count != 0 {
		n += 1 + sovPublicApiepCustomapi(uint64(m.Count))
	}
	return n
}

func (m *SensitiveDataCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SensitiveDataType != 0 {
		n += 1 + sovPublicApiepCustomapi(uint64(m.SensitiveDataType))
	}
	if m.Count != 0 {
		n += 1 + sovPublicApiepCustomapi(uint64(m.Count))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	return n
}

func (m *APIEPSummaryFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if len(m.ApiepCategory) > 0 {
		l = 0
		for _, e := range m.ApiepCategory {
			l += sovPublicApiepCustomapi(uint64(e))
		}
		n += 1 + sovPublicApiepCustomapi(uint64(l)) + l
	}
	return n
}

func (m *GetVulnerabilitiesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	if m.Context != nil {
		n += m.Context.Size()
	}
	return n
}

func (m *GetVulnerabilitiesReq_ApiEndpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiEndpoint != nil {
		l = m.ApiEndpoint.Size()
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	return n
}
func (m *APIEndpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollapsedUrl)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	return n
}

func (m *GetVulnerabilitiesRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vulnerabilities) > 0 {
		for _, e := range m.Vulnerabilities {
			l = e.Size()
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	return n
}

func (m *Vulnerability) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if m.Context != 0 {
		n += 1 + sovPublicApiepCustomapi(uint64(m.Context))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovPublicApiepCustomapi(uint64(m.Status))
	}
	if m.StatusChangeTime != nil {
		l = m.StatusChangeTime.Size()
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if m.CreationTime != nil {
		l = m.CreationTime.Size()
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if m.LastObservedTime != nil {
		l = m.LastObservedTime.Size()
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if m.Risk != nil {
		l = m.Risk.Size()
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if m.Evidence != nil {
		l = m.Evidence.Size()
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if len(m.Remediation) > 0 {
		for _, s := range m.Remediation {
			l = len(s)
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	return n
}

func (m *VulnRisk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Score != 0 {
		n += 5
	}
	if m.Level != 0 {
		n += 1 + sovPublicApiepCustomapi(uint64(m.Level))
	}
	return n
}

func (m *VulnEvidence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Samples) > 0 {
		for _, e := range m.Samples {
			l = e.Size()
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if m.EvidenceType != 0 {
		n += 1 + sovPublicApiepCustomapi(uint64(m.EvidenceType))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	return n
}

func (m *VulnEvidenceSample) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReqId)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if len(m.Details) > 0 {
		for _, s := range m.Details {
			l = len(s)
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	return n
}

func sovPublicApiepCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicApiepCustomapi(x uint64) (n int) {
	return sovPublicApiepCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ApiEndpointsStatsReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiEndpointsStatsReq{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiEndpointsStatsRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiEndpointsStatsRsp{`,
		`TotalEndpoints:` + fmt.Sprintf("%v", this.TotalEndpoints) + `,`,
		`Discovered:` + fmt.Sprintf("%v", this.Discovered) + `,`,
		`Inventory:` + fmt.Sprintf("%v", this.Inventory) + `,`,
		`Shadow:` + fmt.Sprintf("%v", this.Shadow) + `,`,
		`PiiDetected:` + fmt.Sprintf("%v", this.PiiDetected) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEndpointsReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEndpointsReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ApiEndpointInfoRequest:` + fmt.Sprintf("%v", this.ApiEndpointInfoRequest) + `,`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`ApiepCategory:` + fmt.Sprintf("%v", this.ApiepCategory) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SwaggerSpecReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SwaggerSpecReq{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SwaggerSpecRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SwaggerSpecRsp{`,
		`SwaggerSpec:` + fmt.Sprintf("%v", this.SwaggerSpec) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEndpointPDFReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEndpointPDFReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`CollapsedUrl:` + fmt.Sprintf("%v", this.CollapsedUrl) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEndpointLearntSchemaReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEndpointLearntSchemaReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`CollapsedUrl:` + fmt.Sprintf("%v", this.CollapsedUrl) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`ApiEndpointInfoRequest:` + fmt.Sprintf("%v", this.ApiEndpointInfoRequest) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEndpointsRsp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForApiepList := "[]*APIEPInfo{"
	for _, f := range this.ApiepList {
		repeatedStringForApiepList += strings.Replace(fmt.Sprintf("%v", f), "APIEPInfo", "app_type.APIEPInfo", 1) + ","
	}
	repeatedStringForApiepList += "}"
	s := strings.Join([]string{`&APIEndpointsRsp{`,
		`ApiepList:` + repeatedStringForApiepList + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEndpointPDFRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEndpointPDFRsp{`,
		`PdfInfo:` + strings.Replace(fmt.Sprintf("%v", this.PdfInfo), "APIEPPDFInfo", "app_type.APIEPPDFInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEndpointLearntSchemaRsp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSensitiveData := "[]*SensitiveData{"
	for _, f := range this.SensitiveData {
		repeatedStringForSensitiveData += strings.Replace(fmt.Sprintf("%v", f), "SensitiveData", "app_type.SensitiveData", 1) + ","
	}
	repeatedStringForSensitiveData += "}"
	s := strings.Join([]string{`&APIEndpointLearntSchemaRsp{`,
		`DiscoveredOpenapiSpec:` + fmt.Sprintf("%v", this.DiscoveredOpenapiSpec) + `,`,
		`InventoryOpenapiSpec:` + fmt.Sprintf("%v", this.InventoryOpenapiSpec) + `,`,
		`DiscoveredSchema:` + strings.Replace(fmt.Sprintf("%v", this.DiscoveredSchema), "DiscoveredSchema", "app_type.DiscoveredSchema", 1) + `,`,
		`SensitiveData:` + repeatedStringForSensitiveData + `,`,
		`PdfInfo:` + strings.Replace(fmt.Sprintf("%v", this.PdfInfo), "APIEPPDFInfo", "app_type.APIEPPDFInfo", 1) + `,`,
		`Authentication:` + strings.Replace(fmt.Sprintf("%v", this.Authentication), "Authentication", "app_type.Authentication", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEndpointReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEndpointReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ApiEndpointInfoRequest:` + fmt.Sprintf("%v", this.ApiEndpointInfoRequest) + `,`,
		`CollapsedUrl:` + fmt.Sprintf("%v", this.CollapsedUrl) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEndpointRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEndpointRsp{`,
		`Apiep:` + strings.Replace(fmt.Sprintf("%v", this.Apiep), "APIEPInfo", "app_type.APIEPInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTopAPIEndpointsReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTopAPIEndpointsReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ApiepSummaryFilter:` + strings.Replace(this.ApiepSummaryFilter.String(), "APIEPSummaryFilter", "APIEPSummaryFilter", 1) + `,`,
		`TopByMetric:` + fmt.Sprintf("%v", this.TopByMetric) + `,`,
		`Topk:` + fmt.Sprintf("%v", this.Topk) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTopAPIEndpointsRsp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTopApieps := "[]*APIEPActivityMetrics{"
	for _, f := range this.TopApieps {
		repeatedStringForTopApieps += strings.Replace(f.String(), "APIEPActivityMetrics", "APIEPActivityMetrics", 1) + ","
	}
	repeatedStringForTopApieps += "}"
	s := strings.Join([]string{`&GetTopAPIEndpointsRsp{`,
		`TopApieps:` + repeatedStringForTopApieps + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEPActivityMetrics) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEPActivityMetrics{`,
		`ApiepUrl:` + fmt.Sprintf("%v", this.ApiepUrl) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`TopByMetricValue:` + fmt.Sprintf("%v", this.TopByMetricValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTopSensitiveDataReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTopSensitiveDataReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`ApiepCategory:` + fmt.Sprintf("%v", this.ApiepCategory) + `,`,
		`Topk:` + fmt.Sprintf("%v", this.Topk) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTopSensitiveDataRsp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTopSensitiveData := "[]*SensitiveDataCount{"
	for _, f := range this.TopSensitiveData {
		repeatedStringForTopSensitiveData += strings.Replace(f.String(), "SensitiveDataCount", "SensitiveDataCount", 1) + ","
	}
	repeatedStringForTopSensitiveData += "}"
	s := strings.Join([]string{`&GetTopSensitiveDataRsp{`,
		`TopSensitiveData:` + repeatedStringForTopSensitiveData + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAPICallSummaryReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAPICallSummaryReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ApiepSummaryFilter:` + strings.Replace(this.ApiepSummaryFilter.String(), "APIEPSummaryFilter", "APIEPSummaryFilter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAPICallSummaryRsp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRequestCountPerRspCode := "[]*RequestCountPerResponseClass{"
	for _, f := range this.RequestCountPerRspCode {
		repeatedStringForRequestCountPerRspCode += strings.Replace(f.String(), "RequestCountPerResponseClass", "RequestCountPerResponseClass", 1) + ","
	}
	repeatedStringForRequestCountPerRspCode += "}"
	s := strings.Join([]string{`&GetAPICallSummaryRsp{`,
		`TotalCalls:` + fmt.Sprintf("%v", this.TotalCalls) + `,`,
		`RequestCountPerRspCode:` + repeatedStringForRequestCountPerRspCode + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestCountPerResponseClass) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestCountPerResponseClass{`,
		`RspCodeClass:` + fmt.Sprintf("%v", this.RspCodeClass) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SensitiveDataCount) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SensitiveDataCount{`,
		`SensitiveDataType:` + fmt.Sprintf("%v", this.SensitiveDataType) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEPSummaryFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEPSummaryFilter{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`ApiepCategory:` + fmt.Sprintf("%v", this.ApiepCategory) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetVulnerabilitiesReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetVulnerabilitiesReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`Context:` + fmt.Sprintf("%v", this.Context) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetVulnerabilitiesReq_ApiEndpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetVulnerabilitiesReq_ApiEndpoint{`,
		`ApiEndpoint:` + strings.Replace(fmt.Sprintf("%v", this.ApiEndpoint), "APIEndpoint", "APIEndpoint", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEndpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEndpoint{`,
		`CollapsedUrl:` + fmt.Sprintf("%v", this.CollapsedUrl) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetVulnerabilitiesRsp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVulnerabilities := "[]*Vulnerability{"
	for _, f := range this.Vulnerabilities {
		repeatedStringForVulnerabilities += strings.Replace(f.String(), "Vulnerability", "Vulnerability", 1) + ","
	}
	repeatedStringForVulnerabilities += "}"
	s := strings.Join([]string{`&GetVulnerabilitiesRsp{`,
		`Vulnerabilities:` + repeatedStringForVulnerabilities + `,`,
		`}`,
	}, "")
	return s
}
func (this *Vulnerability) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Vulnerability{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Category:` + fmt.Sprintf("%v", this.Category) + `,`,
		`Context:` + fmt.Sprintf("%v", this.Context) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`StatusChangeTime:` + strings.Replace(fmt.Sprintf("%v", this.StatusChangeTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`CreationTime:` + strings.Replace(fmt.Sprintf("%v", this.CreationTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`LastObservedTime:` + strings.Replace(fmt.Sprintf("%v", this.LastObservedTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`Risk:` + strings.Replace(this.Risk.String(), "VulnRisk", "VulnRisk", 1) + `,`,
		`Evidence:` + strings.Replace(this.Evidence.String(), "VulnEvidence", "VulnEvidence", 1) + `,`,
		`Remediation:` + fmt.Sprintf("%v", this.Remediation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VulnRisk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VulnRisk{`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VulnEvidence) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSamples := "[]*VulnEvidenceSample{"
	for _, f := range this.Samples {
		repeatedStringForSamples += strings.Replace(f.String(), "VulnEvidenceSample", "VulnEvidenceSample", 1) + ","
	}
	repeatedStringForSamples += "}"
	s := strings.Join([]string{`&VulnEvidence{`,
		`Samples:` + repeatedStringForSamples + `,`,
		`StartTime:` + strings.Replace(fmt.Sprintf("%v", this.StartTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`EvidenceType:` + fmt.Sprintf("%v", this.EvidenceType) + `,`,
		`EndTime:` + strings.Replace(fmt.Sprintf("%v", this.EndTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VulnEvidenceSample) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VulnEvidenceSample{`,
		`ReqId:` + fmt.Sprintf("%v", this.ReqId) + `,`,
		`Details:` + fmt.Sprintf("%v", this.Details) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicApiepCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ApiEndpointsStatsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiEndpointsStatsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiEndpointsStatsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiEndpointsStatsRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiEndpointsStatsRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiEndpointsStatsRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalEndpoints", wireType)
			}
			m.TotalEndpoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalEndpoints |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discovered", wireType)
			}
			m.Discovered = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Discovered |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inventory", wireType)
			}
			m.Inventory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Inventory |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shadow", wireType)
			}
			m.Shadow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shadow |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PiiDetected", wireType)
			}
			m.PiiDetected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PiiDetected |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEndpointsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEndpointsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEndpointsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v app_type.ApiEndpointInfoRequest
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicApiepCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= app_type.ApiEndpointInfoRequest(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiEndpointInfoRequest = append(m.ApiEndpointInfoRequest, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicApiepCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicApiepCustomapi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicApiepCustomapi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ApiEndpointInfoRequest) == 0 {
					m.ApiEndpointInfoRequest = make([]app_type.ApiEndpointInfoRequest, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v app_type.ApiEndpointInfoRequest
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicApiepCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= app_type.ApiEndpointInfoRequest(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiEndpointInfoRequest = append(m.ApiEndpointInfoRequest, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointInfoRequest", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v app_type.APIEPCategory
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicApiepCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= app_type.APIEPCategory(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiepCategory = append(m.ApiepCategory, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicApiepCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicApiepCustomapi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicApiepCustomapi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ApiepCategory) == 0 {
					m.ApiepCategory = make([]app_type.APIEPCategory, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v app_type.APIEPCategory
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicApiepCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= app_type.APIEPCategory(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiepCategory = append(m.ApiepCategory, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiepCategory", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwaggerSpecReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwaggerSpecReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwaggerSpecReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwaggerSpecRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwaggerSpecRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwaggerSpecRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwaggerSpec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwaggerSpec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEndpointPDFReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEndpointPDFReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEndpointPDFReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollapsedUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollapsedUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEndpointLearntSchemaReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEndpointLearntSchemaReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEndpointLearntSchemaReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollapsedUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollapsedUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v app_type.ApiEndpointInfoRequest
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicApiepCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= app_type.ApiEndpointInfoRequest(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiEndpointInfoRequest = append(m.ApiEndpointInfoRequest, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicApiepCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicApiepCustomapi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicApiepCustomapi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ApiEndpointInfoRequest) == 0 {
					m.ApiEndpointInfoRequest = make([]app_type.ApiEndpointInfoRequest, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v app_type.ApiEndpointInfoRequest
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicApiepCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= app_type.ApiEndpointInfoRequest(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiEndpointInfoRequest = append(m.ApiEndpointInfoRequest, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointInfoRequest", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEndpointsRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEndpointsRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEndpointsRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiepList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiepList = append(m.ApiepList, &app_type.APIEPInfo{})
			if err := m.ApiepList[len(m.ApiepList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEndpointPDFRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEndpointPDFRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEndpointPDFRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PdfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PdfInfo == nil {
				m.PdfInfo = &app_type.APIEPPDFInfo{}
			}
			if err := m.PdfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEndpointLearntSchemaRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEndpointLearntSchemaRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEndpointLearntSchemaRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveredOpenapiSpec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscoveredOpenapiSpec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InventoryOpenapiSpec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InventoryOpenapiSpec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveredSchema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DiscoveredSchema == nil {
				m.DiscoveredSchema = &app_type.DiscoveredSchema{}
			}
			if err := m.DiscoveredSchema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SensitiveData = append(m.SensitiveData, &app_type.SensitiveData{})
			if err := m.SensitiveData[len(m.SensitiveData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PdfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PdfInfo == nil {
				m.PdfInfo = &app_type.APIEPPDFInfo{}
			}
			if err := m.PdfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authentication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Authentication == nil {
				m.Authentication = &app_type.Authentication{}
			}
			if err := m.Authentication.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEndpointReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEndpointReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEndpointReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v app_type.ApiEndpointInfoRequest
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicApiepCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= app_type.ApiEndpointInfoRequest(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiEndpointInfoRequest = append(m.ApiEndpointInfoRequest, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicApiepCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicApiepCustomapi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicApiepCustomapi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ApiEndpointInfoRequest) == 0 {
					m.ApiEndpointInfoRequest = make([]app_type.ApiEndpointInfoRequest, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v app_type.ApiEndpointInfoRequest
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicApiepCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= app_type.ApiEndpointInfoRequest(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiEndpointInfoRequest = append(m.ApiEndpointInfoRequest, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointInfoRequest", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollapsedUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollapsedUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEndpointRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEndpointRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEndpointRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apiep", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Apiep == nil {
				m.Apiep = &app_type.APIEPInfo{}
			}
			if err := m.Apiep.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopAPIEndpointsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopAPIEndpointsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopAPIEndpointsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiepSummaryFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiepSummaryFilter == nil {
				m.ApiepSummaryFilter = &APIEPSummaryFilter{}
			}
			if err := m.ApiepSummaryFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopByMetric", wireType)
			}
			m.TopByMetric = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopByMetric |= APIEPActivityMetricType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topk", wireType)
			}
			m.Topk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topk |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopAPIEndpointsRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopAPIEndpointsRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopAPIEndpointsRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopApieps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopApieps = append(m.TopApieps, &APIEPActivityMetrics{})
			if err := m.TopApieps[len(m.TopApieps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEPActivityMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEPActivityMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEPActivityMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiepUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiepUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= schema.HttpMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopByMetricValue", wireType)
			}
			m.TopByMetricValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopByMetricValue |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopSensitiveDataReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopSensitiveDataReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopSensitiveDataReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v app_type.APIEPCategory
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicApiepCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= app_type.APIEPCategory(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiepCategory = append(m.ApiepCategory, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicApiepCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicApiepCustomapi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicApiepCustomapi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ApiepCategory) == 0 {
					m.ApiepCategory = make([]app_type.APIEPCategory, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v app_type.APIEPCategory
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicApiepCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= app_type.APIEPCategory(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiepCategory = append(m.ApiepCategory, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiepCategory", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topk", wireType)
			}
			m.Topk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topk |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopSensitiveDataRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopSensitiveDataRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopSensitiveDataRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopSensitiveData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopSensitiveData = append(m.TopSensitiveData, &SensitiveDataCount{})
			if err := m.TopSensitiveData[len(m.TopSensitiveData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAPICallSummaryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAPICallSummaryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAPICallSummaryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiepSummaryFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiepSummaryFilter == nil {
				m.ApiepSummaryFilter = &APIEPSummaryFilter{}
			}
			if err := m.ApiepSummaryFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAPICallSummaryRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAPICallSummaryRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAPICallSummaryRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCalls", wireType)
			}
			m.TotalCalls = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCalls |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCountPerRspCode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestCountPerRspCode = append(m.RequestCountPerRspCode, &RequestCountPerResponseClass{})
			if err := m.RequestCountPerRspCode[len(m.RequestCountPerRspCode)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCountPerResponseClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCountPerResponseClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCountPerResponseClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RspCodeClass", wireType)
			}
			m.RspCodeClass = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RspCodeClass |= schema.HttpResponseCodeClass(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SensitiveDataCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SensitiveDataCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SensitiveDataCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataType", wireType)
			}
			m.SensitiveDataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SensitiveDataType |= app_type.SensitiveDataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEPSummaryFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEPSummaryFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEPSummaryFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v app_type.APIEPCategory
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicApiepCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= app_type.APIEPCategory(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiepCategory = append(m.ApiepCategory, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicApiepCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicApiepCustomapi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicApiepCustomapi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ApiepCategory) == 0 {
					m.ApiepCategory = make([]app_type.APIEPCategory, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v app_type.APIEPCategory
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicApiepCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= app_type.APIEPCategory(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiepCategory = append(m.ApiepCategory, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiepCategory", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVulnerabilitiesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVulnerabilitiesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVulnerabilitiesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &APIEndpoint{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Context = &GetVulnerabilitiesReq_ApiEndpoint{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEndpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEndpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEndpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollapsedUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollapsedUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVulnerabilitiesRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVulnerabilitiesRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVulnerabilitiesRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vulnerabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vulnerabilities = append(m.Vulnerabilities, &Vulnerability{})
			if err := m.Vulnerabilities[len(m.Vulnerabilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vulnerability) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vulnerability: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vulnerability: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= VulnContext(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= VulnStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusChangeTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StatusChangeTime == nil {
				m.StatusChangeTime = &types.Timestamp{}
			}
			if err := m.StatusChangeTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreationTime == nil {
				m.CreationTime = &types.Timestamp{}
			}
			if err := m.CreationTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObservedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastObservedTime == nil {
				m.LastObservedTime = &types.Timestamp{}
			}
			if err := m.LastObservedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Risk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Risk == nil {
				m.Risk = &VulnRisk{}
			}
			if err := m.Risk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Evidence == nil {
				m.Evidence = &VulnEvidence{}
			}
			if err := m.Evidence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remediation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remediation = append(m.Remediation, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VulnRisk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VulnRisk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VulnRisk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Score = float32(math.Float32frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= VulnRiskLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VulnEvidence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VulnEvidence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VulnEvidence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Samples", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Samples = append(m.Samples, &VulnEvidenceSample{})
			if err := m.Samples[len(m.Samples)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &types.Timestamp{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvidenceType", wireType)
			}
			m.EvidenceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EvidenceType |= VulnEvidenceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &types.Timestamp{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VulnEvidenceSample) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VulnEvidenceSample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VulnEvidenceSample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicApiepCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicApiepCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicApiepCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicApiepCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicApiepCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicApiepCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicApiepCustomapi = fmt.Errorf("proto: unexpected end of group")
)
