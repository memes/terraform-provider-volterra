// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package virtual_host

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema_app_type "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_type"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *APIEndpointLearntSchemaReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEndpointLearntSchemaReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEndpointLearntSchemaReq) DeepCopy() *APIEndpointLearntSchemaReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEndpointLearntSchemaReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEndpointLearntSchemaReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEndpointLearntSchemaReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEndpointLearntSchemaReqValidator().Validate(ctx, m, opts...)
}

type ValidateAPIEndpointLearntSchemaReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEndpointLearntSchemaReq) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPIEndpointLearntSchemaReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEndpointLearntSchemaReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEndpointLearntSchemaReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["collapsed_url"]; exists {

		vOpts := append(opts, db.WithValidateField("collapsed_url"))
		if err := fv(ctx, m.GetCollapsedUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["method"]; exists {

		vOpts := append(opts, db.WithValidateField("method"))
		if err := fv(ctx, m.GetMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEndpointLearntSchemaReqValidator = func() *ValidateAPIEndpointLearntSchemaReq {
	v := &ValidateAPIEndpointLearntSchemaReq{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEndpointLearntSchemaReq.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	return v
}()

func APIEndpointLearntSchemaReqValidator() db.Validator {
	return DefaultAPIEndpointLearntSchemaReqValidator
}

// augmented methods on protoc/std generated struct

func (m *APIEndpointLearntSchemaRsp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEndpointLearntSchemaRsp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEndpointLearntSchemaRsp) DeepCopy() *APIEndpointLearntSchemaRsp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEndpointLearntSchemaRsp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEndpointLearntSchemaRsp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEndpointLearntSchemaRsp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEndpointLearntSchemaRspValidator().Validate(ctx, m, opts...)
}

type ValidateAPIEndpointLearntSchemaRsp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEndpointLearntSchemaRsp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEndpointLearntSchemaRsp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEndpointLearntSchemaRsp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_inventory_schema"]; exists {

		vOpts := append(opts, db.WithValidateField("api_inventory_schema"))
		if err := fv(ctx, m.GetApiInventorySchema(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_inventory_swagger_spec"]; exists {

		vOpts := append(opts, db.WithValidateField("api_inventory_swagger_spec"))
		if err := fv(ctx, m.GetApiInventorySwaggerSpec(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["last_updated_time"]; exists {

		vOpts := append(opts, db.WithValidateField("last_updated_time"))
		if err := fv(ctx, m.GetLastUpdatedTime(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["learnt_schema"]; exists {

		vOpts := append(opts, db.WithValidateField("learnt_schema"))
		if err := fv(ctx, m.GetLearntSchema(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["swagger_spec"]; exists {

		vOpts := append(opts, db.WithValidateField("swagger_spec"))
		if err := fv(ctx, m.GetSwaggerSpec(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEndpointLearntSchemaRspValidator = func() *ValidateAPIEndpointLearntSchemaRsp {
	v := &ValidateAPIEndpointLearntSchemaRsp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func APIEndpointLearntSchemaRspValidator() db.Validator {
	return DefaultAPIEndpointLearntSchemaRspValidator
}

// augmented methods on protoc/std generated struct

func (m *APIEndpointPDFReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEndpointPDFReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEndpointPDFReq) DeepCopy() *APIEndpointPDFReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEndpointPDFReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEndpointPDFReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEndpointPDFReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEndpointPDFReqValidator().Validate(ctx, m, opts...)
}

type ValidateAPIEndpointPDFReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEndpointPDFReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEndpointPDFReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEndpointPDFReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["collapsed_url"]; exists {

		vOpts := append(opts, db.WithValidateField("collapsed_url"))
		if err := fv(ctx, m.GetCollapsedUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["method"]; exists {

		vOpts := append(opts, db.WithValidateField("method"))
		if err := fv(ctx, m.GetMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEndpointPDFReqValidator = func() *ValidateAPIEndpointPDFReq {
	v := &ValidateAPIEndpointPDFReq{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func APIEndpointPDFReqValidator() db.Validator {
	return DefaultAPIEndpointPDFReqValidator
}

// augmented methods on protoc/std generated struct

func (m *APIEndpointPDFRsp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEndpointPDFRsp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEndpointPDFRsp) DeepCopy() *APIEndpointPDFRsp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEndpointPDFRsp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEndpointPDFRsp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEndpointPDFRsp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEndpointPDFRspValidator().Validate(ctx, m, opts...)
}

type ValidateAPIEndpointPDFRsp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEndpointPDFRsp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEndpointPDFRsp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEndpointPDFRsp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["pdf_info"]; exists {

		vOpts := append(opts, db.WithValidateField("pdf_info"))
		if err := fv(ctx, m.GetPdfInfo(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEndpointPDFRspValidator = func() *ValidateAPIEndpointPDFRsp {
	v := &ValidateAPIEndpointPDFRsp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func APIEndpointPDFRspValidator() db.Validator {
	return DefaultAPIEndpointPDFRspValidator
}

// augmented methods on protoc/std generated struct

func (m *APIEndpointReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEndpointReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEndpointReq) DeepCopy() *APIEndpointReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEndpointReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEndpointReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEndpointReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEndpointReqValidator().Validate(ctx, m, opts...)
}

type ValidateAPIEndpointReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEndpointReq) ApiEndpointInfoRequestValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_app_type.ApiEndpointInfoRequest)
		return int32(i)
	}
	// ves_io_schema_app_type.ApiEndpointInfoRequest_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema_app_type.ApiEndpointInfoRequest_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_endpoint_info_request")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema_app_type.ApiEndpointInfoRequest, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_endpoint_info_request")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema_app_type.ApiEndpointInfoRequest)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema_app_type.ApiEndpointInfoRequest, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_endpoint_info_request")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_endpoint_info_request")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPIEndpointReq) CollapsedUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for collapsed_url")
	}

	return validatorFn, nil
}

func (v *ValidateAPIEndpointReq) MethodValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for method")
	}

	return validatorFn, nil
}

func (v *ValidateAPIEndpointReq) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPIEndpointReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEndpointReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEndpointReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_endpoint_info_request"]; exists {
		vOpts := append(opts, db.WithValidateField("api_endpoint_info_request"))
		if err := fv(ctx, m.GetApiEndpointInfoRequest(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["collapsed_url"]; exists {

		vOpts := append(opts, db.WithValidateField("collapsed_url"))
		if err := fv(ctx, m.GetCollapsedUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["method"]; exists {

		vOpts := append(opts, db.WithValidateField("method"))
		if err := fv(ctx, m.GetMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEndpointReqValidator = func() *ValidateAPIEndpointReq {
	v := &ValidateAPIEndpointReq{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhApiEndpointInfoRequest := v.ApiEndpointInfoRequestValidationRuleHandler
	rulesApiEndpointInfoRequest := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhApiEndpointInfoRequest(rulesApiEndpointInfoRequest)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEndpointReq.api_endpoint_info_request: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_endpoint_info_request"] = vFn

	vrhCollapsedUrl := v.CollapsedUrlValidationRuleHandler
	rulesCollapsedUrl := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCollapsedUrl(rulesCollapsedUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEndpointReq.collapsed_url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["collapsed_url"] = vFn

	vrhMethod := v.MethodValidationRuleHandler
	rulesMethod := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMethod(rulesMethod)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEndpointReq.method: %s", err)
		panic(errMsg)
	}
	v.FldValidators["method"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEndpointReq.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	return v
}()

func APIEndpointReqValidator() db.Validator {
	return DefaultAPIEndpointReqValidator
}

// augmented methods on protoc/std generated struct

func (m *APIEndpointRsp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEndpointRsp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEndpointRsp) DeepCopy() *APIEndpointRsp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEndpointRsp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEndpointRsp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEndpointRsp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEndpointRspValidator().Validate(ctx, m, opts...)
}

type ValidateAPIEndpointRsp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEndpointRsp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEndpointRsp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEndpointRsp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["apiep"]; exists {

		vOpts := append(opts, db.WithValidateField("apiep"))
		if err := fv(ctx, m.GetApiep(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEndpointRspValidator = func() *ValidateAPIEndpointRsp {
	v := &ValidateAPIEndpointRsp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func APIEndpointRspValidator() db.Validator {
	return DefaultAPIEndpointRspValidator
}

// augmented methods on protoc/std generated struct

func (m *APIEndpointsReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEndpointsReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEndpointsReq) DeepCopy() *APIEndpointsReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEndpointsReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEndpointsReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEndpointsReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEndpointsReqValidator().Validate(ctx, m, opts...)
}

type ValidateAPIEndpointsReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEndpointsReq) ApiEndpointInfoRequestValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_app_type.ApiEndpointInfoRequest)
		return int32(i)
	}
	// ves_io_schema_app_type.ApiEndpointInfoRequest_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema_app_type.ApiEndpointInfoRequest_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_endpoint_info_request")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema_app_type.ApiEndpointInfoRequest, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_endpoint_info_request")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema_app_type.ApiEndpointInfoRequest)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema_app_type.ApiEndpointInfoRequest, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_endpoint_info_request")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_endpoint_info_request")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPIEndpointsReq) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPIEndpointsReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEndpointsReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEndpointsReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_endpoint_info_request"]; exists {
		vOpts := append(opts, db.WithValidateField("api_endpoint_info_request"))
		if err := fv(ctx, m.GetApiEndpointInfoRequest(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEndpointsReqValidator = func() *ValidateAPIEndpointsReq {
	v := &ValidateAPIEndpointsReq{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhApiEndpointInfoRequest := v.ApiEndpointInfoRequestValidationRuleHandler
	rulesApiEndpointInfoRequest := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhApiEndpointInfoRequest(rulesApiEndpointInfoRequest)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEndpointsReq.api_endpoint_info_request: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_endpoint_info_request"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEndpointsReq.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	return v
}()

func APIEndpointsReqValidator() db.Validator {
	return DefaultAPIEndpointsReqValidator
}

// augmented methods on protoc/std generated struct

func (m *APIEndpointsRsp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEndpointsRsp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEndpointsRsp) DeepCopy() *APIEndpointsRsp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEndpointsRsp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEndpointsRsp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEndpointsRsp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEndpointsRspValidator().Validate(ctx, m, opts...)
}

type ValidateAPIEndpointsRsp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEndpointsRsp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEndpointsRsp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEndpointsRsp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["apiep_list"]; exists {

		vOpts := append(opts, db.WithValidateField("apiep_list"))
		for idx, item := range m.GetApiepList() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEndpointsRspValidator = func() *ValidateAPIEndpointsRsp {
	v := &ValidateAPIEndpointsRsp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func APIEndpointsRspValidator() db.Validator {
	return DefaultAPIEndpointsRspValidator
}

// augmented methods on protoc/std generated struct

func (m *ApiEndpointsStatsReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ApiEndpointsStatsReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ApiEndpointsStatsReq) DeepCopy() *ApiEndpointsStatsReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ApiEndpointsStatsReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ApiEndpointsStatsReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ApiEndpointsStatsReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ApiEndpointsStatsReqValidator().Validate(ctx, m, opts...)
}

type ValidateApiEndpointsStatsReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateApiEndpointsStatsReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ApiEndpointsStatsReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ApiEndpointsStatsReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultApiEndpointsStatsReqValidator = func() *ValidateApiEndpointsStatsReq {
	v := &ValidateApiEndpointsStatsReq{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ApiEndpointsStatsReqValidator() db.Validator {
	return DefaultApiEndpointsStatsReqValidator
}

// augmented methods on protoc/std generated struct

func (m *ApiEndpointsStatsRsp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ApiEndpointsStatsRsp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ApiEndpointsStatsRsp) DeepCopy() *ApiEndpointsStatsRsp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ApiEndpointsStatsRsp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ApiEndpointsStatsRsp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ApiEndpointsStatsRsp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ApiEndpointsStatsRspValidator().Validate(ctx, m, opts...)
}

type ValidateApiEndpointsStatsRsp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateApiEndpointsStatsRsp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ApiEndpointsStatsRsp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ApiEndpointsStatsRsp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["discovered"]; exists {

		vOpts := append(opts, db.WithValidateField("discovered"))
		if err := fv(ctx, m.GetDiscovered(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["inventory"]; exists {

		vOpts := append(opts, db.WithValidateField("inventory"))
		if err := fv(ctx, m.GetInventory(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["pii_detected"]; exists {

		vOpts := append(opts, db.WithValidateField("pii_detected"))
		if err := fv(ctx, m.GetPiiDetected(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["shadow"]; exists {

		vOpts := append(opts, db.WithValidateField("shadow"))
		if err := fv(ctx, m.GetShadow(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["total_endpoints"]; exists {

		vOpts := append(opts, db.WithValidateField("total_endpoints"))
		if err := fv(ctx, m.GetTotalEndpoints(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultApiEndpointsStatsRspValidator = func() *ValidateApiEndpointsStatsRsp {
	v := &ValidateApiEndpointsStatsRsp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ApiEndpointsStatsRspValidator() db.Validator {
	return DefaultApiEndpointsStatsRspValidator
}

// augmented methods on protoc/std generated struct

func (m *SwaggerSpecReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SwaggerSpecReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SwaggerSpecReq) DeepCopy() *SwaggerSpecReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SwaggerSpecReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SwaggerSpecReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SwaggerSpecReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SwaggerSpecReqValidator().Validate(ctx, m, opts...)
}

type ValidateSwaggerSpecReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSwaggerSpecReq) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSwaggerSpecReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SwaggerSpecReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SwaggerSpecReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSwaggerSpecReqValidator = func() *ValidateSwaggerSpecReq {
	v := &ValidateSwaggerSpecReq{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SwaggerSpecReq.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	return v
}()

func SwaggerSpecReqValidator() db.Validator {
	return DefaultSwaggerSpecReqValidator
}

// augmented methods on protoc/std generated struct

func (m *SwaggerSpecRsp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SwaggerSpecRsp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SwaggerSpecRsp) DeepCopy() *SwaggerSpecRsp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SwaggerSpecRsp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SwaggerSpecRsp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SwaggerSpecRsp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SwaggerSpecRspValidator().Validate(ctx, m, opts...)
}

type ValidateSwaggerSpecRsp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSwaggerSpecRsp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SwaggerSpecRsp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SwaggerSpecRsp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["swagger_spec"]; exists {

		vOpts := append(opts, db.WithValidateField("swagger_spec"))
		if err := fv(ctx, m.GetSwaggerSpec(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSwaggerSpecRspValidator = func() *ValidateSwaggerSpecRsp {
	v := &ValidateSwaggerSpecRsp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SwaggerSpecRspValidator() db.Validator {
	return DefaultSwaggerSpecRspValidator
}
