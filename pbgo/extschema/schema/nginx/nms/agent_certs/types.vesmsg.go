//
// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package agent_certs

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *GenerateAgentCertRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GenerateAgentCertRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GenerateAgentCertRequest) DeepCopy() *GenerateAgentCertRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GenerateAgentCertRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GenerateAgentCertRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GenerateAgentCertRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GenerateAgentCertRequestValidator().Validate(ctx, m, opts...)
}

func (m *GenerateAgentCertRequest) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetDeploymentRefDRefInfo()

}

func (m *GenerateAgentCertRequest) GetDeploymentRefDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetDeploymentRef()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("deployment.Object")
	dri := db.DRefInfo{
		RefdType:   "deployment.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "deployment_ref",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetDeploymentRefDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GenerateAgentCertRequest) GetDeploymentRefDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "deployment.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: deployment")
	}

	vref := m.GetDeploymentRef()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "deployment.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGenerateAgentCertRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGenerateAgentCertRequest) DeploymentRefValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for deployment_ref")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGenerateAgentCertRequest) CsrValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for csr")
	}

	return validatorFn, nil
}

func (v *ValidateGenerateAgentCertRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GenerateAgentCertRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GenerateAgentCertRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["csr"]; exists {

		vOpts := append(opts, db.WithValidateField("csr"))
		if err := fv(ctx, m.GetCsr(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["deployment_ref"]; exists {

		vOpts := append(opts, db.WithValidateField("deployment_ref"))
		if err := fv(ctx, m.GetDeploymentRef(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["expiration_time"]; exists {

		vOpts := append(opts, db.WithValidateField("expiration_time"))
		if err := fv(ctx, m.GetExpirationTime(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGenerateAgentCertRequestValidator = func() *ValidateGenerateAgentCertRequest {
	v := &ValidateGenerateAgentCertRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDeploymentRef := v.DeploymentRefValidationRuleHandler
	rulesDeploymentRef := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhDeploymentRef(rulesDeploymentRef)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GenerateAgentCertRequest.deployment_ref: %s", err)
		panic(errMsg)
	}
	v.FldValidators["deployment_ref"] = vFn

	vrhCsr := v.CsrValidationRuleHandler
	rulesCsr := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCsr(rulesCsr)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GenerateAgentCertRequest.csr: %s", err)
		panic(errMsg)
	}
	v.FldValidators["csr"] = vFn

	return v
}()

func GenerateAgentCertRequestValidator() db.Validator {
	return DefaultGenerateAgentCertRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *GenerateAgentCertResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GenerateAgentCertResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GenerateAgentCertResponse) DeepCopy() *GenerateAgentCertResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GenerateAgentCertResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GenerateAgentCertResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GenerateAgentCertResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GenerateAgentCertResponseValidator().Validate(ctx, m, opts...)
}

type ValidateGenerateAgentCertResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGenerateAgentCertResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GenerateAgentCertResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GenerateAgentCertResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["certificate"]; exists {

		vOpts := append(opts, db.WithValidateField("certificate"))
		if err := fv(ctx, m.GetCertificate(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["serial_number"]; exists {

		vOpts := append(opts, db.WithValidateField("serial_number"))
		if err := fv(ctx, m.GetSerialNumber(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGenerateAgentCertResponseValidator = func() *ValidateGenerateAgentCertResponse {
	v := &ValidateGenerateAgentCertResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GenerateAgentCertResponseValidator() db.Validator {
	return DefaultGenerateAgentCertResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *RevokeAgentCertRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RevokeAgentCertRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RevokeAgentCertRequest) DeepCopy() *RevokeAgentCertRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RevokeAgentCertRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RevokeAgentCertRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RevokeAgentCertRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RevokeAgentCertRequestValidator().Validate(ctx, m, opts...)
}

func (m *RevokeAgentCertRequest) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetDeploymentRefDRefInfo()

}

func (m *RevokeAgentCertRequest) GetDeploymentRefDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetDeploymentRef()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("deployment.Object")
	dri := db.DRefInfo{
		RefdType:   "deployment.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "deployment_ref",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetDeploymentRefDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *RevokeAgentCertRequest) GetDeploymentRefDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "deployment.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: deployment")
	}

	vref := m.GetDeploymentRef()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "deployment.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateRevokeAgentCertRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRevokeAgentCertRequest) DeploymentRefValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for deployment_ref")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRevokeAgentCertRequest) SerialNumberValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for serial_number")
	}

	return validatorFn, nil
}

func (v *ValidateRevokeAgentCertRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RevokeAgentCertRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RevokeAgentCertRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["deployment_ref"]; exists {

		vOpts := append(opts, db.WithValidateField("deployment_ref"))
		if err := fv(ctx, m.GetDeploymentRef(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["serial_number"]; exists {

		vOpts := append(opts, db.WithValidateField("serial_number"))
		if err := fv(ctx, m.GetSerialNumber(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRevokeAgentCertRequestValidator = func() *ValidateRevokeAgentCertRequest {
	v := &ValidateRevokeAgentCertRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDeploymentRef := v.DeploymentRefValidationRuleHandler
	rulesDeploymentRef := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhDeploymentRef(rulesDeploymentRef)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RevokeAgentCertRequest.deployment_ref: %s", err)
		panic(errMsg)
	}
	v.FldValidators["deployment_ref"] = vFn

	vrhSerialNumber := v.SerialNumberValidationRuleHandler
	rulesSerialNumber := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhSerialNumber(rulesSerialNumber)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RevokeAgentCertRequest.serial_number: %s", err)
		panic(errMsg)
	}
	v.FldValidators["serial_number"] = vFn

	return v
}()

func RevokeAgentCertRequestValidator() db.Validator {
	return DefaultRevokeAgentCertRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *RevokeAgentCertResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RevokeAgentCertResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RevokeAgentCertResponse) DeepCopy() *RevokeAgentCertResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RevokeAgentCertResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RevokeAgentCertResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RevokeAgentCertResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RevokeAgentCertResponseValidator().Validate(ctx, m, opts...)
}

type ValidateRevokeAgentCertResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRevokeAgentCertResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RevokeAgentCertResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RevokeAgentCertResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRevokeAgentCertResponseValidator = func() *ValidateRevokeAgentCertResponse {
	v := &ValidateRevokeAgentCertResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func RevokeAgentCertResponseValidator() db.Validator {
	return DefaultRevokeAgentCertResponseValidator
}
