// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/infraprotect_deny_list_rule/types.proto

package infraprotect_deny_list_rule

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GlobalSpecType
//
// x-displayName: "DDos Transit Deny List Rule"
// DDos Transit Deny List Rule spec
type GlobalSpecType struct {
	// Prefix
	//
	// x-displayName: "Prefix"
	// x-example: "12.13.14.0/24 or 12.13.14.15/32"
	// x-required
	// Prefix
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// expiration
	//
	// x-displayName: "Expiration"
	// x-required
	// Configures how long this deny list rule will stay active before being automatically deleted from the system.
	//
	// Types that are valid to be assigned to Expiration:
	//	*GlobalSpecType_ExpirationNever
	//	*GlobalSpecType_ExpirationTimestamp
	//	*GlobalSpecType_OneHour
	//	*GlobalSpecType_OneDay
	//	*GlobalSpecType_OneMonth
	//	*GlobalSpecType_OneYear
	Expiration isGlobalSpecType_Expiration `protobuf_oneof:"expiration"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0bc56a41d6d4bbd, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_Expiration interface {
	isGlobalSpecType_Expiration()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_ExpirationNever struct {
	ExpirationNever *schema.Empty `protobuf:"bytes,3,opt,name=expiration_never,json=expirationNever,proto3,oneof" json:"expiration_never,omitempty"`
}
type GlobalSpecType_ExpirationTimestamp struct {
	ExpirationTimestamp *types.Timestamp `protobuf:"bytes,4,opt,name=expiration_timestamp,json=expirationTimestamp,proto3,oneof" json:"expiration_timestamp,omitempty"`
}
type GlobalSpecType_OneHour struct {
	OneHour *schema.Empty `protobuf:"bytes,5,opt,name=one_hour,json=oneHour,proto3,oneof" json:"one_hour,omitempty"`
}
type GlobalSpecType_OneDay struct {
	OneDay *schema.Empty `protobuf:"bytes,6,opt,name=one_day,json=oneDay,proto3,oneof" json:"one_day,omitempty"`
}
type GlobalSpecType_OneMonth struct {
	OneMonth *schema.Empty `protobuf:"bytes,7,opt,name=one_month,json=oneMonth,proto3,oneof" json:"one_month,omitempty"`
}
type GlobalSpecType_OneYear struct {
	OneYear *schema.Empty `protobuf:"bytes,8,opt,name=one_year,json=oneYear,proto3,oneof" json:"one_year,omitempty"`
}

func (*GlobalSpecType_ExpirationNever) isGlobalSpecType_Expiration()     {}
func (*GlobalSpecType_ExpirationTimestamp) isGlobalSpecType_Expiration() {}
func (*GlobalSpecType_OneHour) isGlobalSpecType_Expiration()             {}
func (*GlobalSpecType_OneDay) isGlobalSpecType_Expiration()              {}
func (*GlobalSpecType_OneMonth) isGlobalSpecType_Expiration()            {}
func (*GlobalSpecType_OneYear) isGlobalSpecType_Expiration()             {}

func (m *GlobalSpecType) GetExpiration() isGlobalSpecType_Expiration {
	if m != nil {
		return m.Expiration
	}
	return nil
}

func (m *GlobalSpecType) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *GlobalSpecType) GetExpirationNever() *schema.Empty {
	if x, ok := m.GetExpiration().(*GlobalSpecType_ExpirationNever); ok {
		return x.ExpirationNever
	}
	return nil
}

func (m *GlobalSpecType) GetExpirationTimestamp() *types.Timestamp {
	if x, ok := m.GetExpiration().(*GlobalSpecType_ExpirationTimestamp); ok {
		return x.ExpirationTimestamp
	}
	return nil
}

func (m *GlobalSpecType) GetOneHour() *schema.Empty {
	if x, ok := m.GetExpiration().(*GlobalSpecType_OneHour); ok {
		return x.OneHour
	}
	return nil
}

func (m *GlobalSpecType) GetOneDay() *schema.Empty {
	if x, ok := m.GetExpiration().(*GlobalSpecType_OneDay); ok {
		return x.OneDay
	}
	return nil
}

func (m *GlobalSpecType) GetOneMonth() *schema.Empty {
	if x, ok := m.GetExpiration().(*GlobalSpecType_OneMonth); ok {
		return x.OneMonth
	}
	return nil
}

func (m *GlobalSpecType) GetOneYear() *schema.Empty {
	if x, ok := m.GetExpiration().(*GlobalSpecType_OneYear); ok {
		return x.OneYear
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_ExpirationNever)(nil),
		(*GlobalSpecType_ExpirationTimestamp)(nil),
		(*GlobalSpecType_OneHour)(nil),
		(*GlobalSpecType_OneDay)(nil),
		(*GlobalSpecType_OneMonth)(nil),
		(*GlobalSpecType_OneYear)(nil),
	}
}

// DDoS transit Deny List Rule
//
// x-displayName: "Create DDoS transit Deny List Rule"
// Creates a DDoS transit Deny List Rule
type CreateSpecType struct {
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Types that are valid to be assigned to Expiration:
	//	*CreateSpecType_ExpirationNever
	//	*CreateSpecType_ExpirationTimestamp
	//	*CreateSpecType_OneHour
	//	*CreateSpecType_OneDay
	//	*CreateSpecType_OneMonth
	//	*CreateSpecType_OneYear
	Expiration isCreateSpecType_Expiration `protobuf_oneof:"expiration"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0bc56a41d6d4bbd, []int{1}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_Expiration interface {
	isCreateSpecType_Expiration()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_ExpirationNever struct {
	ExpirationNever *schema.Empty `protobuf:"bytes,3,opt,name=expiration_never,json=expirationNever,proto3,oneof" json:"expiration_never,omitempty"`
}
type CreateSpecType_ExpirationTimestamp struct {
	ExpirationTimestamp *types.Timestamp `protobuf:"bytes,4,opt,name=expiration_timestamp,json=expirationTimestamp,proto3,oneof" json:"expiration_timestamp,omitempty"`
}
type CreateSpecType_OneHour struct {
	OneHour *schema.Empty `protobuf:"bytes,5,opt,name=one_hour,json=oneHour,proto3,oneof" json:"one_hour,omitempty"`
}
type CreateSpecType_OneDay struct {
	OneDay *schema.Empty `protobuf:"bytes,6,opt,name=one_day,json=oneDay,proto3,oneof" json:"one_day,omitempty"`
}
type CreateSpecType_OneMonth struct {
	OneMonth *schema.Empty `protobuf:"bytes,7,opt,name=one_month,json=oneMonth,proto3,oneof" json:"one_month,omitempty"`
}
type CreateSpecType_OneYear struct {
	OneYear *schema.Empty `protobuf:"bytes,8,opt,name=one_year,json=oneYear,proto3,oneof" json:"one_year,omitempty"`
}

func (*CreateSpecType_ExpirationNever) isCreateSpecType_Expiration()     {}
func (*CreateSpecType_ExpirationTimestamp) isCreateSpecType_Expiration() {}
func (*CreateSpecType_OneHour) isCreateSpecType_Expiration()             {}
func (*CreateSpecType_OneDay) isCreateSpecType_Expiration()              {}
func (*CreateSpecType_OneMonth) isCreateSpecType_Expiration()            {}
func (*CreateSpecType_OneYear) isCreateSpecType_Expiration()             {}

func (m *CreateSpecType) GetExpiration() isCreateSpecType_Expiration {
	if m != nil {
		return m.Expiration
	}
	return nil
}

func (m *CreateSpecType) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *CreateSpecType) GetExpirationNever() *schema.Empty {
	if x, ok := m.GetExpiration().(*CreateSpecType_ExpirationNever); ok {
		return x.ExpirationNever
	}
	return nil
}

func (m *CreateSpecType) GetExpirationTimestamp() *types.Timestamp {
	if x, ok := m.GetExpiration().(*CreateSpecType_ExpirationTimestamp); ok {
		return x.ExpirationTimestamp
	}
	return nil
}

func (m *CreateSpecType) GetOneHour() *schema.Empty {
	if x, ok := m.GetExpiration().(*CreateSpecType_OneHour); ok {
		return x.OneHour
	}
	return nil
}

func (m *CreateSpecType) GetOneDay() *schema.Empty {
	if x, ok := m.GetExpiration().(*CreateSpecType_OneDay); ok {
		return x.OneDay
	}
	return nil
}

func (m *CreateSpecType) GetOneMonth() *schema.Empty {
	if x, ok := m.GetExpiration().(*CreateSpecType_OneMonth); ok {
		return x.OneMonth
	}
	return nil
}

func (m *CreateSpecType) GetOneYear() *schema.Empty {
	if x, ok := m.GetExpiration().(*CreateSpecType_OneYear); ok {
		return x.OneYear
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_ExpirationNever)(nil),
		(*CreateSpecType_ExpirationTimestamp)(nil),
		(*CreateSpecType_OneHour)(nil),
		(*CreateSpecType_OneDay)(nil),
		(*CreateSpecType_OneMonth)(nil),
		(*CreateSpecType_OneYear)(nil),
	}
}

// DDoS transit Deny List Rule
//
// x-displayName: "Replace DDoS transit Deny List Rule"
// Amends a DDoS transit Deny List Rule
type ReplaceSpecType struct {
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Types that are valid to be assigned to Expiration:
	//	*ReplaceSpecType_ExpirationNever
	//	*ReplaceSpecType_ExpirationTimestamp
	//	*ReplaceSpecType_OneHour
	//	*ReplaceSpecType_OneDay
	//	*ReplaceSpecType_OneMonth
	//	*ReplaceSpecType_OneYear
	Expiration isReplaceSpecType_Expiration `protobuf_oneof:"expiration"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0bc56a41d6d4bbd, []int{2}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_Expiration interface {
	isReplaceSpecType_Expiration()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_ExpirationNever struct {
	ExpirationNever *schema.Empty `protobuf:"bytes,3,opt,name=expiration_never,json=expirationNever,proto3,oneof" json:"expiration_never,omitempty"`
}
type ReplaceSpecType_ExpirationTimestamp struct {
	ExpirationTimestamp *types.Timestamp `protobuf:"bytes,4,opt,name=expiration_timestamp,json=expirationTimestamp,proto3,oneof" json:"expiration_timestamp,omitempty"`
}
type ReplaceSpecType_OneHour struct {
	OneHour *schema.Empty `protobuf:"bytes,5,opt,name=one_hour,json=oneHour,proto3,oneof" json:"one_hour,omitempty"`
}
type ReplaceSpecType_OneDay struct {
	OneDay *schema.Empty `protobuf:"bytes,6,opt,name=one_day,json=oneDay,proto3,oneof" json:"one_day,omitempty"`
}
type ReplaceSpecType_OneMonth struct {
	OneMonth *schema.Empty `protobuf:"bytes,7,opt,name=one_month,json=oneMonth,proto3,oneof" json:"one_month,omitempty"`
}
type ReplaceSpecType_OneYear struct {
	OneYear *schema.Empty `protobuf:"bytes,8,opt,name=one_year,json=oneYear,proto3,oneof" json:"one_year,omitempty"`
}

func (*ReplaceSpecType_ExpirationNever) isReplaceSpecType_Expiration()     {}
func (*ReplaceSpecType_ExpirationTimestamp) isReplaceSpecType_Expiration() {}
func (*ReplaceSpecType_OneHour) isReplaceSpecType_Expiration()             {}
func (*ReplaceSpecType_OneDay) isReplaceSpecType_Expiration()              {}
func (*ReplaceSpecType_OneMonth) isReplaceSpecType_Expiration()            {}
func (*ReplaceSpecType_OneYear) isReplaceSpecType_Expiration()             {}

func (m *ReplaceSpecType) GetExpiration() isReplaceSpecType_Expiration {
	if m != nil {
		return m.Expiration
	}
	return nil
}

func (m *ReplaceSpecType) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *ReplaceSpecType) GetExpirationNever() *schema.Empty {
	if x, ok := m.GetExpiration().(*ReplaceSpecType_ExpirationNever); ok {
		return x.ExpirationNever
	}
	return nil
}

func (m *ReplaceSpecType) GetExpirationTimestamp() *types.Timestamp {
	if x, ok := m.GetExpiration().(*ReplaceSpecType_ExpirationTimestamp); ok {
		return x.ExpirationTimestamp
	}
	return nil
}

func (m *ReplaceSpecType) GetOneHour() *schema.Empty {
	if x, ok := m.GetExpiration().(*ReplaceSpecType_OneHour); ok {
		return x.OneHour
	}
	return nil
}

func (m *ReplaceSpecType) GetOneDay() *schema.Empty {
	if x, ok := m.GetExpiration().(*ReplaceSpecType_OneDay); ok {
		return x.OneDay
	}
	return nil
}

func (m *ReplaceSpecType) GetOneMonth() *schema.Empty {
	if x, ok := m.GetExpiration().(*ReplaceSpecType_OneMonth); ok {
		return x.OneMonth
	}
	return nil
}

func (m *ReplaceSpecType) GetOneYear() *schema.Empty {
	if x, ok := m.GetExpiration().(*ReplaceSpecType_OneYear); ok {
		return x.OneYear
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_ExpirationNever)(nil),
		(*ReplaceSpecType_ExpirationTimestamp)(nil),
		(*ReplaceSpecType_OneHour)(nil),
		(*ReplaceSpecType_OneDay)(nil),
		(*ReplaceSpecType_OneMonth)(nil),
		(*ReplaceSpecType_OneYear)(nil),
	}
}

// Get DDoS transit Deny List Rule
//
// x-displayName: "Get Infraprotect Deny List Rule"
// Get DDoS transit Deny List Rule
type GetSpecType struct {
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Types that are valid to be assigned to Expiration:
	//	*GetSpecType_ExpirationNever
	//	*GetSpecType_ExpirationTimestamp
	Expiration isGetSpecType_Expiration `protobuf_oneof:"expiration"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0bc56a41d6d4bbd, []int{3}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_Expiration interface {
	isGetSpecType_Expiration()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_ExpirationNever struct {
	ExpirationNever *schema.Empty `protobuf:"bytes,3,opt,name=expiration_never,json=expirationNever,proto3,oneof" json:"expiration_never,omitempty"`
}
type GetSpecType_ExpirationTimestamp struct {
	ExpirationTimestamp *types.Timestamp `protobuf:"bytes,4,opt,name=expiration_timestamp,json=expirationTimestamp,proto3,oneof" json:"expiration_timestamp,omitempty"`
}

func (*GetSpecType_ExpirationNever) isGetSpecType_Expiration()     {}
func (*GetSpecType_ExpirationTimestamp) isGetSpecType_Expiration() {}

func (m *GetSpecType) GetExpiration() isGetSpecType_Expiration {
	if m != nil {
		return m.Expiration
	}
	return nil
}

func (m *GetSpecType) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *GetSpecType) GetExpirationNever() *schema.Empty {
	if x, ok := m.GetExpiration().(*GetSpecType_ExpirationNever); ok {
		return x.ExpirationNever
	}
	return nil
}

func (m *GetSpecType) GetExpirationTimestamp() *types.Timestamp {
	if x, ok := m.GetExpiration().(*GetSpecType_ExpirationTimestamp); ok {
		return x.ExpirationTimestamp
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_ExpirationNever)(nil),
		(*GetSpecType_ExpirationTimestamp)(nil),
	}
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.infraprotect_deny_list_rule.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.infraprotect_deny_list_rule.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.infraprotect_deny_list_rule.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.infraprotect_deny_list_rule.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.infraprotect_deny_list_rule.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.infraprotect_deny_list_rule.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.infraprotect_deny_list_rule.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.infraprotect_deny_list_rule.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/infraprotect_deny_list_rule/types.proto", fileDescriptor_e0bc56a41d6d4bbd)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/infraprotect_deny_list_rule/types.proto", fileDescriptor_e0bc56a41d6d4bbd)
}

var fileDescriptor_e0bc56a41d6d4bbd = []byte{
	// 615 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xf6, 0xd5, 0x4d, 0x9a, 0x5e, 0xa5, 0xb6, 0x98, 0xaa, 0x72, 0x43, 0x75, 0x54, 0x99, 0x0a,
	0x52, 0x6d, 0xd1, 0xaa, 0x0b, 0x03, 0x12, 0x29, 0x55, 0x2b, 0x24, 0x7e, 0x28, 0x74, 0x29, 0x12,
	0xb2, 0x2e, 0xc9, 0x8b, 0x63, 0x61, 0xfb, 0x4e, 0xe7, 0x73, 0xa8, 0x37, 0xc4, 0x5f, 0x00, 0x1b,
	0x0b, 0x3b, 0xff, 0x02, 0xed, 0xd2, 0x11, 0x75, 0xca, 0xd8, 0x91, 0x3a, 0x0b, 0x30, 0x75, 0x66,
	0x42, 0x76, 0x7e, 0xba, 0xa0, 0x54, 0x2c, 0x48, 0x95, 0xba, 0xdd, 0xdd, 0xf7, 0xbe, 0xa7, 0xef,
	0x7d, 0xdf, 0x8b, 0x62, 0xbc, 0xd9, 0x82, 0xc0, 0x70, 0x98, 0x19, 0xd4, 0x9a, 0xe0, 0x51, 0xd3,
	0xf1, 0x1b, 0x82, 0x72, 0xc1, 0x24, 0xd4, 0xa4, 0x55, 0x07, 0x3f, 0xb2, 0x5c, 0x27, 0x90, 0x96,
	0x08, 0x5d, 0x30, 0x65, 0xc4, 0x21, 0x30, 0x12, 0x90, 0x69, 0x77, 0xba, 0x34, 0xa3, 0x4b, 0x33,
	0xc6, 0xd0, 0x8a, 0x6b, 0xb6, 0x23, 0x9b, 0x61, 0xd5, 0xa8, 0x31, 0xcf, 0xb4, 0x99, 0xcd, 0xcc,
	0xb4, 0x43, 0x35, 0x6c, 0xa4, 0xb7, 0xf4, 0x92, 0x9e, 0xba, 0x9d, 0x8b, 0xb7, 0x6d, 0xc6, 0x6c,
	0x17, 0x86, 0x55, 0xd2, 0xf1, 0x20, 0x90, 0xd4, 0xe3, 0xbd, 0x82, 0x5b, 0x59, 0xc5, 0x8c, 0x4b,
	0x87, 0xf9, 0x3d, 0x5d, 0xc5, 0xa5, 0x2c, 0x38, 0x22, 0xb9, 0xb8, 0x9c, 0x85, 0x5a, 0xd4, 0x75,
	0xea, 0x54, 0x42, 0x0f, 0x5d, 0xb9, 0x80, 0x3a, 0xf0, 0xc6, 0xca, 0xb4, 0x2e, 0x7d, 0x98, 0xc4,
	0xb3, 0x3b, 0x2e, 0xab, 0x52, 0xf7, 0x05, 0x87, 0xda, 0x5e, 0xc4, 0x41, 0x2b, 0xe1, 0x3c, 0x17,
	0xd0, 0x70, 0x0e, 0x74, 0xb4, 0x82, 0x56, 0xa7, 0xcb, 0xf8, 0xf0, 0xc7, 0xb1, 0x9a, 0x13, 0xea,
	0xc7, 0x1c, 0xaa, 0xf4, 0x10, 0xed, 0x21, 0x9e, 0x87, 0x03, 0xee, 0x08, 0x9a, 0xf4, 0xb2, 0x7c,
	0x68, 0x81, 0xd0, 0xd5, 0x15, 0xb4, 0x3a, 0xb3, 0xbe, 0x60, 0x64, 0x4d, 0xdc, 0xf6, 0xb8, 0x8c,
	0x76, 0x95, 0xca, 0xdc, 0xb0, 0xfe, 0x69, 0x52, 0xae, 0x3d, 0xc3, 0x0b, 0x23, 0x2d, 0x06, 0x7e,
	0xe8, 0x93, 0x69, 0x9b, 0xa2, 0xd1, 0x75, 0xcc, 0xe8, 0x3b, 0x66, 0xec, 0xf5, 0x2b, 0x76, 0x95,
	0xca, 0xcd, 0x21, 0x73, 0xf0, 0xac, 0xdd, 0xc3, 0x05, 0xe6, 0x83, 0xd5, 0x64, 0xa1, 0xd0, 0x73,
	0x63, 0xb5, 0x4c, 0x31, 0x1f, 0x76, 0x59, 0x28, 0x34, 0x13, 0x27, 0x47, 0xab, 0x4e, 0x23, 0x3d,
	0x3f, 0x96, 0x91, 0x67, 0x3e, 0x3c, 0xa2, 0x91, 0xb6, 0x81, 0xa7, 0x13, 0x82, 0xc7, 0x7c, 0xd9,
	0xd4, 0xa7, 0xc6, 0x52, 0x12, 0x31, 0x4f, 0x92, 0xba, 0xbe, 0xb0, 0x08, 0xa8, 0xd0, 0x0b, 0x97,
	0x0a, 0xdb, 0x07, 0x2a, 0xee, 0xbf, 0x3a, 0x39, 0x42, 0xfb, 0x58, 0xc3, 0xf9, 0xe7, 0xa9, 0xdf,
	0xc5, 0x42, 0x3f, 0x13, 0xbc, 0x85, 0xf1, 0xf6, 0x60, 0xf8, 0xbb, 0x9b, 0x78, 0x03, 0x2f, 0xfd,
	0x99, 0xc5, 0x7a, 0x2e, 0xf5, 0x18, 0x2f, 0xfe, 0xdd, 0xe3, 0xf2, 0x22, 0xc6, 0xc3, 0x77, 0xad,
	0x70, 0x7c, 0x84, 0xd4, 0xf6, 0x11, 0x9a, 0x78, 0x3c, 0x59, 0x98, 0x98, 0x57, 0x4b, 0x5f, 0x54,
	0x3c, 0xbb, 0x25, 0x80, 0x4a, 0x18, 0xec, 0xc4, 0x62, 0x76, 0x27, 0xae, 0xf7, 0xe0, 0x3f, 0xed,
	0xc1, 0x8d, 0x93, 0x07, 0x17, 0x7e, 0x9e, 0xe5, 0xe5, 0x4c, 0x76, 0xb3, 0xef, 0x7e, 0xa1, 0x91,
	0x7b, 0xe9, 0x50, 0xc5, 0x73, 0x15, 0xe0, 0x2e, 0xad, 0x5d, 0x87, 0x77, 0xe5, 0xc2, 0xfb, 0x89,
	0xf0, 0xcc, 0x0e, 0xc8, 0xab, 0x18, 0xdc, 0x3f, 0x0f, 0x5b, 0xfe, 0x84, 0xda, 0x67, 0x44, 0x39,
	0x3d, 0x23, 0xca, 0xf9, 0x19, 0x41, 0x6f, 0x63, 0x82, 0x3e, 0xc7, 0x04, 0x7d, 0x8d, 0x09, 0x6a,
	0xc7, 0x04, 0x9d, 0xc6, 0x04, 0x7d, 0x8b, 0x09, 0xfa, 0x1e, 0x13, 0xe5, 0x3c, 0x26, 0xe8, 0x7d,
	0x87, 0x28, 0xc7, 0x1d, 0x82, 0xda, 0x1d, 0xa2, 0x9c, 0x76, 0x88, 0xf2, 0xd2, 0xb2, 0x19, 0x7f,
	0x6d, 0x1b, 0x2d, 0xe6, 0x4a, 0x10, 0x82, 0x1a, 0x61, 0x60, 0xa6, 0x87, 0x06, 0x13, 0xde, 0x1a,
	0x17, 0xac, 0xe5, 0xd4, 0x41, 0xac, 0xf5, 0x61, 0x93, 0x57, 0x6d, 0x66, 0xc2, 0x81, 0xec, 0xfd,
	0x13, 0x5e, 0xfe, 0x61, 0x50, 0xcd, 0xa7, 0xb3, 0x6f, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x0d,
	0xdf, 0xa0, 0x8b, 0x4c, 0x08, 0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	if that1.Expiration == nil {
		if this.Expiration != nil {
			return false
		}
	} else if this.Expiration == nil {
		return false
	} else if !this.Expiration.Equal(that1.Expiration) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ExpirationNever) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ExpirationNever)
	if !ok {
		that2, ok := that.(GlobalSpecType_ExpirationNever)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExpirationNever.Equal(that1.ExpirationNever) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ExpirationTimestamp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ExpirationTimestamp)
	if !ok {
		that2, ok := that.(GlobalSpecType_ExpirationTimestamp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExpirationTimestamp.Equal(that1.ExpirationTimestamp) {
		return false
	}
	return true
}
func (this *GlobalSpecType_OneHour) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_OneHour)
	if !ok {
		that2, ok := that.(GlobalSpecType_OneHour)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OneHour.Equal(that1.OneHour) {
		return false
	}
	return true
}
func (this *GlobalSpecType_OneDay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_OneDay)
	if !ok {
		that2, ok := that.(GlobalSpecType_OneDay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OneDay.Equal(that1.OneDay) {
		return false
	}
	return true
}
func (this *GlobalSpecType_OneMonth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_OneMonth)
	if !ok {
		that2, ok := that.(GlobalSpecType_OneMonth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OneMonth.Equal(that1.OneMonth) {
		return false
	}
	return true
}
func (this *GlobalSpecType_OneYear) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_OneYear)
	if !ok {
		that2, ok := that.(GlobalSpecType_OneYear)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OneYear.Equal(that1.OneYear) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	if that1.Expiration == nil {
		if this.Expiration != nil {
			return false
		}
	} else if this.Expiration == nil {
		return false
	} else if !this.Expiration.Equal(that1.Expiration) {
		return false
	}
	return true
}
func (this *CreateSpecType_ExpirationNever) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ExpirationNever)
	if !ok {
		that2, ok := that.(CreateSpecType_ExpirationNever)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExpirationNever.Equal(that1.ExpirationNever) {
		return false
	}
	return true
}
func (this *CreateSpecType_ExpirationTimestamp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ExpirationTimestamp)
	if !ok {
		that2, ok := that.(CreateSpecType_ExpirationTimestamp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExpirationTimestamp.Equal(that1.ExpirationTimestamp) {
		return false
	}
	return true
}
func (this *CreateSpecType_OneHour) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_OneHour)
	if !ok {
		that2, ok := that.(CreateSpecType_OneHour)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OneHour.Equal(that1.OneHour) {
		return false
	}
	return true
}
func (this *CreateSpecType_OneDay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_OneDay)
	if !ok {
		that2, ok := that.(CreateSpecType_OneDay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OneDay.Equal(that1.OneDay) {
		return false
	}
	return true
}
func (this *CreateSpecType_OneMonth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_OneMonth)
	if !ok {
		that2, ok := that.(CreateSpecType_OneMonth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OneMonth.Equal(that1.OneMonth) {
		return false
	}
	return true
}
func (this *CreateSpecType_OneYear) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_OneYear)
	if !ok {
		that2, ok := that.(CreateSpecType_OneYear)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OneYear.Equal(that1.OneYear) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	if that1.Expiration == nil {
		if this.Expiration != nil {
			return false
		}
	} else if this.Expiration == nil {
		return false
	} else if !this.Expiration.Equal(that1.Expiration) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ExpirationNever) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ExpirationNever)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ExpirationNever)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExpirationNever.Equal(that1.ExpirationNever) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ExpirationTimestamp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ExpirationTimestamp)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ExpirationTimestamp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExpirationTimestamp.Equal(that1.ExpirationTimestamp) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_OneHour) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_OneHour)
	if !ok {
		that2, ok := that.(ReplaceSpecType_OneHour)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OneHour.Equal(that1.OneHour) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_OneDay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_OneDay)
	if !ok {
		that2, ok := that.(ReplaceSpecType_OneDay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OneDay.Equal(that1.OneDay) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_OneMonth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_OneMonth)
	if !ok {
		that2, ok := that.(ReplaceSpecType_OneMonth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OneMonth.Equal(that1.OneMonth) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_OneYear) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_OneYear)
	if !ok {
		that2, ok := that.(ReplaceSpecType_OneYear)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OneYear.Equal(that1.OneYear) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	if that1.Expiration == nil {
		if this.Expiration != nil {
			return false
		}
	} else if this.Expiration == nil {
		return false
	} else if !this.Expiration.Equal(that1.Expiration) {
		return false
	}
	return true
}
func (this *GetSpecType_ExpirationNever) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ExpirationNever)
	if !ok {
		that2, ok := that.(GetSpecType_ExpirationNever)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExpirationNever.Equal(that1.ExpirationNever) {
		return false
	}
	return true
}
func (this *GetSpecType_ExpirationTimestamp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ExpirationTimestamp)
	if !ok {
		that2, ok := that.(GetSpecType_ExpirationTimestamp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExpirationTimestamp.Equal(that1.ExpirationTimestamp) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&infraprotect_deny_list_rule.GlobalSpecType{")
	s = append(s, "Prefix: "+fmt.Sprintf("%#v", this.Prefix)+",\n")
	if this.Expiration != nil {
		s = append(s, "Expiration: "+fmt.Sprintf("%#v", this.Expiration)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_ExpirationNever) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_deny_list_rule.GlobalSpecType_ExpirationNever{` +
		`ExpirationNever:` + fmt.Sprintf("%#v", this.ExpirationNever) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ExpirationTimestamp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_deny_list_rule.GlobalSpecType_ExpirationTimestamp{` +
		`ExpirationTimestamp:` + fmt.Sprintf("%#v", this.ExpirationTimestamp) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_OneHour) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_deny_list_rule.GlobalSpecType_OneHour{` +
		`OneHour:` + fmt.Sprintf("%#v", this.OneHour) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_OneDay) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_deny_list_rule.GlobalSpecType_OneDay{` +
		`OneDay:` + fmt.Sprintf("%#v", this.OneDay) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_OneMonth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_deny_list_rule.GlobalSpecType_OneMonth{` +
		`OneMonth:` + fmt.Sprintf("%#v", this.OneMonth) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_OneYear) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_deny_list_rule.GlobalSpecType_OneYear{` +
		`OneYear:` + fmt.Sprintf("%#v", this.OneYear) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&infraprotect_deny_list_rule.CreateSpecType{")
	s = append(s, "Prefix: "+fmt.Sprintf("%#v", this.Prefix)+",\n")
	if this.Expiration != nil {
		s = append(s, "Expiration: "+fmt.Sprintf("%#v", this.Expiration)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_ExpirationNever) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_deny_list_rule.CreateSpecType_ExpirationNever{` +
		`ExpirationNever:` + fmt.Sprintf("%#v", this.ExpirationNever) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ExpirationTimestamp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_deny_list_rule.CreateSpecType_ExpirationTimestamp{` +
		`ExpirationTimestamp:` + fmt.Sprintf("%#v", this.ExpirationTimestamp) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_OneHour) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_deny_list_rule.CreateSpecType_OneHour{` +
		`OneHour:` + fmt.Sprintf("%#v", this.OneHour) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_OneDay) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_deny_list_rule.CreateSpecType_OneDay{` +
		`OneDay:` + fmt.Sprintf("%#v", this.OneDay) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_OneMonth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_deny_list_rule.CreateSpecType_OneMonth{` +
		`OneMonth:` + fmt.Sprintf("%#v", this.OneMonth) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_OneYear) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_deny_list_rule.CreateSpecType_OneYear{` +
		`OneYear:` + fmt.Sprintf("%#v", this.OneYear) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&infraprotect_deny_list_rule.ReplaceSpecType{")
	s = append(s, "Prefix: "+fmt.Sprintf("%#v", this.Prefix)+",\n")
	if this.Expiration != nil {
		s = append(s, "Expiration: "+fmt.Sprintf("%#v", this.Expiration)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_ExpirationNever) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_deny_list_rule.ReplaceSpecType_ExpirationNever{` +
		`ExpirationNever:` + fmt.Sprintf("%#v", this.ExpirationNever) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ExpirationTimestamp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_deny_list_rule.ReplaceSpecType_ExpirationTimestamp{` +
		`ExpirationTimestamp:` + fmt.Sprintf("%#v", this.ExpirationTimestamp) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_OneHour) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_deny_list_rule.ReplaceSpecType_OneHour{` +
		`OneHour:` + fmt.Sprintf("%#v", this.OneHour) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_OneDay) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_deny_list_rule.ReplaceSpecType_OneDay{` +
		`OneDay:` + fmt.Sprintf("%#v", this.OneDay) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_OneMonth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_deny_list_rule.ReplaceSpecType_OneMonth{` +
		`OneMonth:` + fmt.Sprintf("%#v", this.OneMonth) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_OneYear) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_deny_list_rule.ReplaceSpecType_OneYear{` +
		`OneYear:` + fmt.Sprintf("%#v", this.OneYear) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&infraprotect_deny_list_rule.GetSpecType{")
	s = append(s, "Prefix: "+fmt.Sprintf("%#v", this.Prefix)+",\n")
	if this.Expiration != nil {
		s = append(s, "Expiration: "+fmt.Sprintf("%#v", this.Expiration)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_ExpirationNever) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_deny_list_rule.GetSpecType_ExpirationNever{` +
		`ExpirationNever:` + fmt.Sprintf("%#v", this.ExpirationNever) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ExpirationTimestamp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_deny_list_rule.GetSpecType_ExpirationTimestamp{` +
		`ExpirationTimestamp:` + fmt.Sprintf("%#v", this.ExpirationTimestamp) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expiration != nil {
		{
			size := m.Expiration.Size()
			i -= size
			if _, err := m.Expiration.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_ExpirationNever) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ExpirationNever) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExpirationNever != nil {
		{
			size, err := m.ExpirationNever.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ExpirationTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ExpirationTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExpirationTimestamp != nil {
		{
			size, err := m.ExpirationTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_OneHour) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_OneHour) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OneHour != nil {
		{
			size, err := m.OneHour.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_OneDay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_OneDay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OneDay != nil {
		{
			size, err := m.OneDay.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_OneMonth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_OneMonth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OneMonth != nil {
		{
			size, err := m.OneMonth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_OneYear) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_OneYear) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OneYear != nil {
		{
			size, err := m.OneYear.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expiration != nil {
		{
			size := m.Expiration.Size()
			i -= size
			if _, err := m.Expiration.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_ExpirationNever) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ExpirationNever) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExpirationNever != nil {
		{
			size, err := m.ExpirationNever.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ExpirationTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ExpirationTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExpirationTimestamp != nil {
		{
			size, err := m.ExpirationTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_OneHour) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_OneHour) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OneHour != nil {
		{
			size, err := m.OneHour.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_OneDay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_OneDay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OneDay != nil {
		{
			size, err := m.OneDay.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_OneMonth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_OneMonth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OneMonth != nil {
		{
			size, err := m.OneMonth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_OneYear) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_OneYear) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OneYear != nil {
		{
			size, err := m.OneYear.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expiration != nil {
		{
			size := m.Expiration.Size()
			i -= size
			if _, err := m.Expiration.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_ExpirationNever) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ExpirationNever) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExpirationNever != nil {
		{
			size, err := m.ExpirationNever.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ExpirationTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ExpirationTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExpirationTimestamp != nil {
		{
			size, err := m.ExpirationTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_OneHour) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_OneHour) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OneHour != nil {
		{
			size, err := m.OneHour.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_OneDay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_OneDay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OneDay != nil {
		{
			size, err := m.OneDay.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_OneMonth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_OneMonth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OneMonth != nil {
		{
			size, err := m.OneMonth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_OneYear) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_OneYear) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OneYear != nil {
		{
			size, err := m.OneYear.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expiration != nil {
		{
			size := m.Expiration.Size()
			i -= size
			if _, err := m.Expiration.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_ExpirationNever) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ExpirationNever) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExpirationNever != nil {
		{
			size, err := m.ExpirationNever.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ExpirationTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ExpirationTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExpirationTimestamp != nil {
		{
			size, err := m.ExpirationTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Expiration != nil {
		n += m.Expiration.Size()
	}
	return n
}

func (m *GlobalSpecType_ExpirationNever) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpirationNever != nil {
		l = m.ExpirationNever.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ExpirationTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpirationTimestamp != nil {
		l = m.ExpirationTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_OneHour) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OneHour != nil {
		l = m.OneHour.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_OneDay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OneDay != nil {
		l = m.OneDay.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_OneMonth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OneMonth != nil {
		l = m.OneMonth.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_OneYear) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OneYear != nil {
		l = m.OneYear.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Expiration != nil {
		n += m.Expiration.Size()
	}
	return n
}

func (m *CreateSpecType_ExpirationNever) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpirationNever != nil {
		l = m.ExpirationNever.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ExpirationTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpirationTimestamp != nil {
		l = m.ExpirationTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_OneHour) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OneHour != nil {
		l = m.OneHour.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_OneDay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OneDay != nil {
		l = m.OneDay.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_OneMonth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OneMonth != nil {
		l = m.OneMonth.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_OneYear) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OneYear != nil {
		l = m.OneYear.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Expiration != nil {
		n += m.Expiration.Size()
	}
	return n
}

func (m *ReplaceSpecType_ExpirationNever) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpirationNever != nil {
		l = m.ExpirationNever.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ExpirationTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpirationTimestamp != nil {
		l = m.ExpirationTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_OneHour) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OneHour != nil {
		l = m.OneHour.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_OneDay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OneDay != nil {
		l = m.OneDay.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_OneMonth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OneMonth != nil {
		l = m.OneMonth.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_OneYear) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OneYear != nil {
		l = m.OneYear.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Expiration != nil {
		n += m.Expiration.Size()
	}
	return n
}

func (m *GetSpecType_ExpirationNever) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpirationNever != nil {
		l = m.ExpirationNever.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ExpirationTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpirationTimestamp != nil {
		l = m.ExpirationTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`Expiration:` + fmt.Sprintf("%v", this.Expiration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ExpirationNever) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ExpirationNever{`,
		`ExpirationNever:` + strings.Replace(fmt.Sprintf("%v", this.ExpirationNever), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ExpirationTimestamp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ExpirationTimestamp{`,
		`ExpirationTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.ExpirationTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_OneHour) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_OneHour{`,
		`OneHour:` + strings.Replace(fmt.Sprintf("%v", this.OneHour), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_OneDay) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_OneDay{`,
		`OneDay:` + strings.Replace(fmt.Sprintf("%v", this.OneDay), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_OneMonth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_OneMonth{`,
		`OneMonth:` + strings.Replace(fmt.Sprintf("%v", this.OneMonth), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_OneYear) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_OneYear{`,
		`OneYear:` + strings.Replace(fmt.Sprintf("%v", this.OneYear), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`Expiration:` + fmt.Sprintf("%v", this.Expiration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ExpirationNever) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ExpirationNever{`,
		`ExpirationNever:` + strings.Replace(fmt.Sprintf("%v", this.ExpirationNever), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ExpirationTimestamp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ExpirationTimestamp{`,
		`ExpirationTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.ExpirationTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_OneHour) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_OneHour{`,
		`OneHour:` + strings.Replace(fmt.Sprintf("%v", this.OneHour), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_OneDay) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_OneDay{`,
		`OneDay:` + strings.Replace(fmt.Sprintf("%v", this.OneDay), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_OneMonth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_OneMonth{`,
		`OneMonth:` + strings.Replace(fmt.Sprintf("%v", this.OneMonth), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_OneYear) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_OneYear{`,
		`OneYear:` + strings.Replace(fmt.Sprintf("%v", this.OneYear), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`Expiration:` + fmt.Sprintf("%v", this.Expiration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ExpirationNever) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ExpirationNever{`,
		`ExpirationNever:` + strings.Replace(fmt.Sprintf("%v", this.ExpirationNever), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ExpirationTimestamp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ExpirationTimestamp{`,
		`ExpirationTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.ExpirationTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_OneHour) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_OneHour{`,
		`OneHour:` + strings.Replace(fmt.Sprintf("%v", this.OneHour), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_OneDay) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_OneDay{`,
		`OneDay:` + strings.Replace(fmt.Sprintf("%v", this.OneDay), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_OneMonth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_OneMonth{`,
		`OneMonth:` + strings.Replace(fmt.Sprintf("%v", this.OneMonth), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_OneYear) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_OneYear{`,
		`OneYear:` + strings.Replace(fmt.Sprintf("%v", this.OneYear), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`Expiration:` + fmt.Sprintf("%v", this.Expiration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ExpirationNever) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ExpirationNever{`,
		`ExpirationNever:` + strings.Replace(fmt.Sprintf("%v", this.ExpirationNever), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ExpirationTimestamp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ExpirationTimestamp{`,
		`ExpirationTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.ExpirationTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationNever", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Expiration = &GlobalSpecType_ExpirationNever{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Timestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Expiration = &GlobalSpecType_ExpirationTimestamp{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneHour", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Expiration = &GlobalSpecType_OneHour{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Expiration = &GlobalSpecType_OneDay{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneMonth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Expiration = &GlobalSpecType_OneMonth{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneYear", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Expiration = &GlobalSpecType_OneYear{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationNever", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Expiration = &CreateSpecType_ExpirationNever{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Timestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Expiration = &CreateSpecType_ExpirationTimestamp{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneHour", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Expiration = &CreateSpecType_OneHour{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Expiration = &CreateSpecType_OneDay{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneMonth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Expiration = &CreateSpecType_OneMonth{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneYear", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Expiration = &CreateSpecType_OneYear{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationNever", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Expiration = &ReplaceSpecType_ExpirationNever{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Timestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Expiration = &ReplaceSpecType_ExpirationTimestamp{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneHour", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Expiration = &ReplaceSpecType_OneHour{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Expiration = &ReplaceSpecType_OneDay{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneMonth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Expiration = &ReplaceSpecType_OneMonth{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneYear", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Expiration = &ReplaceSpecType_OneYear{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationNever", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Expiration = &GetSpecType_ExpirationNever{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Timestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Expiration = &GetSpecType_ExpirationTimestamp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
