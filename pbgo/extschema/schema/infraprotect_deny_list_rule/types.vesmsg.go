// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package infraprotect_deny_list_rule

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) ExpirationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for expiration")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) PrefixValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for prefix")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["expiration"]; exists {
		val := m.GetExpiration()
		vOpts := append(opts,
			db.WithValidateField("expiration"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetExpiration().(type) {
	case *CreateSpecType_ExpirationNever:
		if fv, exists := v.FldValidators["expiration.expiration_never"]; exists {
			val := m.GetExpiration().(*CreateSpecType_ExpirationNever).ExpirationNever
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("expiration_never"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ExpirationTimestamp:
		if fv, exists := v.FldValidators["expiration.expiration_timestamp"]; exists {
			val := m.GetExpiration().(*CreateSpecType_ExpirationTimestamp).ExpirationTimestamp
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("expiration_timestamp"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_OneHour:
		if fv, exists := v.FldValidators["expiration.one_hour"]; exists {
			val := m.GetExpiration().(*CreateSpecType_OneHour).OneHour
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("one_hour"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_OneDay:
		if fv, exists := v.FldValidators["expiration.one_day"]; exists {
			val := m.GetExpiration().(*CreateSpecType_OneDay).OneDay
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("one_day"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_OneMonth:
		if fv, exists := v.FldValidators["expiration.one_month"]; exists {
			val := m.GetExpiration().(*CreateSpecType_OneMonth).OneMonth
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("one_month"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_OneYear:
		if fv, exists := v.FldValidators["expiration.one_year"]; exists {
			val := m.GetExpiration().(*CreateSpecType_OneYear).OneYear
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("one_year"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["prefix"]; exists {

		vOpts := append(opts, db.WithValidateField("prefix"))
		if err := fv(ctx, m.GetPrefix(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhExpiration := v.ExpirationValidationRuleHandler
	rulesExpiration := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhExpiration(rulesExpiration)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.expiration: %s", err)
		panic(errMsg)
	}
	v.FldValidators["expiration"] = vFn

	vrhPrefix := v.PrefixValidationRuleHandler
	rulesPrefix := map[string]string{
		"ves.io.schema.rules.message.required":                   "true",
		"ves.io.schema.rules.string.ip_prefix_globally_routable": "true",
	}
	vFn, err = vrhPrefix(rulesPrefix)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.prefix: %s", err)
		panic(errMsg)
	}
	v.FldValidators["prefix"] = vFn

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) ExpirationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for expiration")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) PrefixValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for prefix")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["expiration"]; exists {
		val := m.GetExpiration()
		vOpts := append(opts,
			db.WithValidateField("expiration"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetExpiration().(type) {
	case *GetSpecType_ExpirationNever:
		if fv, exists := v.FldValidators["expiration.expiration_never"]; exists {
			val := m.GetExpiration().(*GetSpecType_ExpirationNever).ExpirationNever
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("expiration_never"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ExpirationTimestamp:
		if fv, exists := v.FldValidators["expiration.expiration_timestamp"]; exists {
			val := m.GetExpiration().(*GetSpecType_ExpirationTimestamp).ExpirationTimestamp
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("expiration_timestamp"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["prefix"]; exists {

		vOpts := append(opts, db.WithValidateField("prefix"))
		if err := fv(ctx, m.GetPrefix(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhExpiration := v.ExpirationValidationRuleHandler
	rulesExpiration := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhExpiration(rulesExpiration)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.expiration: %s", err)
		panic(errMsg)
	}
	v.FldValidators["expiration"] = vFn

	vrhPrefix := v.PrefixValidationRuleHandler
	rulesPrefix := map[string]string{
		"ves.io.schema.rules.message.required":                   "true",
		"ves.io.schema.rules.string.ip_prefix_globally_routable": "true",
	}
	vFn, err = vrhPrefix(rulesPrefix)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.prefix: %s", err)
		panic(errMsg)
	}
	v.FldValidators["prefix"] = vFn

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) ExpirationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for expiration")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) PrefixValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for prefix")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["expiration"]; exists {
		val := m.GetExpiration()
		vOpts := append(opts,
			db.WithValidateField("expiration"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetExpiration().(type) {
	case *GlobalSpecType_ExpirationNever:
		if fv, exists := v.FldValidators["expiration.expiration_never"]; exists {
			val := m.GetExpiration().(*GlobalSpecType_ExpirationNever).ExpirationNever
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("expiration_never"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ExpirationTimestamp:
		if fv, exists := v.FldValidators["expiration.expiration_timestamp"]; exists {
			val := m.GetExpiration().(*GlobalSpecType_ExpirationTimestamp).ExpirationTimestamp
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("expiration_timestamp"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_OneHour:
		if fv, exists := v.FldValidators["expiration.one_hour"]; exists {
			val := m.GetExpiration().(*GlobalSpecType_OneHour).OneHour
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("one_hour"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_OneDay:
		if fv, exists := v.FldValidators["expiration.one_day"]; exists {
			val := m.GetExpiration().(*GlobalSpecType_OneDay).OneDay
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("one_day"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_OneMonth:
		if fv, exists := v.FldValidators["expiration.one_month"]; exists {
			val := m.GetExpiration().(*GlobalSpecType_OneMonth).OneMonth
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("one_month"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_OneYear:
		if fv, exists := v.FldValidators["expiration.one_year"]; exists {
			val := m.GetExpiration().(*GlobalSpecType_OneYear).OneYear
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("one_year"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["prefix"]; exists {

		vOpts := append(opts, db.WithValidateField("prefix"))
		if err := fv(ctx, m.GetPrefix(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhExpiration := v.ExpirationValidationRuleHandler
	rulesExpiration := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhExpiration(rulesExpiration)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.expiration: %s", err)
		panic(errMsg)
	}
	v.FldValidators["expiration"] = vFn

	vrhPrefix := v.PrefixValidationRuleHandler
	rulesPrefix := map[string]string{
		"ves.io.schema.rules.message.required":                   "true",
		"ves.io.schema.rules.string.ip_prefix_globally_routable": "true",
	}
	vFn, err = vrhPrefix(rulesPrefix)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.prefix: %s", err)
		panic(errMsg)
	}
	v.FldValidators["prefix"] = vFn

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) ExpirationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for expiration")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) PrefixValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for prefix")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["expiration"]; exists {
		val := m.GetExpiration()
		vOpts := append(opts,
			db.WithValidateField("expiration"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetExpiration().(type) {
	case *ReplaceSpecType_ExpirationNever:
		if fv, exists := v.FldValidators["expiration.expiration_never"]; exists {
			val := m.GetExpiration().(*ReplaceSpecType_ExpirationNever).ExpirationNever
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("expiration_never"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ExpirationTimestamp:
		if fv, exists := v.FldValidators["expiration.expiration_timestamp"]; exists {
			val := m.GetExpiration().(*ReplaceSpecType_ExpirationTimestamp).ExpirationTimestamp
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("expiration_timestamp"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_OneHour:
		if fv, exists := v.FldValidators["expiration.one_hour"]; exists {
			val := m.GetExpiration().(*ReplaceSpecType_OneHour).OneHour
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("one_hour"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_OneDay:
		if fv, exists := v.FldValidators["expiration.one_day"]; exists {
			val := m.GetExpiration().(*ReplaceSpecType_OneDay).OneDay
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("one_day"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_OneMonth:
		if fv, exists := v.FldValidators["expiration.one_month"]; exists {
			val := m.GetExpiration().(*ReplaceSpecType_OneMonth).OneMonth
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("one_month"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_OneYear:
		if fv, exists := v.FldValidators["expiration.one_year"]; exists {
			val := m.GetExpiration().(*ReplaceSpecType_OneYear).OneYear
			vOpts := append(opts,
				db.WithValidateField("expiration"),
				db.WithValidateField("one_year"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["prefix"]; exists {

		vOpts := append(opts, db.WithValidateField("prefix"))
		if err := fv(ctx, m.GetPrefix(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhExpiration := v.ExpirationValidationRuleHandler
	rulesExpiration := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhExpiration(rulesExpiration)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.expiration: %s", err)
		panic(errMsg)
	}
	v.FldValidators["expiration"] = vFn

	vrhPrefix := v.PrefixValidationRuleHandler
	rulesPrefix := map[string]string{
		"ves.io.schema.rules.message.required":                   "true",
		"ves.io.schema.rules.string.ip_prefix_globally_routable": "true",
	}
	vFn, err = vrhPrefix(rulesPrefix)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.prefix: %s", err)
		panic(errMsg)
	}
	v.FldValidators["prefix"] = vFn

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetExpirationToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Expiration.(type) {
	case nil:
		o.Expiration = nil

	case *CreateSpecType_ExpirationNever:
		o.Expiration = &GlobalSpecType_ExpirationNever{ExpirationNever: of.ExpirationNever}

	case *CreateSpecType_ExpirationTimestamp:
		o.Expiration = &GlobalSpecType_ExpirationTimestamp{ExpirationTimestamp: of.ExpirationTimestamp}

	case *CreateSpecType_OneDay:
		o.Expiration = &GlobalSpecType_OneDay{OneDay: of.OneDay}

	case *CreateSpecType_OneHour:
		o.Expiration = &GlobalSpecType_OneHour{OneHour: of.OneHour}

	case *CreateSpecType_OneMonth:
		o.Expiration = &GlobalSpecType_OneMonth{OneMonth: of.OneMonth}

	case *CreateSpecType_OneYear:
		o.Expiration = &GlobalSpecType_OneYear{OneYear: of.OneYear}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetExpirationFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Expiration.(type) {
	case nil:
		r.Expiration = nil

	case *GlobalSpecType_ExpirationNever:
		r.Expiration = &CreateSpecType_ExpirationNever{ExpirationNever: of.ExpirationNever}

	case *GlobalSpecType_ExpirationTimestamp:
		r.Expiration = &CreateSpecType_ExpirationTimestamp{ExpirationTimestamp: of.ExpirationTimestamp}

	case *GlobalSpecType_OneDay:
		r.Expiration = &CreateSpecType_OneDay{OneDay: of.OneDay}

	case *GlobalSpecType_OneHour:
		r.Expiration = &CreateSpecType_OneHour{OneHour: of.OneHour}

	case *GlobalSpecType_OneMonth:
		r.Expiration = &CreateSpecType_OneMonth{OneMonth: of.OneMonth}

	case *GlobalSpecType_OneYear:
		r.Expiration = &CreateSpecType_OneYear{OneYear: of.OneYear}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetExpirationFromGlobalSpecType(f)
	m.Prefix = f.GetPrefix()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetExpirationToGlobalSpecType(f)
	f.Prefix = m1.Prefix
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetExpirationToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Expiration.(type) {
	case nil:
		o.Expiration = nil

	case *GetSpecType_ExpirationNever:
		o.Expiration = &GlobalSpecType_ExpirationNever{ExpirationNever: of.ExpirationNever}

	case *GetSpecType_ExpirationTimestamp:
		o.Expiration = &GlobalSpecType_ExpirationTimestamp{ExpirationTimestamp: of.ExpirationTimestamp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetExpirationFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Expiration.(type) {
	case nil:
		r.Expiration = nil

	case *GlobalSpecType_ExpirationNever:
		r.Expiration = &GetSpecType_ExpirationNever{ExpirationNever: of.ExpirationNever}

	case *GlobalSpecType_ExpirationTimestamp:
		r.Expiration = &GetSpecType_ExpirationTimestamp{ExpirationTimestamp: of.ExpirationTimestamp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetExpirationFromGlobalSpecType(f)
	m.Prefix = f.GetPrefix()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetExpirationToGlobalSpecType(f)
	f.Prefix = m1.Prefix
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetExpirationToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Expiration.(type) {
	case nil:
		o.Expiration = nil

	case *ReplaceSpecType_ExpirationNever:
		o.Expiration = &GlobalSpecType_ExpirationNever{ExpirationNever: of.ExpirationNever}

	case *ReplaceSpecType_ExpirationTimestamp:
		o.Expiration = &GlobalSpecType_ExpirationTimestamp{ExpirationTimestamp: of.ExpirationTimestamp}

	case *ReplaceSpecType_OneDay:
		o.Expiration = &GlobalSpecType_OneDay{OneDay: of.OneDay}

	case *ReplaceSpecType_OneHour:
		o.Expiration = &GlobalSpecType_OneHour{OneHour: of.OneHour}

	case *ReplaceSpecType_OneMonth:
		o.Expiration = &GlobalSpecType_OneMonth{OneMonth: of.OneMonth}

	case *ReplaceSpecType_OneYear:
		o.Expiration = &GlobalSpecType_OneYear{OneYear: of.OneYear}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetExpirationFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Expiration.(type) {
	case nil:
		r.Expiration = nil

	case *GlobalSpecType_ExpirationNever:
		r.Expiration = &ReplaceSpecType_ExpirationNever{ExpirationNever: of.ExpirationNever}

	case *GlobalSpecType_ExpirationTimestamp:
		r.Expiration = &ReplaceSpecType_ExpirationTimestamp{ExpirationTimestamp: of.ExpirationTimestamp}

	case *GlobalSpecType_OneDay:
		r.Expiration = &ReplaceSpecType_OneDay{OneDay: of.OneDay}

	case *GlobalSpecType_OneHour:
		r.Expiration = &ReplaceSpecType_OneHour{OneHour: of.OneHour}

	case *GlobalSpecType_OneMonth:
		r.Expiration = &ReplaceSpecType_OneMonth{OneMonth: of.OneMonth}

	case *GlobalSpecType_OneYear:
		r.Expiration = &ReplaceSpecType_OneYear{OneYear: of.OneYear}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetExpirationFromGlobalSpecType(f)
	m.Prefix = f.GetPrefix()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetExpirationToGlobalSpecType(f)
	f.Prefix = m1.Prefix
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}
