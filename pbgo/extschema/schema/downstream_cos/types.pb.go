// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/downstream_cos/types.proto

package downstream_cos

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Per Cpu Utilization Limit
//
// x-displayName: "PerCpuUtilizationLimit Specification"
// Defines utilization limits for downstream traffic.
// Limit is specified in terms of: L=Tr/Cr, where:
// Tr = Tenant (or CoS) event rate
// Cr = envoy worker estimated event rate capacity.
// Event rate is the number of downstream socket-level connect and read events per second, handled by Envoy.
// Limit utilization is calculated and enforced on per-cpu (per envoy worker) basis.
// When traffic volume crosses the limit threshold, enforcement action associated with the limit type may be
// applied to existing and new connections in order to bring the traffic volume under the threshold value.
// soft_limit and hard_limit enforcement may be activated/deactivated multiple times during the lifetime
// of a connection.
// Enforcement decision and duration are derived from limit values, tenant/cos downstream traffic volume,
// connection establishment rate, and envoy worker capacity.
//
// While it is allowed to set none, any or all of available limit types, it is recommended to use the following
// combinations:
// 1) no limits - monitor a group of tenants associated with a class of service, in order to determine limit
// threshold values.
// 2) soft_limit - traffic prioritization, with minimal negative impact in case of misconfiguration.
// 3) soft_limit and hard_limit - full enforcement, large-scale DDoS mitigation.
// 4) soft_limit, hard_limit, close_limit - full enforcement, large-scale DDoS mitigation, including attacks with very
// large number of network connections.
type PerCpuUtilizationLimit struct {
	// Soft Limit
	//
	// x-displayName: "Soft Limit"
	// Define Soft utilization limit.
	// Connections may be be placed in low read priority mode, when this limit threshold is exceeded.
	SoftLimit *schema.FractionalPercent `protobuf:"bytes,1,opt,name=soft_limit,json=softLimit,proto3" json:"soft_limit,omitempty"`
	// Hard Limit
	//
	// x-displayName: "Hard Limit"
	// Define Hard utilization limit.
	// Downstream connection reads may be paused (for 50ms-5s), when this limit threshold is exceeded.
	HardLimit *schema.FractionalPercent `protobuf:"bytes,2,opt,name=hard_limit,json=hardLimit,proto3" json:"hard_limit,omitempty"`
	// Close Limit
	//
	// x-displayName: "Close Limit"
	// Downstream connections may be closed, when this limited threshold is exceeded.
	// Connection close is done in two steps: first stop socket reads for a duration, and then close connection.
	// This is a DDoS protection measure.
	CloseLimit *schema.FractionalPercent `protobuf:"bytes,3,opt,name=close_limit,json=closeLimit,proto3" json:"close_limit,omitempty"`
}

func (m *PerCpuUtilizationLimit) Reset()      { *m = PerCpuUtilizationLimit{} }
func (*PerCpuUtilizationLimit) ProtoMessage() {}
func (*PerCpuUtilizationLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_80855f3dbb83809d, []int{0}
}
func (m *PerCpuUtilizationLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerCpuUtilizationLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PerCpuUtilizationLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerCpuUtilizationLimit.Merge(m, src)
}
func (m *PerCpuUtilizationLimit) XXX_Size() int {
	return m.Size()
}
func (m *PerCpuUtilizationLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_PerCpuUtilizationLimit.DiscardUnknown(m)
}

var xxx_messageInfo_PerCpuUtilizationLimit proto.InternalMessageInfo

func (m *PerCpuUtilizationLimit) GetSoftLimit() *schema.FractionalPercent {
	if m != nil {
		return m.SoftLimit
	}
	return nil
}

func (m *PerCpuUtilizationLimit) GetHardLimit() *schema.FractionalPercent {
	if m != nil {
		return m.HardLimit
	}
	return nil
}

func (m *PerCpuUtilizationLimit) GetCloseLimit() *schema.FractionalPercent {
	if m != nil {
		return m.CloseLimit
	}
	return nil
}

// GlobalSpecType
//
// x-displayName: "Downstream Class of Service Specification"
// Downstream Class of Service configures limits on downstream traffic for a given tenant and/or all tenants associated
// with the given class of service.
type GlobalSpecType struct {
	// Tenant Limit
	//
	// x-displayName: "Tenant Limit"
	// Limit imposed on traffic of each individual tenant associated with this class of service.
	TenantLimit *PerCpuUtilizationLimit `protobuf:"bytes,1,opt,name=tenant_limit,json=tenantLimit,proto3" json:"tenant_limit,omitempty"`
	// Class of Service Limit
	//
	// x-displayName: "CoS Limit"
	// Limit imposed on sum traffic of all tenants associated with this class of service.
	CosLimit *PerCpuUtilizationLimit `protobuf:"bytes,2,opt,name=cos_limit,json=cosLimit,proto3" json:"cos_limit,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_80855f3dbb83809d, []int{1}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetTenantLimit() *PerCpuUtilizationLimit {
	if m != nil {
		return m.TenantLimit
	}
	return nil
}

func (m *GlobalSpecType) GetCosLimit() *PerCpuUtilizationLimit {
	if m != nil {
		return m.CosLimit
	}
	return nil
}

type GetSpecType struct {
	TenantLimit *PerCpuUtilizationLimit `protobuf:"bytes,1,opt,name=tenant_limit,json=tenantLimit,proto3" json:"tenant_limit,omitempty"`
	CosLimit    *PerCpuUtilizationLimit `protobuf:"bytes,2,opt,name=cos_limit,json=cosLimit,proto3" json:"cos_limit,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_80855f3dbb83809d, []int{2}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetTenantLimit() *PerCpuUtilizationLimit {
	if m != nil {
		return m.TenantLimit
	}
	return nil
}

func (m *GetSpecType) GetCosLimit() *PerCpuUtilizationLimit {
	if m != nil {
		return m.CosLimit
	}
	return nil
}

type CreateSpecType struct {
	TenantLimit *PerCpuUtilizationLimit `protobuf:"bytes,1,opt,name=tenant_limit,json=tenantLimit,proto3" json:"tenant_limit,omitempty"`
	CosLimit    *PerCpuUtilizationLimit `protobuf:"bytes,2,opt,name=cos_limit,json=cosLimit,proto3" json:"cos_limit,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_80855f3dbb83809d, []int{3}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetTenantLimit() *PerCpuUtilizationLimit {
	if m != nil {
		return m.TenantLimit
	}
	return nil
}

func (m *CreateSpecType) GetCosLimit() *PerCpuUtilizationLimit {
	if m != nil {
		return m.CosLimit
	}
	return nil
}

type ReplaceSpecType struct {
	TenantLimit *PerCpuUtilizationLimit `protobuf:"bytes,1,opt,name=tenant_limit,json=tenantLimit,proto3" json:"tenant_limit,omitempty"`
	CosLimit    *PerCpuUtilizationLimit `protobuf:"bytes,2,opt,name=cos_limit,json=cosLimit,proto3" json:"cos_limit,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_80855f3dbb83809d, []int{4}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetTenantLimit() *PerCpuUtilizationLimit {
	if m != nil {
		return m.TenantLimit
	}
	return nil
}

func (m *ReplaceSpecType) GetCosLimit() *PerCpuUtilizationLimit {
	if m != nil {
		return m.CosLimit
	}
	return nil
}

func init() {
	proto.RegisterType((*PerCpuUtilizationLimit)(nil), "ves.io.schema.downstream_cos.PerCpuUtilizationLimit")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.downstream_cos.GlobalSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.downstream_cos.GetSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.downstream_cos.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.downstream_cos.ReplaceSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/downstream_cos/types.proto", fileDescriptor_80855f3dbb83809d)
}

var fileDescriptor_80855f3dbb83809d = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x94, 0xcf, 0x8a, 0x13, 0x41,
	0x10, 0xc6, 0xa7, 0x15, 0xc4, 0xed, 0xc8, 0x8a, 0x39, 0xf8, 0x27, 0x2e, 0x4d, 0xc8, 0x69, 0x2f,
	0xe9, 0x01, 0xf5, 0xe4, 0x41, 0xd1, 0x05, 0xf7, 0xe2, 0x61, 0x8d, 0x8a, 0xe0, 0x25, 0xf4, 0x74,
	0x2a, 0x93, 0xc6, 0x9e, 0xa9, 0xa6, 0xbb, 0x93, 0x75, 0x3d, 0xf9, 0x00, 0x1e, 0x7c, 0x0c, 0x1f,
	0xc2, 0x07, 0x10, 0x11, 0x9c, 0x63, 0x2e, 0x82, 0x99, 0x5c, 0x3c, 0xee, 0x23, 0xc8, 0xfc, 0x51,
	0xec, 0x65, 0x91, 0xc5, 0x9b, 0xb9, 0x75, 0xf1, 0xd5, 0xf7, 0x9b, 0xaf, 0x6a, 0xa0, 0xe8, 0xee,
	0x02, 0x1c, 0x57, 0x18, 0x3b, 0x39, 0x83, 0x4c, 0xc4, 0x13, 0x3c, 0xcc, 0x9d, 0xb7, 0x20, 0xb2,
	0xb1, 0x44, 0x17, 0xfb, 0x23, 0x03, 0x8e, 0x1b, 0x8b, 0x1e, 0xbb, 0x3b, 0x4d, 0x27, 0x6f, 0x3a,
	0x79, 0xd8, 0xd9, 0x1b, 0xa6, 0xca, 0xcf, 0xe6, 0x09, 0x97, 0x98, 0xc5, 0x29, 0xa6, 0x18, 0xd7,
	0xa6, 0x64, 0x3e, 0xad, 0xab, 0xba, 0xa8, 0x5f, 0x0d, 0xac, 0x77, 0x2d, 0xfc, 0x6c, 0x0e, 0xbe,
	0x15, 0x6e, 0x86, 0x02, 0x1a, 0xaf, 0x30, 0x6f, 0x23, 0xf4, 0x6e, 0x84, 0xe2, 0x1f, 0xe9, 0x7a,
	0x3b, 0xa1, 0xb4, 0x10, 0x5a, 0x4d, 0x84, 0x87, 0x56, 0xed, 0x9f, 0x50, 0x15, 0x1c, 0x8e, 0x03,
	0xf4, 0xe0, 0x1b, 0xa1, 0x57, 0x0f, 0xc0, 0xee, 0x99, 0xf9, 0x73, 0xaf, 0xb4, 0x7a, 0x23, 0x2a,
	0xf1, 0xb1, 0xca, 0x94, 0xef, 0xde, 0xa7, 0xd4, 0xe1, 0xd4, 0x8f, 0x75, 0x55, 0x5d, 0x27, 0x7d,
	0xb2, 0xdb, 0xb9, 0xd5, 0xe7, 0xe1, 0x36, 0x1e, 0x59, 0x21, 0x2b, 0x87, 0xd0, 0x07, 0x60, 0x25,
	0xe4, 0x7e, 0xb4, 0x55, 0x79, 0x7e, 0x03, 0x66, 0xc2, 0x4e, 0x5a, 0xc0, 0xb9, 0xb3, 0x02, 0x2a,
	0x4f, 0x03, 0x78, 0x40, 0x3b, 0x52, 0xa3, 0x83, 0x96, 0x70, 0xfe, 0x8c, 0x04, 0x5a, 0x9b, 0x6a,
	0xc4, 0xe0, 0x23, 0xa1, 0xdb, 0xfb, 0x1a, 0x13, 0xa1, 0x9f, 0x1a, 0x90, 0xcf, 0x8e, 0x0c, 0x74,
	0x5f, 0xd0, 0x4b, 0x1e, 0x72, 0x91, 0x87, 0x93, 0xdd, 0xe1, 0x7f, 0xfb, 0xcf, 0xfc, 0xf4, 0x1d,
	0x8d, 0x3a, 0x0d, 0xa9, 0x89, 0xfb, 0x84, 0x6e, 0x49, 0x74, 0xc1, 0xb8, 0xff, 0x46, 0xbd, 0x28,
	0xd1, 0x35, 0xf1, 0xbf, 0x10, 0xda, 0xd9, 0x07, 0xff, 0x3f, 0x66, 0xbf, 0x7b, 0xe5, 0xf3, 0xbd,
	0x13, 0xab, 0x1f, 0x7c, 0x25, 0x74, 0x7b, 0xcf, 0x82, 0xf0, 0xb0, 0x29, 0x13, 0x15, 0x84, 0x5e,
	0x1e, 0x81, 0xd1, 0x42, 0x6e, 0xca, 0x48, 0x0f, 0xdf, 0x91, 0x62, 0xc5, 0xa2, 0xe5, 0x8a, 0x45,
	0xc7, 0x2b, 0x46, 0xde, 0x96, 0x8c, 0x7c, 0x28, 0x19, 0xf9, 0x54, 0x32, 0x52, 0x94, 0x8c, 0x2c,
	0x4b, 0x46, 0xbe, 0x97, 0x8c, 0xfc, 0x28, 0x59, 0x74, 0x5c, 0x32, 0xf2, 0x7e, 0xcd, 0xa2, 0x62,
	0xcd, 0xa2, 0xe5, 0x9a, 0x45, 0x2f, 0x47, 0x29, 0x9a, 0x57, 0x29, 0x5f, 0xa0, 0xf6, 0x60, 0xad,
	0xe0, 0x73, 0x17, 0xd7, 0x8f, 0x29, 0xda, 0x6c, 0x68, 0x2c, 0x2e, 0xd4, 0x04, 0xec, 0xf0, 0x97,
	0x1c, 0x9b, 0x24, 0xc5, 0x18, 0x5e, 0xfb, 0xf6, 0x3c, 0x9d, 0x7a, 0x8b, 0x93, 0x0b, 0xf5, 0xa1,
	0xba, 0xfd, 0x33, 0x00, 0x00, 0xff, 0xff, 0x41, 0x9f, 0x61, 0xb3, 0xb2, 0x05, 0x00, 0x00,
}

func (this *PerCpuUtilizationLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerCpuUtilizationLimit)
	if !ok {
		that2, ok := that.(PerCpuUtilizationLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SoftLimit.Equal(that1.SoftLimit) {
		return false
	}
	if !this.HardLimit.Equal(that1.HardLimit) {
		return false
	}
	if !this.CloseLimit.Equal(that1.CloseLimit) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TenantLimit.Equal(that1.TenantLimit) {
		return false
	}
	if !this.CosLimit.Equal(that1.CosLimit) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TenantLimit.Equal(that1.TenantLimit) {
		return false
	}
	if !this.CosLimit.Equal(that1.CosLimit) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TenantLimit.Equal(that1.TenantLimit) {
		return false
	}
	if !this.CosLimit.Equal(that1.CosLimit) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TenantLimit.Equal(that1.TenantLimit) {
		return false
	}
	if !this.CosLimit.Equal(that1.CosLimit) {
		return false
	}
	return true
}
func (this *PerCpuUtilizationLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&downstream_cos.PerCpuUtilizationLimit{")
	if this.SoftLimit != nil {
		s = append(s, "SoftLimit: "+fmt.Sprintf("%#v", this.SoftLimit)+",\n")
	}
	if this.HardLimit != nil {
		s = append(s, "HardLimit: "+fmt.Sprintf("%#v", this.HardLimit)+",\n")
	}
	if this.CloseLimit != nil {
		s = append(s, "CloseLimit: "+fmt.Sprintf("%#v", this.CloseLimit)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&downstream_cos.GlobalSpecType{")
	if this.TenantLimit != nil {
		s = append(s, "TenantLimit: "+fmt.Sprintf("%#v", this.TenantLimit)+",\n")
	}
	if this.CosLimit != nil {
		s = append(s, "CosLimit: "+fmt.Sprintf("%#v", this.CosLimit)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&downstream_cos.GetSpecType{")
	if this.TenantLimit != nil {
		s = append(s, "TenantLimit: "+fmt.Sprintf("%#v", this.TenantLimit)+",\n")
	}
	if this.CosLimit != nil {
		s = append(s, "CosLimit: "+fmt.Sprintf("%#v", this.CosLimit)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&downstream_cos.CreateSpecType{")
	if this.TenantLimit != nil {
		s = append(s, "TenantLimit: "+fmt.Sprintf("%#v", this.TenantLimit)+",\n")
	}
	if this.CosLimit != nil {
		s = append(s, "CosLimit: "+fmt.Sprintf("%#v", this.CosLimit)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&downstream_cos.ReplaceSpecType{")
	if this.TenantLimit != nil {
		s = append(s, "TenantLimit: "+fmt.Sprintf("%#v", this.TenantLimit)+",\n")
	}
	if this.CosLimit != nil {
		s = append(s, "CosLimit: "+fmt.Sprintf("%#v", this.CosLimit)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PerCpuUtilizationLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerCpuUtilizationLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerCpuUtilizationLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CloseLimit != nil {
		{
			size, err := m.CloseLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.HardLimit != nil {
		{
			size, err := m.HardLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SoftLimit != nil {
		{
			size, err := m.SoftLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CosLimit != nil {
		{
			size, err := m.CosLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TenantLimit != nil {
		{
			size, err := m.TenantLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CosLimit != nil {
		{
			size, err := m.CosLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TenantLimit != nil {
		{
			size, err := m.TenantLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CosLimit != nil {
		{
			size, err := m.CosLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TenantLimit != nil {
		{
			size, err := m.TenantLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CosLimit != nil {
		{
			size, err := m.CosLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TenantLimit != nil {
		{
			size, err := m.TenantLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PerCpuUtilizationLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SoftLimit != nil {
		l = m.SoftLimit.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HardLimit != nil {
		l = m.HardLimit.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CloseLimit != nil {
		l = m.CloseLimit.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TenantLimit != nil {
		l = m.TenantLimit.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CosLimit != nil {
		l = m.CosLimit.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TenantLimit != nil {
		l = m.TenantLimit.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CosLimit != nil {
		l = m.CosLimit.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TenantLimit != nil {
		l = m.TenantLimit.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CosLimit != nil {
		l = m.CosLimit.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TenantLimit != nil {
		l = m.TenantLimit.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CosLimit != nil {
		l = m.CosLimit.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PerCpuUtilizationLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PerCpuUtilizationLimit{`,
		`SoftLimit:` + strings.Replace(fmt.Sprintf("%v", this.SoftLimit), "FractionalPercent", "schema.FractionalPercent", 1) + `,`,
		`HardLimit:` + strings.Replace(fmt.Sprintf("%v", this.HardLimit), "FractionalPercent", "schema.FractionalPercent", 1) + `,`,
		`CloseLimit:` + strings.Replace(fmt.Sprintf("%v", this.CloseLimit), "FractionalPercent", "schema.FractionalPercent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`TenantLimit:` + strings.Replace(this.TenantLimit.String(), "PerCpuUtilizationLimit", "PerCpuUtilizationLimit", 1) + `,`,
		`CosLimit:` + strings.Replace(this.CosLimit.String(), "PerCpuUtilizationLimit", "PerCpuUtilizationLimit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`TenantLimit:` + strings.Replace(this.TenantLimit.String(), "PerCpuUtilizationLimit", "PerCpuUtilizationLimit", 1) + `,`,
		`CosLimit:` + strings.Replace(this.CosLimit.String(), "PerCpuUtilizationLimit", "PerCpuUtilizationLimit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`TenantLimit:` + strings.Replace(this.TenantLimit.String(), "PerCpuUtilizationLimit", "PerCpuUtilizationLimit", 1) + `,`,
		`CosLimit:` + strings.Replace(this.CosLimit.String(), "PerCpuUtilizationLimit", "PerCpuUtilizationLimit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`TenantLimit:` + strings.Replace(this.TenantLimit.String(), "PerCpuUtilizationLimit", "PerCpuUtilizationLimit", 1) + `,`,
		`CosLimit:` + strings.Replace(this.CosLimit.String(), "PerCpuUtilizationLimit", "PerCpuUtilizationLimit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PerCpuUtilizationLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerCpuUtilizationLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerCpuUtilizationLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SoftLimit == nil {
				m.SoftLimit = &schema.FractionalPercent{}
			}
			if err := m.SoftLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HardLimit == nil {
				m.HardLimit = &schema.FractionalPercent{}
			}
			if err := m.HardLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloseLimit == nil {
				m.CloseLimit = &schema.FractionalPercent{}
			}
			if err := m.CloseLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TenantLimit == nil {
				m.TenantLimit = &PerCpuUtilizationLimit{}
			}
			if err := m.TenantLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CosLimit == nil {
				m.CosLimit = &PerCpuUtilizationLimit{}
			}
			if err := m.CosLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TenantLimit == nil {
				m.TenantLimit = &PerCpuUtilizationLimit{}
			}
			if err := m.TenantLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CosLimit == nil {
				m.CosLimit = &PerCpuUtilizationLimit{}
			}
			if err := m.CosLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TenantLimit == nil {
				m.TenantLimit = &PerCpuUtilizationLimit{}
			}
			if err := m.TenantLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CosLimit == nil {
				m.CosLimit = &PerCpuUtilizationLimit{}
			}
			if err := m.CosLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TenantLimit == nil {
				m.TenantLimit = &PerCpuUtilizationLimit{}
			}
			if err := m.TenantLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CosLimit == nil {
				m.CosLimit = &PerCpuUtilizationLimit{}
			}
			if err := m.CosLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
