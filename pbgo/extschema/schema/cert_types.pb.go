// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/cert_types.proto

package schema

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Certificate Information
//
// x-displayName: "Certificate Information"
// Information about a certificate.
type CertInfoType struct {
	// Common Name
	//
	// x-displayName: "Common Name"
	// Common Name (CN) of this certificate.
	CommonName string `protobuf:"bytes,1,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	// Subject Alternative Names
	//
	// x-displayName: "SANs"
	// Subject Alternative Names of this certificate.
	SubjectAlternativeNames []string `protobuf:"bytes,2,rep,name=subject_alternative_names,json=subjectAlternativeNames,proto3" json:"subject_alternative_names,omitempty"`
	// Organization
	//
	// x-displayName: "Organization"
	// Organization of this certificate.
	Organization string `protobuf:"bytes,3,opt,name=organization,proto3" json:"organization,omitempty"`
	// Expiry Timestamp
	//
	// x-displayName: "Expiry Timestamp"
	// Expiry timestamp of this certificate.
	Expiry *types.Timestamp `protobuf:"bytes,4,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// Issuer
	//
	// x-displayName: "Issuer"
	// Issuer of this certificate.
	Issuer string `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`
	//  Public Key Algorithm
	//
	// x-displayName: "Public Key Algorithm"
	// Public Key Algorithm of this certificate.
	PublicKeyAlgorithm string `protobuf:"bytes,6,opt,name=public_key_algorithm,json=publicKeyAlgorithm,proto3" json:"public_key_algorithm,omitempty"`
}

func (m *CertInfoType) Reset()      { *m = CertInfoType{} }
func (*CertInfoType) ProtoMessage() {}
func (*CertInfoType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f024b829e526b1d4, []int{0}
}
func (m *CertInfoType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertInfoType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CertInfoType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertInfoType.Merge(m, src)
}
func (m *CertInfoType) XXX_Size() int {
	return m.Size()
}
func (m *CertInfoType) XXX_DiscardUnknown() {
	xxx_messageInfo_CertInfoType.DiscardUnknown(m)
}

var xxx_messageInfo_CertInfoType proto.InternalMessageInfo

func (m *CertInfoType) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

func (m *CertInfoType) GetSubjectAlternativeNames() []string {
	if m != nil {
		return m.SubjectAlternativeNames
	}
	return nil
}

func (m *CertInfoType) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *CertInfoType) GetExpiry() *types.Timestamp {
	if m != nil {
		return m.Expiry
	}
	return nil
}

func (m *CertInfoType) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *CertInfoType) GetPublicKeyAlgorithm() string {
	if m != nil {
		return m.PublicKeyAlgorithm
	}
	return ""
}

// CertificateParamsType
//
// x-displayName: "Certificate Parameters"
// Certificate Parameters for authentication, TLS ciphers, and trust store
type CertificateParamsType struct {
	// certificates
	//
	// x-displayName: "Certificates"
	// x-required
	// Set of certificates
	Certificates []*ObjectRefType `protobuf:"bytes,1,rep,name=certificates,proto3" json:"certificates,omitempty"`
	// validation_params
	//
	// x-displayName: "Trusted CA Validation params"
	// This includes URL for a trust store, whether SAN verification is required
	// and list of Subject Alt Names for verification
	ValidationParams *TlsValidationParamsType `protobuf:"bytes,2,opt,name=validation_params,json=validationParams,proto3" json:"validation_params,omitempty"`
	// minimum_protocol_version
	//
	// x-displayName: "Minimum TLS Version"
	// Minimum TLS protocol version.
	MinimumProtocolVersion TlsProtocol `protobuf:"varint,3,opt,name=minimum_protocol_version,json=minimumProtocolVersion,proto3,enum=ves.io.schema.TlsProtocol" json:"minimum_protocol_version,omitempty"`
	// maximum_protocol_version
	//
	// x-displayName: "Maximum TLS Version"
	// Maximum TLS protocol version.
	MaximumProtocolVersion TlsProtocol `protobuf:"varint,4,opt,name=maximum_protocol_version,json=maximumProtocolVersion,proto3,enum=ves.io.schema.TlsProtocol" json:"maximum_protocol_version,omitempty"`
	// cipher_suites
	//
	// x-displayName: "Cipher Suites"
	// x-example: "TLS_AES_128_GCM_SHA256"
	// The following list specifies the supported cipher suite
	//   TLS_AES_128_GCM_SHA256
	//   TLS_AES_256_GCM_SHA384
	//   TLS_CHACHA20_POLY1305_SHA256
	//   TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
	//   TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
	//   TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
	//   TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
	//   TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
	//   TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
	//   TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
	//   TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
	//   TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
	//   TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
	//   TLS_RSA_WITH_AES_128_CBC_SHA
	//   TLS_RSA_WITH_AES_128_GCM_SHA256
	//   TLS_RSA_WITH_AES_256_CBC_SHA
	//   TLS_RSA_WITH_AES_256_GCM_SHA384
	//
	// If not specified, the default list:
	//   TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
	//   TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
	//   TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
	//   TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
	//   TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
	//   TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
	// will be used.
	CipherSuites []string `protobuf:"bytes,5,rep,name=cipher_suites,json=cipherSuites,proto3" json:"cipher_suites,omitempty"`
	// require_client_certificate
	//
	// x-displayName: "Require Client Certificate(enable mTLS)"
	// If true, F5XC will reject connections without a valid client
	// certificate.
	RequireClientCertificate bool `protobuf:"varint,6,opt,name=require_client_certificate,json=requireClientCertificate,proto3" json:"require_client_certificate,omitempty"`
	// Certificate Revocation list
	//
	// x-displayName: "CRL"
	// Reference to CRL object to download the CRL file and validate the client offerred certificate.
	// Used to ensure that the client presented certificate is not revoked as per the CRL
	Crl []*ObjectRefType `protobuf:"bytes,7,rep,name=crl,proto3" json:"crl,omitempty"`
}

func (m *CertificateParamsType) Reset()      { *m = CertificateParamsType{} }
func (*CertificateParamsType) ProtoMessage() {}
func (*CertificateParamsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f024b829e526b1d4, []int{1}
}
func (m *CertificateParamsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertificateParamsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CertificateParamsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateParamsType.Merge(m, src)
}
func (m *CertificateParamsType) XXX_Size() int {
	return m.Size()
}
func (m *CertificateParamsType) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateParamsType.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateParamsType proto.InternalMessageInfo

func (m *CertificateParamsType) GetCertificates() []*ObjectRefType {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *CertificateParamsType) GetValidationParams() *TlsValidationParamsType {
	if m != nil {
		return m.ValidationParams
	}
	return nil
}

func (m *CertificateParamsType) GetMinimumProtocolVersion() TlsProtocol {
	if m != nil {
		return m.MinimumProtocolVersion
	}
	return TLS_AUTO
}

func (m *CertificateParamsType) GetMaximumProtocolVersion() TlsProtocol {
	if m != nil {
		return m.MaximumProtocolVersion
	}
	return TLS_AUTO
}

func (m *CertificateParamsType) GetCipherSuites() []string {
	if m != nil {
		return m.CipherSuites
	}
	return nil
}

func (m *CertificateParamsType) GetRequireClientCertificate() bool {
	if m != nil {
		return m.RequireClientCertificate
	}
	return false
}

func (m *CertificateParamsType) GetCrl() []*ObjectRefType {
	if m != nil {
		return m.Crl
	}
	return nil
}

func init() {
	proto.RegisterType((*CertInfoType)(nil), "ves.io.schema.CertInfoType")
	golang_proto.RegisterType((*CertInfoType)(nil), "ves.io.schema.CertInfoType")
	proto.RegisterType((*CertificateParamsType)(nil), "ves.io.schema.CertificateParamsType")
	golang_proto.RegisterType((*CertificateParamsType)(nil), "ves.io.schema.CertificateParamsType")
}

func init() { proto.RegisterFile("ves.io/schema/cert_types.proto", fileDescriptor_f024b829e526b1d4) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/cert_types.proto", fileDescriptor_f024b829e526b1d4)
}

var fileDescriptor_f024b829e526b1d4 = []byte{
	// 950 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xd8, 0x1b, 0xd3, 0x4c, 0x92, 0x2a, 0x6c, 0x8b, 0xbb, 0xdd, 0x46, 0x1b, 0xcb, 0xfc,
	0x8a, 0x44, 0xb2, 0x4e, 0x9c, 0xa6, 0xaa, 0x22, 0x84, 0x64, 0x2f, 0x51, 0x1d, 0xb5, 0x24, 0xd1,
	0xda, 0x2a, 0x2a, 0x97, 0xd1, 0x7a, 0x3b, 0xde, 0x0c, 0xf5, 0x7a, 0x96, 0xd9, 0xb5, 0x89, 0x91,
	0x22, 0xc1, 0x7f, 0x80, 0x7a, 0xe6, 0x0f, 0x40, 0xe5, 0xc2, 0x89, 0x03, 0xb9, 0xe4, 0x88, 0x38,
	0xe5, 0x98, 0x03, 0x12, 0xc4, 0x91, 0x50, 0xb9, 0x55, 0x1c, 0x38, 0xa3, 0x99, 0xdd, 0xad, 0xbd,
	0xae, 0xed, 0xf6, 0x62, 0xcf, 0xbc, 0xef, 0x7b, 0xdf, 0xfb, 0x31, 0x6f, 0x66, 0xa1, 0xd6, 0xc5,
	0xbe, 0x4e, 0x68, 0xd1, 0xb7, 0x0f, 0xb1, 0x6b, 0x15, 0x6d, 0xcc, 0x02, 0x14, 0xf4, 0x3c, 0xec,
	0xeb, 0x1e, 0xa3, 0x01, 0x95, 0x17, 0x42, 0x5c, 0x0f, 0x71, 0x75, 0xcd, 0x21, 0xc1, 0x61, 0xa7,
	0xa1, 0xdb, 0xd4, 0x2d, 0x3a, 0xd4, 0xa1, 0x45, 0xc1, 0x6a, 0x74, 0x9a, 0x62, 0x27, 0x36, 0x62,
	0x15, 0x7a, 0xab, 0xcb, 0x0e, 0xa5, 0x4e, 0x0b, 0x0f, 0x58, 0x01, 0x71, 0xb1, 0x1f, 0x58, 0xae,
	0x17, 0x11, 0x6e, 0x25, 0xc3, 0x53, 0x2f, 0x20, 0xb4, 0x1d, 0xc5, 0x56, 0x6f, 0x26, 0xc1, 0xa1,
	0xb4, 0xd4, 0xa5, 0x24, 0xd4, 0xb5, 0x5a, 0xe4, 0xb1, 0x15, 0xe0, 0x08, 0xcd, 0x8f, 0xa0, 0x04,
	0x7f, 0x8d, 0x12, 0xd2, 0x85, 0xd3, 0x0c, 0x9c, 0x37, 0x30, 0x0b, 0x76, 0xdb, 0x4d, 0x5a, 0xef,
	0x79, 0x58, 0x5e, 0x86, 0x73, 0x36, 0x75, 0x5d, 0xda, 0x46, 0x6d, 0xcb, 0xc5, 0x0a, 0xc8, 0x83,
	0x95, 0x59, 0x13, 0x86, 0xa6, 0x3d, 0xcb, 0xc5, 0xf2, 0x36, 0xbc, 0xe9, 0x77, 0x1a, 0x5f, 0x62,
	0x3b, 0x40, 0x56, 0x2b, 0xc0, 0xac, 0x6d, 0x05, 0xa4, 0x8b, 0x05, 0xdb, 0x57, 0xd2, 0xf9, 0xcc,
	0xca, 0xac, 0x79, 0x23, 0x22, 0x94, 0x07, 0x38, 0x77, 0xf5, 0xe5, 0x02, 0x9c, 0xa7, 0xcc, 0xb1,
	0xda, 0xe4, 0x1b, 0x8b, 0x27, 0xa1, 0x64, 0x84, 0x7a, 0xc2, 0x26, 0x97, 0x60, 0x16, 0x1f, 0x79,
	0x84, 0xf5, 0x14, 0x29, 0x0f, 0x56, 0xe6, 0x4a, 0xaa, 0x1e, 0xf6, 0x4e, 0x8f, 0x7b, 0xa7, 0xd7,
	0xe3, 0xde, 0x99, 0x11, 0x53, 0xce, 0xc1, 0x2c, 0xf1, 0xfd, 0x0e, 0x66, 0xca, 0x8c, 0x50, 0x8c,
	0x76, 0xf2, 0x3a, 0xbc, 0xee, 0x75, 0x1a, 0x2d, 0x62, 0xa3, 0x27, 0xb8, 0x87, 0xac, 0x96, 0x43,
	0x19, 0x09, 0x0e, 0x5d, 0x25, 0x2b, 0x58, 0x72, 0x88, 0xdd, 0xc7, 0xbd, 0x72, 0x8c, 0x6c, 0xff,
	0x0c, 0x7e, 0x3f, 0x01, 0x3f, 0x01, 0x78, 0x0d, 0xa6, 0x8d, 0x3d, 0x75, 0x21, 0xd1, 0x0c, 0xf8,
	0x2e, 0x94, 0x6a, 0xe5, 0x3d, 0x5f, 0xbd, 0x35, 0xa5, 0x05, 0xf0, 0x1a, 0x04, 0xfb, 0xea, 0xd5,
	0x64, 0xa1, 0x30, 0x07, 0xe1, 0x0e, 0x4f, 0x55, 0xec, 0xd4, 0x2b, 0x71, 0x89, 0x50, 0x86, 0xd9,
	0x5d, 0x91, 0x2a, 0xb7, 0x85, 0x49, 0x43, 0x1d, 0x5e, 0x3f, 0x10, 0x89, 0xe5, 0xef, 0xe3, 0x5e,
	0xfe, 0x65, 0x6a, 0x6a, 0x6e, 0x7c, 0x31, 0x85, 0x5f, 0x66, 0xe1, 0x3b, 0xfc, 0x08, 0x49, 0x93,
	0xd8, 0x56, 0x80, 0x0f, 0x2c, 0x66, 0xb9, 0xbe, 0x38, 0xcb, 0x06, 0x9c, 0xb7, 0x07, 0x80, 0xaf,
	0x80, 0x7c, 0x66, 0x65, 0xae, 0xb4, 0xa4, 0x27, 0x46, 0x59, 0xdf, 0x17, 0x95, 0x98, 0xb8, 0xc9,
	0x7d, 0x2a, 0xf9, 0x67, 0xc7, 0x73, 0x43, 0x4e, 0xbf, 0xfe, 0x73, 0x9a, 0x91, 0x58, 0x5a, 0xc9,
	0x47, 0x8b, 0x45, 0x60, 0x26, 0x34, 0xe5, 0x47, 0xf0, 0xed, 0x68, 0xe8, 0x08, 0x6d, 0x23, 0x4f,
	0x04, 0x57, 0xd2, 0xe2, 0xe4, 0x3e, 0x18, 0x09, 0x54, 0x6f, 0xf9, 0x0f, 0x5f, 0x52, 0x07, 0x69,
	0x56, 0xa4, 0xb3, 0x13, 0x00, 0xcc, 0xc5, 0xee, 0x08, 0x26, 0xd7, 0xa1, 0xe2, 0x92, 0x36, 0x71,
	0x3b, 0x2e, 0x12, 0x67, 0x6f, 0xd3, 0x16, 0xea, 0x62, 0xe6, 0xc7, 0x93, 0x73, 0xb5, 0xa4, 0xbe,
	0x1a, 0xe1, 0x20, 0x62, 0x9a, 0xb9, 0xc8, 0x37, 0x36, 0x3c, 0x0c, 0x3d, 0x85, 0xaa, 0x75, 0x34,
	0x5e, 0x55, 0x7a, 0x03, 0xd5, 0xd0, 0x77, 0x54, 0xf5, 0x87, 0x19, 0xb8, 0x60, 0x13, 0xef, 0x10,
	0x33, 0xe4, 0x77, 0x08, 0x6f, 0xf6, 0x0c, 0xbf, 0x0a, 0x95, 0xff, 0x24, 0xde, 0xb8, 0xbf, 0xa5,
	0xa7, 0xa0, 0x2f, 0x15, 0xfe, 0x94, 0xd8, 0x1f, 0x92, 0x99, 0xab, 0x3f, 0xa8, 0xa1, 0xf2, 0x4e,
	0x0d, 0x6d, 0x94, 0xee, 0xa2, 0x7b, 0xc6, 0x67, 0xa8, 0x56, 0x2d, 0x97, 0xb6, 0xee, 0x0c, 0xec,
	0xa5, 0xad, 0x3b, 0xb1, 0x7d, 0xf3, 0xee, 0x6d, 0x73, 0x89, 0xdb, 0x8d, 0x6a, 0xd9, 0xa8, 0x96,
	0x4b, 0xeb, 0xe8, 0x60, 0xff, 0xc1, 0xa3, 0x8d, 0xcd, 0xf5, 0xad, 0xd8, 0xeb, 0x43, 0x8e, 0xee,
	0x18, 0x9f, 0x56, 0x77, 0xf8, 0x6f, 0xad, 0x8c, 0x3e, 0xdf, 0xad, 0x57, 0xc7, 0xc9, 0x4f, 0x26,
	0x8e, 0xc4, 0x5b, 0x1b, 0x4b, 0x9c, 0x98, 0xc0, 0xfb, 0x03, 0xba, 0x39, 0x25, 0xfc, 0x24, 0xda,
	0x48, 0xf0, 0x8f, 0xc6, 0xd0, 0x26, 0x86, 0x7e, 0x6f, 0x6a, 0xed, 0x46, 0xc5, 0xe0, 0xc4, 0x29,
	0x2c, 0x1e, 0x3b, 0x66, 0x15, 0xa6, 0x94, 0xf1, 0x3a, 0xce, 0xb0, 0x8e, 0x38, 0xad, 0x89, 0x0a,
	0xcb, 0x63, 0xd1, 0xa1, 0x36, 0xbd, 0xea, 0x3e, 0x2c, 0xbe, 0x3c, 0x16, 0x1d, 0xb4, 0x8f, 0xcf,
	0xda, 0xcc, 0x53, 0x90, 0x56, 0xf8, 0x2d, 0x15, 0xd3, 0x58, 0x13, 0xc3, 0x28, 0x7f, 0x0c, 0x55,
	0x86, 0xbf, 0xea, 0x10, 0x86, 0x91, 0xdd, 0x22, 0xb8, 0x1d, 0xa0, 0xa1, 0x4b, 0x2c, 0x9e, 0xc3,
	0x2b, 0xa6, 0x12, 0x31, 0x0c, 0x41, 0x18, 0x7a, 0x51, 0xe4, 0x7b, 0x30, 0x63, 0xb3, 0x96, 0xf2,
	0xd6, 0x1b, 0x3c, 0x1f, 0x37, 0x9e, 0x1d, 0x73, 0xee, 0xf9, 0x31, 0x78, 0x7e, 0x02, 0x40, 0x9c,
	0xcf, 0x22, 0x30, 0xb9, 0x75, 0x7b, 0xfe, 0xdf, 0x4f, 0x66, 0x37, 0x56, 0x4b, 0xab, 0x9b, 0xab,
	0xb7, 0x57, 0xb7, 0x2a, 0xdf, 0x81, 0xb3, 0x0b, 0x2d, 0x75, 0x7e, 0xa1, 0xa5, 0x5e, 0x5c, 0x68,
	0xe0, 0xdb, 0xbe, 0x06, 0x7e, 0xec, 0x6b, 0xe0, 0xb7, 0xbe, 0x06, 0xce, 0xfa, 0x1a, 0x38, 0xef,
	0x6b, 0xe0, 0xaf, 0xbe, 0x06, 0x9e, 0xf7, 0xb5, 0xd4, 0x8b, 0xbe, 0x06, 0xbe, 0xbf, 0xd4, 0x52,
	0xa7, 0x97, 0x1a, 0x38, 0xbb, 0xd4, 0x52, 0xe7, 0x97, 0x5a, 0xea, 0x0b, 0xc3, 0xa1, 0xde, 0x13,
	0x47, 0xef, 0x52, 0xfe, 0x04, 0x33, 0x4b, 0xef, 0xf8, 0x45, 0xb1, 0x68, 0x52, 0xe6, 0xae, 0x79,
	0x8c, 0x76, 0xc9, 0x63, 0xcc, 0xd6, 0x62, 0xb8, 0xe8, 0x35, 0x1c, 0x5a, 0xc4, 0x47, 0x41, 0xf4,
	0x2d, 0x0c, 0xff, 0x1a, 0x59, 0xf1, 0x06, 0x6c, 0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x94, 0xfa,
	0x8e, 0x92, 0xff, 0x07, 0x00, 0x00,
}

func (this *CertInfoType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CertInfoType)
	if !ok {
		that2, ok := that.(CertInfoType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CommonName != that1.CommonName {
		return false
	}
	if len(this.SubjectAlternativeNames) != len(that1.SubjectAlternativeNames) {
		return false
	}
	for i := range this.SubjectAlternativeNames {
		if this.SubjectAlternativeNames[i] != that1.SubjectAlternativeNames[i] {
			return false
		}
	}
	if this.Organization != that1.Organization {
		return false
	}
	if !this.Expiry.Equal(that1.Expiry) {
		return false
	}
	if this.Issuer != that1.Issuer {
		return false
	}
	if this.PublicKeyAlgorithm != that1.PublicKeyAlgorithm {
		return false
	}
	return true
}
func (this *CertificateParamsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CertificateParamsType)
	if !ok {
		that2, ok := that.(CertificateParamsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Certificates) != len(that1.Certificates) {
		return false
	}
	for i := range this.Certificates {
		if !this.Certificates[i].Equal(that1.Certificates[i]) {
			return false
		}
	}
	if !this.ValidationParams.Equal(that1.ValidationParams) {
		return false
	}
	if this.MinimumProtocolVersion != that1.MinimumProtocolVersion {
		return false
	}
	if this.MaximumProtocolVersion != that1.MaximumProtocolVersion {
		return false
	}
	if len(this.CipherSuites) != len(that1.CipherSuites) {
		return false
	}
	for i := range this.CipherSuites {
		if this.CipherSuites[i] != that1.CipherSuites[i] {
			return false
		}
	}
	if this.RequireClientCertificate != that1.RequireClientCertificate {
		return false
	}
	if len(this.Crl) != len(that1.Crl) {
		return false
	}
	for i := range this.Crl {
		if !this.Crl[i].Equal(that1.Crl[i]) {
			return false
		}
	}
	return true
}
func (this *CertInfoType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&schema.CertInfoType{")
	s = append(s, "CommonName: "+fmt.Sprintf("%#v", this.CommonName)+",\n")
	s = append(s, "SubjectAlternativeNames: "+fmt.Sprintf("%#v", this.SubjectAlternativeNames)+",\n")
	s = append(s, "Organization: "+fmt.Sprintf("%#v", this.Organization)+",\n")
	if this.Expiry != nil {
		s = append(s, "Expiry: "+fmt.Sprintf("%#v", this.Expiry)+",\n")
	}
	s = append(s, "Issuer: "+fmt.Sprintf("%#v", this.Issuer)+",\n")
	s = append(s, "PublicKeyAlgorithm: "+fmt.Sprintf("%#v", this.PublicKeyAlgorithm)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CertificateParamsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.CertificateParamsType{")
	if this.Certificates != nil {
		s = append(s, "Certificates: "+fmt.Sprintf("%#v", this.Certificates)+",\n")
	}
	if this.ValidationParams != nil {
		s = append(s, "ValidationParams: "+fmt.Sprintf("%#v", this.ValidationParams)+",\n")
	}
	s = append(s, "MinimumProtocolVersion: "+fmt.Sprintf("%#v", this.MinimumProtocolVersion)+",\n")
	s = append(s, "MaximumProtocolVersion: "+fmt.Sprintf("%#v", this.MaximumProtocolVersion)+",\n")
	s = append(s, "CipherSuites: "+fmt.Sprintf("%#v", this.CipherSuites)+",\n")
	s = append(s, "RequireClientCertificate: "+fmt.Sprintf("%#v", this.RequireClientCertificate)+",\n")
	if this.Crl != nil {
		s = append(s, "Crl: "+fmt.Sprintf("%#v", this.Crl)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCertTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CertInfoType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertInfoType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertInfoType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKeyAlgorithm) > 0 {
		i -= len(m.PublicKeyAlgorithm)
		copy(dAtA[i:], m.PublicKeyAlgorithm)
		i = encodeVarintCertTypes(dAtA, i, uint64(len(m.PublicKeyAlgorithm)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintCertTypes(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Expiry != nil {
		{
			size, err := m.Expiry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Organization) > 0 {
		i -= len(m.Organization)
		copy(dAtA[i:], m.Organization)
		i = encodeVarintCertTypes(dAtA, i, uint64(len(m.Organization)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SubjectAlternativeNames) > 0 {
		for iNdEx := len(m.SubjectAlternativeNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubjectAlternativeNames[iNdEx])
			copy(dAtA[i:], m.SubjectAlternativeNames[iNdEx])
			i = encodeVarintCertTypes(dAtA, i, uint64(len(m.SubjectAlternativeNames[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CommonName) > 0 {
		i -= len(m.CommonName)
		copy(dAtA[i:], m.CommonName)
		i = encodeVarintCertTypes(dAtA, i, uint64(len(m.CommonName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CertificateParamsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertificateParamsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertificateParamsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Crl) > 0 {
		for iNdEx := len(m.Crl) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Crl[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCertTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.RequireClientCertificate {
		i--
		if m.RequireClientCertificate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.CipherSuites) > 0 {
		for iNdEx := len(m.CipherSuites) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CipherSuites[iNdEx])
			copy(dAtA[i:], m.CipherSuites[iNdEx])
			i = encodeVarintCertTypes(dAtA, i, uint64(len(m.CipherSuites[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.MaximumProtocolVersion != 0 {
		i = encodeVarintCertTypes(dAtA, i, uint64(m.MaximumProtocolVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.MinimumProtocolVersion != 0 {
		i = encodeVarintCertTypes(dAtA, i, uint64(m.MinimumProtocolVersion))
		i--
		dAtA[i] = 0x18
	}
	if m.ValidationParams != nil {
		{
			size, err := m.ValidationParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCertTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Certificates) > 0 {
		for iNdEx := len(m.Certificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCertTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCertTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovCertTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CertInfoType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CommonName)
	if l > 0 {
		n += 1 + l + sovCertTypes(uint64(l))
	}
	if len(m.SubjectAlternativeNames) > 0 {
		for _, s := range m.SubjectAlternativeNames {
			l = len(s)
			n += 1 + l + sovCertTypes(uint64(l))
		}
	}
	l = len(m.Organization)
	if l > 0 {
		n += 1 + l + sovCertTypes(uint64(l))
	}
	if m.Expiry != nil {
		l = m.Expiry.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovCertTypes(uint64(l))
	}
	l = len(m.PublicKeyAlgorithm)
	if l > 0 {
		n += 1 + l + sovCertTypes(uint64(l))
	}
	return n
}

func (m *CertificateParamsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Certificates) > 0 {
		for _, e := range m.Certificates {
			l = e.Size()
			n += 1 + l + sovCertTypes(uint64(l))
		}
	}
	if m.ValidationParams != nil {
		l = m.ValidationParams.Size()
		n += 1 + l + sovCertTypes(uint64(l))
	}
	if m.MinimumProtocolVersion != 0 {
		n += 1 + sovCertTypes(uint64(m.MinimumProtocolVersion))
	}
	if m.MaximumProtocolVersion != 0 {
		n += 1 + sovCertTypes(uint64(m.MaximumProtocolVersion))
	}
	if len(m.CipherSuites) > 0 {
		for _, s := range m.CipherSuites {
			l = len(s)
			n += 1 + l + sovCertTypes(uint64(l))
		}
	}
	if m.RequireClientCertificate {
		n += 2
	}
	if len(m.Crl) > 0 {
		for _, e := range m.Crl {
			l = e.Size()
			n += 1 + l + sovCertTypes(uint64(l))
		}
	}
	return n
}

func sovCertTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCertTypes(x uint64) (n int) {
	return sovCertTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CertInfoType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CertInfoType{`,
		`CommonName:` + fmt.Sprintf("%v", this.CommonName) + `,`,
		`SubjectAlternativeNames:` + fmt.Sprintf("%v", this.SubjectAlternativeNames) + `,`,
		`Organization:` + fmt.Sprintf("%v", this.Organization) + `,`,
		`Expiry:` + strings.Replace(fmt.Sprintf("%v", this.Expiry), "Timestamp", "types.Timestamp", 1) + `,`,
		`Issuer:` + fmt.Sprintf("%v", this.Issuer) + `,`,
		`PublicKeyAlgorithm:` + fmt.Sprintf("%v", this.PublicKeyAlgorithm) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CertificateParamsType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCertificates := "[]*ObjectRefType{"
	for _, f := range this.Certificates {
		repeatedStringForCertificates += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "ObjectRefType", 1) + ","
	}
	repeatedStringForCertificates += "}"
	repeatedStringForCrl := "[]*ObjectRefType{"
	for _, f := range this.Crl {
		repeatedStringForCrl += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "ObjectRefType", 1) + ","
	}
	repeatedStringForCrl += "}"
	s := strings.Join([]string{`&CertificateParamsType{`,
		`Certificates:` + repeatedStringForCertificates + `,`,
		`ValidationParams:` + strings.Replace(fmt.Sprintf("%v", this.ValidationParams), "TlsValidationParamsType", "TlsValidationParamsType", 1) + `,`,
		`MinimumProtocolVersion:` + fmt.Sprintf("%v", this.MinimumProtocolVersion) + `,`,
		`MaximumProtocolVersion:` + fmt.Sprintf("%v", this.MaximumProtocolVersion) + `,`,
		`CipherSuites:` + fmt.Sprintf("%v", this.CipherSuites) + `,`,
		`RequireClientCertificate:` + fmt.Sprintf("%v", this.RequireClientCertificate) + `,`,
		`Crl:` + repeatedStringForCrl + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCertTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CertInfoType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCertTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertInfoType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertInfoType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommonName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectAlternativeNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectAlternativeNames = append(m.SubjectAlternativeNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expiry == nil {
				m.Expiry = &types.Timestamp{}
			}
			if err := m.Expiry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeyAlgorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeyAlgorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCertTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCertTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCertTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertificateParamsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCertTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificateParamsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificateParamsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificates = append(m.Certificates, &ObjectRefType{})
			if err := m.Certificates[len(m.Certificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidationParams == nil {
				m.ValidationParams = &TlsValidationParamsType{}
			}
			if err := m.ValidationParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumProtocolVersion", wireType)
			}
			m.MinimumProtocolVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumProtocolVersion |= TlsProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumProtocolVersion", wireType)
			}
			m.MaximumProtocolVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumProtocolVersion |= TlsProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CipherSuites", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CipherSuites = append(m.CipherSuites, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequireClientCertificate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequireClientCertificate = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCertTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCertTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crl = append(m.Crl, &ObjectRefType{})
			if err := m.Crl[len(m.Crl)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCertTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCertTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCertTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCertTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCertTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCertTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCertTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCertTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCertTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCertTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCertTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCertTypes = fmt.Errorf("proto: unexpected end of group")
)
