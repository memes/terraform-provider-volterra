// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package cloud_connect

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_cloud_re_region "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cloud_re_region"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AWSREType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSREType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AWSREType) DeepCopy() *AWSREType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSREType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSREType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSREType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSRETypeValidator().Validate(ctx, m, opts...)
}

func (m *AWSREType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetCloudLinksDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCloudLinksDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetCredDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCredDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNodesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNodesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRegionDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRegionDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *AWSREType) GetCloudLinksDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCloudLinks() == nil {
		return nil, nil
	}

	drInfos, err := m.GetCloudLinks().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetCloudLinks().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "cloud_links." + dri.DRField
	}
	return drInfos, err

}

func (m *AWSREType) GetCredDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetCred()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("cloud_credentials.Object")
	dri := db.DRefInfo{
		RefdType:   "cloud_credentials.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "cred",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetCredDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AWSREType) GetCredDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
	}

	vref := m.GetCred()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "cloud_credentials.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *AWSREType) GetNodesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNodes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetNodes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetNodes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("nodes[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

func (m *AWSREType) GetRegionDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetRegion()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("cloud_re_region.Object")
	dri := db.DRefInfo{
		RefdType:   "cloud_re_region.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "region",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetRegionDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AWSREType) GetRegionDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "cloud_re_region.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: cloud_re_region")
	}

	vref := m.GetRegion()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "cloud_re_region.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateAWSREType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSREType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSREType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSREType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cloud_links"]; exists {

		vOpts := append(opts, db.WithValidateField("cloud_links"))
		if err := fv(ctx, m.GetCloudLinks(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cred"]; exists {

		vOpts := append(opts, db.WithValidateField("cred"))
		if err := fv(ctx, m.GetCred(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["nodes"]; exists {

		vOpts := append(opts, db.WithValidateField("nodes"))
		for idx, item := range m.GetNodes() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["region"]; exists {

		vOpts := append(opts, db.WithValidateField("region"))
		if err := fv(ctx, m.GetRegion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tgw"]; exists {

		vOpts := append(opts, db.WithValidateField("tgw"))
		if err := fv(ctx, m.GetTgw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vpc_attachments"]; exists {

		vOpts := append(opts, db.WithValidateField("vpc_attachments"))
		if err := fv(ctx, m.GetVpcAttachments(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSRETypeValidator = func() *ValidateAWSREType {
	v := &ValidateAWSREType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["region"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["cred"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["vpc_attachments"] = AWSVPCAttachmentListTypeValidator().Validate

	v.FldValidators["cloud_links"] = CloudLinkListTypeValidator().Validate

	v.FldValidators["nodes"] = ves_io_schema_cloud_re_region.NodeTypeValidator().Validate

	return v
}()

func AWSRETypeValidator() db.Validator {
	return DefaultAWSRETypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AWSRouteTableListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSRouteTableListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AWSRouteTableListType) DeepCopy() *AWSRouteTableListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSRouteTableListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSRouteTableListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSRouteTableListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSRouteTableListTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAWSRouteTableListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSRouteTableListType) RouteTablesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for route_tables")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*AWSRouteTableType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := AWSRouteTableTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for route_tables")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*AWSRouteTableType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*AWSRouteTableType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated route_tables")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items route_tables")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSRouteTableListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSRouteTableListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSRouteTableListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["route_tables"]; exists {
		vOpts := append(opts, db.WithValidateField("route_tables"))
		if err := fv(ctx, m.GetRouteTables(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSRouteTableListTypeValidator = func() *ValidateAWSRouteTableListType {
	v := &ValidateAWSRouteTableListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRouteTables := v.RouteTablesValidationRuleHandler
	rulesRouteTables := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "200",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRouteTables(rulesRouteTables)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSRouteTableListType.route_tables: %s", err)
		panic(errMsg)
	}
	v.FldValidators["route_tables"] = vFn

	return v
}()

func AWSRouteTableListTypeValidator() db.Validator {
	return DefaultAWSRouteTableListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AWSRouteTableType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSRouteTableType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AWSRouteTableType) DeepCopy() *AWSRouteTableType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSRouteTableType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSRouteTableType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSRouteTableType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSRouteTableTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAWSRouteTableType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSRouteTableType) RouteTableIdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for route_table_id")
	}

	return validatorFn, nil
}

func (v *ValidateAWSRouteTableType) StaticRoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for static_routes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for static_routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated static_routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items static_routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSRouteTableType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSRouteTableType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSRouteTableType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["route_table_id"]; exists {

		vOpts := append(opts, db.WithValidateField("route_table_id"))
		if err := fv(ctx, m.GetRouteTableId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["static_routes"]; exists {
		vOpts := append(opts, db.WithValidateField("static_routes"))
		if err := fv(ctx, m.GetStaticRoutes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSRouteTableTypeValidator = func() *ValidateAWSRouteTableType {
	v := &ValidateAWSRouteTableType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRouteTableId := v.RouteTableIdValidationRuleHandler
	rulesRouteTableId := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
		"ves.io.schema.rules.string.pattern": "^(rtb-)([a-z0-9]{8}|[a-z0-9]{17})$",
	}
	vFn, err = vrhRouteTableId(rulesRouteTableId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSRouteTableType.route_table_id: %s", err)
		panic(errMsg)
	}
	v.FldValidators["route_table_id"] = vFn

	vrhStaticRoutes := v.StaticRoutesValidationRuleHandler
	rulesStaticRoutes := map[string]string{
		"ves.io.schema.rules.message.required":                  "true",
		"ves.io.schema.rules.repeated.items.string.ipv4_prefix": "true",
		"ves.io.schema.rules.repeated.max_items":                "50",
		"ves.io.schema.rules.repeated.min_items":                "1",
		"ves.io.schema.rules.repeated.unique":                   "true",
	}
	vFn, err = vrhStaticRoutes(rulesStaticRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSRouteTableType.static_routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["static_routes"] = vFn

	return v
}()

func AWSRouteTableTypeValidator() db.Validator {
	return DefaultAWSRouteTableTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AWSSubnetIDListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSSubnetIDListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AWSSubnetIDListType) DeepCopy() *AWSSubnetIDListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSSubnetIDListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSSubnetIDListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSSubnetIDListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSSubnetIDListTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAWSSubnetIDListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSSubnetIDListType) SubnetIdsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for subnet_ids")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for subnet_ids")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated subnet_ids")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items subnet_ids")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSSubnetIDListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSSubnetIDListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSSubnetIDListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["subnet_ids"]; exists {
		vOpts := append(opts, db.WithValidateField("subnet_ids"))
		if err := fv(ctx, m.GetSubnetIds(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSSubnetIDListTypeValidator = func() *ValidateAWSSubnetIDListType {
	v := &ValidateAWSSubnetIDListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSubnetIds := v.SubnetIdsValidationRuleHandler
	rulesSubnetIds := map[string]string{
		"ves.io.schema.rules.message.required":              "true",
		"ves.io.schema.rules.repeated.items.string.pattern": "^(subnet-)([a-z0-9]{8}|[a-z0-9]{17})$",
		"ves.io.schema.rules.repeated.max_items":            "4",
		"ves.io.schema.rules.repeated.min_items":            "1",
		"ves.io.schema.rules.repeated.unique":               "true",
	}
	vFn, err = vrhSubnetIds(rulesSubnetIds)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSSubnetIDListType.subnet_ids: %s", err)
		panic(errMsg)
	}
	v.FldValidators["subnet_ids"] = vFn

	return v
}()

func AWSSubnetIDListTypeValidator() db.Validator {
	return DefaultAWSSubnetIDListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AWSTGWSiteType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSTGWSiteType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AWSTGWSiteType) DeepCopy() *AWSTGWSiteType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSTGWSiteType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSTGWSiteType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSTGWSiteType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSTGWSiteTypeValidator().Validate(ctx, m, opts...)
}

func (m *AWSTGWSiteType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetCloudLinksDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCloudLinksDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetCredDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCredDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *AWSTGWSiteType) GetCloudLinksDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCloudLinks() == nil {
		return nil, nil
	}

	drInfos, err := m.GetCloudLinks().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetCloudLinks().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "cloud_links." + dri.DRField
	}
	return drInfos, err

}

func (m *AWSTGWSiteType) GetCredDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetCred()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("cloud_credentials.Object")
	dri := db.DRefInfo{
		RefdType:   "cloud_credentials.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "cred",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetCredDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AWSTGWSiteType) GetCredDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
	}

	vref := m.GetCred()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "cloud_credentials.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

func (m *AWSTGWSiteType) GetSiteDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetSite()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("aws_tgw_site.Object")
	dri := db.DRefInfo{
		RefdType:   "aws_tgw_site.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "site",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetSiteDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AWSTGWSiteType) GetSiteDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "aws_tgw_site.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: aws_tgw_site")
	}

	vref := m.GetSite()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "aws_tgw_site.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateAWSTGWSiteType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSTGWSiteType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSTGWSiteType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSTGWSiteType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cloud_links"]; exists {

		vOpts := append(opts, db.WithValidateField("cloud_links"))
		if err := fv(ctx, m.GetCloudLinks(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cred"]; exists {

		vOpts := append(opts, db.WithValidateField("cred"))
		if err := fv(ctx, m.GetCred(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site"]; exists {

		vOpts := append(opts, db.WithValidateField("site"))
		if err := fv(ctx, m.GetSite(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vpc_attachments"]; exists {

		vOpts := append(opts, db.WithValidateField("vpc_attachments"))
		if err := fv(ctx, m.GetVpcAttachments(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSTGWSiteTypeValidator = func() *ValidateAWSTGWSiteType {
	v := &ValidateAWSTGWSiteType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["site"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["cred"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["vpc_attachments"] = AWSVPCAttachmentListTypeValidator().Validate

	v.FldValidators["cloud_links"] = CloudLinkListTypeValidator().Validate

	return v
}()

func AWSTGWSiteTypeValidator() db.Validator {
	return DefaultAWSTGWSiteTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AWSVPCAttachmentListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSVPCAttachmentListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AWSVPCAttachmentListType) DeepCopy() *AWSVPCAttachmentListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSVPCAttachmentListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSVPCAttachmentListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSVPCAttachmentListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSVPCAttachmentListTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAWSVPCAttachmentListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSVPCAttachmentListType) VpcListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for vpc_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*AWSVPCAttachmentType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := AWSVPCAttachmentTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for vpc_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*AWSVPCAttachmentType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*AWSVPCAttachmentType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated vpc_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items vpc_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSVPCAttachmentListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSVPCAttachmentListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSVPCAttachmentListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["vpc_list"]; exists {
		vOpts := append(opts, db.WithValidateField("vpc_list"))
		if err := fv(ctx, m.GetVpcList(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSVPCAttachmentListTypeValidator = func() *ValidateAWSVPCAttachmentListType {
	v := &ValidateAWSVPCAttachmentListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhVpcList := v.VpcListValidationRuleHandler
	rulesVpcList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
	}
	vFn, err = vrhVpcList(rulesVpcList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCAttachmentListType.vpc_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vpc_list"] = vFn

	return v
}()

func AWSVPCAttachmentListTypeValidator() db.Validator {
	return DefaultAWSVPCAttachmentListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AWSVPCAttachmentType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSVPCAttachmentType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AWSVPCAttachmentType) DeepCopy() *AWSVPCAttachmentType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSVPCAttachmentType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSVPCAttachmentType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSVPCAttachmentType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSVPCAttachmentTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAWSVPCAttachmentType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSVPCAttachmentType) RoutingChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for routing_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCAttachmentType) SubnetChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for subnet_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSVPCAttachmentType) VpcIdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for vpc_id")
	}

	return validatorFn, nil
}

func (v *ValidateAWSVPCAttachmentType) LabelsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for labels")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for labels")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for labels")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map labels")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items labels")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSVPCAttachmentType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSVPCAttachmentType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSVPCAttachmentType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["labels"]; exists {
		vOpts := append(opts, db.WithValidateField("labels"))
		if err := fv(ctx, m.GetLabels(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["routing_choice"]; exists {
		val := m.GetRoutingChoice()
		vOpts := append(opts,
			db.WithValidateField("routing_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRoutingChoice().(type) {
	case *AWSVPCAttachmentType_ManualRouting:
		if fv, exists := v.FldValidators["routing_choice.manual_routing"]; exists {
			val := m.GetRoutingChoice().(*AWSVPCAttachmentType_ManualRouting).ManualRouting
			vOpts := append(opts,
				db.WithValidateField("routing_choice"),
				db.WithValidateField("manual_routing"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCAttachmentType_RoutingIds:
		if fv, exists := v.FldValidators["routing_choice.routing_ids"]; exists {
			val := m.GetRoutingChoice().(*AWSVPCAttachmentType_RoutingIds).RoutingIds
			vOpts := append(opts,
				db.WithValidateField("routing_choice"),
				db.WithValidateField("routing_ids"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["subnet_choice"]; exists {
		val := m.GetSubnetChoice()
		vOpts := append(opts,
			db.WithValidateField("subnet_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSubnetChoice().(type) {
	case *AWSVPCAttachmentType_AllSubnets:
		if fv, exists := v.FldValidators["subnet_choice.all_subnets"]; exists {
			val := m.GetSubnetChoice().(*AWSVPCAttachmentType_AllSubnets).AllSubnets
			vOpts := append(opts,
				db.WithValidateField("subnet_choice"),
				db.WithValidateField("all_subnets"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSVPCAttachmentType_SubnetIds:
		if fv, exists := v.FldValidators["subnet_choice.subnet_ids"]; exists {
			val := m.GetSubnetChoice().(*AWSVPCAttachmentType_SubnetIds).SubnetIds
			vOpts := append(opts,
				db.WithValidateField("subnet_choice"),
				db.WithValidateField("subnet_ids"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["vpc_id"]; exists {

		vOpts := append(opts, db.WithValidateField("vpc_id"))
		if err := fv(ctx, m.GetVpcId(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSVPCAttachmentTypeValidator = func() *ValidateAWSVPCAttachmentType {
	v := &ValidateAWSVPCAttachmentType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRoutingChoice := v.RoutingChoiceValidationRuleHandler
	rulesRoutingChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRoutingChoice(rulesRoutingChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCAttachmentType.routing_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["routing_choice"] = vFn

	vrhSubnetChoice := v.SubnetChoiceValidationRuleHandler
	rulesSubnetChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSubnetChoice(rulesSubnetChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCAttachmentType.subnet_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["subnet_choice"] = vFn

	vrhVpcId := v.VpcIdValidationRuleHandler
	rulesVpcId := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
		"ves.io.schema.rules.string.pattern":   "^(vpc-)([a-z0-9]{8}|[a-z0-9]{17})$",
	}
	vFn, err = vrhVpcId(rulesVpcId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCAttachmentType.vpc_id: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vpc_id"] = vFn

	vrhLabels := v.LabelsValidationRuleHandler
	rulesLabels := map[string]string{
		"ves.io.schema.rules.map.max_pairs": "40",
	}
	vFn, err = vrhLabels(rulesLabels)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSVPCAttachmentType.labels: %s", err)
		panic(errMsg)
	}
	v.FldValidators["labels"] = vFn

	v.FldValidators["routing_choice.routing_ids"] = AWSRouteTableListTypeValidator().Validate

	v.FldValidators["subnet_choice.subnet_ids"] = AWSSubnetIDListTypeValidator().Validate

	return v
}()

func AWSVPCAttachmentTypeValidator() db.Validator {
	return DefaultAWSVPCAttachmentTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CloudLinkListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CloudLinkListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CloudLinkListType) DeepCopy() *CloudLinkListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CloudLinkListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CloudLinkListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CloudLinkListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CloudLinkListTypeValidator().Validate(ctx, m, opts...)
}

func (m *CloudLinkListType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCloudLinkDRefInfo()

}

func (m *CloudLinkListType) GetCloudLinkDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetCloudLink()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("CloudLinkListType.cloud_link[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("cloud_link.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "cloud_link.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "cloud_link",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetCloudLinkDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CloudLinkListType) GetCloudLinkDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "cloud_link.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: cloud_link")
	}
	for i, vref := range m.GetCloudLink() {
		if vref == nil {
			return nil, fmt.Errorf("CloudLinkListType.cloud_link[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "cloud_link.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateCloudLinkListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCloudLinkListType) CloudLinkValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for cloud_link")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for cloud_link")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated cloud_link")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items cloud_link")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCloudLinkListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CloudLinkListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CloudLinkListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cloud_link"]; exists {
		vOpts := append(opts, db.WithValidateField("cloud_link"))
		if err := fv(ctx, m.GetCloudLink(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCloudLinkListTypeValidator = func() *ValidateCloudLinkListType {
	v := &ValidateCloudLinkListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCloudLink := v.CloudLinkValidationRuleHandler
	rulesCloudLink := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhCloudLink(rulesCloudLink)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CloudLinkListType.cloud_link: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cloud_link"] = vFn

	return v
}()

func CloudLinkListTypeValidator() db.Validator {
	return DefaultCloudLinkListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetCloudDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCloudDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSegmentOptionDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSegmentOptionDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetCloudDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCloud() == nil {
		return nil, nil
	}
	switch m.GetCloud().(type) {
	case *CreateSpecType_AwsRe:
		drInfos, err := m.GetAwsRe().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAwsRe().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "aws_re." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetSegmentOptionDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSegmentOption() == nil {
		return nil, nil
	}
	switch m.GetSegmentOption().(type) {
	case *CreateSpecType_IsolatedSegment:

		return nil, nil

	case *CreateSpecType_EnableSegment:
		drInfos, err := m.GetEnableSegment().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetEnableSegment().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "enable_segment." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) CloudValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cloud")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) SegmentOptionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for segment_option")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cloud"]; exists {
		val := m.GetCloud()
		vOpts := append(opts,
			db.WithValidateField("cloud"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetCloud().(type) {
	case *CreateSpecType_AwsRe:
		if fv, exists := v.FldValidators["cloud.aws_re"]; exists {
			val := m.GetCloud().(*CreateSpecType_AwsRe).AwsRe
			vOpts := append(opts,
				db.WithValidateField("cloud"),
				db.WithValidateField("aws_re"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["segment_option"]; exists {
		val := m.GetSegmentOption()
		vOpts := append(opts,
			db.WithValidateField("segment_option"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSegmentOption().(type) {
	case *CreateSpecType_IsolatedSegment:
		if fv, exists := v.FldValidators["segment_option.isolated_segment"]; exists {
			val := m.GetSegmentOption().(*CreateSpecType_IsolatedSegment).IsolatedSegment
			vOpts := append(opts,
				db.WithValidateField("segment_option"),
				db.WithValidateField("isolated_segment"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_EnableSegment:
		if fv, exists := v.FldValidators["segment_option.enable_segment"]; exists {
			val := m.GetSegmentOption().(*CreateSpecType_EnableSegment).EnableSegment
			vOpts := append(opts,
				db.WithValidateField("segment_option"),
				db.WithValidateField("enable_segment"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCloud := v.CloudValidationRuleHandler
	rulesCloud := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhCloud(rulesCloud)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.cloud: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cloud"] = vFn

	vrhSegmentOption := v.SegmentOptionValidationRuleHandler
	rulesSegmentOption := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSegmentOption(rulesSegmentOption)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.segment_option: %s", err)
		panic(errMsg)
	}
	v.FldValidators["segment_option"] = vFn

	v.FldValidators["cloud.aws_re"] = AWSRETypeValidator().Validate

	v.FldValidators["segment_option.enable_segment"] = EnableSegmentTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *EnableSegmentType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *EnableSegmentType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *EnableSegmentType) DeepCopy() *EnableSegmentType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &EnableSegmentType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *EnableSegmentType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *EnableSegmentType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return EnableSegmentTypeValidator().Validate(ctx, m, opts...)
}

func (m *EnableSegmentType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetSegmentDRefInfo()

}

func (m *EnableSegmentType) GetSegmentDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetSegment()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("segment.Object")
	dri := db.DRefInfo{
		RefdType:   "segment.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "segment",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetSegmentDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *EnableSegmentType) GetSegmentDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "segment.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: segment")
	}

	vref := m.GetSegment()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "segment.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateEnableSegmentType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateEnableSegmentType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*EnableSegmentType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *EnableSegmentType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["segment"]; exists {

		vOpts := append(opts, db.WithValidateField("segment"))
		if err := fv(ctx, m.GetSegment(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultEnableSegmentTypeValidator = func() *ValidateEnableSegmentType {
	v := &ValidateEnableSegmentType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["segment"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func EnableSegmentTypeValidator() db.Validator {
	return DefaultEnableSegmentTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetCloudDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCloudDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSegmentOptionDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSegmentOptionDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetCloudDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCloud() == nil {
		return nil, nil
	}
	switch m.GetCloud().(type) {
	case *GetSpecType_AwsRe:
		drInfos, err := m.GetAwsRe().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAwsRe().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "aws_re." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetSegmentOptionDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSegmentOption() == nil {
		return nil, nil
	}
	switch m.GetSegmentOption().(type) {
	case *GetSpecType_IsolatedSegment:

		return nil, nil

	case *GetSpecType_EnableSegment:
		drInfos, err := m.GetEnableSegment().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetEnableSegment().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "enable_segment." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) CloudValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cloud")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) SegmentOptionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for segment_option")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cloud"]; exists {
		val := m.GetCloud()
		vOpts := append(opts,
			db.WithValidateField("cloud"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetCloud().(type) {
	case *GetSpecType_AwsRe:
		if fv, exists := v.FldValidators["cloud.aws_re"]; exists {
			val := m.GetCloud().(*GetSpecType_AwsRe).AwsRe
			vOpts := append(opts,
				db.WithValidateField("cloud"),
				db.WithValidateField("aws_re"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["segment_option"]; exists {
		val := m.GetSegmentOption()
		vOpts := append(opts,
			db.WithValidateField("segment_option"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSegmentOption().(type) {
	case *GetSpecType_IsolatedSegment:
		if fv, exists := v.FldValidators["segment_option.isolated_segment"]; exists {
			val := m.GetSegmentOption().(*GetSpecType_IsolatedSegment).IsolatedSegment
			vOpts := append(opts,
				db.WithValidateField("segment_option"),
				db.WithValidateField("isolated_segment"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_EnableSegment:
		if fv, exists := v.FldValidators["segment_option.enable_segment"]; exists {
			val := m.GetSegmentOption().(*GetSpecType_EnableSegment).EnableSegment
			vOpts := append(opts,
				db.WithValidateField("segment_option"),
				db.WithValidateField("enable_segment"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCloud := v.CloudValidationRuleHandler
	rulesCloud := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhCloud(rulesCloud)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.cloud: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cloud"] = vFn

	vrhSegmentOption := v.SegmentOptionValidationRuleHandler
	rulesSegmentOption := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSegmentOption(rulesSegmentOption)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.segment_option: %s", err)
		panic(errMsg)
	}
	v.FldValidators["segment_option"] = vFn

	v.FldValidators["cloud.aws_re"] = AWSRETypeValidator().Validate

	v.FldValidators["segment_option.enable_segment"] = EnableSegmentTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetCloudDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetCloudDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSegmentOptionDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSegmentOptionDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSitesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSitesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetCloudDRefInfo() ([]db.DRefInfo, error) {
	if m.GetCloud() == nil {
		return nil, nil
	}
	switch m.GetCloud().(type) {
	case *GlobalSpecType_AwsRe:
		drInfos, err := m.GetAwsRe().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAwsRe().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "aws_re." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_AwsTgwSite:
		drInfos, err := m.GetAwsTgwSite().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAwsTgwSite().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "aws_tgw_site." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetSegmentOptionDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSegmentOption() == nil {
		return nil, nil
	}
	switch m.GetSegmentOption().(type) {
	case *GlobalSpecType_IsolatedSegment:

		return nil, nil

	case *GlobalSpecType_EnableSegment:
		drInfos, err := m.GetEnableSegment().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetEnableSegment().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "enable_segment." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetSitesDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetSites()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.sites[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "site.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "sites",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetSitesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetSitesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "site.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: site")
	}
	for _, ref := range m.GetSites() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) BandwidthOptionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bandwidth_option")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) CloudValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cloud")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) SegmentOptionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for segment_option")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["bandwidth_option"]; exists {
		val := m.GetBandwidthOption()
		vOpts := append(opts,
			db.WithValidateField("bandwidth_option"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBandwidthOption().(type) {
	case *GlobalSpecType_Bandwidth_500Mbs:
		if fv, exists := v.FldValidators["bandwidth_option.bandwidth_500mbs"]; exists {
			val := m.GetBandwidthOption().(*GlobalSpecType_Bandwidth_500Mbs).Bandwidth_500Mbs
			vOpts := append(opts,
				db.WithValidateField("bandwidth_option"),
				db.WithValidateField("bandwidth_500mbs"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cloud"]; exists {
		val := m.GetCloud()
		vOpts := append(opts,
			db.WithValidateField("cloud"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetCloud().(type) {
	case *GlobalSpecType_AwsRe:
		if fv, exists := v.FldValidators["cloud.aws_re"]; exists {
			val := m.GetCloud().(*GlobalSpecType_AwsRe).AwsRe
			vOpts := append(opts,
				db.WithValidateField("cloud"),
				db.WithValidateField("aws_re"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AwsTgwSite:
		if fv, exists := v.FldValidators["cloud.aws_tgw_site"]; exists {
			val := m.GetCloud().(*GlobalSpecType_AwsTgwSite).AwsTgwSite
			vOpts := append(opts,
				db.WithValidateField("cloud"),
				db.WithValidateField("aws_tgw_site"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["segment_option"]; exists {
		val := m.GetSegmentOption()
		vOpts := append(opts,
			db.WithValidateField("segment_option"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSegmentOption().(type) {
	case *GlobalSpecType_IsolatedSegment:
		if fv, exists := v.FldValidators["segment_option.isolated_segment"]; exists {
			val := m.GetSegmentOption().(*GlobalSpecType_IsolatedSegment).IsolatedSegment
			vOpts := append(opts,
				db.WithValidateField("segment_option"),
				db.WithValidateField("isolated_segment"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_EnableSegment:
		if fv, exists := v.FldValidators["segment_option.enable_segment"]; exists {
			val := m.GetSegmentOption().(*GlobalSpecType_EnableSegment).EnableSegment
			vOpts := append(opts,
				db.WithValidateField("segment_option"),
				db.WithValidateField("enable_segment"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["sites"]; exists {

		vOpts := append(opts, db.WithValidateField("sites"))
		for idx, item := range m.GetSites() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBandwidthOption := v.BandwidthOptionValidationRuleHandler
	rulesBandwidthOption := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBandwidthOption(rulesBandwidthOption)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.bandwidth_option: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bandwidth_option"] = vFn

	vrhCloud := v.CloudValidationRuleHandler
	rulesCloud := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhCloud(rulesCloud)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.cloud: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cloud"] = vFn

	vrhSegmentOption := v.SegmentOptionValidationRuleHandler
	rulesSegmentOption := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSegmentOption(rulesSegmentOption)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.segment_option: %s", err)
		panic(errMsg)
	}
	v.FldValidators["segment_option"] = vFn

	v.FldValidators["cloud.aws_re"] = AWSRETypeValidator().Validate
	v.FldValidators["cloud.aws_tgw_site"] = AWSTGWSiteTypeValidator().Validate

	v.FldValidators["segment_option.enable_segment"] = EnableSegmentTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *IsolatedType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *IsolatedType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *IsolatedType) DeepCopy() *IsolatedType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &IsolatedType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *IsolatedType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *IsolatedType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return IsolatedTypeValidator().Validate(ctx, m, opts...)
}

type ValidateIsolatedType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateIsolatedType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*IsolatedType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *IsolatedType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultIsolatedTypeValidator = func() *ValidateIsolatedType {
	v := &ValidateIsolatedType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func IsolatedTypeValidator() db.Validator {
	return DefaultIsolatedTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceAWSREType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceAWSREType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceAWSREType) DeepCopy() *ReplaceAWSREType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceAWSREType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceAWSREType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceAWSREType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceAWSRETypeValidator().Validate(ctx, m, opts...)
}

type ValidateReplaceAWSREType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceAWSREType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceAWSREType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceAWSREType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["vpc_attachments"]; exists {

		vOpts := append(opts, db.WithValidateField("vpc_attachments"))
		if err := fv(ctx, m.GetVpcAttachments(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceAWSRETypeValidator = func() *ValidateReplaceAWSREType {
	v := &ValidateReplaceAWSREType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["vpc_attachments"] = AWSVPCAttachmentListTypeValidator().Validate

	return v
}()

func ReplaceAWSRETypeValidator() db.Validator {
	return DefaultReplaceAWSRETypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetSegmentOptionDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetSegmentOptionDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSegmentOption() == nil {
		return nil, nil
	}
	switch m.GetSegmentOption().(type) {
	case *ReplaceSpecType_IsolatedSegment:

		return nil, nil

	case *ReplaceSpecType_EnableSegment:
		drInfos, err := m.GetEnableSegment().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetEnableSegment().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "enable_segment." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) CloudValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cloud")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) SegmentOptionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for segment_option")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cloud"]; exists {
		val := m.GetCloud()
		vOpts := append(opts,
			db.WithValidateField("cloud"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetCloud().(type) {
	case *ReplaceSpecType_AwsRe:
		if fv, exists := v.FldValidators["cloud.aws_re"]; exists {
			val := m.GetCloud().(*ReplaceSpecType_AwsRe).AwsRe
			vOpts := append(opts,
				db.WithValidateField("cloud"),
				db.WithValidateField("aws_re"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["segment_option"]; exists {
		val := m.GetSegmentOption()
		vOpts := append(opts,
			db.WithValidateField("segment_option"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSegmentOption().(type) {
	case *ReplaceSpecType_IsolatedSegment:
		if fv, exists := v.FldValidators["segment_option.isolated_segment"]; exists {
			val := m.GetSegmentOption().(*ReplaceSpecType_IsolatedSegment).IsolatedSegment
			vOpts := append(opts,
				db.WithValidateField("segment_option"),
				db.WithValidateField("isolated_segment"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_EnableSegment:
		if fv, exists := v.FldValidators["segment_option.enable_segment"]; exists {
			val := m.GetSegmentOption().(*ReplaceSpecType_EnableSegment).EnableSegment
			vOpts := append(opts,
				db.WithValidateField("segment_option"),
				db.WithValidateField("enable_segment"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCloud := v.CloudValidationRuleHandler
	rulesCloud := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhCloud(rulesCloud)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.cloud: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cloud"] = vFn

	vrhSegmentOption := v.SegmentOptionValidationRuleHandler
	rulesSegmentOption := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSegmentOption(rulesSegmentOption)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.segment_option: %s", err)
		panic(errMsg)
	}
	v.FldValidators["segment_option"] = vFn

	v.FldValidators["cloud.aws_re"] = ReplaceAWSRETypeValidator().Validate

	v.FldValidators["segment_option.enable_segment"] = EnableSegmentTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetCloudToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Cloud.(type) {
	case nil:
		o.Cloud = nil

	case *CreateSpecType_AwsRe:
		o.Cloud = &GlobalSpecType_AwsRe{AwsRe: of.AwsRe}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetCloudFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Cloud.(type) {
	case nil:
		r.Cloud = nil

	case *GlobalSpecType_AwsRe:
		r.Cloud = &CreateSpecType_AwsRe{AwsRe: of.AwsRe}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetSegmentOptionToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SegmentOption.(type) {
	case nil:
		o.SegmentOption = nil

	case *CreateSpecType_EnableSegment:
		o.SegmentOption = &GlobalSpecType_EnableSegment{EnableSegment: of.EnableSegment}

	case *CreateSpecType_IsolatedSegment:
		o.SegmentOption = &GlobalSpecType_IsolatedSegment{IsolatedSegment: of.IsolatedSegment}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetSegmentOptionFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SegmentOption.(type) {
	case nil:
		r.SegmentOption = nil

	case *GlobalSpecType_EnableSegment:
		r.SegmentOption = &CreateSpecType_EnableSegment{EnableSegment: of.EnableSegment}

	case *GlobalSpecType_IsolatedSegment:
		r.SegmentOption = &CreateSpecType_IsolatedSegment{IsolatedSegment: of.IsolatedSegment}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetCloudFromGlobalSpecType(f)
	m.GetSegmentOptionFromGlobalSpecType(f)
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetCloudToGlobalSpecType(f)
	m1.SetSegmentOptionToGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetCloudToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Cloud.(type) {
	case nil:
		o.Cloud = nil

	case *GetSpecType_AwsRe:
		o.Cloud = &GlobalSpecType_AwsRe{AwsRe: of.AwsRe}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetCloudFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Cloud.(type) {
	case nil:
		r.Cloud = nil

	case *GlobalSpecType_AwsRe:
		r.Cloud = &GetSpecType_AwsRe{AwsRe: of.AwsRe}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetSegmentOptionToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SegmentOption.(type) {
	case nil:
		o.SegmentOption = nil

	case *GetSpecType_EnableSegment:
		o.SegmentOption = &GlobalSpecType_EnableSegment{EnableSegment: of.EnableSegment}

	case *GetSpecType_IsolatedSegment:
		o.SegmentOption = &GlobalSpecType_IsolatedSegment{IsolatedSegment: of.IsolatedSegment}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetSegmentOptionFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SegmentOption.(type) {
	case nil:
		r.SegmentOption = nil

	case *GlobalSpecType_EnableSegment:
		r.SegmentOption = &GetSpecType_EnableSegment{EnableSegment: of.EnableSegment}

	case *GlobalSpecType_IsolatedSegment:
		r.SegmentOption = &GetSpecType_IsolatedSegment{IsolatedSegment: of.IsolatedSegment}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetCloudFromGlobalSpecType(f)
	m.GetSegmentOptionFromGlobalSpecType(f)
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetCloudToGlobalSpecType(f)
	m1.SetSegmentOptionToGlobalSpecType(f)
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceAWSREType) fromAWSREType(f *AWSREType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.VpcAttachments = f.GetVpcAttachments()
}

func (m *ReplaceAWSREType) FromAWSREType(f *AWSREType) {
	m.fromAWSREType(f, true)
}

func (m *ReplaceAWSREType) FromAWSRETypeWithoutDeepCopy(f *AWSREType) {
	m.fromAWSREType(f, false)
}

func (m *ReplaceAWSREType) toAWSREType(f *AWSREType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.VpcAttachments = m1.VpcAttachments
}

func (m *ReplaceAWSREType) ToAWSREType(f *AWSREType) {
	m.toAWSREType(f, true)
}

func (m *ReplaceAWSREType) ToAWSRETypeWithoutDeepCopy(f *AWSREType) {
	m.toAWSREType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetCloudToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Cloud.(type) {
	case nil:
		o.Cloud = nil

	case *ReplaceSpecType_AwsRe:

		f1 := o.GetAwsRe()
		if f1 == nil {
			f1 = &AWSREType{}
		}
		of.AwsRe.ToAWSRETypeWithoutDeepCopy(f1)
		o.Cloud = &GlobalSpecType_AwsRe{AwsRe: f1}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetCloudFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Cloud.(type) {
	case nil:
		r.Cloud = nil

	case *GlobalSpecType_AwsRe:

		f1 := &ReplaceAWSREType{}
		f1.FromAWSRETypeWithoutDeepCopy(of.AwsRe)
		r.Cloud = &ReplaceSpecType_AwsRe{AwsRe: f1}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetSegmentOptionToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SegmentOption.(type) {
	case nil:
		o.SegmentOption = nil

	case *ReplaceSpecType_EnableSegment:
		o.SegmentOption = &GlobalSpecType_EnableSegment{EnableSegment: of.EnableSegment}

	case *ReplaceSpecType_IsolatedSegment:
		o.SegmentOption = &GlobalSpecType_IsolatedSegment{IsolatedSegment: of.IsolatedSegment}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetSegmentOptionFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SegmentOption.(type) {
	case nil:
		r.SegmentOption = nil

	case *GlobalSpecType_EnableSegment:
		r.SegmentOption = &ReplaceSpecType_EnableSegment{EnableSegment: of.EnableSegment}

	case *GlobalSpecType_IsolatedSegment:
		r.SegmentOption = &ReplaceSpecType_IsolatedSegment{IsolatedSegment: of.IsolatedSegment}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetCloudFromGlobalSpecType(f)
	m.GetSegmentOptionFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetCloudToGlobalSpecType(f)
	m1.SetSegmentOptionToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}
