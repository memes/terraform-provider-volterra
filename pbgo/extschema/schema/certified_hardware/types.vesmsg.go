//
// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package certified_hardware

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *Aws) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Aws) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Aws) DeepCopy() *Aws {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Aws{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Aws) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Aws) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AwsValidator().Validate(ctx, m, opts...)
}

type ValidateAws struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAws) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Aws)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Aws got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetImage().(type) {
	case *Aws_ImageId:
		if fv, exists := v.FldValidators["image.image_id"]; exists {
			val := m.GetImage().(*Aws_ImageId).ImageId
			vOpts := append(opts,
				db.WithValidateField("image"),
				db.WithValidateField("image_id"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAwsValidator = func() *ValidateAws {
	v := &ValidateAws{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AwsValidator() db.Validator {
	return DefaultAwsValidator
}

// augmented methods on protoc/std generated struct

func (m *AwsImage) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AwsImage) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AwsImage) DeepCopy() *AwsImage {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AwsImage{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AwsImage) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AwsImage) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AwsImageValidator().Validate(ctx, m, opts...)
}

type ValidateAwsImage struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAwsImage) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AwsImage)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AwsImage got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["image_id"]; exists {

		vOpts := append(opts, db.WithValidateField("image_id"))
		if err := fv(ctx, m.GetImageId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["region"]; exists {

		vOpts := append(opts, db.WithValidateField("region"))
		if err := fv(ctx, m.GetRegion(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAwsImageValidator = func() *ValidateAwsImage {
	v := &ValidateAwsImage{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AwsImageValidator() db.Validator {
	return DefaultAwsImageValidator
}

// augmented methods on protoc/std generated struct

func (m *Azure) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Azure) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Azure) DeepCopy() *Azure {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Azure{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Azure) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Azure) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureValidator().Validate(ctx, m, opts...)
}

type ValidateAzure struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzure) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Azure)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Azure got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetImage().(type) {
	case *Azure_Marketplace:
		if fv, exists := v.FldValidators["image.marketplace"]; exists {
			val := m.GetImage().(*Azure_Marketplace).Marketplace
			vOpts := append(opts,
				db.WithValidateField("image"),
				db.WithValidateField("marketplace"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Azure_ImageId:
		if fv, exists := v.FldValidators["image.image_id"]; exists {
			val := m.GetImage().(*Azure_ImageId).ImageId
			vOpts := append(opts,
				db.WithValidateField("image"),
				db.WithValidateField("image_id"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureValidator = func() *ValidateAzure {
	v := &ValidateAzure{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AzureValidator() db.Validator {
	return DefaultAzureValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureImage) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureImage) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AzureImage) DeepCopy() *AzureImage {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureImage{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureImage) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureImage) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureImageValidator().Validate(ctx, m, opts...)
}

type ValidateAzureImage struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureImage) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureImage)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureImage got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["image_id"]; exists {

		vOpts := append(opts, db.WithValidateField("image_id"))
		if err := fv(ctx, m.GetImageId(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureImageValidator = func() *ValidateAzureImage {
	v := &ValidateAzureImage{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AzureImageValidator() db.Validator {
	return DefaultAzureImageValidator
}

// augmented methods on protoc/std generated struct

func (m *CertifiedHardwareStatus) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CertifiedHardwareStatus) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CertifiedHardwareStatus) DeepCopy() *CertifiedHardwareStatus {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CertifiedHardwareStatus{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CertifiedHardwareStatus) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CertifiedHardwareStatus) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CertifiedHardwareStatusValidator().Validate(ctx, m, opts...)
}

type ValidateCertifiedHardwareStatus struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCertifiedHardwareStatus) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CertifiedHardwareStatus)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CertifiedHardwareStatus got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["latest_version"]; exists {

		vOpts := append(opts, db.WithValidateField("latest_version"))
		if err := fv(ctx, m.GetLatestVersion(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCertifiedHardwareStatusValidator = func() *ValidateCertifiedHardwareStatus {
	v := &ValidateCertifiedHardwareStatus{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func CertifiedHardwareStatusValidator() db.Validator {
	return DefaultCertifiedHardwareStatusValidator
}

// augmented methods on protoc/std generated struct

func (m *DeviceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DeviceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DeviceType) DeepCopy() *DeviceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DeviceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DeviceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DeviceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DeviceTypeValidator().Validate(ctx, m, opts...)
}

type ValidateDeviceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDeviceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DeviceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DeviceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["device_list"]; exists {

		vOpts := append(opts, db.WithValidateField("device_list"))
		for idx, item := range m.GetDeviceList() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["max_unit"]; exists {

		vOpts := append(opts, db.WithValidateField("max_unit"))
		if err := fv(ctx, m.GetMaxUnit(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["min_unit"]; exists {

		vOpts := append(opts, db.WithValidateField("min_unit"))
		if err := fv(ctx, m.GetMinUnit(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["use"]; exists {

		vOpts := append(opts, db.WithValidateField("use"))
		if err := fv(ctx, m.GetUse(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDeviceTypeValidator = func() *ValidateDeviceType {
	v := &ValidateDeviceType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func DeviceTypeValidator() db.Validator {
	return DefaultDeviceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *Gcp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Gcp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Gcp) DeepCopy() *Gcp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Gcp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Gcp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Gcp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GcpValidator().Validate(ctx, m, opts...)
}

type ValidateGcp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGcp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Gcp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Gcp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetImage().(type) {
	case *Gcp_ImageId:
		if fv, exists := v.FldValidators["image.image_id"]; exists {
			val := m.GetImage().(*Gcp_ImageId).ImageId
			vOpts := append(opts,
				db.WithValidateField("image"),
				db.WithValidateField("image_id"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGcpValidator = func() *ValidateGcp {
	v := &ValidateGcp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GcpValidator() db.Validator {
	return DefaultGcpValidator
}

// augmented methods on protoc/std generated struct

func (m *GcpImage) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GcpImage) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GcpImage) DeepCopy() *GcpImage {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GcpImage{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GcpImage) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GcpImage) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GcpImageValidator().Validate(ctx, m, opts...)
}

type ValidateGcpImage struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGcpImage) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GcpImage)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GcpImage got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["image_id"]; exists {

		vOpts := append(opts, db.WithValidateField("image_id"))
		if err := fv(ctx, m.GetImageId(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGcpImageValidator = func() *ValidateGcpImage {
	v := &ValidateGcpImage{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GcpImageValidator() db.Validator {
	return DefaultGcpImageValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["certified_hardware_type"]; exists {

		vOpts := append(opts, db.WithValidateField("certified_hardware_type"))
		if err := fv(ctx, m.GetCertifiedHardwareType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["devices"]; exists {

		vOpts := append(opts, db.WithValidateField("devices"))
		for idx, item := range m.GetDevices() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["image_list"]; exists {

		vOpts := append(opts, db.WithValidateField("image_list"))
		for idx, item := range m.GetImageList() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["internal_usb_device_rule"]; exists {

		vOpts := append(opts, db.WithValidateField("internal_usb_device_rule"))
		for idx, item := range m.GetInternalUsbDeviceRule() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["mem_page_number"]; exists {

		vOpts := append(opts, db.WithValidateField("mem_page_number"))
		if err := fv(ctx, m.GetMemPageNumber(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["mem_page_size"]; exists {

		vOpts := append(opts, db.WithValidateField("mem_page_size"))
		if err := fv(ctx, m.GetMemPageSize(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["numa_mem"]; exists {

		vOpts := append(opts, db.WithValidateField("numa_mem"))
		for idx, item := range m.GetNumaMem() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["numa_nodes"]; exists {

		vOpts := append(opts, db.WithValidateField("numa_nodes"))
		if err := fv(ctx, m.GetNumaNodes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vendor_model_list"]; exists {

		vOpts := append(opts, db.WithValidateField("vendor_model_list"))
		for idx, item := range m.GetVendorModelList() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["certified_hardware_type"]; exists {

		vOpts := append(opts, db.WithValidateField("certified_hardware_type"))
		if err := fv(ctx, m.GetCertifiedHardwareType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["devices"]; exists {

		vOpts := append(opts, db.WithValidateField("devices"))
		for idx, item := range m.GetDevices() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["image_list"]; exists {

		vOpts := append(opts, db.WithValidateField("image_list"))
		for idx, item := range m.GetImageList() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["internal_usb_device_rule"]; exists {

		vOpts := append(opts, db.WithValidateField("internal_usb_device_rule"))
		for idx, item := range m.GetInternalUsbDeviceRule() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["mem_page_number"]; exists {

		vOpts := append(opts, db.WithValidateField("mem_page_number"))
		if err := fv(ctx, m.GetMemPageNumber(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["mem_page_size"]; exists {

		vOpts := append(opts, db.WithValidateField("mem_page_size"))
		if err := fv(ctx, m.GetMemPageSize(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["numa_mem"]; exists {

		vOpts := append(opts, db.WithValidateField("numa_mem"))
		for idx, item := range m.GetNumaMem() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["numa_nodes"]; exists {

		vOpts := append(opts, db.WithValidateField("numa_nodes"))
		if err := fv(ctx, m.GetNumaNodes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vendor_model_list"]; exists {

		vOpts := append(opts, db.WithValidateField("vendor_model_list"))
		for idx, item := range m.GetVendorModelList() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *HardwareVendorModel) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *HardwareVendorModel) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *HardwareVendorModel) DeepCopy() *HardwareVendorModel {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &HardwareVendorModel{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *HardwareVendorModel) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *HardwareVendorModel) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return HardwareVendorModelValidator().Validate(ctx, m, opts...)
}

type ValidateHardwareVendorModel struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateHardwareVendorModel) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*HardwareVendorModel)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *HardwareVendorModel got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["model"]; exists {

		vOpts := append(opts, db.WithValidateField("model"))
		if err := fv(ctx, m.GetModel(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vendor"]; exists {

		vOpts := append(opts, db.WithValidateField("vendor"))
		if err := fv(ctx, m.GetVendor(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultHardwareVendorModelValidator = func() *ValidateHardwareVendorModel {
	v := &ValidateHardwareVendorModel{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func HardwareVendorModelValidator() db.Validator {
	return DefaultHardwareVendorModelValidator
}

// augmented methods on protoc/std generated struct

func (m *ImageType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ImageType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ImageType) DeepCopy() *ImageType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ImageType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ImageType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ImageType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ImageTypeValidator().Validate(ctx, m, opts...)
}

type ValidateImageType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateImageType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ImageType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ImageType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetCloudProvider().(type) {
	case *ImageType_Azure:
		if fv, exists := v.FldValidators["cloud_provider.azure"]; exists {
			val := m.GetCloudProvider().(*ImageType_Azure).Azure
			vOpts := append(opts,
				db.WithValidateField("cloud_provider"),
				db.WithValidateField("azure"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ImageType_Aws:
		if fv, exists := v.FldValidators["cloud_provider.aws"]; exists {
			val := m.GetCloudProvider().(*ImageType_Aws).Aws
			vOpts := append(opts,
				db.WithValidateField("cloud_provider"),
				db.WithValidateField("aws"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ImageType_Gcp:
		if fv, exists := v.FldValidators["cloud_provider.gcp"]; exists {
			val := m.GetCloudProvider().(*ImageType_Gcp).Gcp
			vOpts := append(opts,
				db.WithValidateField("cloud_provider"),
				db.WithValidateField("gcp"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["provider"]; exists {

		vOpts := append(opts, db.WithValidateField("provider"))
		if err := fv(ctx, m.GetProvider(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultImageTypeValidator = func() *ValidateImageType {
	v := &ValidateImageType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ImageTypeValidator() db.Validator {
	return DefaultImageTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *Marketplace) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Marketplace) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Marketplace) DeepCopy() *Marketplace {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Marketplace{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Marketplace) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Marketplace) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return MarketplaceValidator().Validate(ctx, m, opts...)
}

type ValidateMarketplace struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateMarketplace) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Marketplace)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Marketplace got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["offer"]; exists {

		vOpts := append(opts, db.WithValidateField("offer"))
		if err := fv(ctx, m.GetOffer(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["publisher"]; exists {

		vOpts := append(opts, db.WithValidateField("publisher"))
		if err := fv(ctx, m.GetPublisher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sku"]; exists {

		vOpts := append(opts, db.WithValidateField("sku"))
		if err := fv(ctx, m.GetSku(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["version"]; exists {

		vOpts := append(opts, db.WithValidateField("version"))
		if err := fv(ctx, m.GetVersion(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultMarketplaceValidator = func() *ValidateMarketplace {
	v := &ValidateMarketplace{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func MarketplaceValidator() db.Validator {
	return DefaultMarketplaceValidator
}

// augmented methods on protoc/std generated struct

func (m *NumaMem) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NumaMem) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NumaMem) DeepCopy() *NumaMem {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NumaMem{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NumaMem) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NumaMem) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NumaMemValidator().Validate(ctx, m, opts...)
}

type ValidateNumaMem struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNumaMem) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NumaMem)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NumaMem got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["memory"]; exists {

		vOpts := append(opts, db.WithValidateField("memory"))
		if err := fv(ctx, m.GetMemory(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["node"]; exists {

		vOpts := append(opts, db.WithValidateField("node"))
		if err := fv(ctx, m.GetNode(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNumaMemValidator = func() *ValidateNumaMem {
	v := &ValidateNumaMem{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func NumaMemValidator() db.Validator {
	return DefaultNumaMemValidator
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.CertifiedHardwareType = f.GetCertifiedHardwareType()
	m.Devices = f.GetDevices()
	m.ImageList = f.GetImageList()
	m.InternalUsbDeviceRule = f.GetInternalUsbDeviceRule()
	m.MemPageNumber = f.GetMemPageNumber()
	m.MemPageSize = f.GetMemPageSize()
	m.NumaMem = f.GetNumaMem()
	m.NumaNodes = f.GetNumaNodes()
	m.VendorModelList = f.GetVendorModelList()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.CertifiedHardwareType = m1.CertifiedHardwareType
	f.Devices = m1.Devices
	f.ImageList = m1.ImageList
	f.InternalUsbDeviceRule = m1.InternalUsbDeviceRule
	f.MemPageNumber = m1.MemPageNumber
	f.MemPageSize = m1.MemPageSize
	f.NumaMem = m1.NumaMem
	f.NumaNodes = m1.NumaNodes
	f.VendorModelList = m1.VendorModelList
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}
