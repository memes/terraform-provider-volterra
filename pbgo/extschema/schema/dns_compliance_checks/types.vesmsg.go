// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package dns_compliance_checks

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) DisallowedResourceRecordTypeListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(DisallowedResourceRecordType)
		return int32(i)
	}
	// DisallowedResourceRecordType_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, DisallowedResourceRecordType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disallowed_resource_record_type_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []DisallowedResourceRecordType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for disallowed_resource_record_type_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]DisallowedResourceRecordType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []DisallowedResourceRecordType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated disallowed_resource_record_type_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items disallowed_resource_record_type_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DomainDenylistValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domain_denylist")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domain_denylist")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domain_denylist")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domain_denylist")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DisallowedQueryTypeListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(DisallowedQueryType)
		return int32(i)
	}
	// DisallowedQueryType_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, DisallowedQueryType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disallowed_query_type_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []DisallowedQueryType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for disallowed_query_type_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]DisallowedQueryType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []DisallowedQueryType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated disallowed_query_type_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items disallowed_query_type_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["disallowed_query_type_list"]; exists {
		vOpts := append(opts, db.WithValidateField("disallowed_query_type_list"))
		if err := fv(ctx, m.GetDisallowedQueryTypeList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["disallowed_resource_record_type_list"]; exists {
		vOpts := append(opts, db.WithValidateField("disallowed_resource_record_type_list"))
		if err := fv(ctx, m.GetDisallowedResourceRecordTypeList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain_denylist"]; exists {
		vOpts := append(opts, db.WithValidateField("domain_denylist"))
		if err := fv(ctx, m.GetDomainDenylist(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDisallowedResourceRecordTypeList := v.DisallowedResourceRecordTypeListValidationRuleHandler
	rulesDisallowedResourceRecordTypeList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDisallowedResourceRecordTypeList(rulesDisallowedResourceRecordTypeList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.disallowed_resource_record_type_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disallowed_resource_record_type_list"] = vFn

	vrhDomainDenylist := v.DomainDenylistValidationRuleHandler
	rulesDomainDenylist := map[string]string{
		"ves.io.schema.rules.message.required":     "true",
		"ves.io.schema.rules.repeated.max_items":   "30",
		"ves.io.schema.rules.repeated.unique":      "true",
		"ves.io.schema.rules.string.etld_plus_one": "true",
	}
	vFn, err = vrhDomainDenylist(rulesDomainDenylist)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.domain_denylist: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domain_denylist"] = vFn

	vrhDisallowedQueryTypeList := v.DisallowedQueryTypeListValidationRuleHandler
	rulesDisallowedQueryTypeList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDisallowedQueryTypeList(rulesDisallowedQueryTypeList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.disallowed_query_type_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disallowed_query_type_list"] = vFn

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetProtocolInspectionDRefInfo()

}

func (m *GetSpecType) GetProtocolInspectionDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetProtocolInspection()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("GetSpecType.protocol_inspection[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("protocol_inspection.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "protocol_inspection.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "protocol_inspection",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetProtocolInspectionDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetProtocolInspectionDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "protocol_inspection.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: protocol_inspection")
	}
	for i, vref := range m.GetProtocolInspection() {
		if vref == nil {
			return nil, fmt.Errorf("GetSpecType.protocol_inspection[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "protocol_inspection.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) DisallowedResourceRecordTypeListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(DisallowedResourceRecordType)
		return int32(i)
	}
	// DisallowedResourceRecordType_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, DisallowedResourceRecordType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disallowed_resource_record_type_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []DisallowedResourceRecordType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for disallowed_resource_record_type_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]DisallowedResourceRecordType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []DisallowedResourceRecordType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated disallowed_resource_record_type_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items disallowed_resource_record_type_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) DomainDenylistValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domain_denylist")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domain_denylist")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domain_denylist")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domain_denylist")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) DisallowedQueryTypeListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(DisallowedQueryType)
		return int32(i)
	}
	// DisallowedQueryType_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, DisallowedQueryType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disallowed_query_type_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []DisallowedQueryType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for disallowed_query_type_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]DisallowedQueryType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []DisallowedQueryType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated disallowed_query_type_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items disallowed_query_type_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["disallowed_query_type_list"]; exists {
		vOpts := append(opts, db.WithValidateField("disallowed_query_type_list"))
		if err := fv(ctx, m.GetDisallowedQueryTypeList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["disallowed_resource_record_type_list"]; exists {
		vOpts := append(opts, db.WithValidateField("disallowed_resource_record_type_list"))
		if err := fv(ctx, m.GetDisallowedResourceRecordTypeList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain_denylist"]; exists {
		vOpts := append(opts, db.WithValidateField("domain_denylist"))
		if err := fv(ctx, m.GetDomainDenylist(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protocol_inspection"]; exists {

		vOpts := append(opts, db.WithValidateField("protocol_inspection"))
		for idx, item := range m.GetProtocolInspection() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDisallowedResourceRecordTypeList := v.DisallowedResourceRecordTypeListValidationRuleHandler
	rulesDisallowedResourceRecordTypeList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDisallowedResourceRecordTypeList(rulesDisallowedResourceRecordTypeList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.disallowed_resource_record_type_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disallowed_resource_record_type_list"] = vFn

	vrhDomainDenylist := v.DomainDenylistValidationRuleHandler
	rulesDomainDenylist := map[string]string{
		"ves.io.schema.rules.message.required":     "true",
		"ves.io.schema.rules.repeated.max_items":   "30",
		"ves.io.schema.rules.repeated.unique":      "true",
		"ves.io.schema.rules.string.etld_plus_one": "true",
	}
	vFn, err = vrhDomainDenylist(rulesDomainDenylist)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.domain_denylist: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domain_denylist"] = vFn

	vrhDisallowedQueryTypeList := v.DisallowedQueryTypeListValidationRuleHandler
	rulesDisallowedQueryTypeList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDisallowedQueryTypeList(rulesDisallowedQueryTypeList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.disallowed_query_type_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disallowed_query_type_list"] = vFn

	v.FldValidators["protocol_inspection"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetProtocolInspectionDRefInfo()

}

func (m *GlobalSpecType) GetProtocolInspectionDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetProtocolInspection()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.protocol_inspection[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("protocol_inspection.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "protocol_inspection.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "protocol_inspection",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetProtocolInspectionDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetProtocolInspectionDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "protocol_inspection.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: protocol_inspection")
	}
	for i, vref := range m.GetProtocolInspection() {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.protocol_inspection[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "protocol_inspection.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) DisallowedResourceRecordTypeListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(DisallowedResourceRecordType)
		return int32(i)
	}
	// DisallowedResourceRecordType_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, DisallowedResourceRecordType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disallowed_resource_record_type_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []DisallowedResourceRecordType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for disallowed_resource_record_type_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]DisallowedResourceRecordType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []DisallowedResourceRecordType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated disallowed_resource_record_type_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items disallowed_resource_record_type_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DomainDenylistValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domain_denylist")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domain_denylist")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domain_denylist")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domain_denylist")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DisallowedQueryTypeListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(DisallowedQueryType)
		return int32(i)
	}
	// DisallowedQueryType_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, DisallowedQueryType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disallowed_query_type_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []DisallowedQueryType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for disallowed_query_type_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]DisallowedQueryType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []DisallowedQueryType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated disallowed_query_type_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items disallowed_query_type_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["disallowed_query_type_list"]; exists {
		vOpts := append(opts, db.WithValidateField("disallowed_query_type_list"))
		if err := fv(ctx, m.GetDisallowedQueryTypeList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["disallowed_resource_record_type_list"]; exists {
		vOpts := append(opts, db.WithValidateField("disallowed_resource_record_type_list"))
		if err := fv(ctx, m.GetDisallowedResourceRecordTypeList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain_denylist"]; exists {
		vOpts := append(opts, db.WithValidateField("domain_denylist"))
		if err := fv(ctx, m.GetDomainDenylist(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protocol_inspection"]; exists {

		vOpts := append(opts, db.WithValidateField("protocol_inspection"))
		for idx, item := range m.GetProtocolInspection() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDisallowedResourceRecordTypeList := v.DisallowedResourceRecordTypeListValidationRuleHandler
	rulesDisallowedResourceRecordTypeList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDisallowedResourceRecordTypeList(rulesDisallowedResourceRecordTypeList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.disallowed_resource_record_type_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disallowed_resource_record_type_list"] = vFn

	vrhDomainDenylist := v.DomainDenylistValidationRuleHandler
	rulesDomainDenylist := map[string]string{
		"ves.io.schema.rules.message.required":     "true",
		"ves.io.schema.rules.repeated.max_items":   "30",
		"ves.io.schema.rules.repeated.unique":      "true",
		"ves.io.schema.rules.string.etld_plus_one": "true",
	}
	vFn, err = vrhDomainDenylist(rulesDomainDenylist)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.domain_denylist: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domain_denylist"] = vFn

	vrhDisallowedQueryTypeList := v.DisallowedQueryTypeListValidationRuleHandler
	rulesDisallowedQueryTypeList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDisallowedQueryTypeList(rulesDisallowedQueryTypeList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.disallowed_query_type_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disallowed_query_type_list"] = vFn

	v.FldValidators["protocol_inspection"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) DisallowedResourceRecordTypeListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(DisallowedResourceRecordType)
		return int32(i)
	}
	// DisallowedResourceRecordType_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, DisallowedResourceRecordType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disallowed_resource_record_type_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []DisallowedResourceRecordType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for disallowed_resource_record_type_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]DisallowedResourceRecordType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []DisallowedResourceRecordType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated disallowed_resource_record_type_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items disallowed_resource_record_type_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DomainDenylistValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domain_denylist")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domain_denylist")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domain_denylist")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domain_denylist")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DisallowedQueryTypeListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(DisallowedQueryType)
		return int32(i)
	}
	// DisallowedQueryType_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, DisallowedQueryType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disallowed_query_type_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []DisallowedQueryType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for disallowed_query_type_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]DisallowedQueryType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []DisallowedQueryType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated disallowed_query_type_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items disallowed_query_type_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["disallowed_query_type_list"]; exists {
		vOpts := append(opts, db.WithValidateField("disallowed_query_type_list"))
		if err := fv(ctx, m.GetDisallowedQueryTypeList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["disallowed_resource_record_type_list"]; exists {
		vOpts := append(opts, db.WithValidateField("disallowed_resource_record_type_list"))
		if err := fv(ctx, m.GetDisallowedResourceRecordTypeList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain_denylist"]; exists {
		vOpts := append(opts, db.WithValidateField("domain_denylist"))
		if err := fv(ctx, m.GetDomainDenylist(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDisallowedResourceRecordTypeList := v.DisallowedResourceRecordTypeListValidationRuleHandler
	rulesDisallowedResourceRecordTypeList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDisallowedResourceRecordTypeList(rulesDisallowedResourceRecordTypeList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.disallowed_resource_record_type_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disallowed_resource_record_type_list"] = vFn

	vrhDomainDenylist := v.DomainDenylistValidationRuleHandler
	rulesDomainDenylist := map[string]string{
		"ves.io.schema.rules.message.required":     "true",
		"ves.io.schema.rules.repeated.max_items":   "30",
		"ves.io.schema.rules.repeated.unique":      "true",
		"ves.io.schema.rules.string.etld_plus_one": "true",
	}
	vFn, err = vrhDomainDenylist(rulesDomainDenylist)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.domain_denylist: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domain_denylist"] = vFn

	vrhDisallowedQueryTypeList := v.DisallowedQueryTypeListValidationRuleHandler
	rulesDisallowedQueryTypeList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDisallowedQueryTypeList(rulesDisallowedQueryTypeList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.disallowed_query_type_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disallowed_query_type_list"] = vFn

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.DisallowedQueryTypeList = f.GetDisallowedQueryTypeList()
	m.DisallowedResourceRecordTypeList = f.GetDisallowedResourceRecordTypeList()
	m.DomainDenylist = f.GetDomainDenylist()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.DisallowedQueryTypeList = m1.DisallowedQueryTypeList
	f.DisallowedResourceRecordTypeList = m1.DisallowedResourceRecordTypeList
	f.DomainDenylist = m1.DomainDenylist
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.DisallowedQueryTypeList = f.GetDisallowedQueryTypeList()
	m.DisallowedResourceRecordTypeList = f.GetDisallowedResourceRecordTypeList()
	m.DomainDenylist = f.GetDomainDenylist()
	m.ProtocolInspection = f.GetProtocolInspection()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.DisallowedQueryTypeList = m1.DisallowedQueryTypeList
	f.DisallowedResourceRecordTypeList = m1.DisallowedResourceRecordTypeList
	f.DomainDenylist = m1.DomainDenylist
	f.ProtocolInspection = m1.ProtocolInspection
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.DisallowedQueryTypeList = f.GetDisallowedQueryTypeList()
	m.DisallowedResourceRecordTypeList = f.GetDisallowedResourceRecordTypeList()
	m.DomainDenylist = f.GetDomainDenylist()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.DisallowedQueryTypeList = m1.DisallowedQueryTypeList
	f.DisallowedResourceRecordTypeList = m1.DisallowedResourceRecordTypeList
	f.DomainDenylist = m1.DomainDenylist
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}
