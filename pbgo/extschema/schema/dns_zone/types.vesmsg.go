// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package dns_zone

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CertificationAuthorityAuthorization) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CertificationAuthorityAuthorization) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CertificationAuthorityAuthorization) DeepCopy() *CertificationAuthorityAuthorization {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CertificationAuthorityAuthorization{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CertificationAuthorityAuthorization) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CertificationAuthorityAuthorization) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CertificationAuthorityAuthorizationValidator().Validate(ctx, m, opts...)
}

type ValidateCertificationAuthorityAuthorization struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCertificationAuthorityAuthorization) FlagsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for flags")
	}

	return validatorFn, nil
}

func (v *ValidateCertificationAuthorityAuthorization) TagValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tag")
	}

	return validatorFn, nil
}

func (v *ValidateCertificationAuthorityAuthorization) ValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for value")
	}

	return validatorFn, nil
}

func (v *ValidateCertificationAuthorityAuthorization) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CertificationAuthorityAuthorization)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CertificationAuthorityAuthorization got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["flags"]; exists {

		vOpts := append(opts, db.WithValidateField("flags"))
		if err := fv(ctx, m.GetFlags(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tag"]; exists {

		vOpts := append(opts, db.WithValidateField("tag"))
		if err := fv(ctx, m.GetTag(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["value"]; exists {

		vOpts := append(opts, db.WithValidateField("value"))
		if err := fv(ctx, m.GetValue(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCertificationAuthorityAuthorizationValidator = func() *ValidateCertificationAuthorityAuthorization {
	v := &ValidateCertificationAuthorityAuthorization{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFlags := v.FlagsValidationRuleHandler
	rulesFlags := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "255",
	}
	vFn, err = vrhFlags(rulesFlags)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CertificationAuthorityAuthorization.flags: %s", err)
		panic(errMsg)
	}
	v.FldValidators["flags"] = vFn

	vrhTag := v.TagValidationRuleHandler
	rulesTag := map[string]string{
		"ves.io.schema.rules.string.in": "[\"issue\", \"issuewild\", \"iodef\"]",
	}
	vFn, err = vrhTag(rulesTag)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CertificationAuthorityAuthorization.tag: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tag"] = vFn

	vrhValue := v.ValueValidationRuleHandler
	rulesValue := map[string]string{
		"ves.io.schema.rules.string.max_len": "1024",
		"ves.io.schema.rules.string.min_len": "1",
	}
	vFn, err = vrhValue(rulesValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CertificationAuthorityAuthorization.value: %s", err)
		panic(errMsg)
	}
	v.FldValidators["value"] = vFn

	return v
}()

func CertificationAuthorityAuthorizationValidator() db.Validator {
	return DefaultCertificationAuthorityAuthorizationValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetSecondary().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.secondary")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetDnsTypeDRefInfo()

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetDnsTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDnsType() == nil {
		return nil, nil
	}
	switch m.GetDnsType().(type) {
	case *CreateSpecType_Primary:
		drInfos, err := m.GetPrimary().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPrimary().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "primary." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_Secondary:

		return nil, nil

	default:
		return nil, nil
	}

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) DnsTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dns_type")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dns_type"]; exists {
		val := m.GetDnsType()
		vOpts := append(opts,
			db.WithValidateField("dns_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDnsType().(type) {
	case *CreateSpecType_Primary:
		if fv, exists := v.FldValidators["dns_type.primary"]; exists {
			val := m.GetDnsType().(*CreateSpecType_Primary).Primary
			vOpts := append(opts,
				db.WithValidateField("dns_type"),
				db.WithValidateField("primary"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Secondary:
		if fv, exists := v.FldValidators["dns_type.secondary"]; exists {
			val := m.GetDnsType().(*CreateSpecType_Secondary).Secondary
			vOpts := append(opts,
				db.WithValidateField("dns_type"),
				db.WithValidateField("secondary"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDnsType := v.DnsTypeValidationRuleHandler
	rulesDnsType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDnsType(rulesDnsType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.dns_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dns_type"] = vFn

	v.FldValidators["dns_type.primary"] = PrimaryDNSCreateSpecTypeValidator().Validate
	v.FldValidators["dns_type.secondary"] = SecondaryDNSCreateSpecTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DNSAAAAResourceRecord) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DNSAAAAResourceRecord) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DNSAAAAResourceRecord) DeepCopy() *DNSAAAAResourceRecord {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DNSAAAAResourceRecord{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DNSAAAAResourceRecord) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DNSAAAAResourceRecord) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DNSAAAAResourceRecordValidator().Validate(ctx, m, opts...)
}

type ValidateDNSAAAAResourceRecord struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDNSAAAAResourceRecord) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateDNSAAAAResourceRecord) ValuesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for values")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for values")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated values")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items values")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDNSAAAAResourceRecord) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DNSAAAAResourceRecord)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DNSAAAAResourceRecord got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["values"]; exists {
		vOpts := append(opts, db.WithValidateField("values"))
		if err := fv(ctx, m.GetValues(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDNSAAAAResourceRecordValidator = func() *ValidateDNSAAAAResourceRecord {
	v := &ValidateDNSAAAAResourceRecord{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DNSAAAAResourceRecord.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	vrhValues := v.ValuesValidationRuleHandler
	rulesValues := map[string]string{
		"ves.io.schema.rules.message.required":           "true",
		"ves.io.schema.rules.repeated.items.string.ipv6": "true",
		"ves.io.schema.rules.repeated.max_items":         "100",
		"ves.io.schema.rules.repeated.min_items":         "1",
		"ves.io.schema.rules.repeated.unique":            "true",
	}
	vFn, err = vrhValues(rulesValues)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DNSAAAAResourceRecord.values: %s", err)
		panic(errMsg)
	}
	v.FldValidators["values"] = vFn

	return v
}()

func DNSAAAAResourceRecordValidator() db.Validator {
	return DefaultDNSAAAAResourceRecordValidator
}

// augmented methods on protoc/std generated struct

func (m *DNSAResourceRecord) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DNSAResourceRecord) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DNSAResourceRecord) DeepCopy() *DNSAResourceRecord {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DNSAResourceRecord{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DNSAResourceRecord) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DNSAResourceRecord) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DNSAResourceRecordValidator().Validate(ctx, m, opts...)
}

type ValidateDNSAResourceRecord struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDNSAResourceRecord) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateDNSAResourceRecord) ValuesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for values")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for values")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated values")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items values")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDNSAResourceRecord) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DNSAResourceRecord)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DNSAResourceRecord got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["values"]; exists {
		vOpts := append(opts, db.WithValidateField("values"))
		if err := fv(ctx, m.GetValues(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDNSAResourceRecordValidator = func() *ValidateDNSAResourceRecord {
	v := &ValidateDNSAResourceRecord{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DNSAResourceRecord.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	vrhValues := v.ValuesValidationRuleHandler
	rulesValues := map[string]string{
		"ves.io.schema.rules.message.required":           "true",
		"ves.io.schema.rules.repeated.items.string.ipv4": "true",
		"ves.io.schema.rules.repeated.max_items":         "100",
		"ves.io.schema.rules.repeated.min_items":         "1",
		"ves.io.schema.rules.repeated.unique":            "true",
	}
	vFn, err = vrhValues(rulesValues)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DNSAResourceRecord.values: %s", err)
		panic(errMsg)
	}
	v.FldValidators["values"] = vFn

	return v
}()

func DNSAResourceRecordValidator() db.Validator {
	return DefaultDNSAResourceRecordValidator
}

// augmented methods on protoc/std generated struct

func (m *DNSAliasResourceRecord) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DNSAliasResourceRecord) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DNSAliasResourceRecord) DeepCopy() *DNSAliasResourceRecord {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DNSAliasResourceRecord{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DNSAliasResourceRecord) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DNSAliasResourceRecord) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DNSAliasResourceRecordValidator().Validate(ctx, m, opts...)
}

type ValidateDNSAliasResourceRecord struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDNSAliasResourceRecord) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateDNSAliasResourceRecord) ValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for value")
	}

	return validatorFn, nil
}

func (v *ValidateDNSAliasResourceRecord) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DNSAliasResourceRecord)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DNSAliasResourceRecord got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["value"]; exists {

		vOpts := append(opts, db.WithValidateField("value"))
		if err := fv(ctx, m.GetValue(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDNSAliasResourceRecordValidator = func() *ValidateDNSAliasResourceRecord {
	v := &ValidateDNSAliasResourceRecord{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.string.pattern": "^$",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DNSAliasResourceRecord.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	vrhValue := v.ValueValidationRuleHandler
	rulesValue := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
		"ves.io.schema.rules.string.max_len":  "255",
	}
	vFn, err = vrhValue(rulesValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DNSAliasResourceRecord.value: %s", err)
		panic(errMsg)
	}
	v.FldValidators["value"] = vFn

	return v
}()

func DNSAliasResourceRecordValidator() db.Validator {
	return DefaultDNSAliasResourceRecordValidator
}

// augmented methods on protoc/std generated struct

func (m *DNSCAAResourceRecord) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DNSCAAResourceRecord) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DNSCAAResourceRecord) DeepCopy() *DNSCAAResourceRecord {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DNSCAAResourceRecord{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DNSCAAResourceRecord) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DNSCAAResourceRecord) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DNSCAAResourceRecordValidator().Validate(ctx, m, opts...)
}

type ValidateDNSCAAResourceRecord struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDNSCAAResourceRecord) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateDNSCAAResourceRecord) ValuesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for values")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*CertificationAuthorityAuthorization, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := CertificationAuthorityAuthorizationValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for values")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*CertificationAuthorityAuthorization)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*CertificationAuthorityAuthorization, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated values")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items values")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDNSCAAResourceRecord) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DNSCAAResourceRecord)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DNSCAAResourceRecord got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["values"]; exists {
		vOpts := append(opts, db.WithValidateField("values"))
		if err := fv(ctx, m.GetValues(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDNSCAAResourceRecordValidator = func() *ValidateDNSCAAResourceRecord {
	v := &ValidateDNSCAAResourceRecord{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DNSCAAResourceRecord.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	vrhValues := v.ValuesValidationRuleHandler
	rulesValues := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "100",
	}
	vFn, err = vrhValues(rulesValues)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DNSCAAResourceRecord.values: %s", err)
		panic(errMsg)
	}
	v.FldValidators["values"] = vFn

	return v
}()

func DNSCAAResourceRecordValidator() db.Validator {
	return DefaultDNSCAAResourceRecordValidator
}

// augmented methods on protoc/std generated struct

func (m *DNSCNAMEResourceRecord) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DNSCNAMEResourceRecord) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DNSCNAMEResourceRecord) DeepCopy() *DNSCNAMEResourceRecord {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DNSCNAMEResourceRecord{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DNSCNAMEResourceRecord) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DNSCNAMEResourceRecord) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DNSCNAMEResourceRecordValidator().Validate(ctx, m, opts...)
}

type ValidateDNSCNAMEResourceRecord struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDNSCNAMEResourceRecord) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateDNSCNAMEResourceRecord) ValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for value")
	}

	return validatorFn, nil
}

func (v *ValidateDNSCNAMEResourceRecord) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DNSCNAMEResourceRecord)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DNSCNAMEResourceRecord got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["value"]; exists {

		vOpts := append(opts, db.WithValidateField("value"))
		if err := fv(ctx, m.GetValue(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDNSCNAMEResourceRecordValidator = func() *ValidateDNSCNAMEResourceRecord {
	v := &ValidateDNSCNAMEResourceRecord{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.pattern":   "^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DNSCNAMEResourceRecord.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	vrhValue := v.ValueValidationRuleHandler
	rulesValue := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
		"ves.io.schema.rules.string.max_len":  "255",
	}
	vFn, err = vrhValue(rulesValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DNSCNAMEResourceRecord.value: %s", err)
		panic(errMsg)
	}
	v.FldValidators["value"] = vFn

	return v
}()

func DNSCNAMEResourceRecordValidator() db.Validator {
	return DefaultDNSCNAMEResourceRecordValidator
}

// augmented methods on protoc/std generated struct

func (m *DNSLBResourceRecord) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DNSLBResourceRecord) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DNSLBResourceRecord) DeepCopy() *DNSLBResourceRecord {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DNSLBResourceRecord{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DNSLBResourceRecord) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DNSLBResourceRecord) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DNSLBResourceRecordValidator().Validate(ctx, m, opts...)
}

func (m *DNSLBResourceRecord) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetValueDRefInfo()

}

func (m *DNSLBResourceRecord) GetValueDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetValue()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("dns_load_balancer.Object")
	dri := db.DRefInfo{
		RefdType:   "dns_load_balancer.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "value",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetValueDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *DNSLBResourceRecord) GetValueDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "dns_load_balancer.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: dns_load_balancer")
	}

	vref := m.GetValue()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "dns_load_balancer.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateDNSLBResourceRecord struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDNSLBResourceRecord) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateDNSLBResourceRecord) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DNSLBResourceRecord)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DNSLBResourceRecord got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["value"]; exists {

		vOpts := append(opts, db.WithValidateField("value"))
		if err := fv(ctx, m.GetValue(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDNSLBResourceRecordValidator = func() *ValidateDNSLBResourceRecord {
	v := &ValidateDNSLBResourceRecord{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.string.pattern": "^([a-zA-Z0-9*?]|([a-zA-Z0-9?*]+-[a-zA-Z0-9*?]+)){0,253}",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DNSLBResourceRecord.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	v.FldValidators["value"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func DNSLBResourceRecordValidator() db.Validator {
	return DefaultDNSLBResourceRecordValidator
}

// augmented methods on protoc/std generated struct

func (m *DNSMXResourceRecord) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DNSMXResourceRecord) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DNSMXResourceRecord) DeepCopy() *DNSMXResourceRecord {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DNSMXResourceRecord{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DNSMXResourceRecord) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DNSMXResourceRecord) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DNSMXResourceRecordValidator().Validate(ctx, m, opts...)
}

type ValidateDNSMXResourceRecord struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDNSMXResourceRecord) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateDNSMXResourceRecord) ValuesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for values")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*MailExchanger, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := MailExchangerValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for values")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*MailExchanger)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*MailExchanger, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated values")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items values")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDNSMXResourceRecord) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DNSMXResourceRecord)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DNSMXResourceRecord got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["values"]; exists {
		vOpts := append(opts, db.WithValidateField("values"))
		if err := fv(ctx, m.GetValues(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDNSMXResourceRecordValidator = func() *ValidateDNSMXResourceRecord {
	v := &ValidateDNSMXResourceRecord{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DNSMXResourceRecord.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	vrhValues := v.ValuesValidationRuleHandler
	rulesValues := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "100",
	}
	vFn, err = vrhValues(rulesValues)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DNSMXResourceRecord.values: %s", err)
		panic(errMsg)
	}
	v.FldValidators["values"] = vFn

	return v
}()

func DNSMXResourceRecordValidator() db.Validator {
	return DefaultDNSMXResourceRecordValidator
}

// augmented methods on protoc/std generated struct

func (m *DNSNSResourceRecord) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DNSNSResourceRecord) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DNSNSResourceRecord) DeepCopy() *DNSNSResourceRecord {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DNSNSResourceRecord{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DNSNSResourceRecord) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DNSNSResourceRecord) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DNSNSResourceRecordValidator().Validate(ctx, m, opts...)
}

type ValidateDNSNSResourceRecord struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDNSNSResourceRecord) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateDNSNSResourceRecord) ValuesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for values")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for values")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated values")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items values")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDNSNSResourceRecord) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DNSNSResourceRecord)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DNSNSResourceRecord got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["values"]; exists {
		vOpts := append(opts, db.WithValidateField("values"))
		if err := fv(ctx, m.GetValues(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDNSNSResourceRecordValidator = func() *ValidateDNSNSResourceRecord {
	v := &ValidateDNSNSResourceRecord{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DNSNSResourceRecord.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	vrhValues := v.ValuesValidationRuleHandler
	rulesValues := map[string]string{
		"ves.io.schema.rules.message.required":               "true",
		"ves.io.schema.rules.repeated.items.string.hostname": "true",
		"ves.io.schema.rules.repeated.max_items":             "100",
		"ves.io.schema.rules.repeated.min_items":             "1",
		"ves.io.schema.rules.repeated.unique":                "true",
	}
	vFn, err = vrhValues(rulesValues)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DNSNSResourceRecord.values: %s", err)
		panic(errMsg)
	}
	v.FldValidators["values"] = vFn

	return v
}()

func DNSNSResourceRecordValidator() db.Validator {
	return DefaultDNSNSResourceRecordValidator
}

// augmented methods on protoc/std generated struct

func (m *DNSPTRResourceRecord) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DNSPTRResourceRecord) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DNSPTRResourceRecord) DeepCopy() *DNSPTRResourceRecord {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DNSPTRResourceRecord{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DNSPTRResourceRecord) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DNSPTRResourceRecord) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DNSPTRResourceRecordValidator().Validate(ctx, m, opts...)
}

type ValidateDNSPTRResourceRecord struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDNSPTRResourceRecord) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateDNSPTRResourceRecord) ValuesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for values")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for values")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated values")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items values")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDNSPTRResourceRecord) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DNSPTRResourceRecord)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DNSPTRResourceRecord got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["values"]; exists {
		vOpts := append(opts, db.WithValidateField("values"))
		if err := fv(ctx, m.GetValues(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDNSPTRResourceRecordValidator = func() *ValidateDNSPTRResourceRecord {
	v := &ValidateDNSPTRResourceRecord{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DNSPTRResourceRecord.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	vrhValues := v.ValuesValidationRuleHandler
	rulesValues := map[string]string{
		"ves.io.schema.rules.message.required":               "true",
		"ves.io.schema.rules.repeated.items.string.hostname": "true",
		"ves.io.schema.rules.repeated.max_items":             "100",
		"ves.io.schema.rules.repeated.min_items":             "1",
		"ves.io.schema.rules.repeated.unique":                "true",
	}
	vFn, err = vrhValues(rulesValues)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DNSPTRResourceRecord.values: %s", err)
		panic(errMsg)
	}
	v.FldValidators["values"] = vFn

	return v
}()

func DNSPTRResourceRecordValidator() db.Validator {
	return DefaultDNSPTRResourceRecordValidator
}

// augmented methods on protoc/std generated struct

func (m *DNSSRVResourceRecord) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DNSSRVResourceRecord) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DNSSRVResourceRecord) DeepCopy() *DNSSRVResourceRecord {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DNSSRVResourceRecord{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DNSSRVResourceRecord) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DNSSRVResourceRecord) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DNSSRVResourceRecordValidator().Validate(ctx, m, opts...)
}

type ValidateDNSSRVResourceRecord struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDNSSRVResourceRecord) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateDNSSRVResourceRecord) ValuesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for values")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*SRVService, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := SRVServiceValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for values")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SRVService)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SRVService, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated values")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items values")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDNSSRVResourceRecord) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DNSSRVResourceRecord)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DNSSRVResourceRecord got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["values"]; exists {
		vOpts := append(opts, db.WithValidateField("values"))
		if err := fv(ctx, m.GetValues(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDNSSRVResourceRecordValidator = func() *ValidateDNSSRVResourceRecord {
	v := &ValidateDNSSRVResourceRecord{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.pattern":   "^([*]|[a-zA-Z0-9-_]{1,63})([.][a-zA-Z0-9-_]{1,63})*$",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DNSSRVResourceRecord.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	vrhValues := v.ValuesValidationRuleHandler
	rulesValues := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "100",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhValues(rulesValues)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DNSSRVResourceRecord.values: %s", err)
		panic(errMsg)
	}
	v.FldValidators["values"] = vFn

	return v
}()

func DNSSRVResourceRecordValidator() db.Validator {
	return DefaultDNSSRVResourceRecordValidator
}

// augmented methods on protoc/std generated struct

func (m *DNSTXTResourceRecord) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DNSTXTResourceRecord) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DNSTXTResourceRecord) DeepCopy() *DNSTXTResourceRecord {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DNSTXTResourceRecord{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DNSTXTResourceRecord) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DNSTXTResourceRecord) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DNSTXTResourceRecordValidator().Validate(ctx, m, opts...)
}

type ValidateDNSTXTResourceRecord struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDNSTXTResourceRecord) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateDNSTXTResourceRecord) ValuesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for values")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for values")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated values")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items values")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDNSTXTResourceRecord) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DNSTXTResourceRecord)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DNSTXTResourceRecord got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["values"]; exists {
		vOpts := append(opts, db.WithValidateField("values"))
		if err := fv(ctx, m.GetValues(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDNSTXTResourceRecordValidator = func() *ValidateDNSTXTResourceRecord {
	v := &ValidateDNSTXTResourceRecord{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.string.pattern": "^$|^([*]|[a-zA-Z0-9-/_]{1,63})([.][a-zA-Z0-9-/_]{1,63})*$",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DNSTXTResourceRecord.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	vrhValues := v.ValuesValidationRuleHandler
	rulesValues := map[string]string{
		"ves.io.schema.rules.message.required":              "true",
		"ves.io.schema.rules.repeated.items.string.max_len": "512",
		"ves.io.schema.rules.repeated.max_items":            "100",
		"ves.io.schema.rules.repeated.min_items":            "1",
		"ves.io.schema.rules.repeated.unique":               "true",
	}
	vFn, err = vrhValues(rulesValues)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DNSTXTResourceRecord.values: %s", err)
		panic(errMsg)
	}
	v.FldValidators["values"] = vFn

	return v
}()

func DNSTXTResourceRecordValidator() db.Validator {
	return DefaultDNSTXTResourceRecordValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetSecondary().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.secondary")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetDnsTypeDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetDnsTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDnsType() == nil {
		return nil, nil
	}
	switch m.GetDnsType().(type) {
	case *GetSpecType_Primary:
		drInfos, err := m.GetPrimary().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPrimary().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "primary." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_Secondary:

		return nil, nil

	default:
		return nil, nil
	}

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) DnsTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dns_type")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dns_type"]; exists {
		val := m.GetDnsType()
		vOpts := append(opts,
			db.WithValidateField("dns_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDnsType().(type) {
	case *GetSpecType_Primary:
		if fv, exists := v.FldValidators["dns_type.primary"]; exists {
			val := m.GetDnsType().(*GetSpecType_Primary).Primary
			vOpts := append(opts,
				db.WithValidateField("dns_type"),
				db.WithValidateField("primary"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Secondary:
		if fv, exists := v.FldValidators["dns_type.secondary"]; exists {
			val := m.GetDnsType().(*GetSpecType_Secondary).Secondary
			vOpts := append(opts,
				db.WithValidateField("dns_type"),
				db.WithValidateField("secondary"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["domain"]; exists {

		vOpts := append(opts, db.WithValidateField("domain"))
		if err := fv(ctx, m.GetDomain(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDnsType := v.DnsTypeValidationRuleHandler
	rulesDnsType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDnsType(rulesDnsType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.dns_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dns_type"] = vFn

	v.FldValidators["dns_type.primary"] = PrimaryDNSGetSpecTypeValidator().Validate
	v.FldValidators["dns_type.secondary"] = SecondaryDNSGetSpecTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetSecondary().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.secondary")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetDnsTypeDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetDnsTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDnsType() == nil {
		return nil, nil
	}
	switch m.GetDnsType().(type) {
	case *GlobalSpecType_Primary:
		drInfos, err := m.GetPrimary().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPrimary().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "primary." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_Secondary:

		return nil, nil

	default:
		return nil, nil
	}

}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) DnsTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dns_type")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dns_type"]; exists {
		val := m.GetDnsType()
		vOpts := append(opts,
			db.WithValidateField("dns_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDnsType().(type) {
	case *GlobalSpecType_Primary:
		if fv, exists := v.FldValidators["dns_type.primary"]; exists {
			val := m.GetDnsType().(*GlobalSpecType_Primary).Primary
			vOpts := append(opts,
				db.WithValidateField("dns_type"),
				db.WithValidateField("primary"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Secondary:
		if fv, exists := v.FldValidators["dns_type.secondary"]; exists {
			val := m.GetDnsType().(*GlobalSpecType_Secondary).Secondary
			vOpts := append(opts,
				db.WithValidateField("dns_type"),
				db.WithValidateField("secondary"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["service_instance_id"]; exists {

		vOpts := append(opts, db.WithValidateField("service_instance_id"))
		if err := fv(ctx, m.GetServiceInstanceId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["subscription_id"]; exists {

		vOpts := append(opts, db.WithValidateField("subscription_id"))
		if err := fv(ctx, m.GetSubscriptionId(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDnsType := v.DnsTypeValidationRuleHandler
	rulesDnsType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDnsType(rulesDnsType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.dns_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dns_type"] = vFn

	v.FldValidators["dns_type.primary"] = PrimaryDNSConfigValidator().Validate
	v.FldValidators["dns_type.secondary"] = SecondaryDNSConfigValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *MailExchanger) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *MailExchanger) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *MailExchanger) DeepCopy() *MailExchanger {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &MailExchanger{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *MailExchanger) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *MailExchanger) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return MailExchangerValidator().Validate(ctx, m, opts...)
}

type ValidateMailExchanger struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateMailExchanger) DomainValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for domain")
	}

	return validatorFn, nil
}

func (v *ValidateMailExchanger) PriorityValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for priority")
	}

	return validatorFn, nil
}

func (v *ValidateMailExchanger) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*MailExchanger)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *MailExchanger got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["domain"]; exists {

		vOpts := append(opts, db.WithValidateField("domain"))
		if err := fv(ctx, m.GetDomain(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["priority"]; exists {

		vOpts := append(opts, db.WithValidateField("priority"))
		if err := fv(ctx, m.GetPriority(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultMailExchangerValidator = func() *ValidateMailExchanger {
	v := &ValidateMailExchanger{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomain := v.DomainValidationRuleHandler
	rulesDomain := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
	}
	vFn, err = vrhDomain(rulesDomain)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MailExchanger.domain: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domain"] = vFn

	vrhPriority := v.PriorityValidationRuleHandler
	rulesPriority := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFn, err = vrhPriority(rulesPriority)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MailExchanger.priority: %s", err)
		panic(errMsg)
	}
	v.FldValidators["priority"] = vFn

	return v
}()

func MailExchangerValidator() db.Validator {
	return DefaultMailExchangerValidator
}

// augmented methods on protoc/std generated struct

func (m *PrimaryDNSConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PrimaryDNSConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PrimaryDNSConfig) DeepCopy() *PrimaryDNSConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PrimaryDNSConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PrimaryDNSConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PrimaryDNSConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PrimaryDNSConfigValidator().Validate(ctx, m, opts...)
}

func (m *PrimaryDNSConfig) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDefaultRrSetGroupDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDefaultRrSetGroupDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRrSetGroupDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRrSetGroupDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *PrimaryDNSConfig) GetDefaultRrSetGroupDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDefaultRrSetGroup() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetDefaultRrSetGroup() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultRrSetGroup() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("default_rr_set_group[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *PrimaryDNSConfig) GetRrSetGroupDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRrSetGroup() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetRrSetGroup() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRrSetGroup() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("rr_set_group[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidatePrimaryDNSConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePrimaryDNSConfig) SoaRecordParametersChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for soa_record_parameters_choice")
	}
	return validatorFn, nil
}

func (v *ValidatePrimaryDNSConfig) RrSetGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rr_set_group")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*RRSetGroup, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RRSetGroupValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rr_set_group")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*RRSetGroup)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*RRSetGroup, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rr_set_group")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rr_set_group")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePrimaryDNSConfig) DefaultRrSetGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for default_rr_set_group")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*RRSet, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RRSetValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for default_rr_set_group")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*RRSet)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*RRSet, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated default_rr_set_group")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items default_rr_set_group")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePrimaryDNSConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PrimaryDNSConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PrimaryDNSConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["admin"]; exists {

		vOpts := append(opts, db.WithValidateField("admin"))
		if err := fv(ctx, m.GetAdmin(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["default_rr_set_group"]; exists {
		vOpts := append(opts, db.WithValidateField("default_rr_set_group"))
		if err := fv(ctx, m.GetDefaultRrSetGroup(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dnssec_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("dnssec_mode"))
		if err := fv(ctx, m.GetDnssecMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rr_set_group"]; exists {
		vOpts := append(opts, db.WithValidateField("rr_set_group"))
		if err := fv(ctx, m.GetRrSetGroup(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["serial"]; exists {

		vOpts := append(opts, db.WithValidateField("serial"))
		if err := fv(ctx, m.GetSerial(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["soa_record_parameters_choice"]; exists {
		val := m.GetSoaRecordParametersChoice()
		vOpts := append(opts,
			db.WithValidateField("soa_record_parameters_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSoaRecordParametersChoice().(type) {
	case *PrimaryDNSConfig_DefaultSoaParameters:
		if fv, exists := v.FldValidators["soa_record_parameters_choice.default_soa_parameters"]; exists {
			val := m.GetSoaRecordParametersChoice().(*PrimaryDNSConfig_DefaultSoaParameters).DefaultSoaParameters
			vOpts := append(opts,
				db.WithValidateField("soa_record_parameters_choice"),
				db.WithValidateField("default_soa_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PrimaryDNSConfig_SoaParameters:
		if fv, exists := v.FldValidators["soa_record_parameters_choice.soa_parameters"]; exists {
			val := m.GetSoaRecordParametersChoice().(*PrimaryDNSConfig_SoaParameters).SoaParameters
			vOpts := append(opts,
				db.WithValidateField("soa_record_parameters_choice"),
				db.WithValidateField("soa_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPrimaryDNSConfigValidator = func() *ValidatePrimaryDNSConfig {
	v := &ValidatePrimaryDNSConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSoaRecordParametersChoice := v.SoaRecordParametersChoiceValidationRuleHandler
	rulesSoaRecordParametersChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSoaRecordParametersChoice(rulesSoaRecordParametersChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PrimaryDNSConfig.soa_record_parameters_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["soa_record_parameters_choice"] = vFn

	vrhRrSetGroup := v.RrSetGroupValidationRuleHandler
	rulesRrSetGroup := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "50",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhRrSetGroup(rulesRrSetGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PrimaryDNSConfig.rr_set_group: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rr_set_group"] = vFn

	vrhDefaultRrSetGroup := v.DefaultRrSetGroupValidationRuleHandler
	rulesDefaultRrSetGroup := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "10000",
	}
	vFn, err = vrhDefaultRrSetGroup(rulesDefaultRrSetGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PrimaryDNSConfig.default_rr_set_group: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_rr_set_group"] = vFn

	v.FldValidators["soa_record_parameters_choice.soa_parameters"] = SOARecordParameterConfigValidator().Validate

	v.FldValidators["dnssec_mode"] = DNSSECModeValidator().Validate

	return v
}()

func PrimaryDNSConfigValidator() db.Validator {
	return DefaultPrimaryDNSConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *PrimaryDNSCreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PrimaryDNSCreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PrimaryDNSCreateSpecType) DeepCopy() *PrimaryDNSCreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PrimaryDNSCreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PrimaryDNSCreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PrimaryDNSCreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PrimaryDNSCreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *PrimaryDNSCreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDefaultRrSetGroupDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDefaultRrSetGroupDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRrSetGroupDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRrSetGroupDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *PrimaryDNSCreateSpecType) GetDefaultRrSetGroupDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDefaultRrSetGroup() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetDefaultRrSetGroup() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultRrSetGroup() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("default_rr_set_group[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *PrimaryDNSCreateSpecType) GetRrSetGroupDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRrSetGroup() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetRrSetGroup() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRrSetGroup() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("rr_set_group[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidatePrimaryDNSCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePrimaryDNSCreateSpecType) RrSetGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rr_set_group")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*RRSetGroup, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RRSetGroupValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rr_set_group")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*RRSetGroup)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*RRSetGroup, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rr_set_group")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rr_set_group")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePrimaryDNSCreateSpecType) DefaultRrSetGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for default_rr_set_group")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*RRSet, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RRSetValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for default_rr_set_group")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*RRSet)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*RRSet, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated default_rr_set_group")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items default_rr_set_group")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePrimaryDNSCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PrimaryDNSCreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PrimaryDNSCreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["default_rr_set_group"]; exists {
		vOpts := append(opts, db.WithValidateField("default_rr_set_group"))
		if err := fv(ctx, m.GetDefaultRrSetGroup(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dnssec_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("dnssec_mode"))
		if err := fv(ctx, m.GetDnssecMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rr_set_group"]; exists {
		vOpts := append(opts, db.WithValidateField("rr_set_group"))
		if err := fv(ctx, m.GetRrSetGroup(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetSoaRecordParametersChoice().(type) {
	case *PrimaryDNSCreateSpecType_DefaultSoaParameters:
		if fv, exists := v.FldValidators["soa_record_parameters_choice.default_soa_parameters"]; exists {
			val := m.GetSoaRecordParametersChoice().(*PrimaryDNSCreateSpecType_DefaultSoaParameters).DefaultSoaParameters
			vOpts := append(opts,
				db.WithValidateField("soa_record_parameters_choice"),
				db.WithValidateField("default_soa_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PrimaryDNSCreateSpecType_SoaParameters:
		if fv, exists := v.FldValidators["soa_record_parameters_choice.soa_parameters"]; exists {
			val := m.GetSoaRecordParametersChoice().(*PrimaryDNSCreateSpecType_SoaParameters).SoaParameters
			vOpts := append(opts,
				db.WithValidateField("soa_record_parameters_choice"),
				db.WithValidateField("soa_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPrimaryDNSCreateSpecTypeValidator = func() *ValidatePrimaryDNSCreateSpecType {
	v := &ValidatePrimaryDNSCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRrSetGroup := v.RrSetGroupValidationRuleHandler
	rulesRrSetGroup := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "50",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhRrSetGroup(rulesRrSetGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PrimaryDNSCreateSpecType.rr_set_group: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rr_set_group"] = vFn

	vrhDefaultRrSetGroup := v.DefaultRrSetGroupValidationRuleHandler
	rulesDefaultRrSetGroup := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "10000",
	}
	vFn, err = vrhDefaultRrSetGroup(rulesDefaultRrSetGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PrimaryDNSCreateSpecType.default_rr_set_group: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_rr_set_group"] = vFn

	v.FldValidators["soa_record_parameters_choice.soa_parameters"] = SOARecordParameterConfigValidator().Validate

	v.FldValidators["dnssec_mode"] = DNSSECModeValidator().Validate

	return v
}()

func PrimaryDNSCreateSpecTypeValidator() db.Validator {
	return DefaultPrimaryDNSCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *PrimaryDNSGetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PrimaryDNSGetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PrimaryDNSGetSpecType) DeepCopy() *PrimaryDNSGetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PrimaryDNSGetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PrimaryDNSGetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PrimaryDNSGetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PrimaryDNSGetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *PrimaryDNSGetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDefaultRrSetGroupDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDefaultRrSetGroupDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRrSetGroupDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRrSetGroupDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *PrimaryDNSGetSpecType) GetDefaultRrSetGroupDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDefaultRrSetGroup() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetDefaultRrSetGroup() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultRrSetGroup() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("default_rr_set_group[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *PrimaryDNSGetSpecType) GetRrSetGroupDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRrSetGroup() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetRrSetGroup() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRrSetGroup() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("rr_set_group[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidatePrimaryDNSGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePrimaryDNSGetSpecType) RrSetGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rr_set_group")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*RRSetGroup, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RRSetGroupValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rr_set_group")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*RRSetGroup)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*RRSetGroup, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rr_set_group")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rr_set_group")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePrimaryDNSGetSpecType) DefaultRrSetGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for default_rr_set_group")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*RRSet, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RRSetValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for default_rr_set_group")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*RRSet)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*RRSet, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated default_rr_set_group")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items default_rr_set_group")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePrimaryDNSGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PrimaryDNSGetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PrimaryDNSGetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["admin"]; exists {

		vOpts := append(opts, db.WithValidateField("admin"))
		if err := fv(ctx, m.GetAdmin(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["default_rr_set_group"]; exists {
		vOpts := append(opts, db.WithValidateField("default_rr_set_group"))
		if err := fv(ctx, m.GetDefaultRrSetGroup(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dnssec_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("dnssec_mode"))
		if err := fv(ctx, m.GetDnssecMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rr_set_group"]; exists {
		vOpts := append(opts, db.WithValidateField("rr_set_group"))
		if err := fv(ctx, m.GetRrSetGroup(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["serial"]; exists {

		vOpts := append(opts, db.WithValidateField("serial"))
		if err := fv(ctx, m.GetSerial(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetSoaRecordParametersChoice().(type) {
	case *PrimaryDNSGetSpecType_DefaultSoaParameters:
		if fv, exists := v.FldValidators["soa_record_parameters_choice.default_soa_parameters"]; exists {
			val := m.GetSoaRecordParametersChoice().(*PrimaryDNSGetSpecType_DefaultSoaParameters).DefaultSoaParameters
			vOpts := append(opts,
				db.WithValidateField("soa_record_parameters_choice"),
				db.WithValidateField("default_soa_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PrimaryDNSGetSpecType_SoaParameters:
		if fv, exists := v.FldValidators["soa_record_parameters_choice.soa_parameters"]; exists {
			val := m.GetSoaRecordParametersChoice().(*PrimaryDNSGetSpecType_SoaParameters).SoaParameters
			vOpts := append(opts,
				db.WithValidateField("soa_record_parameters_choice"),
				db.WithValidateField("soa_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPrimaryDNSGetSpecTypeValidator = func() *ValidatePrimaryDNSGetSpecType {
	v := &ValidatePrimaryDNSGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRrSetGroup := v.RrSetGroupValidationRuleHandler
	rulesRrSetGroup := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "50",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhRrSetGroup(rulesRrSetGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PrimaryDNSGetSpecType.rr_set_group: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rr_set_group"] = vFn

	vrhDefaultRrSetGroup := v.DefaultRrSetGroupValidationRuleHandler
	rulesDefaultRrSetGroup := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "10000",
	}
	vFn, err = vrhDefaultRrSetGroup(rulesDefaultRrSetGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PrimaryDNSGetSpecType.default_rr_set_group: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_rr_set_group"] = vFn

	v.FldValidators["soa_record_parameters_choice.soa_parameters"] = SOARecordParameterConfigValidator().Validate

	v.FldValidators["dnssec_mode"] = DNSSECModeValidator().Validate

	return v
}()

func PrimaryDNSGetSpecTypeValidator() db.Validator {
	return DefaultPrimaryDNSGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *RRSet) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RRSet) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RRSet) DeepCopy() *RRSet {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RRSet{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RRSet) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RRSet) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RRSetValidator().Validate(ctx, m, opts...)
}

func (m *RRSet) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetTypeRecordSetDRefInfo()

}

// GetDRefInfo for the field's type
func (m *RRSet) GetTypeRecordSetDRefInfo() ([]db.DRefInfo, error) {
	if m.GetTypeRecordSet() == nil {
		return nil, nil
	}
	switch m.GetTypeRecordSet().(type) {
	case *RRSet_ARecord:

		return nil, nil

	case *RRSet_AaaaRecord:

		return nil, nil

	case *RRSet_AliasRecord:

		return nil, nil

	case *RRSet_CaaRecord:

		return nil, nil

	case *RRSet_CnameRecord:

		return nil, nil

	case *RRSet_MxRecord:

		return nil, nil

	case *RRSet_NsRecord:

		return nil, nil

	case *RRSet_PtrRecord:

		return nil, nil

	case *RRSet_SrvRecord:

		return nil, nil

	case *RRSet_TxtRecord:

		return nil, nil

	case *RRSet_LbRecord:
		drInfos, err := m.GetLbRecord().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetLbRecord().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "lb_record." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateRRSet struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRRSet) TypeRecordSetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type_record_set")
	}
	return validatorFn, nil
}

func (v *ValidateRRSet) TtlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ttl")
	}

	return validatorFn, nil
}

func (v *ValidateRRSet) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RRSet)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RRSet got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ttl"]; exists {

		vOpts := append(opts, db.WithValidateField("ttl"))
		if err := fv(ctx, m.GetTtl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type_record_set"]; exists {
		val := m.GetTypeRecordSet()
		vOpts := append(opts,
			db.WithValidateField("type_record_set"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTypeRecordSet().(type) {
	case *RRSet_ARecord:
		if fv, exists := v.FldValidators["type_record_set.a_record"]; exists {
			val := m.GetTypeRecordSet().(*RRSet_ARecord).ARecord
			vOpts := append(opts,
				db.WithValidateField("type_record_set"),
				db.WithValidateField("a_record"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RRSet_AaaaRecord:
		if fv, exists := v.FldValidators["type_record_set.aaaa_record"]; exists {
			val := m.GetTypeRecordSet().(*RRSet_AaaaRecord).AaaaRecord
			vOpts := append(opts,
				db.WithValidateField("type_record_set"),
				db.WithValidateField("aaaa_record"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RRSet_AliasRecord:
		if fv, exists := v.FldValidators["type_record_set.alias_record"]; exists {
			val := m.GetTypeRecordSet().(*RRSet_AliasRecord).AliasRecord
			vOpts := append(opts,
				db.WithValidateField("type_record_set"),
				db.WithValidateField("alias_record"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RRSet_CaaRecord:
		if fv, exists := v.FldValidators["type_record_set.caa_record"]; exists {
			val := m.GetTypeRecordSet().(*RRSet_CaaRecord).CaaRecord
			vOpts := append(opts,
				db.WithValidateField("type_record_set"),
				db.WithValidateField("caa_record"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RRSet_CnameRecord:
		if fv, exists := v.FldValidators["type_record_set.cname_record"]; exists {
			val := m.GetTypeRecordSet().(*RRSet_CnameRecord).CnameRecord
			vOpts := append(opts,
				db.WithValidateField("type_record_set"),
				db.WithValidateField("cname_record"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RRSet_MxRecord:
		if fv, exists := v.FldValidators["type_record_set.mx_record"]; exists {
			val := m.GetTypeRecordSet().(*RRSet_MxRecord).MxRecord
			vOpts := append(opts,
				db.WithValidateField("type_record_set"),
				db.WithValidateField("mx_record"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RRSet_NsRecord:
		if fv, exists := v.FldValidators["type_record_set.ns_record"]; exists {
			val := m.GetTypeRecordSet().(*RRSet_NsRecord).NsRecord
			vOpts := append(opts,
				db.WithValidateField("type_record_set"),
				db.WithValidateField("ns_record"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RRSet_PtrRecord:
		if fv, exists := v.FldValidators["type_record_set.ptr_record"]; exists {
			val := m.GetTypeRecordSet().(*RRSet_PtrRecord).PtrRecord
			vOpts := append(opts,
				db.WithValidateField("type_record_set"),
				db.WithValidateField("ptr_record"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RRSet_SrvRecord:
		if fv, exists := v.FldValidators["type_record_set.srv_record"]; exists {
			val := m.GetTypeRecordSet().(*RRSet_SrvRecord).SrvRecord
			vOpts := append(opts,
				db.WithValidateField("type_record_set"),
				db.WithValidateField("srv_record"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RRSet_TxtRecord:
		if fv, exists := v.FldValidators["type_record_set.txt_record"]; exists {
			val := m.GetTypeRecordSet().(*RRSet_TxtRecord).TxtRecord
			vOpts := append(opts,
				db.WithValidateField("type_record_set"),
				db.WithValidateField("txt_record"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RRSet_LbRecord:
		if fv, exists := v.FldValidators["type_record_set.lb_record"]; exists {
			val := m.GetTypeRecordSet().(*RRSet_LbRecord).LbRecord
			vOpts := append(opts,
				db.WithValidateField("type_record_set"),
				db.WithValidateField("lb_record"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRRSetValidator = func() *ValidateRRSet {
	v := &ValidateRRSet{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTypeRecordSet := v.TypeRecordSetValidationRuleHandler
	rulesTypeRecordSet := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTypeRecordSet(rulesTypeRecordSet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RRSet.type_record_set: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type_record_set"] = vFn

	vrhTtl := v.TtlValidationRuleHandler
	rulesTtl := map[string]string{
		"ves.io.schema.rules.uint32.gte": "60",
		"ves.io.schema.rules.uint32.lte": "2147483647",
	}
	vFn, err = vrhTtl(rulesTtl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RRSet.ttl: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ttl"] = vFn

	v.FldValidators["type_record_set.a_record"] = DNSAResourceRecordValidator().Validate
	v.FldValidators["type_record_set.aaaa_record"] = DNSAAAAResourceRecordValidator().Validate
	v.FldValidators["type_record_set.alias_record"] = DNSAliasResourceRecordValidator().Validate
	v.FldValidators["type_record_set.caa_record"] = DNSCAAResourceRecordValidator().Validate
	v.FldValidators["type_record_set.cname_record"] = DNSCNAMEResourceRecordValidator().Validate
	v.FldValidators["type_record_set.mx_record"] = DNSMXResourceRecordValidator().Validate
	v.FldValidators["type_record_set.ns_record"] = DNSNSResourceRecordValidator().Validate
	v.FldValidators["type_record_set.ptr_record"] = DNSPTRResourceRecordValidator().Validate
	v.FldValidators["type_record_set.srv_record"] = DNSSRVResourceRecordValidator().Validate
	v.FldValidators["type_record_set.txt_record"] = DNSTXTResourceRecordValidator().Validate
	v.FldValidators["type_record_set.lb_record"] = DNSLBResourceRecordValidator().Validate

	return v
}()

func RRSetValidator() db.Validator {
	return DefaultRRSetValidator
}

// augmented methods on protoc/std generated struct

func (m *RRSetGroup) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RRSetGroup) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RRSetGroup) DeepCopy() *RRSetGroup {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RRSetGroup{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RRSetGroup) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RRSetGroup) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RRSetGroupValidator().Validate(ctx, m, opts...)
}

func (m *RRSetGroup) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetRrSetDRefInfo()

}

// GetDRefInfo for the field's type
func (m *RRSetGroup) GetRrSetDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRrSet() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetRrSet() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRrSet() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("rr_set[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateRRSetGroup struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRRSetGroup) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRRSetGroup) RrSetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rr_set")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*RRSet, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RRSetValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rr_set")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*RRSet)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*RRSet, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rr_set")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rr_set")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRRSetGroup) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RRSetGroup)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RRSetGroup got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rr_set"]; exists {
		vOpts := append(opts, db.WithValidateField("rr_set"))
		if err := fv(ctx, m.GetRrSet(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRRSetGroupValidator = func() *ValidateRRSetGroup {
	v := &ValidateRRSetGroup{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RRSetGroup.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	vrhRrSet := v.RrSetValidationRuleHandler
	rulesRrSet := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "10000",
	}
	vFn, err = vrhRrSet(rulesRrSet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RRSetGroup.rr_set: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rr_set"] = vFn

	return v
}()

func RRSetGroupValidator() db.Validator {
	return DefaultRRSetGroupValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetSecondary().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.secondary")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetDnsTypeDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetDnsTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDnsType() == nil {
		return nil, nil
	}
	switch m.GetDnsType().(type) {
	case *ReplaceSpecType_Primary:
		drInfos, err := m.GetPrimary().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPrimary().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "primary." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_Secondary:

		return nil, nil

	default:
		return nil, nil
	}

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) DnsTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dns_type")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dns_type"]; exists {
		val := m.GetDnsType()
		vOpts := append(opts,
			db.WithValidateField("dns_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDnsType().(type) {
	case *ReplaceSpecType_Primary:
		if fv, exists := v.FldValidators["dns_type.primary"]; exists {
			val := m.GetDnsType().(*ReplaceSpecType_Primary).Primary
			vOpts := append(opts,
				db.WithValidateField("dns_type"),
				db.WithValidateField("primary"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Secondary:
		if fv, exists := v.FldValidators["dns_type.secondary"]; exists {
			val := m.GetDnsType().(*ReplaceSpecType_Secondary).Secondary
			vOpts := append(opts,
				db.WithValidateField("dns_type"),
				db.WithValidateField("secondary"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDnsType := v.DnsTypeValidationRuleHandler
	rulesDnsType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDnsType(rulesDnsType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.dns_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dns_type"] = vFn

	v.FldValidators["dns_type.primary"] = PrimaryDNSCreateSpecTypeValidator().Validate
	v.FldValidators["dns_type.secondary"] = SecondaryDNSCreateSpecTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SOARecordParameterConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SOARecordParameterConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SOARecordParameterConfig) DeepCopy() *SOARecordParameterConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SOARecordParameterConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SOARecordParameterConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SOARecordParameterConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SOARecordParameterConfigValidator().Validate(ctx, m, opts...)
}

type ValidateSOARecordParameterConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSOARecordParameterConfig) RefreshValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for refresh")
	}

	return validatorFn, nil
}

func (v *ValidateSOARecordParameterConfig) RetryValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for retry")
	}

	return validatorFn, nil
}

func (v *ValidateSOARecordParameterConfig) ExpireValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for expire")
	}

	return validatorFn, nil
}

func (v *ValidateSOARecordParameterConfig) NegativeTtlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for negative_ttl")
	}

	return validatorFn, nil
}

func (v *ValidateSOARecordParameterConfig) TtlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ttl")
	}

	return validatorFn, nil
}

func (v *ValidateSOARecordParameterConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SOARecordParameterConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SOARecordParameterConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["expire"]; exists {

		vOpts := append(opts, db.WithValidateField("expire"))
		if err := fv(ctx, m.GetExpire(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["negative_ttl"]; exists {

		vOpts := append(opts, db.WithValidateField("negative_ttl"))
		if err := fv(ctx, m.GetNegativeTtl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["refresh"]; exists {

		vOpts := append(opts, db.WithValidateField("refresh"))
		if err := fv(ctx, m.GetRefresh(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["retry"]; exists {

		vOpts := append(opts, db.WithValidateField("retry"))
		if err := fv(ctx, m.GetRetry(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ttl"]; exists {

		vOpts := append(opts, db.WithValidateField("ttl"))
		if err := fv(ctx, m.GetTtl(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSOARecordParameterConfigValidator = func() *ValidateSOARecordParameterConfig {
	v := &ValidateSOARecordParameterConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRefresh := v.RefreshValidationRuleHandler
	rulesRefresh := map[string]string{
		"ves.io.schema.rules.uint32.gte": "3600",
		"ves.io.schema.rules.uint32.lte": "2147483647",
	}
	vFn, err = vrhRefresh(rulesRefresh)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SOARecordParameterConfig.refresh: %s", err)
		panic(errMsg)
	}
	v.FldValidators["refresh"] = vFn

	vrhRetry := v.RetryValidationRuleHandler
	rulesRetry := map[string]string{
		"ves.io.schema.rules.uint32.gte": "60",
		"ves.io.schema.rules.uint32.lte": "2147483647",
	}
	vFn, err = vrhRetry(rulesRetry)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SOARecordParameterConfig.retry: %s", err)
		panic(errMsg)
	}
	v.FldValidators["retry"] = vFn

	vrhExpire := v.ExpireValidationRuleHandler
	rulesExpire := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "2147483647",
	}
	vFn, err = vrhExpire(rulesExpire)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SOARecordParameterConfig.expire: %s", err)
		panic(errMsg)
	}
	v.FldValidators["expire"] = vFn

	vrhNegativeTtl := v.NegativeTtlValidationRuleHandler
	rulesNegativeTtl := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "2147483647",
	}
	vFn, err = vrhNegativeTtl(rulesNegativeTtl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SOARecordParameterConfig.negative_ttl: %s", err)
		panic(errMsg)
	}
	v.FldValidators["negative_ttl"] = vFn

	vrhTtl := v.TtlValidationRuleHandler
	rulesTtl := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "2147483647",
	}
	vFn, err = vrhTtl(rulesTtl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SOARecordParameterConfig.ttl: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ttl"] = vFn

	return v
}()

func SOARecordParameterConfigValidator() db.Validator {
	return DefaultSOARecordParameterConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *SRVService) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SRVService) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SRVService) DeepCopy() *SRVService {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SRVService{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SRVService) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SRVService) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SRVServiceValidator().Validate(ctx, m, opts...)
}

type ValidateSRVService struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSRVService) PriorityValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for priority")
	}

	return validatorFn, nil
}

func (v *ValidateSRVService) WeightValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for weight")
	}

	return validatorFn, nil
}

func (v *ValidateSRVService) PortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}

	return validatorFn, nil
}

func (v *ValidateSRVService) TargetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for target")
	}

	return validatorFn, nil
}

func (v *ValidateSRVService) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SRVService)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SRVService got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["port"]; exists {

		vOpts := append(opts, db.WithValidateField("port"))
		if err := fv(ctx, m.GetPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["priority"]; exists {

		vOpts := append(opts, db.WithValidateField("priority"))
		if err := fv(ctx, m.GetPriority(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["target"]; exists {

		vOpts := append(opts, db.WithValidateField("target"))
		if err := fv(ctx, m.GetTarget(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["weight"]; exists {

		vOpts := append(opts, db.WithValidateField("weight"))
		if err := fv(ctx, m.GetWeight(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSRVServiceValidator = func() *ValidateSRVService {
	v := &ValidateSRVService{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPriority := v.PriorityValidationRuleHandler
	rulesPriority := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFn, err = vrhPriority(rulesPriority)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SRVService.priority: %s", err)
		panic(errMsg)
	}
	v.FldValidators["priority"] = vFn

	vrhWeight := v.WeightValidationRuleHandler
	rulesWeight := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFn, err = vrhWeight(rulesWeight)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SRVService.weight: %s", err)
		panic(errMsg)
	}
	v.FldValidators["weight"] = vFn

	vrhPort := v.PortValidationRuleHandler
	rulesPort := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFn, err = vrhPort(rulesPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SRVService.port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port"] = vFn

	vrhTarget := v.TargetValidationRuleHandler
	rulesTarget := map[string]string{
		"ves.io.schema.rules.string.pattern": "^$|^[.]$|^([a-zA-Z0-9]{1}[a-zA-Z0-9_-]{0,62})(\\.[a-zA-Z0-9_]{1}[a-zA-Z0-9_-]{0,62})*?(\\.[a-zA-Z]{1}[a-zA-Z0-9]{0,62})\\.?$",
	}
	vFn, err = vrhTarget(rulesTarget)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SRVService.target: %s", err)
		panic(errMsg)
	}
	v.FldValidators["target"] = vFn

	return v
}()

func SRVServiceValidator() db.Validator {
	return DefaultSRVServiceValidator
}

// augmented methods on protoc/std generated struct

func (m *SecondaryDNSConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SecondaryDNSConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *SecondaryDNSConfig) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetTsigKeyValue().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting SecondaryDNSConfig.tsig_key_value")
	}

	return nil
}

func (m *SecondaryDNSConfig) DeepCopy() *SecondaryDNSConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SecondaryDNSConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SecondaryDNSConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SecondaryDNSConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SecondaryDNSConfigValidator().Validate(ctx, m, opts...)
}

type ValidateSecondaryDNSConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSecondaryDNSConfig) PrimaryServersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for primary_servers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for primary_servers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated primary_servers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items primary_servers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSecondaryDNSConfig) TsigKeyNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tsig_key_name")
	}

	return validatorFn, nil
}

func (v *ValidateSecondaryDNSConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SecondaryDNSConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SecondaryDNSConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["last_axfr_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("last_axfr_timestamp"))
		if err := fv(ctx, m.GetLastAxfrTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["primary_servers"]; exists {
		vOpts := append(opts, db.WithValidateField("primary_servers"))
		if err := fv(ctx, m.GetPrimaryServers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tsig_key_algorithm"]; exists {

		vOpts := append(opts, db.WithValidateField("tsig_key_algorithm"))
		if err := fv(ctx, m.GetTsigKeyAlgorithm(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tsig_key_name"]; exists {

		vOpts := append(opts, db.WithValidateField("tsig_key_name"))
		if err := fv(ctx, m.GetTsigKeyName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tsig_key_value"]; exists {

		vOpts := append(opts, db.WithValidateField("tsig_key_value"))
		if err := fv(ctx, m.GetTsigKeyValue(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["zone_file"]; exists {

		vOpts := append(opts, db.WithValidateField("zone_file"))
		if err := fv(ctx, m.GetZoneFile(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSecondaryDNSConfigValidator = func() *ValidateSecondaryDNSConfig {
	v := &ValidateSecondaryDNSConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPrimaryServers := v.PrimaryServersValidationRuleHandler
	rulesPrimaryServers := map[string]string{
		"ves.io.schema.rules.message.required":           "true",
		"ves.io.schema.rules.repeated.items.string.ipv4": "true",
		"ves.io.schema.rules.repeated.max_items":         "10",
		"ves.io.schema.rules.repeated.min_items":         "1",
		"ves.io.schema.rules.repeated.unique":            "true",
	}
	vFn, err = vrhPrimaryServers(rulesPrimaryServers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SecondaryDNSConfig.primary_servers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["primary_servers"] = vFn

	vrhTsigKeyName := v.TsigKeyNameValidationRuleHandler
	rulesTsigKeyName := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
	}
	vFn, err = vrhTsigKeyName(rulesTsigKeyName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SecondaryDNSConfig.tsig_key_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tsig_key_name"] = vFn

	v.FldValidators["tsig_key_value"] = ves_io_schema.SecretTypeValidator().Validate

	return v
}()

func SecondaryDNSConfigValidator() db.Validator {
	return DefaultSecondaryDNSConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *SecondaryDNSCreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SecondaryDNSCreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *SecondaryDNSCreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetTsigKeyValue().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting SecondaryDNSCreateSpecType.tsig_key_value")
	}

	return nil
}

func (m *SecondaryDNSCreateSpecType) DeepCopy() *SecondaryDNSCreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SecondaryDNSCreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SecondaryDNSCreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SecondaryDNSCreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SecondaryDNSCreateSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateSecondaryDNSCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSecondaryDNSCreateSpecType) PrimaryServersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for primary_servers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for primary_servers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated primary_servers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items primary_servers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSecondaryDNSCreateSpecType) TsigKeyNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tsig_key_name")
	}

	return validatorFn, nil
}

func (v *ValidateSecondaryDNSCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SecondaryDNSCreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SecondaryDNSCreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["primary_servers"]; exists {
		vOpts := append(opts, db.WithValidateField("primary_servers"))
		if err := fv(ctx, m.GetPrimaryServers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tsig_key_algorithm"]; exists {

		vOpts := append(opts, db.WithValidateField("tsig_key_algorithm"))
		if err := fv(ctx, m.GetTsigKeyAlgorithm(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tsig_key_name"]; exists {

		vOpts := append(opts, db.WithValidateField("tsig_key_name"))
		if err := fv(ctx, m.GetTsigKeyName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tsig_key_value"]; exists {

		vOpts := append(opts, db.WithValidateField("tsig_key_value"))
		if err := fv(ctx, m.GetTsigKeyValue(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSecondaryDNSCreateSpecTypeValidator = func() *ValidateSecondaryDNSCreateSpecType {
	v := &ValidateSecondaryDNSCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPrimaryServers := v.PrimaryServersValidationRuleHandler
	rulesPrimaryServers := map[string]string{
		"ves.io.schema.rules.message.required":           "true",
		"ves.io.schema.rules.repeated.items.string.ipv4": "true",
		"ves.io.schema.rules.repeated.max_items":         "10",
		"ves.io.schema.rules.repeated.min_items":         "1",
		"ves.io.schema.rules.repeated.unique":            "true",
	}
	vFn, err = vrhPrimaryServers(rulesPrimaryServers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SecondaryDNSCreateSpecType.primary_servers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["primary_servers"] = vFn

	vrhTsigKeyName := v.TsigKeyNameValidationRuleHandler
	rulesTsigKeyName := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
	}
	vFn, err = vrhTsigKeyName(rulesTsigKeyName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SecondaryDNSCreateSpecType.tsig_key_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tsig_key_name"] = vFn

	v.FldValidators["tsig_key_value"] = ves_io_schema.SecretTypeValidator().Validate

	return v
}()

func SecondaryDNSCreateSpecTypeValidator() db.Validator {
	return DefaultSecondaryDNSCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SecondaryDNSGetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SecondaryDNSGetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *SecondaryDNSGetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetTsigKeyValue().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting SecondaryDNSGetSpecType.tsig_key_value")
	}

	return nil
}

func (m *SecondaryDNSGetSpecType) DeepCopy() *SecondaryDNSGetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SecondaryDNSGetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SecondaryDNSGetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SecondaryDNSGetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SecondaryDNSGetSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateSecondaryDNSGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSecondaryDNSGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SecondaryDNSGetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SecondaryDNSGetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["last_axfr_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("last_axfr_timestamp"))
		if err := fv(ctx, m.GetLastAxfrTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["primary_servers"]; exists {

		vOpts := append(opts, db.WithValidateField("primary_servers"))
		for idx, item := range m.GetPrimaryServers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tsig_key_algorithm"]; exists {

		vOpts := append(opts, db.WithValidateField("tsig_key_algorithm"))
		if err := fv(ctx, m.GetTsigKeyAlgorithm(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tsig_key_name"]; exists {

		vOpts := append(opts, db.WithValidateField("tsig_key_name"))
		if err := fv(ctx, m.GetTsigKeyName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tsig_key_value"]; exists {

		vOpts := append(opts, db.WithValidateField("tsig_key_value"))
		if err := fv(ctx, m.GetTsigKeyValue(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["zone_file"]; exists {

		vOpts := append(opts, db.WithValidateField("zone_file"))
		if err := fv(ctx, m.GetZoneFile(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSecondaryDNSGetSpecTypeValidator = func() *ValidateSecondaryDNSGetSpecType {
	v := &ValidateSecondaryDNSGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["tsig_key_value"] = ves_io_schema.SecretTypeValidator().Validate

	return v
}()

func SecondaryDNSGetSpecTypeValidator() db.Validator {
	return DefaultSecondaryDNSGetSpecTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetDnsTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.DnsType.(type) {
	case nil:
		o.DnsType = nil

	case *CreateSpecType_Primary:

		f1 := o.GetPrimary()
		if f1 == nil {
			f1 = &PrimaryDNSConfig{}
		}
		of.Primary.ToPrimaryDNSConfigWithoutDeepCopy(f1)
		o.DnsType = &GlobalSpecType_Primary{Primary: f1}

	case *CreateSpecType_Secondary:

		f1 := o.GetSecondary()
		if f1 == nil {
			f1 = &SecondaryDNSConfig{}
		}
		of.Secondary.ToSecondaryDNSConfigWithoutDeepCopy(f1)
		o.DnsType = &GlobalSpecType_Secondary{Secondary: f1}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetDnsTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.DnsType.(type) {
	case nil:
		r.DnsType = nil

	case *GlobalSpecType_Primary:

		f1 := &PrimaryDNSCreateSpecType{}
		f1.FromPrimaryDNSConfigWithoutDeepCopy(of.Primary)
		r.DnsType = &CreateSpecType_Primary{Primary: f1}

	case *GlobalSpecType_Secondary:

		f1 := &SecondaryDNSCreateSpecType{}
		f1.FromSecondaryDNSConfigWithoutDeepCopy(of.Secondary)
		r.DnsType = &CreateSpecType_Secondary{Secondary: f1}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetDnsTypeFromGlobalSpecType(f)
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetDnsTypeToGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetDnsTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.DnsType.(type) {
	case nil:
		o.DnsType = nil

	case *GetSpecType_Primary:

		f1 := o.GetPrimary()
		if f1 == nil {
			f1 = &PrimaryDNSConfig{}
		}
		of.Primary.ToPrimaryDNSConfigWithoutDeepCopy(f1)
		o.DnsType = &GlobalSpecType_Primary{Primary: f1}

	case *GetSpecType_Secondary:

		f1 := o.GetSecondary()
		if f1 == nil {
			f1 = &SecondaryDNSConfig{}
		}
		of.Secondary.ToSecondaryDNSConfigWithoutDeepCopy(f1)
		o.DnsType = &GlobalSpecType_Secondary{Secondary: f1}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetDnsTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.DnsType.(type) {
	case nil:
		r.DnsType = nil

	case *GlobalSpecType_Primary:

		f1 := &PrimaryDNSGetSpecType{}
		f1.FromPrimaryDNSConfigWithoutDeepCopy(of.Primary)
		r.DnsType = &GetSpecType_Primary{Primary: f1}

	case *GlobalSpecType_Secondary:

		f1 := &SecondaryDNSGetSpecType{}
		f1.FromSecondaryDNSConfigWithoutDeepCopy(of.Secondary)
		r.DnsType = &GetSpecType_Secondary{Secondary: f1}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetDnsTypeFromGlobalSpecType(f)

}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetDnsTypeToGlobalSpecType(f)

}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in PrimaryDNSCreateSpecType from PrimaryDNSConfig for oneof fields
func (r *PrimaryDNSCreateSpecType) SetSoaRecordParametersChoiceToPrimaryDNSConfig(o *PrimaryDNSConfig) error {
	switch of := r.SoaRecordParametersChoice.(type) {
	case nil:
		o.SoaRecordParametersChoice = nil

	case *PrimaryDNSCreateSpecType_DefaultSoaParameters:
		o.SoaRecordParametersChoice = &PrimaryDNSConfig_DefaultSoaParameters{DefaultSoaParameters: of.DefaultSoaParameters}

	case *PrimaryDNSCreateSpecType_SoaParameters:
		o.SoaRecordParametersChoice = &PrimaryDNSConfig_SoaParameters{SoaParameters: of.SoaParameters}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *PrimaryDNSCreateSpecType) GetSoaRecordParametersChoiceFromPrimaryDNSConfig(o *PrimaryDNSConfig) error {
	switch of := o.SoaRecordParametersChoice.(type) {
	case nil:
		r.SoaRecordParametersChoice = nil

	case *PrimaryDNSConfig_DefaultSoaParameters:
		r.SoaRecordParametersChoice = &PrimaryDNSCreateSpecType_DefaultSoaParameters{DefaultSoaParameters: of.DefaultSoaParameters}

	case *PrimaryDNSConfig_SoaParameters:
		r.SoaRecordParametersChoice = &PrimaryDNSCreateSpecType_SoaParameters{SoaParameters: of.SoaParameters}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *PrimaryDNSCreateSpecType) fromPrimaryDNSConfig(f *PrimaryDNSConfig, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.DefaultRrSetGroup = f.GetDefaultRrSetGroup()
	m.DnssecMode = f.GetDnssecMode()
	m.RrSetGroup = f.GetRrSetGroup()
	m.GetSoaRecordParametersChoiceFromPrimaryDNSConfig(f)
}

func (m *PrimaryDNSCreateSpecType) FromPrimaryDNSConfig(f *PrimaryDNSConfig) {
	m.fromPrimaryDNSConfig(f, true)
}

func (m *PrimaryDNSCreateSpecType) FromPrimaryDNSConfigWithoutDeepCopy(f *PrimaryDNSConfig) {
	m.fromPrimaryDNSConfig(f, false)
}

func (m *PrimaryDNSCreateSpecType) toPrimaryDNSConfig(f *PrimaryDNSConfig, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.DefaultRrSetGroup = m1.DefaultRrSetGroup
	f.DnssecMode = m1.DnssecMode
	f.RrSetGroup = m1.RrSetGroup
	m1.SetSoaRecordParametersChoiceToPrimaryDNSConfig(f)
}

func (m *PrimaryDNSCreateSpecType) ToPrimaryDNSConfig(f *PrimaryDNSConfig) {
	m.toPrimaryDNSConfig(f, true)
}

func (m *PrimaryDNSCreateSpecType) ToPrimaryDNSConfigWithoutDeepCopy(f *PrimaryDNSConfig) {
	m.toPrimaryDNSConfig(f, false)
}

// create setters in PrimaryDNSGetSpecType from PrimaryDNSConfig for oneof fields
func (r *PrimaryDNSGetSpecType) SetSoaRecordParametersChoiceToPrimaryDNSConfig(o *PrimaryDNSConfig) error {
	switch of := r.SoaRecordParametersChoice.(type) {
	case nil:
		o.SoaRecordParametersChoice = nil

	case *PrimaryDNSGetSpecType_DefaultSoaParameters:
		o.SoaRecordParametersChoice = &PrimaryDNSConfig_DefaultSoaParameters{DefaultSoaParameters: of.DefaultSoaParameters}

	case *PrimaryDNSGetSpecType_SoaParameters:
		o.SoaRecordParametersChoice = &PrimaryDNSConfig_SoaParameters{SoaParameters: of.SoaParameters}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *PrimaryDNSGetSpecType) GetSoaRecordParametersChoiceFromPrimaryDNSConfig(o *PrimaryDNSConfig) error {
	switch of := o.SoaRecordParametersChoice.(type) {
	case nil:
		r.SoaRecordParametersChoice = nil

	case *PrimaryDNSConfig_DefaultSoaParameters:
		r.SoaRecordParametersChoice = &PrimaryDNSGetSpecType_DefaultSoaParameters{DefaultSoaParameters: of.DefaultSoaParameters}

	case *PrimaryDNSConfig_SoaParameters:
		r.SoaRecordParametersChoice = &PrimaryDNSGetSpecType_SoaParameters{SoaParameters: of.SoaParameters}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *PrimaryDNSGetSpecType) fromPrimaryDNSConfig(f *PrimaryDNSConfig, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Admin = f.GetAdmin()
	m.DefaultRrSetGroup = f.GetDefaultRrSetGroup()
	m.DnssecMode = f.GetDnssecMode()
	m.RrSetGroup = f.GetRrSetGroup()
	m.Serial = f.GetSerial()
	m.GetSoaRecordParametersChoiceFromPrimaryDNSConfig(f)
}

func (m *PrimaryDNSGetSpecType) FromPrimaryDNSConfig(f *PrimaryDNSConfig) {
	m.fromPrimaryDNSConfig(f, true)
}

func (m *PrimaryDNSGetSpecType) FromPrimaryDNSConfigWithoutDeepCopy(f *PrimaryDNSConfig) {
	m.fromPrimaryDNSConfig(f, false)
}

func (m *PrimaryDNSGetSpecType) toPrimaryDNSConfig(f *PrimaryDNSConfig, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Admin = m1.Admin
	f.DefaultRrSetGroup = m1.DefaultRrSetGroup
	f.DnssecMode = m1.DnssecMode
	f.RrSetGroup = m1.RrSetGroup
	f.Serial = m1.Serial
	m1.SetSoaRecordParametersChoiceToPrimaryDNSConfig(f)
}

func (m *PrimaryDNSGetSpecType) ToPrimaryDNSConfig(f *PrimaryDNSConfig) {
	m.toPrimaryDNSConfig(f, true)
}

func (m *PrimaryDNSGetSpecType) ToPrimaryDNSConfigWithoutDeepCopy(f *PrimaryDNSConfig) {
	m.toPrimaryDNSConfig(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetDnsTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.DnsType.(type) {
	case nil:
		o.DnsType = nil

	case *ReplaceSpecType_Primary:

		f1 := o.GetPrimary()
		if f1 == nil {
			f1 = &PrimaryDNSConfig{}
		}
		of.Primary.ToPrimaryDNSConfigWithoutDeepCopy(f1)
		o.DnsType = &GlobalSpecType_Primary{Primary: f1}

	case *ReplaceSpecType_Secondary:

		f1 := o.GetSecondary()
		if f1 == nil {
			f1 = &SecondaryDNSConfig{}
		}
		of.Secondary.ToSecondaryDNSConfigWithoutDeepCopy(f1)
		o.DnsType = &GlobalSpecType_Secondary{Secondary: f1}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetDnsTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.DnsType.(type) {
	case nil:
		r.DnsType = nil

	case *GlobalSpecType_Primary:

		f1 := &PrimaryDNSCreateSpecType{}
		f1.FromPrimaryDNSConfigWithoutDeepCopy(of.Primary)
		r.DnsType = &ReplaceSpecType_Primary{Primary: f1}

	case *GlobalSpecType_Secondary:

		f1 := &SecondaryDNSCreateSpecType{}
		f1.FromSecondaryDNSConfigWithoutDeepCopy(of.Secondary)
		r.DnsType = &ReplaceSpecType_Secondary{Secondary: f1}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetDnsTypeFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetDnsTypeToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *SecondaryDNSCreateSpecType) fromSecondaryDNSConfig(f *SecondaryDNSConfig, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.PrimaryServers = f.GetPrimaryServers()
	m.TsigKeyAlgorithm = f.GetTsigKeyAlgorithm()
	m.TsigKeyName = f.GetTsigKeyName()
	m.TsigKeyValue = f.GetTsigKeyValue()
}

func (m *SecondaryDNSCreateSpecType) FromSecondaryDNSConfig(f *SecondaryDNSConfig) {
	m.fromSecondaryDNSConfig(f, true)
}

func (m *SecondaryDNSCreateSpecType) FromSecondaryDNSConfigWithoutDeepCopy(f *SecondaryDNSConfig) {
	m.fromSecondaryDNSConfig(f, false)
}

func (m *SecondaryDNSCreateSpecType) toSecondaryDNSConfig(f *SecondaryDNSConfig, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.PrimaryServers = m1.PrimaryServers
	f.TsigKeyAlgorithm = m1.TsigKeyAlgorithm
	f.TsigKeyName = m1.TsigKeyName
	f.TsigKeyValue = m1.TsigKeyValue
}

func (m *SecondaryDNSCreateSpecType) ToSecondaryDNSConfig(f *SecondaryDNSConfig) {
	m.toSecondaryDNSConfig(f, true)
}

func (m *SecondaryDNSCreateSpecType) ToSecondaryDNSConfigWithoutDeepCopy(f *SecondaryDNSConfig) {
	m.toSecondaryDNSConfig(f, false)
}

func (m *SecondaryDNSGetSpecType) fromSecondaryDNSConfig(f *SecondaryDNSConfig, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.LastAxfrTimestamp = f.GetLastAxfrTimestamp()
	m.PrimaryServers = f.GetPrimaryServers()
	m.TsigKeyAlgorithm = f.GetTsigKeyAlgorithm()
	m.TsigKeyName = f.GetTsigKeyName()
	m.TsigKeyValue = f.GetTsigKeyValue()
	m.ZoneFile = f.GetZoneFile()
}

func (m *SecondaryDNSGetSpecType) FromSecondaryDNSConfig(f *SecondaryDNSConfig) {
	m.fromSecondaryDNSConfig(f, true)
}

func (m *SecondaryDNSGetSpecType) FromSecondaryDNSConfigWithoutDeepCopy(f *SecondaryDNSConfig) {
	m.fromSecondaryDNSConfig(f, false)
}

func (m *SecondaryDNSGetSpecType) toSecondaryDNSConfig(f *SecondaryDNSConfig, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.LastAxfrTimestamp = m1.LastAxfrTimestamp
	f.PrimaryServers = m1.PrimaryServers
	f.TsigKeyAlgorithm = m1.TsigKeyAlgorithm
	f.TsigKeyName = m1.TsigKeyName
	f.TsigKeyValue = m1.TsigKeyValue
	f.ZoneFile = m1.ZoneFile
}

func (m *SecondaryDNSGetSpecType) ToSecondaryDNSConfig(f *SecondaryDNSConfig) {
	m.toSecondaryDNSConfig(f, true)
}

func (m *SecondaryDNSGetSpecType) ToSecondaryDNSConfigWithoutDeepCopy(f *SecondaryDNSConfig) {
	m.toSecondaryDNSConfig(f, false)
}
