// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/dns_zone/types.proto

package dns_zone

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DS Key Algorithm
//
// x-displayName: "DS Key algorithm"
// DS key value must be compatible with the specified algorithm.
type DSKeyAlgorithm int32

const (
	// UNSPECIFIED
	//
	// x-displayName: "UNSPECIFIED"
	UNSPECIFIED DSKeyAlgorithm = 0
	// RSASHA1
	//
	// x-displayName: "RSA/SHA-1"
	RSASHA1 DSKeyAlgorithm = 5
	// RSASHA1-NSEC3-SHA1
	//
	// x-displayName: "RSASHA1-NSEC3-SHA1"
	RSASHA1NSEC3SHA1 DSKeyAlgorithm = 7
	// RSASHA256
	//
	// x-displayName: "RSA/SHA-256"
	RSASHA256 DSKeyAlgorithm = 8
	// RSASHA512
	//
	// x-displayName: "RSA/SHA-512"
	RSASHA512 DSKeyAlgorithm = 10
	// ECDSAP256SHA256
	//
	// x-displayName: "ECDSA Curve P-256 with SHA-256"
	ECDSAP256SHA256 DSKeyAlgorithm = 13
	// ECDSAP384SHA384
	//
	// x-displayName: "ECDSA Curve P-384 with SHA-384"
	ECDSAP384SHA384 DSKeyAlgorithm = 14
	// ED25519
	//
	// x-displayName: "Ed25519"
	ED25519 DSKeyAlgorithm = 15
	// ED448
	//
	// x-displayName: "Ed448"
	ED448 DSKeyAlgorithm = 16
)

var DSKeyAlgorithm_name = map[int32]string{
	0:  "UNSPECIFIED",
	5:  "RSASHA1",
	7:  "RSASHA1NSEC3SHA1",
	8:  "RSASHA256",
	10: "RSASHA512",
	13: "ECDSAP256SHA256",
	14: "ECDSAP384SHA384",
	15: "ED25519",
	16: "ED448",
}

var DSKeyAlgorithm_value = map[string]int32{
	"UNSPECIFIED":      0,
	"RSASHA1":          5,
	"RSASHA1NSEC3SHA1": 7,
	"RSASHA256":        8,
	"RSASHA512":        10,
	"ECDSAP256SHA256":  13,
	"ECDSAP384SHA384":  14,
	"ED25519":          15,
	"ED448":            16,
}

func (DSKeyAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{0}
}

// AFSDB Record Subtype
//
// x-displayName: "AFSDB Record Subtype"
// AFS Volume Location Server or DCE Authentication Server.
type AFSDBRecordSubtype int32

const (
	// NONE
	//
	// x-displayName: "NONE"
	NONE AFSDBRecordSubtype = 0
	// AFS Volume Location Server
	//
	// x-displayName: "AFS Volume Location Server"
	AFSVolumeLocationServer AFSDBRecordSubtype = 1
	// DCE Authentication Server
	//
	// x-displayName: "DCE Authentication Server"
	DCEAuthenticationServer AFSDBRecordSubtype = 2
)

var AFSDBRecordSubtype_name = map[int32]string{
	0: "NONE",
	1: "AFSVolumeLocationServer",
	2: "DCEAuthenticationServer",
}

var AFSDBRecordSubtype_value = map[string]int32{
	"NONE":                    0,
	"AFSVolumeLocationServer": 1,
	"DCEAuthenticationServer": 2,
}

func (AFSDBRecordSubtype) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{1}
}

// Latitude Hemisphere
//
// x-displayName: "Latitude hemisphere"
// Latitude hemisphere can only be N or S
type LatitudeHemisphere int32

const (
	// North Hemisphere
	//
	// x-displayName: "N"
	N LatitudeHemisphere = 0
	// South Hemisphere
	//
	// x-displayName: "S"
	S LatitudeHemisphere = 1
)

var LatitudeHemisphere_name = map[int32]string{
	0: "N",
	1: "S",
}

var LatitudeHemisphere_value = map[string]int32{
	"N": 0,
	"S": 1,
}

func (LatitudeHemisphere) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{2}
}

// Longitude Hemisphere
//
// x-displayName: "Longitude hemisphere"
// Longitude hemisphere can only be E or W
type LongitudeHemisphere int32

const (
	// East Hemisphere
	//
	// x-displayName: "E"
	E LongitudeHemisphere = 0
	// West Hemisphere
	//
	// x-displayName: "W"
	W LongitudeHemisphere = 1
)

var LongitudeHemisphere_name = map[int32]string{
	0: "E",
	1: "W",
}

var LongitudeHemisphere_value = map[string]int32{
	"E": 0,
	"W": 1,
}

func (LongitudeHemisphere) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{3}
}

// TSIG Key Algorithm
//
// x-displayName: "TSIG Key algorithm"
// TSIG key value must be compatible with the specified algorithm
type TSIGKeyAlgorithm int32

const (
	// HMAC_MD5
	//
	// x-displayName: "hmac-md5"
	HMAC_MD5 TSIGKeyAlgorithm = 0
	// HMAC_SHA1
	//
	// x-displayName: "hmac-sha1"
	HMAC_SHA1 TSIGKeyAlgorithm = 1
	// HMAC_SHA224
	//
	// x-displayName: "hmac-sha224"
	HMAC_SHA224 TSIGKeyAlgorithm = 2
	// HMAC_SHA256
	//
	// x-displayName: "hmac-sha256"
	HMAC_SHA256 TSIGKeyAlgorithm = 3
	// HMAC_SHA384
	//
	// x-displayName: "hmac-sha384"
	HMAC_SHA384 TSIGKeyAlgorithm = 4
	// HMAC_SHA512
	//
	// x-displayName: "hmac-sha512"
	HMAC_SHA512 TSIGKeyAlgorithm = 5
)

var TSIGKeyAlgorithm_name = map[int32]string{
	0: "HMAC_MD5",
	1: "HMAC_SHA1",
	2: "HMAC_SHA224",
	3: "HMAC_SHA256",
	4: "HMAC_SHA384",
	5: "HMAC_SHA512",
}

var TSIGKeyAlgorithm_value = map[string]int32{
	"HMAC_MD5":    0,
	"HMAC_SHA1":   1,
	"HMAC_SHA224": 2,
	"HMAC_SHA256": 3,
	"HMAC_SHA384": 4,
	"HMAC_SHA512": 5,
}

func (TSIGKeyAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{4}
}

// Primary DNS Configuration
//
// x-displayName: "Primary DNS Configuration"
// Declares a DNS zone with primary DNS features
type PrimaryDNSConfig struct {
	// SOA Record Parameters
	//
	// x-displayName: "SOA Record Parameters"
	// x-required
	// Start Of Authority (SOA) Record Properties
	//
	// Types that are valid to be assigned to SoaRecordParametersChoice:
	//	*PrimaryDNSConfig_DefaultSoaParameters
	//	*PrimaryDNSConfig_SoaParameters
	SoaRecordParametersChoice isPrimaryDNSConfig_SoaRecordParametersChoice `protobuf_oneof:"soa_record_parameters_choice"`
	// Record Sets Group
	//
	// x-displayName: "Additional Resource Record Sets"
	// Collection of additional DNS resource record sets
	RrSetGroup []*RRSetGroup `protobuf:"bytes,8,rep,name=rr_set_group,json=rrSetGroup,proto3" json:"rr_set_group,omitempty"`
	// Serial number
	//
	// x-displayName: "Serial number"
	// Secondary nameservers should initiate a zone transfer when this number is incremented
	Serial uint32 `protobuf:"varint,9,opt,name=serial,proto3" json:"serial,omitempty"`
	// Administrator
	//
	// x-displayName: "Administrator"
	Admin string `protobuf:"bytes,10,opt,name=admin,proto3" json:"admin,omitempty"`
	// Default DNS Record Sets
	//
	// x-displayName: "Resource Record Sets"
	// Collection of DNS record sets in the default group.
	DefaultRrSetGroup []*RRSet `protobuf:"bytes,11,rep,name=default_rr_set_group,json=defaultRrSetGroup,proto3" json:"default_rr_set_group,omitempty"`
	// DNSSEC Mode
	//
	// x-displayName: "DNSSEC Mode"
	DnssecMode *DNSSECMode `protobuf:"bytes,12,opt,name=dnssec_mode,json=dnssecMode,proto3" json:"dnssec_mode,omitempty"`
	// Allow HTTP Load Balancer Managed Records
	//
	// x-displayName: "Allow HTTP Load Balancer Managed Records"
	AllowHttpLbManagedRecords bool `protobuf:"varint,13,opt,name=allow_http_lb_managed_records,json=allowHttpLbManagedRecords,proto3" json:"allow_http_lb_managed_records,omitempty"`
}

func (m *PrimaryDNSConfig) Reset()      { *m = PrimaryDNSConfig{} }
func (*PrimaryDNSConfig) ProtoMessage() {}
func (*PrimaryDNSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{0}
}
func (m *PrimaryDNSConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimaryDNSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PrimaryDNSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimaryDNSConfig.Merge(m, src)
}
func (m *PrimaryDNSConfig) XXX_Size() int {
	return m.Size()
}
func (m *PrimaryDNSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimaryDNSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PrimaryDNSConfig proto.InternalMessageInfo

type isPrimaryDNSConfig_SoaRecordParametersChoice interface {
	isPrimaryDNSConfig_SoaRecordParametersChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PrimaryDNSConfig_DefaultSoaParameters struct {
	DefaultSoaParameters *schema.Empty `protobuf:"bytes,6,opt,name=default_soa_parameters,json=defaultSoaParameters,proto3,oneof" json:"default_soa_parameters,omitempty"`
}
type PrimaryDNSConfig_SoaParameters struct {
	SoaParameters *SOARecordParameterConfig `protobuf:"bytes,7,opt,name=soa_parameters,json=soaParameters,proto3,oneof" json:"soa_parameters,omitempty"`
}

func (*PrimaryDNSConfig_DefaultSoaParameters) isPrimaryDNSConfig_SoaRecordParametersChoice() {}
func (*PrimaryDNSConfig_SoaParameters) isPrimaryDNSConfig_SoaRecordParametersChoice()        {}

func (m *PrimaryDNSConfig) GetSoaRecordParametersChoice() isPrimaryDNSConfig_SoaRecordParametersChoice {
	if m != nil {
		return m.SoaRecordParametersChoice
	}
	return nil
}

func (m *PrimaryDNSConfig) GetDefaultSoaParameters() *schema.Empty {
	if x, ok := m.GetSoaRecordParametersChoice().(*PrimaryDNSConfig_DefaultSoaParameters); ok {
		return x.DefaultSoaParameters
	}
	return nil
}

func (m *PrimaryDNSConfig) GetSoaParameters() *SOARecordParameterConfig {
	if x, ok := m.GetSoaRecordParametersChoice().(*PrimaryDNSConfig_SoaParameters); ok {
		return x.SoaParameters
	}
	return nil
}

func (m *PrimaryDNSConfig) GetRrSetGroup() []*RRSetGroup {
	if m != nil {
		return m.RrSetGroup
	}
	return nil
}

func (m *PrimaryDNSConfig) GetSerial() uint32 {
	if m != nil {
		return m.Serial
	}
	return 0
}

func (m *PrimaryDNSConfig) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *PrimaryDNSConfig) GetDefaultRrSetGroup() []*RRSet {
	if m != nil {
		return m.DefaultRrSetGroup
	}
	return nil
}

func (m *PrimaryDNSConfig) GetDnssecMode() *DNSSECMode {
	if m != nil {
		return m.DnssecMode
	}
	return nil
}

func (m *PrimaryDNSConfig) GetAllowHttpLbManagedRecords() bool {
	if m != nil {
		return m.AllowHttpLbManagedRecords
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PrimaryDNSConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PrimaryDNSConfig_DefaultSoaParameters)(nil),
		(*PrimaryDNSConfig_SoaParameters)(nil),
	}
}

// SOARecordParameterConfig
//
// x-displayName: "SOARecordParameterConfig"
type SOARecordParameterConfig struct {
	// Refresh (in seconds)
	//
	// x-displayName: "Refresh interval"
	// x-example: "86400"
	// refresh value indicates when secondary nameservers should query for the SOA record to detect zone changes
	Refresh uint32 `protobuf:"varint,1,opt,name=refresh,proto3" json:"refresh,omitempty"`
	// Retry (in seconds)
	//
	// x-displayName: "Retry interval"
	// x-example: "7200"
	// retry value indicates when secondary nameservers should retry to request the serial number if primary does not respond
	Retry uint32 `protobuf:"varint,2,opt,name=retry,proto3" json:"retry,omitempty"`
	// Expire (in seconds)
	//
	// x-displayName: "Expire"
	// x-example: "360000"
	// expire value indicates when secondary nameservers should stop answering request for this zone if primary does not respond
	Expire uint32 `protobuf:"varint,3,opt,name=expire,proto3" json:"expire,omitempty"`
	// Negative TTL (in seconds)
	//
	// x-displayName: "Negative TTL"
	// x-example: "1800"
	// negative ttl value indicates how long to cache non-existent resource record for this zone
	NegativeTtl uint32 `protobuf:"varint,4,opt,name=negative_ttl,json=negativeTtl,proto3" json:"negative_ttl,omitempty"`
	// TTL
	//
	// x-displayName: "TTL"
	// x-example: "86400"
	// SOA record time to live (in seconds)
	Ttl uint32 `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (m *SOARecordParameterConfig) Reset()      { *m = SOARecordParameterConfig{} }
func (*SOARecordParameterConfig) ProtoMessage() {}
func (*SOARecordParameterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{1}
}
func (m *SOARecordParameterConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SOARecordParameterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SOARecordParameterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SOARecordParameterConfig.Merge(m, src)
}
func (m *SOARecordParameterConfig) XXX_Size() int {
	return m.Size()
}
func (m *SOARecordParameterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SOARecordParameterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SOARecordParameterConfig proto.InternalMessageInfo

func (m *SOARecordParameterConfig) GetRefresh() uint32 {
	if m != nil {
		return m.Refresh
	}
	return 0
}

func (m *SOARecordParameterConfig) GetRetry() uint32 {
	if m != nil {
		return m.Retry
	}
	return 0
}

func (m *SOARecordParameterConfig) GetExpire() uint32 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *SOARecordParameterConfig) GetNegativeTtl() uint32 {
	if m != nil {
		return m.NegativeTtl
	}
	return 0
}

func (m *SOARecordParameterConfig) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

// Logical Group of Resource Record Sets
//
// x-displayName: "Group of Resource Record Sets"
type RRSetGroup struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Record Sets
	//
	// x-displayName: "Resource Record Sets"
	// Collection of DNS resource record sets
	RrSet []*RRSet `protobuf:"bytes,2,rep,name=rr_set,json=rrSet,proto3" json:"rr_set,omitempty"`
}

func (m *RRSetGroup) Reset()      { *m = RRSetGroup{} }
func (*RRSetGroup) ProtoMessage() {}
func (*RRSetGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{2}
}
func (m *RRSetGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RRSetGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RRSetGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RRSetGroup.Merge(m, src)
}
func (m *RRSetGroup) XXX_Size() int {
	return m.Size()
}
func (m *RRSetGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_RRSetGroup.DiscardUnknown(m)
}

var xxx_messageInfo_RRSetGroup proto.InternalMessageInfo

func (m *RRSetGroup) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *RRSetGroup) GetRrSet() []*RRSet {
	if m != nil {
		return m.RrSet
	}
	return nil
}

// RRSet is a set of Resource Record Sets for specific type
//
// x-displayName: "Resource Record Set"
type RRSet struct {
	// TTL
	//
	// x-displayName: "Time to live"
	// x-example: "3600"
	Ttl uint32 `protobuf:"varint,1,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// Record Set
	//
	// x-displayName: "Record Set"
	// x-required
	//
	// Types that are valid to be assigned to TypeRecordSet:
	//	*RRSet_ARecord
	//	*RRSet_AaaaRecord
	//	*RRSet_AliasRecord
	//	*RRSet_CaaRecord
	//	*RRSet_CnameRecord
	//	*RRSet_MxRecord
	//	*RRSet_NsRecord
	//	*RRSet_PtrRecord
	//	*RRSet_SrvRecord
	//	*RRSet_TxtRecord
	//	*RRSet_LbRecord
	//	*RRSet_NaptrRecord
	//	*RRSet_DsRecord
	//	*RRSet_CdsRecord
	//	*RRSet_AfsdbRecord
	//	*RRSet_Eui48Record
	//	*RRSet_Eui64Record
	//	*RRSet_LocRecord
	TypeRecordSet isRRSet_TypeRecordSet `protobuf_oneof:"type_record_set"`
}

func (m *RRSet) Reset()      { *m = RRSet{} }
func (*RRSet) ProtoMessage() {}
func (*RRSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{3}
}
func (m *RRSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RRSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RRSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RRSet.Merge(m, src)
}
func (m *RRSet) XXX_Size() int {
	return m.Size()
}
func (m *RRSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RRSet.DiscardUnknown(m)
}

var xxx_messageInfo_RRSet proto.InternalMessageInfo

type isRRSet_TypeRecordSet interface {
	isRRSet_TypeRecordSet()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RRSet_ARecord struct {
	ARecord *DNSAResourceRecord `protobuf:"bytes,13,opt,name=a_record,json=aRecord,proto3,oneof" json:"a_record,omitempty"`
}
type RRSet_AaaaRecord struct {
	AaaaRecord *DNSAAAAResourceRecord `protobuf:"bytes,14,opt,name=aaaa_record,json=aaaaRecord,proto3,oneof" json:"aaaa_record,omitempty"`
}
type RRSet_AliasRecord struct {
	AliasRecord *DNSAliasResourceRecord `protobuf:"bytes,15,opt,name=alias_record,json=aliasRecord,proto3,oneof" json:"alias_record,omitempty"`
}
type RRSet_CaaRecord struct {
	CaaRecord *DNSCAAResourceRecord `protobuf:"bytes,16,opt,name=caa_record,json=caaRecord,proto3,oneof" json:"caa_record,omitempty"`
}
type RRSet_CnameRecord struct {
	CnameRecord *DNSCNAMEResourceRecord `protobuf:"bytes,17,opt,name=cname_record,json=cnameRecord,proto3,oneof" json:"cname_record,omitempty"`
}
type RRSet_MxRecord struct {
	MxRecord *DNSMXResourceRecord `protobuf:"bytes,18,opt,name=mx_record,json=mxRecord,proto3,oneof" json:"mx_record,omitempty"`
}
type RRSet_NsRecord struct {
	NsRecord *DNSNSResourceRecord `protobuf:"bytes,19,opt,name=ns_record,json=nsRecord,proto3,oneof" json:"ns_record,omitempty"`
}
type RRSet_PtrRecord struct {
	PtrRecord *DNSPTRResourceRecord `protobuf:"bytes,20,opt,name=ptr_record,json=ptrRecord,proto3,oneof" json:"ptr_record,omitempty"`
}
type RRSet_SrvRecord struct {
	SrvRecord *DNSSRVResourceRecord `protobuf:"bytes,21,opt,name=srv_record,json=srvRecord,proto3,oneof" json:"srv_record,omitempty"`
}
type RRSet_TxtRecord struct {
	TxtRecord *DNSTXTResourceRecord `protobuf:"bytes,22,opt,name=txt_record,json=txtRecord,proto3,oneof" json:"txt_record,omitempty"`
}
type RRSet_LbRecord struct {
	LbRecord *DNSLBResourceRecord `protobuf:"bytes,23,opt,name=lb_record,json=lbRecord,proto3,oneof" json:"lb_record,omitempty"`
}
type RRSet_NaptrRecord struct {
	NaptrRecord *DNSNAPTRResourceRecord `protobuf:"bytes,24,opt,name=naptr_record,json=naptrRecord,proto3,oneof" json:"naptr_record,omitempty"`
}
type RRSet_DsRecord struct {
	DsRecord *DNSDSRecord `protobuf:"bytes,25,opt,name=ds_record,json=dsRecord,proto3,oneof" json:"ds_record,omitempty"`
}
type RRSet_CdsRecord struct {
	CdsRecord *DNSCDSRecord `protobuf:"bytes,26,opt,name=cds_record,json=cdsRecord,proto3,oneof" json:"cds_record,omitempty"`
}
type RRSet_AfsdbRecord struct {
	AfsdbRecord *DNSAFSDBRecord `protobuf:"bytes,27,opt,name=afsdb_record,json=afsdbRecord,proto3,oneof" json:"afsdb_record,omitempty"`
}
type RRSet_Eui48Record struct {
	Eui48Record *DNSEUI48ResourceRecord `protobuf:"bytes,28,opt,name=eui48_record,json=eui48Record,proto3,oneof" json:"eui48_record,omitempty"`
}
type RRSet_Eui64Record struct {
	Eui64Record *DNSEUI64ResourceRecord `protobuf:"bytes,29,opt,name=eui64_record,json=eui64Record,proto3,oneof" json:"eui64_record,omitempty"`
}
type RRSet_LocRecord struct {
	LocRecord *DNSLOCResourceRecord `protobuf:"bytes,30,opt,name=loc_record,json=locRecord,proto3,oneof" json:"loc_record,omitempty"`
}

func (*RRSet_ARecord) isRRSet_TypeRecordSet()     {}
func (*RRSet_AaaaRecord) isRRSet_TypeRecordSet()  {}
func (*RRSet_AliasRecord) isRRSet_TypeRecordSet() {}
func (*RRSet_CaaRecord) isRRSet_TypeRecordSet()   {}
func (*RRSet_CnameRecord) isRRSet_TypeRecordSet() {}
func (*RRSet_MxRecord) isRRSet_TypeRecordSet()    {}
func (*RRSet_NsRecord) isRRSet_TypeRecordSet()    {}
func (*RRSet_PtrRecord) isRRSet_TypeRecordSet()   {}
func (*RRSet_SrvRecord) isRRSet_TypeRecordSet()   {}
func (*RRSet_TxtRecord) isRRSet_TypeRecordSet()   {}
func (*RRSet_LbRecord) isRRSet_TypeRecordSet()    {}
func (*RRSet_NaptrRecord) isRRSet_TypeRecordSet() {}
func (*RRSet_DsRecord) isRRSet_TypeRecordSet()    {}
func (*RRSet_CdsRecord) isRRSet_TypeRecordSet()   {}
func (*RRSet_AfsdbRecord) isRRSet_TypeRecordSet() {}
func (*RRSet_Eui48Record) isRRSet_TypeRecordSet() {}
func (*RRSet_Eui64Record) isRRSet_TypeRecordSet() {}
func (*RRSet_LocRecord) isRRSet_TypeRecordSet()   {}

func (m *RRSet) GetTypeRecordSet() isRRSet_TypeRecordSet {
	if m != nil {
		return m.TypeRecordSet
	}
	return nil
}

func (m *RRSet) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *RRSet) GetARecord() *DNSAResourceRecord {
	if x, ok := m.GetTypeRecordSet().(*RRSet_ARecord); ok {
		return x.ARecord
	}
	return nil
}

func (m *RRSet) GetAaaaRecord() *DNSAAAAResourceRecord {
	if x, ok := m.GetTypeRecordSet().(*RRSet_AaaaRecord); ok {
		return x.AaaaRecord
	}
	return nil
}

func (m *RRSet) GetAliasRecord() *DNSAliasResourceRecord {
	if x, ok := m.GetTypeRecordSet().(*RRSet_AliasRecord); ok {
		return x.AliasRecord
	}
	return nil
}

func (m *RRSet) GetCaaRecord() *DNSCAAResourceRecord {
	if x, ok := m.GetTypeRecordSet().(*RRSet_CaaRecord); ok {
		return x.CaaRecord
	}
	return nil
}

func (m *RRSet) GetCnameRecord() *DNSCNAMEResourceRecord {
	if x, ok := m.GetTypeRecordSet().(*RRSet_CnameRecord); ok {
		return x.CnameRecord
	}
	return nil
}

func (m *RRSet) GetMxRecord() *DNSMXResourceRecord {
	if x, ok := m.GetTypeRecordSet().(*RRSet_MxRecord); ok {
		return x.MxRecord
	}
	return nil
}

func (m *RRSet) GetNsRecord() *DNSNSResourceRecord {
	if x, ok := m.GetTypeRecordSet().(*RRSet_NsRecord); ok {
		return x.NsRecord
	}
	return nil
}

func (m *RRSet) GetPtrRecord() *DNSPTRResourceRecord {
	if x, ok := m.GetTypeRecordSet().(*RRSet_PtrRecord); ok {
		return x.PtrRecord
	}
	return nil
}

func (m *RRSet) GetSrvRecord() *DNSSRVResourceRecord {
	if x, ok := m.GetTypeRecordSet().(*RRSet_SrvRecord); ok {
		return x.SrvRecord
	}
	return nil
}

func (m *RRSet) GetTxtRecord() *DNSTXTResourceRecord {
	if x, ok := m.GetTypeRecordSet().(*RRSet_TxtRecord); ok {
		return x.TxtRecord
	}
	return nil
}

func (m *RRSet) GetLbRecord() *DNSLBResourceRecord {
	if x, ok := m.GetTypeRecordSet().(*RRSet_LbRecord); ok {
		return x.LbRecord
	}
	return nil
}

func (m *RRSet) GetNaptrRecord() *DNSNAPTRResourceRecord {
	if x, ok := m.GetTypeRecordSet().(*RRSet_NaptrRecord); ok {
		return x.NaptrRecord
	}
	return nil
}

func (m *RRSet) GetDsRecord() *DNSDSRecord {
	if x, ok := m.GetTypeRecordSet().(*RRSet_DsRecord); ok {
		return x.DsRecord
	}
	return nil
}

func (m *RRSet) GetCdsRecord() *DNSCDSRecord {
	if x, ok := m.GetTypeRecordSet().(*RRSet_CdsRecord); ok {
		return x.CdsRecord
	}
	return nil
}

func (m *RRSet) GetAfsdbRecord() *DNSAFSDBRecord {
	if x, ok := m.GetTypeRecordSet().(*RRSet_AfsdbRecord); ok {
		return x.AfsdbRecord
	}
	return nil
}

func (m *RRSet) GetEui48Record() *DNSEUI48ResourceRecord {
	if x, ok := m.GetTypeRecordSet().(*RRSet_Eui48Record); ok {
		return x.Eui48Record
	}
	return nil
}

func (m *RRSet) GetEui64Record() *DNSEUI64ResourceRecord {
	if x, ok := m.GetTypeRecordSet().(*RRSet_Eui64Record); ok {
		return x.Eui64Record
	}
	return nil
}

func (m *RRSet) GetLocRecord() *DNSLOCResourceRecord {
	if x, ok := m.GetTypeRecordSet().(*RRSet_LocRecord); ok {
		return x.LocRecord
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RRSet) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RRSet_ARecord)(nil),
		(*RRSet_AaaaRecord)(nil),
		(*RRSet_AliasRecord)(nil),
		(*RRSet_CaaRecord)(nil),
		(*RRSet_CnameRecord)(nil),
		(*RRSet_MxRecord)(nil),
		(*RRSet_NsRecord)(nil),
		(*RRSet_PtrRecord)(nil),
		(*RRSet_SrvRecord)(nil),
		(*RRSet_TxtRecord)(nil),
		(*RRSet_LbRecord)(nil),
		(*RRSet_NaptrRecord)(nil),
		(*RRSet_DsRecord)(nil),
		(*RRSet_CdsRecord)(nil),
		(*RRSet_AfsdbRecord)(nil),
		(*RRSet_Eui48Record)(nil),
		(*RRSet_Eui64Record)(nil),
		(*RRSet_LocRecord)(nil),
	}
}

// DNSAResourceRecord
//
// x-displayName: "DNSAResourceRecord"
// A Records
type DNSAResourceRecord struct {
	// Record Name
	//
	// x-displayName: "Record Name (Excluding Domain name)"
	// x-example: "www or mail or * or corp.web or *.b"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// IPv4 addresses
	//
	// x-displayName: "IPv4 Addresses"
	// x-example: "1.1.1.1"
	// x-required
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *DNSAResourceRecord) Reset()      { *m = DNSAResourceRecord{} }
func (*DNSAResourceRecord) ProtoMessage() {}
func (*DNSAResourceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{4}
}
func (m *DNSAResourceRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSAResourceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSAResourceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSAResourceRecord.Merge(m, src)
}
func (m *DNSAResourceRecord) XXX_Size() int {
	return m.Size()
}
func (m *DNSAResourceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSAResourceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DNSAResourceRecord proto.InternalMessageInfo

func (m *DNSAResourceRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSAResourceRecord) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

// DNSAAAAResourceRecord
//
// x-displayName: "DNSAAAAResourceRecord"
// RecordSet for AAAA Records
type DNSAAAAResourceRecord struct {
	// Record Name
	//
	// x-displayName: "Record Name (Excluding Domain name)"
	// x-example: "www or mail or * or corp.web or *.b"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// IPv6 addresses
	//
	// x-displayName: "IPv6 Addresses"
	// x-example: "2001:0db8:85a3:0000:0000:8a2e:0370:7334"
	// x-required
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *DNSAAAAResourceRecord) Reset()      { *m = DNSAAAAResourceRecord{} }
func (*DNSAAAAResourceRecord) ProtoMessage() {}
func (*DNSAAAAResourceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{5}
}
func (m *DNSAAAAResourceRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSAAAAResourceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSAAAAResourceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSAAAAResourceRecord.Merge(m, src)
}
func (m *DNSAAAAResourceRecord) XXX_Size() int {
	return m.Size()
}
func (m *DNSAAAAResourceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSAAAAResourceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DNSAAAAResourceRecord proto.InternalMessageInfo

func (m *DNSAAAAResourceRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSAAAAResourceRecord) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

// DNSAliasResourceRecord
//
// x-displayName: "DNSAliasResourceRecord"
type DNSAliasResourceRecord struct {
	// Record Name
	//
	// x-displayName: "Record Name (Excluding Domain name)"
	// x-example: ""
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Deprecated: Do not use.
	// Domain
	//
	// x-displayName: "Domain"
	// x-example: "example.com"
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *DNSAliasResourceRecord) Reset()      { *m = DNSAliasResourceRecord{} }
func (*DNSAliasResourceRecord) ProtoMessage() {}
func (*DNSAliasResourceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{6}
}
func (m *DNSAliasResourceRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSAliasResourceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSAliasResourceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSAliasResourceRecord.Merge(m, src)
}
func (m *DNSAliasResourceRecord) XXX_Size() int {
	return m.Size()
}
func (m *DNSAliasResourceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSAliasResourceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DNSAliasResourceRecord proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *DNSAliasResourceRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSAliasResourceRecord) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// CertificationAuthorityAuthorization
//
// x-displayName: "CertificationAuthorityAuthorization"
type CertificationAuthorityAuthorization struct {
	// Certification authority authorization flags
	//
	// x-displayName: "Flags"
	// x-example: "0"
	Flags uint32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	// Certification authority authorization tag
	//
	// x-displayName: "Tag"
	// x-example: "issue"
	Tag string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	// Certification authority authorization value
	//
	// x-displayName: "Value"
	// x-example: "value"
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CertificationAuthorityAuthorization) Reset()      { *m = CertificationAuthorityAuthorization{} }
func (*CertificationAuthorityAuthorization) ProtoMessage() {}
func (*CertificationAuthorityAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{7}
}
func (m *CertificationAuthorityAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertificationAuthorityAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CertificationAuthorityAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificationAuthorityAuthorization.Merge(m, src)
}
func (m *CertificationAuthorityAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *CertificationAuthorityAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificationAuthorityAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_CertificationAuthorityAuthorization proto.InternalMessageInfo

func (m *CertificationAuthorityAuthorization) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *CertificationAuthorityAuthorization) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *CertificationAuthorityAuthorization) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// DNSCAAResourceRecord
//
// x-displayName: "DNSCAAResourceRecord"
type DNSCAAResourceRecord struct {
	// Record Name
	//
	// x-displayName: "Record Name (Excluding Domain name)"
	// x-example: "www or mail or * or corp.web or *.b"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// CAA Record Value
	//
	// x-displayName: "CAA Record Value"
	Values []*CertificationAuthorityAuthorization `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *DNSCAAResourceRecord) Reset()      { *m = DNSCAAResourceRecord{} }
func (*DNSCAAResourceRecord) ProtoMessage() {}
func (*DNSCAAResourceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{8}
}
func (m *DNSCAAResourceRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSCAAResourceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSCAAResourceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSCAAResourceRecord.Merge(m, src)
}
func (m *DNSCAAResourceRecord) XXX_Size() int {
	return m.Size()
}
func (m *DNSCAAResourceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSCAAResourceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DNSCAAResourceRecord proto.InternalMessageInfo

func (m *DNSCAAResourceRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSCAAResourceRecord) GetValues() []*CertificationAuthorityAuthorization {
	if m != nil {
		return m.Values
	}
	return nil
}

// DNSCNAMEResourceRecord
//
// x-displayName: "DNSCNAMEResourceRecord"
type DNSCNAMEResourceRecord struct {
	// Record Name
	//
	// x-displayName: "Record Name (Excluding Domain name)"
	// x-example: "www or mail or * or corp.web or *.b"
	// x-required
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Domain
	//
	// x-displayName: "Domain"
	// x-example: "example.com"
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *DNSCNAMEResourceRecord) Reset()      { *m = DNSCNAMEResourceRecord{} }
func (*DNSCNAMEResourceRecord) ProtoMessage() {}
func (*DNSCNAMEResourceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{9}
}
func (m *DNSCNAMEResourceRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSCNAMEResourceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSCNAMEResourceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSCNAMEResourceRecord.Merge(m, src)
}
func (m *DNSCNAMEResourceRecord) XXX_Size() int {
	return m.Size()
}
func (m *DNSCNAMEResourceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSCNAMEResourceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DNSCNAMEResourceRecord proto.InternalMessageInfo

func (m *DNSCNAMEResourceRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSCNAMEResourceRecord) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// MailExchanger
//
// x-displayName: "MailExchanger"
type MailExchanger struct {
	// Domain
	//
	// x-displayName: "Domain"
	// x-example: "mail.example.com"
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// Priority
	//
	// x-displayName: "Priority"
	// x-example: "10"
	// Mail exchanger priority code
	Priority uint32 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (m *MailExchanger) Reset()      { *m = MailExchanger{} }
func (*MailExchanger) ProtoMessage() {}
func (*MailExchanger) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{10}
}
func (m *MailExchanger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MailExchanger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MailExchanger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MailExchanger.Merge(m, src)
}
func (m *MailExchanger) XXX_Size() int {
	return m.Size()
}
func (m *MailExchanger) XXX_DiscardUnknown() {
	xxx_messageInfo_MailExchanger.DiscardUnknown(m)
}

var xxx_messageInfo_MailExchanger proto.InternalMessageInfo

func (m *MailExchanger) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *MailExchanger) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

// DNSMXResourceRecord
//
// x-displayName: "DNSMXResourceRecord"
type DNSMXResourceRecord struct {
	// Record Name
	//
	// x-displayName: "Record Name (Excluding Domain name)"
	// x-example: "www or mail or * or corp.web or *.b"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Value
	//
	// x-displayName: "MX Record Value"
	// x-required
	Values []*MailExchanger `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *DNSMXResourceRecord) Reset()      { *m = DNSMXResourceRecord{} }
func (*DNSMXResourceRecord) ProtoMessage() {}
func (*DNSMXResourceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{11}
}
func (m *DNSMXResourceRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSMXResourceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSMXResourceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSMXResourceRecord.Merge(m, src)
}
func (m *DNSMXResourceRecord) XXX_Size() int {
	return m.Size()
}
func (m *DNSMXResourceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSMXResourceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DNSMXResourceRecord proto.InternalMessageInfo

func (m *DNSMXResourceRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSMXResourceRecord) GetValues() []*MailExchanger {
	if m != nil {
		return m.Values
	}
	return nil
}

// DNSNSResourceRecord
//
// x-displayName: "DNSNSResourceRecord"
type DNSNSResourceRecord struct {
	// Record Name
	//
	// x-displayName: "Record Name (Excluding Domain name)"
	// x-example: "www or mail or * or corp.we" or *.b"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Name-servers
	//
	// x-displayName: "Name servers"
	// x-example: "ns1.example.com"
	// x-required
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *DNSNSResourceRecord) Reset()      { *m = DNSNSResourceRecord{} }
func (*DNSNSResourceRecord) ProtoMessage() {}
func (*DNSNSResourceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{12}
}
func (m *DNSNSResourceRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSNSResourceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSNSResourceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSNSResourceRecord.Merge(m, src)
}
func (m *DNSNSResourceRecord) XXX_Size() int {
	return m.Size()
}
func (m *DNSNSResourceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSNSResourceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DNSNSResourceRecord proto.InternalMessageInfo

func (m *DNSNSResourceRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSNSResourceRecord) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

// DNSPTRResourceRecord
//
// x-displayName: "DNSPTRResourceRecord"
type DNSPTRResourceRecord struct {
	// Record Name
	//
	// x-displayName: "Record Name (Excluding Domain name)"
	// x-example: "www or mail or * or corp.web or *.b"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Domain names
	//
	// x-displayName: "Domain name"
	// x-example: "my.example.com"
	// x-required
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *DNSPTRResourceRecord) Reset()      { *m = DNSPTRResourceRecord{} }
func (*DNSPTRResourceRecord) ProtoMessage() {}
func (*DNSPTRResourceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{13}
}
func (m *DNSPTRResourceRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSPTRResourceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSPTRResourceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSPTRResourceRecord.Merge(m, src)
}
func (m *DNSPTRResourceRecord) XXX_Size() int {
	return m.Size()
}
func (m *DNSPTRResourceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSPTRResourceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DNSPTRResourceRecord proto.InternalMessageInfo

func (m *DNSPTRResourceRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSPTRResourceRecord) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

// DNSSRVResourceRecord
//
// x-displayName: "DNSSRVResourceRecord"
type DNSSRVResourceRecord struct {
	// Record Name
	//
	// x-displayName: "Record Name (Excluding Domain name)"
	// x-example: "www or mail or * or corp.web or *.b"
	// x-required
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// SRV Value
	//
	// x-displayName: "SRV Value"
	// x-example: "value"
	// x-required
	Values []*SRVService `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *DNSSRVResourceRecord) Reset()      { *m = DNSSRVResourceRecord{} }
func (*DNSSRVResourceRecord) ProtoMessage() {}
func (*DNSSRVResourceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{14}
}
func (m *DNSSRVResourceRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSSRVResourceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSSRVResourceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSSRVResourceRecord.Merge(m, src)
}
func (m *DNSSRVResourceRecord) XXX_Size() int {
	return m.Size()
}
func (m *DNSSRVResourceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSSRVResourceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DNSSRVResourceRecord proto.InternalMessageInfo

func (m *DNSSRVResourceRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSSRVResourceRecord) GetValues() []*SRVService {
	if m != nil {
		return m.Values
	}
	return nil
}

// SRVService
//
// x-displayName: "SRVService"
type SRVService struct {
	// Priority
	//
	// x-displayName: "Priority"
	// x-example: "10"
	// Priority of the target. A lower number indicates a higher preference.
	Priority uint32 `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	// Weight
	//
	// x-displayName: "Weight"
	// x-example: "10"
	// Weight of the target. A higher number indicates a higher preference.
	Weight uint32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	// Port
	//
	// x-displayName: "Port"
	// x-example: "10"
	// Port on which the service can be found
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Target
	//
	// x-displayName: "Target"
	// x-example: "my.example.com"
	// Hostname of the machine providing the service
	Target string `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *SRVService) Reset()      { *m = SRVService{} }
func (*SRVService) ProtoMessage() {}
func (*SRVService) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{15}
}
func (m *SRVService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SRVService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SRVService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SRVService.Merge(m, src)
}
func (m *SRVService) XXX_Size() int {
	return m.Size()
}
func (m *SRVService) XXX_DiscardUnknown() {
	xxx_messageInfo_SRVService.DiscardUnknown(m)
}

var xxx_messageInfo_SRVService proto.InternalMessageInfo

func (m *SRVService) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *SRVService) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *SRVService) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *SRVService) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

// DNSTXTResourceRecord
//
// x-displayName: "DNSTXTResourceRecord"
type DNSTXTResourceRecord struct {
	// Record Name
	//
	// x-displayName: "Record Name (Excluding Domain name)"
	// x-example: "www or mail or * or corp.web or *.b"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Text
	//
	// x-displayName: "Text"
	// x-example: "value"
	// x-required
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *DNSTXTResourceRecord) Reset()      { *m = DNSTXTResourceRecord{} }
func (*DNSTXTResourceRecord) ProtoMessage() {}
func (*DNSTXTResourceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{16}
}
func (m *DNSTXTResourceRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSTXTResourceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSTXTResourceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSTXTResourceRecord.Merge(m, src)
}
func (m *DNSTXTResourceRecord) XXX_Size() int {
	return m.Size()
}
func (m *DNSTXTResourceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSTXTResourceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DNSTXTResourceRecord proto.InternalMessageInfo

func (m *DNSTXTResourceRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSTXTResourceRecord) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

// DNSLBResourcerecord
//
// x-displayName: "DNS Load Balancer Record"
// DNS Load Balancer Record
type DNSLBResourceRecord struct {
	// Record Name
	//
	// x-displayName: "Record Name (Excluding Domain name)"
	// x-example: "www or mail or * or ww* or *ab"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// DNS LB Record
	//
	// x-displayName: "DNS Load Balancer Record"
	Value *views.ObjectRefType `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *DNSLBResourceRecord) Reset()      { *m = DNSLBResourceRecord{} }
func (*DNSLBResourceRecord) ProtoMessage() {}
func (*DNSLBResourceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{17}
}
func (m *DNSLBResourceRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSLBResourceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSLBResourceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSLBResourceRecord.Merge(m, src)
}
func (m *DNSLBResourceRecord) XXX_Size() int {
	return m.Size()
}
func (m *DNSLBResourceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSLBResourceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DNSLBResourceRecord proto.InternalMessageInfo

func (m *DNSLBResourceRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSLBResourceRecord) GetValue() *views.ObjectRefType {
	if m != nil {
		return m.Value
	}
	return nil
}

// DNSNAPTRResourceRecord
//
// x-displayName: "DNS NAPTR Record"
// DNS NAPTR Record
type DNSNAPTRResourceRecord struct {
	// Record Name
	//
	// x-displayName: "Record Name (Excluding Domain name)"
	// x-example: "www or mail or * or ww* or *ab"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// NAPTR Values
	//
	// x-displayName: "NAPTR Value"
	// x-example: "values"
	// x-required
	Values []*NAPTRValue `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *DNSNAPTRResourceRecord) Reset()      { *m = DNSNAPTRResourceRecord{} }
func (*DNSNAPTRResourceRecord) ProtoMessage() {}
func (*DNSNAPTRResourceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{18}
}
func (m *DNSNAPTRResourceRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSNAPTRResourceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSNAPTRResourceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSNAPTRResourceRecord.Merge(m, src)
}
func (m *DNSNAPTRResourceRecord) XXX_Size() int {
	return m.Size()
}
func (m *DNSNAPTRResourceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSNAPTRResourceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DNSNAPTRResourceRecord proto.InternalMessageInfo

func (m *DNSNAPTRResourceRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSNAPTRResourceRecord) GetValues() []*NAPTRValue {
	if m != nil {
		return m.Values
	}
	return nil
}

// NAPTRValue
//
// x-displayName: "NAPTRValue"
type NAPTRValue struct {
	// Order
	//
	// x-displayName: "Order"
	// x-example: "10"
	// x-required
	// Order in which the NAPTR records must be processed. A lower number indicates a higher preference.
	Order uint32 `protobuf:"varint,1,opt,name=order,proto3" json:"order,omitempty"`
	// Preference
	//
	// x-displayName: "Preference"
	// x-example: "10"
	// x-required
	// Preference when records have the same order. A lower number indicates a higher preference.
	Preference uint32 `protobuf:"varint,2,opt,name=preference,proto3" json:"preference,omitempty"`
	// Flags
	//
	// x-displayName: "Flags"
	// x-example: ""
	// x-required
	// Flag to control aspects of the rewriting and interpretation of the fields in the record. At this time only four flags, S/A/U/P, are defined.
	Flags string `protobuf:"bytes,3,opt,name=flags,proto3" json:"flags,omitempty"`
	// Protocol Resolution Service
	//
	// x-displayName: "Protocol Resolution Service"
	// x-example: ""
	// Specifies the service(s) available down this rewrite path.
	Service string `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	// Regular Expression
	//
	// x-displayName: "Regular Expression"
	// x-example: ""
	// Regular expression to construct the next domain name to lookup.
	Regexp string `protobuf:"bytes,5,opt,name=regexp,proto3" json:"regexp,omitempty"`
	// Replacement
	//
	// x-displayName: "Replacement"
	// x-example: ""
	// The next NAME to query for NAPTR, SRV, or address records depending on the value of the flags field.
	Replacement string `protobuf:"bytes,6,opt,name=replacement,proto3" json:"replacement,omitempty"`
}

func (m *NAPTRValue) Reset()      { *m = NAPTRValue{} }
func (*NAPTRValue) ProtoMessage() {}
func (*NAPTRValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{19}
}
func (m *NAPTRValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NAPTRValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NAPTRValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NAPTRValue.Merge(m, src)
}
func (m *NAPTRValue) XXX_Size() int {
	return m.Size()
}
func (m *NAPTRValue) XXX_DiscardUnknown() {
	xxx_messageInfo_NAPTRValue.DiscardUnknown(m)
}

var xxx_messageInfo_NAPTRValue proto.InternalMessageInfo

func (m *NAPTRValue) GetOrder() uint32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *NAPTRValue) GetPreference() uint32 {
	if m != nil {
		return m.Preference
	}
	return 0
}

func (m *NAPTRValue) GetFlags() string {
	if m != nil {
		return m.Flags
	}
	return ""
}

func (m *NAPTRValue) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *NAPTRValue) GetRegexp() string {
	if m != nil {
		return m.Regexp
	}
	return ""
}

func (m *NAPTRValue) GetReplacement() string {
	if m != nil {
		return m.Replacement
	}
	return ""
}

// DNSDSRecord
//
// x-displayName: "DNS DS Record"
// DNS DS Record
type DNSDSRecord struct {
	// Record Name
	//
	// x-displayName: "Record Name (Excluding Domain name)"
	// x-example: "www or mail or * or ww* or *ab"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// DS Value
	//
	// x-displayName: "DS Value"
	// x-required
	Values []*DSRecordValue `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *DNSDSRecord) Reset()      { *m = DNSDSRecord{} }
func (*DNSDSRecord) ProtoMessage() {}
func (*DNSDSRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{20}
}
func (m *DNSDSRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSDSRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSDSRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSDSRecord.Merge(m, src)
}
func (m *DNSDSRecord) XXX_Size() int {
	return m.Size()
}
func (m *DNSDSRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSDSRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DNSDSRecord proto.InternalMessageInfo

func (m *DNSDSRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSDSRecord) GetValues() []*DSRecordValue {
	if m != nil {
		return m.Values
	}
	return nil
}

// DNSCDSRecord
//
// x-displayName: "DNS CDS Record"
// DNS CDS Record
type DNSCDSRecord struct {
	// Record Name
	//
	// x-displayName: "Record Name (Excluding Domain name)"
	// x-example: "www or mail or * or ww* or *ab"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// DS Value
	//
	// x-displayName: "DS Value"
	// x-required
	Values []*DSRecordValue `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *DNSCDSRecord) Reset()      { *m = DNSCDSRecord{} }
func (*DNSCDSRecord) ProtoMessage() {}
func (*DNSCDSRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{21}
}
func (m *DNSCDSRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSCDSRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSCDSRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSCDSRecord.Merge(m, src)
}
func (m *DNSCDSRecord) XXX_Size() int {
	return m.Size()
}
func (m *DNSCDSRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSCDSRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DNSCDSRecord proto.InternalMessageInfo

func (m *DNSCDSRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSCDSRecord) GetValues() []*DSRecordValue {
	if m != nil {
		return m.Values
	}
	return nil
}

// DSRecordValue
//
// x-displayName: "DSRecordValue"
type DSRecordValue struct {
	// Key Tag
	//
	// x-displayName: "Key Tag"
	// x-example: "15228"
	// x-required
	// A short numeric value which can help quickly identify the referenced DNSKEY-record.
	KeyTag uint32 `protobuf:"varint,1,opt,name=key_tag,json=keyTag,proto3" json:"key_tag,omitempty"`
	// DS Key Algorithm
	//
	// x-displayName: "DS Key algorithm"
	// x-required
	// DS key value must be compatible with the specified algorithm.
	DsKeyAlgorithm DSKeyAlgorithm `protobuf:"varint,2,opt,name=ds_key_algorithm,json=dsKeyAlgorithm,proto3,enum=ves.io.schema.dns_zone.DSKeyAlgorithm" json:"ds_key_algorithm,omitempty"`
	// Digest
	//
	// x-displayName: "Digest"
	// x-required
	//
	// Types that are valid to be assigned to DigestChoice:
	//	*DSRecordValue_Sha1Digest
	//	*DSRecordValue_Sha256Digest
	//	*DSRecordValue_Sha384Digest
	DigestChoice isDSRecordValue_DigestChoice `protobuf_oneof:"digest_choice"`
}

func (m *DSRecordValue) Reset()      { *m = DSRecordValue{} }
func (*DSRecordValue) ProtoMessage() {}
func (*DSRecordValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{22}
}
func (m *DSRecordValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DSRecordValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DSRecordValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSRecordValue.Merge(m, src)
}
func (m *DSRecordValue) XXX_Size() int {
	return m.Size()
}
func (m *DSRecordValue) XXX_DiscardUnknown() {
	xxx_messageInfo_DSRecordValue.DiscardUnknown(m)
}

var xxx_messageInfo_DSRecordValue proto.InternalMessageInfo

type isDSRecordValue_DigestChoice interface {
	isDSRecordValue_DigestChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DSRecordValue_Sha1Digest struct {
	Sha1Digest *SHA1Digest `protobuf:"bytes,4,opt,name=sha1_digest,json=sha1Digest,proto3,oneof" json:"sha1_digest,omitempty"`
}
type DSRecordValue_Sha256Digest struct {
	Sha256Digest *SHA256Digest `protobuf:"bytes,5,opt,name=sha256_digest,json=sha256Digest,proto3,oneof" json:"sha256_digest,omitempty"`
}
type DSRecordValue_Sha384Digest struct {
	Sha384Digest *SHA384Digest `protobuf:"bytes,6,opt,name=sha384_digest,json=sha384Digest,proto3,oneof" json:"sha384_digest,omitempty"`
}

func (*DSRecordValue_Sha1Digest) isDSRecordValue_DigestChoice()   {}
func (*DSRecordValue_Sha256Digest) isDSRecordValue_DigestChoice() {}
func (*DSRecordValue_Sha384Digest) isDSRecordValue_DigestChoice() {}

func (m *DSRecordValue) GetDigestChoice() isDSRecordValue_DigestChoice {
	if m != nil {
		return m.DigestChoice
	}
	return nil
}

func (m *DSRecordValue) GetKeyTag() uint32 {
	if m != nil {
		return m.KeyTag
	}
	return 0
}

func (m *DSRecordValue) GetDsKeyAlgorithm() DSKeyAlgorithm {
	if m != nil {
		return m.DsKeyAlgorithm
	}
	return UNSPECIFIED
}

func (m *DSRecordValue) GetSha1Digest() *SHA1Digest {
	if x, ok := m.GetDigestChoice().(*DSRecordValue_Sha1Digest); ok {
		return x.Sha1Digest
	}
	return nil
}

func (m *DSRecordValue) GetSha256Digest() *SHA256Digest {
	if x, ok := m.GetDigestChoice().(*DSRecordValue_Sha256Digest); ok {
		return x.Sha256Digest
	}
	return nil
}

func (m *DSRecordValue) GetSha384Digest() *SHA384Digest {
	if x, ok := m.GetDigestChoice().(*DSRecordValue_Sha384Digest); ok {
		return x.Sha384Digest
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DSRecordValue) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DSRecordValue_Sha1Digest)(nil),
		(*DSRecordValue_Sha256Digest)(nil),
		(*DSRecordValue_Sha384Digest)(nil),
	}
}

// SHA1 Digest
//
// x-displayName: "SHA1 Digest"
type SHA1Digest struct {
	// Digest
	//
	// x-displayName: "Digest"
	// x-example: "addf120b430021c36c232c99ef8d926aea2acd6b"
	// x-required
	// The 'digest' is the DS key and the actual contents of the DS record.
	Digest string `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *SHA1Digest) Reset()      { *m = SHA1Digest{} }
func (*SHA1Digest) ProtoMessage() {}
func (*SHA1Digest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{23}
}
func (m *SHA1Digest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SHA1Digest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SHA1Digest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SHA1Digest.Merge(m, src)
}
func (m *SHA1Digest) XXX_Size() int {
	return m.Size()
}
func (m *SHA1Digest) XXX_DiscardUnknown() {
	xxx_messageInfo_SHA1Digest.DiscardUnknown(m)
}

var xxx_messageInfo_SHA1Digest proto.InternalMessageInfo

func (m *SHA1Digest) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

// SHA256 Digest
//
// x-displayName: "SHA256 Digest"
type SHA256Digest struct {
	// Digest
	//
	// x-displayName: "Digest"
	// x-example: "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"
	// x-required
	// The 'digest' is the DS key and the actual contents of the DS record.
	Digest string `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *SHA256Digest) Reset()      { *m = SHA256Digest{} }
func (*SHA256Digest) ProtoMessage() {}
func (*SHA256Digest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{24}
}
func (m *SHA256Digest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SHA256Digest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SHA256Digest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SHA256Digest.Merge(m, src)
}
func (m *SHA256Digest) XXX_Size() int {
	return m.Size()
}
func (m *SHA256Digest) XXX_DiscardUnknown() {
	xxx_messageInfo_SHA256Digest.DiscardUnknown(m)
}

var xxx_messageInfo_SHA256Digest proto.InternalMessageInfo

func (m *SHA256Digest) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

// SHA384 Digest
//
// x-displayName: "SHA384 Digest"
type SHA384Digest struct {
	// Digest
	//
	// x-displayName: "Digest"
	// x-example: "b4a9b28d142d91968ca232b95dfca771ee66f99924148b85026dfa686f6288d0edbfa71c98a798fda71e130f48e8f0f8"
	// x-required
	// The 'digest' is the DS key and the actual contents of the DS record.
	Digest string `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *SHA384Digest) Reset()      { *m = SHA384Digest{} }
func (*SHA384Digest) ProtoMessage() {}
func (*SHA384Digest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{25}
}
func (m *SHA384Digest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SHA384Digest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SHA384Digest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SHA384Digest.Merge(m, src)
}
func (m *SHA384Digest) XXX_Size() int {
	return m.Size()
}
func (m *SHA384Digest) XXX_DiscardUnknown() {
	xxx_messageInfo_SHA384Digest.DiscardUnknown(m)
}

var xxx_messageInfo_SHA384Digest proto.InternalMessageInfo

func (m *SHA384Digest) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

// DNSAFSDBRecord
//
// x-displayName: "DNS AFSDB Record"
// DNS AFSDB Record
type DNSAFSDBRecord struct {
	// Record Name
	//
	// x-displayName: "Record Name (Excluding Domain name)"
	// x-example: "www or mail or * or ww* or *ab"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// AFSDB Value
	//
	// x-displayName: "AFSDB Value"
	// x-example: "values"
	// x-required
	Values []*AFSDBRecordValue `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *DNSAFSDBRecord) Reset()      { *m = DNSAFSDBRecord{} }
func (*DNSAFSDBRecord) ProtoMessage() {}
func (*DNSAFSDBRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{26}
}
func (m *DNSAFSDBRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSAFSDBRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSAFSDBRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSAFSDBRecord.Merge(m, src)
}
func (m *DNSAFSDBRecord) XXX_Size() int {
	return m.Size()
}
func (m *DNSAFSDBRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSAFSDBRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DNSAFSDBRecord proto.InternalMessageInfo

func (m *DNSAFSDBRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSAFSDBRecord) GetValues() []*AFSDBRecordValue {
	if m != nil {
		return m.Values
	}
	return nil
}

// AFSDBRecordValue
//
// x-displayName: "AFSDBRecordValue"
type AFSDBRecordValue struct {
	// Subtype
	//
	// x-displayName: "Subtype"
	// x-example: "1"
	// x-required
	// AFSDB Record Subtype.
	Subtype AFSDBRecordSubtype `protobuf:"varint,1,opt,name=subtype,proto3,enum=ves.io.schema.dns_zone.AFSDBRecordSubtype" json:"subtype,omitempty"`
	// Hostname
	//
	// x-displayName: "Hostname"
	// x-example: "mail.example.com"
	// x-required
	// Server name of the AFS cell database server or the DCE name server.
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (m *AFSDBRecordValue) Reset()      { *m = AFSDBRecordValue{} }
func (*AFSDBRecordValue) ProtoMessage() {}
func (*AFSDBRecordValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{27}
}
func (m *AFSDBRecordValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AFSDBRecordValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AFSDBRecordValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AFSDBRecordValue.Merge(m, src)
}
func (m *AFSDBRecordValue) XXX_Size() int {
	return m.Size()
}
func (m *AFSDBRecordValue) XXX_DiscardUnknown() {
	xxx_messageInfo_AFSDBRecordValue.DiscardUnknown(m)
}

var xxx_messageInfo_AFSDBRecordValue proto.InternalMessageInfo

func (m *AFSDBRecordValue) GetSubtype() AFSDBRecordSubtype {
	if m != nil {
		return m.Subtype
	}
	return NONE
}

func (m *AFSDBRecordValue) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

// DNSEUI48ResourceRecord
//
// x-displayName: "DNS EUI48 Record"
// DNS EUI48 Record
type DNSEUI48ResourceRecord struct {
	// Record Name
	//
	// x-displayName: "Record Name (Excluding Domain name)"
	// x-example: "www or mail or * or ww* or *ab"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// EUI48 Identifier
	//
	// x-displayName: "EUI48 Identifier"
	// x-example: "01-23-45-67-89-ab"
	// x-required
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *DNSEUI48ResourceRecord) Reset()      { *m = DNSEUI48ResourceRecord{} }
func (*DNSEUI48ResourceRecord) ProtoMessage() {}
func (*DNSEUI48ResourceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{28}
}
func (m *DNSEUI48ResourceRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSEUI48ResourceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSEUI48ResourceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSEUI48ResourceRecord.Merge(m, src)
}
func (m *DNSEUI48ResourceRecord) XXX_Size() int {
	return m.Size()
}
func (m *DNSEUI48ResourceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSEUI48ResourceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DNSEUI48ResourceRecord proto.InternalMessageInfo

func (m *DNSEUI48ResourceRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSEUI48ResourceRecord) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// DNSEUI64ResourceRecord
//
// x-displayName: "DNS EUI64 Record"
// DNS EUI64 Record
type DNSEUI64ResourceRecord struct {
	// Record Name
	//
	// x-displayName: "Record Name (Excluding Domain name)"
	// x-example: "www or mail or * or ww* or *ab"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// EUI64 Identifier
	//
	// x-displayName: "EUI64 Identifier"
	// x-example: "01-23-45-67-89-ab-cd-ef"
	// x-required
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *DNSEUI64ResourceRecord) Reset()      { *m = DNSEUI64ResourceRecord{} }
func (*DNSEUI64ResourceRecord) ProtoMessage() {}
func (*DNSEUI64ResourceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{29}
}
func (m *DNSEUI64ResourceRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSEUI64ResourceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSEUI64ResourceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSEUI64ResourceRecord.Merge(m, src)
}
func (m *DNSEUI64ResourceRecord) XXX_Size() int {
	return m.Size()
}
func (m *DNSEUI64ResourceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSEUI64ResourceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DNSEUI64ResourceRecord proto.InternalMessageInfo

func (m *DNSEUI64ResourceRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSEUI64ResourceRecord) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// DNSLOCResourceRecord
//
// x-displayName: "DNS LOC Record"
// DNS LOC Record
type DNSLOCResourceRecord struct {
	// Record Name
	//
	// x-displayName: "Record Name (Excluding Domain name)"
	// x-example: "www or mail or * or ww* or *ab"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// LOC Values
	//
	// x-displayName: "LOC Value"
	// x-example: "32 7 19 S 116 2 25 E 10m"
	// x-required
	Values []*LOCValue `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *DNSLOCResourceRecord) Reset()      { *m = DNSLOCResourceRecord{} }
func (*DNSLOCResourceRecord) ProtoMessage() {}
func (*DNSLOCResourceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{30}
}
func (m *DNSLOCResourceRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSLOCResourceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSLOCResourceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSLOCResourceRecord.Merge(m, src)
}
func (m *DNSLOCResourceRecord) XXX_Size() int {
	return m.Size()
}
func (m *DNSLOCResourceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSLOCResourceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DNSLOCResourceRecord proto.InternalMessageInfo

func (m *DNSLOCResourceRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSLOCResourceRecord) GetValues() []*LOCValue {
	if m != nil {
		return m.Values
	}
	return nil
}

// LOCValue
//
// x-displayName: "LOCValue"
type LOCValue struct {
	// Latitude degree
	//
	// x-displayName: "Latitude degree"
	// x-example: "51"
	// x-required
	// Latitude degree, an integer between 0 and 90, including 0 and 90
	LatitudeDegree int32 `protobuf:"varint,1,opt,name=latitude_degree,json=latitudeDegree,proto3" json:"latitude_degree,omitempty"`
	// Latitude minute
	//
	// x-displayName: "Latitude minute"
	// x-example: "30"
	// Latitude minute, an integer between 0 and 59, including 0 and 59
	LatitudeMinute int32 `protobuf:"varint,2,opt,name=latitude_minute,json=latitudeMinute,proto3" json:"latitude_minute,omitempty"`
	// Latitude second
	//
	// x-displayName: "Latitude second"
	// x-example: "12.000"
	// Latitude second, an decimal between 0 and 59.999, including 0 and 59.999
	LatitudeSecond float32 `protobuf:"fixed32,3,opt,name=latitude_second,json=latitudeSecond,proto3" json:"latitude_second,omitempty"`
	// Latitude hemisphere
	//
	// x-displayName: "Latitude hemisphere"
	// x-example: "N"
	// x-required
	// Latitude hemisphere, N or S
	LatitudeHemisphere LatitudeHemisphere `protobuf:"varint,4,opt,name=latitude_hemisphere,json=latitudeHemisphere,proto3,enum=ves.io.schema.dns_zone.LatitudeHemisphere" json:"latitude_hemisphere,omitempty"`
	// Longitude degree
	//
	// x-displayName: "Longitude degree"
	// x-example: "51"
	// x-required
	// Longitude degree, an integer between 0 and 180, including 0 and 180
	LongitudeDegree int32 `protobuf:"varint,5,opt,name=longitude_degree,json=longitudeDegree,proto3" json:"longitude_degree,omitempty"`
	// Longitude minute
	//
	// x-displayName: "Longitude minute"
	// x-example: "30"
	// Longitude minute, an integer between 0 and 59, including 0 and 59
	LongitudeMinute int32 `protobuf:"varint,6,opt,name=longitude_minute,json=longitudeMinute,proto3" json:"longitude_minute,omitempty"`
	// Longitude second
	//
	// x-displayName: "Longitude second"
	// x-example: "12.000"
	// Longitude second, an decimal between 0 and 59.999, including 0 and 59.999
	LongitudeSecond float32 `protobuf:"fixed32,7,opt,name=longitude_second,json=longitudeSecond,proto3" json:"longitude_second,omitempty"`
	// Longitude hemisphere
	//
	// x-displayName: "Longitude hemisphere"
	// x-example: "E"
	// x-required
	// Longitude hemisphere, E or W
	LongitudeHemisphere LongitudeHemisphere `protobuf:"varint,8,opt,name=longitude_hemisphere,json=longitudeHemisphere,proto3,enum=ves.io.schema.dns_zone.LongitudeHemisphere" json:"longitude_hemisphere,omitempty"`
	// Altitude
	//
	// x-displayName: "Altitude"
	// x-example: "20.3"
	// x-required
	// Altitude in meters
	Altitude float32 `protobuf:"fixed32,9,opt,name=altitude,proto3" json:"altitude,omitempty"`
	// Size
	//
	// x-displayName: "Size"
	// x-example: "12.03"
	// Diameter of a sphere enclosing the described entity, in meters
	LocationDiameter float32 `protobuf:"fixed32,10,opt,name=location_diameter,json=locationDiameter,proto3" json:"location_diameter,omitempty"`
	// Horizontal Precision
	//
	// x-displayName: "Horizontal Precision"
	// x-example: "12.71"
	// Horizontal Precision in meters
	HorizontalPrecision float32 `protobuf:"fixed32,11,opt,name=horizontal_precision,json=horizontalPrecision,proto3" json:"horizontal_precision,omitempty"`
	// Vertical Precision
	//
	// x-displayName: "Vertical Precision"
	// x-example: "12.71m"
	// Vertical Precision in meters
	VerticalPrecision float32 `protobuf:"fixed32,12,opt,name=vertical_precision,json=verticalPrecision,proto3" json:"vertical_precision,omitempty"`
}

func (m *LOCValue) Reset()      { *m = LOCValue{} }
func (*LOCValue) ProtoMessage() {}
func (*LOCValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{31}
}
func (m *LOCValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LOCValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LOCValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LOCValue.Merge(m, src)
}
func (m *LOCValue) XXX_Size() int {
	return m.Size()
}
func (m *LOCValue) XXX_DiscardUnknown() {
	xxx_messageInfo_LOCValue.DiscardUnknown(m)
}

var xxx_messageInfo_LOCValue proto.InternalMessageInfo

func (m *LOCValue) GetLatitudeDegree() int32 {
	if m != nil {
		return m.LatitudeDegree
	}
	return 0
}

func (m *LOCValue) GetLatitudeMinute() int32 {
	if m != nil {
		return m.LatitudeMinute
	}
	return 0
}

func (m *LOCValue) GetLatitudeSecond() float32 {
	if m != nil {
		return m.LatitudeSecond
	}
	return 0
}

func (m *LOCValue) GetLatitudeHemisphere() LatitudeHemisphere {
	if m != nil {
		return m.LatitudeHemisphere
	}
	return N
}

func (m *LOCValue) GetLongitudeDegree() int32 {
	if m != nil {
		return m.LongitudeDegree
	}
	return 0
}

func (m *LOCValue) GetLongitudeMinute() int32 {
	if m != nil {
		return m.LongitudeMinute
	}
	return 0
}

func (m *LOCValue) GetLongitudeSecond() float32 {
	if m != nil {
		return m.LongitudeSecond
	}
	return 0
}

func (m *LOCValue) GetLongitudeHemisphere() LongitudeHemisphere {
	if m != nil {
		return m.LongitudeHemisphere
	}
	return E
}

func (m *LOCValue) GetAltitude() float32 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *LOCValue) GetLocationDiameter() float32 {
	if m != nil {
		return m.LocationDiameter
	}
	return 0
}

func (m *LOCValue) GetHorizontalPrecision() float32 {
	if m != nil {
		return m.HorizontalPrecision
	}
	return 0
}

func (m *LOCValue) GetVerticalPrecision() float32 {
	if m != nil {
		return m.VerticalPrecision
	}
	return 0
}

// Secondary DNS Configuration
//
// x-displayName: "Secondary DNS Configuration"
type SecondaryDNSConfig struct {
	// List of zone primary servers
	//
	// x-displayName: "DNS primary server IP"
	// x-example: "8.8.8.8"
	// x-required
	PrimaryServers []string `protobuf:"bytes,5,rep,name=primary_servers,json=primaryServers,proto3" json:"primary_servers,omitempty"`
	// TSIG Key Name
	//
	// x-displayName: "TSIG key name"
	// TSIG key name as used in TSIG protocol extension
	// x-example: "value"
	TsigKeyName string `protobuf:"bytes,6,opt,name=tsig_key_name,json=tsigKeyName,proto3" json:"tsig_key_name,omitempty"`
	// TSIG Key Algorithm
	//
	// x-displayName: "TSIG Key algorithm"
	// TSIG key value must be compatible with the specified algorithm
	TsigKeyAlgorithm TSIGKeyAlgorithm `protobuf:"varint,7,opt,name=tsig_key_algorithm,json=tsigKeyAlgorithm,proto3,enum=ves.io.schema.dns_zone.TSIGKeyAlgorithm" json:"tsig_key_algorithm,omitempty"`
	// TSIG Key value
	//
	// x-displayName: "TSIG key value in base 64 format"
	TsigKeyValue *schema.SecretType `protobuf:"bytes,8,opt,name=tsig_key_value,json=tsigKeyValue,proto3" json:"tsig_key_value,omitempty"`
	// Last AXFR timestamp
	//
	// x-displayName: "Last successful AXFR timestamp"
	// Last successful zone transfer timestamp.
	LastAxfrTimestamp *types.Timestamp `protobuf:"bytes,9,opt,name=last_axfr_timestamp,json=lastAxfrTimestamp,proto3" json:"last_axfr_timestamp,omitempty"`
	// Zonefile
	//
	// x-displayName: "Zone File"
	// The most recent zone file retrieved from the Primary DNS server
	ZoneFile string `protobuf:"bytes,10,opt,name=zone_file,json=zoneFile,proto3" json:"zone_file,omitempty"`
}

func (m *SecondaryDNSConfig) Reset()      { *m = SecondaryDNSConfig{} }
func (*SecondaryDNSConfig) ProtoMessage() {}
func (*SecondaryDNSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{32}
}
func (m *SecondaryDNSConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecondaryDNSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SecondaryDNSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecondaryDNSConfig.Merge(m, src)
}
func (m *SecondaryDNSConfig) XXX_Size() int {
	return m.Size()
}
func (m *SecondaryDNSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SecondaryDNSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SecondaryDNSConfig proto.InternalMessageInfo

func (m *SecondaryDNSConfig) GetPrimaryServers() []string {
	if m != nil {
		return m.PrimaryServers
	}
	return nil
}

func (m *SecondaryDNSConfig) GetTsigKeyName() string {
	if m != nil {
		return m.TsigKeyName
	}
	return ""
}

func (m *SecondaryDNSConfig) GetTsigKeyAlgorithm() TSIGKeyAlgorithm {
	if m != nil {
		return m.TsigKeyAlgorithm
	}
	return HMAC_MD5
}

func (m *SecondaryDNSConfig) GetTsigKeyValue() *schema.SecretType {
	if m != nil {
		return m.TsigKeyValue
	}
	return nil
}

func (m *SecondaryDNSConfig) GetLastAxfrTimestamp() *types.Timestamp {
	if m != nil {
		return m.LastAxfrTimestamp
	}
	return nil
}

func (m *SecondaryDNSConfig) GetZoneFile() string {
	if m != nil {
		return m.ZoneFile
	}
	return ""
}

// DNS Zone specification
//
// x-displayName: "Specification"
// Desired state of DNS zone
type GlobalSpecType struct {
	// Choice to DNS zone type
	//
	// x-displayName: "Zone Type"
	// x-required
	// Select type of zone whether its primary or secondary
	//
	// Types that are valid to be assigned to DnsType:
	//	*GlobalSpecType_Primary
	//	*GlobalSpecType_Secondary
	DnsType isGlobalSpecType_DnsType `protobuf_oneof:"dns_type"`
	// Subscription ID
	//
	// x-displayName: "Subscription ID"
	// Subscription ID is an internal identifier for backend dns services
	SubscriptionId string `protobuf:"bytes,5,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	// Service Instance ID
	//
	// x-displayName: "Service Instance ID"
	// Service Instance ID is an internal identifier for backend dns services
	ServiceInstanceId string `protobuf:"bytes,6,opt,name=service_instance_id,json=serviceInstanceId,proto3" json:"service_instance_id,omitempty"`
	// Number of DNS records
	//
	// x-displayName: "Number of DNS records"
	// Number of DNS records displays number of dns records for each zone
	NumOfDnsRecords uint32 `protobuf:"varint,7,opt,name=num_of_dns_records,json=numOfDnsRecords,proto3" json:"num_of_dns_records,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{33}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_DnsType interface {
	isGlobalSpecType_DnsType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_Primary struct {
	Primary *PrimaryDNSConfig `protobuf:"bytes,3,opt,name=primary,proto3,oneof" json:"primary,omitempty"`
}
type GlobalSpecType_Secondary struct {
	Secondary *SecondaryDNSConfig `protobuf:"bytes,4,opt,name=secondary,proto3,oneof" json:"secondary,omitempty"`
}

func (*GlobalSpecType_Primary) isGlobalSpecType_DnsType()   {}
func (*GlobalSpecType_Secondary) isGlobalSpecType_DnsType() {}

func (m *GlobalSpecType) GetDnsType() isGlobalSpecType_DnsType {
	if m != nil {
		return m.DnsType
	}
	return nil
}

func (m *GlobalSpecType) GetPrimary() *PrimaryDNSConfig {
	if x, ok := m.GetDnsType().(*GlobalSpecType_Primary); ok {
		return x.Primary
	}
	return nil
}

func (m *GlobalSpecType) GetSecondary() *SecondaryDNSConfig {
	if x, ok := m.GetDnsType().(*GlobalSpecType_Secondary); ok {
		return x.Secondary
	}
	return nil
}

func (m *GlobalSpecType) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

func (m *GlobalSpecType) GetServiceInstanceId() string {
	if m != nil {
		return m.ServiceInstanceId
	}
	return ""
}

func (m *GlobalSpecType) GetNumOfDnsRecords() uint32 {
	if m != nil {
		return m.NumOfDnsRecords
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_Primary)(nil),
		(*GlobalSpecType_Secondary)(nil),
	}
}

// PrimaryDNSCreateSpecType
//
// x-displayName: "PrimaryDNSCreateSpecType"
type PrimaryDNSCreateSpecType struct {
	// Types that are valid to be assigned to SoaRecordParametersChoice:
	//	*PrimaryDNSCreateSpecType_DefaultSoaParameters
	//	*PrimaryDNSCreateSpecType_SoaParameters
	SoaRecordParametersChoice isPrimaryDNSCreateSpecType_SoaRecordParametersChoice `protobuf_oneof:"soa_record_parameters_choice"`
	RrSetGroup                []*RRSetGroup                                        `protobuf:"bytes,8,rep,name=rr_set_group,json=rrSetGroup,proto3" json:"rr_set_group,omitempty"`
	DefaultRrSetGroup         []*RRSet                                             `protobuf:"bytes,9,rep,name=default_rr_set_group,json=defaultRrSetGroup,proto3" json:"default_rr_set_group,omitempty"`
	DnssecMode                *DNSSECMode                                          `protobuf:"bytes,12,opt,name=dnssec_mode,json=dnssecMode,proto3" json:"dnssec_mode,omitempty"`
	AllowHttpLbManagedRecords bool                                                 `protobuf:"varint,13,opt,name=allow_http_lb_managed_records,json=allowHttpLbManagedRecords,proto3" json:"allow_http_lb_managed_records,omitempty"`
}

func (m *PrimaryDNSCreateSpecType) Reset()      { *m = PrimaryDNSCreateSpecType{} }
func (*PrimaryDNSCreateSpecType) ProtoMessage() {}
func (*PrimaryDNSCreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{34}
}
func (m *PrimaryDNSCreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimaryDNSCreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PrimaryDNSCreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimaryDNSCreateSpecType.Merge(m, src)
}
func (m *PrimaryDNSCreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *PrimaryDNSCreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimaryDNSCreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_PrimaryDNSCreateSpecType proto.InternalMessageInfo

type isPrimaryDNSCreateSpecType_SoaRecordParametersChoice interface {
	isPrimaryDNSCreateSpecType_SoaRecordParametersChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PrimaryDNSCreateSpecType_DefaultSoaParameters struct {
	DefaultSoaParameters *schema.Empty `protobuf:"bytes,6,opt,name=default_soa_parameters,json=defaultSoaParameters,proto3,oneof" json:"default_soa_parameters,omitempty"`
}
type PrimaryDNSCreateSpecType_SoaParameters struct {
	SoaParameters *SOARecordParameterConfig `protobuf:"bytes,7,opt,name=soa_parameters,json=soaParameters,proto3,oneof" json:"soa_parameters,omitempty"`
}

func (*PrimaryDNSCreateSpecType_DefaultSoaParameters) isPrimaryDNSCreateSpecType_SoaRecordParametersChoice() {
}
func (*PrimaryDNSCreateSpecType_SoaParameters) isPrimaryDNSCreateSpecType_SoaRecordParametersChoice() {
}

func (m *PrimaryDNSCreateSpecType) GetSoaRecordParametersChoice() isPrimaryDNSCreateSpecType_SoaRecordParametersChoice {
	if m != nil {
		return m.SoaRecordParametersChoice
	}
	return nil
}

func (m *PrimaryDNSCreateSpecType) GetDefaultSoaParameters() *schema.Empty {
	if x, ok := m.GetSoaRecordParametersChoice().(*PrimaryDNSCreateSpecType_DefaultSoaParameters); ok {
		return x.DefaultSoaParameters
	}
	return nil
}

func (m *PrimaryDNSCreateSpecType) GetSoaParameters() *SOARecordParameterConfig {
	if x, ok := m.GetSoaRecordParametersChoice().(*PrimaryDNSCreateSpecType_SoaParameters); ok {
		return x.SoaParameters
	}
	return nil
}

func (m *PrimaryDNSCreateSpecType) GetRrSetGroup() []*RRSetGroup {
	if m != nil {
		return m.RrSetGroup
	}
	return nil
}

func (m *PrimaryDNSCreateSpecType) GetDefaultRrSetGroup() []*RRSet {
	if m != nil {
		return m.DefaultRrSetGroup
	}
	return nil
}

func (m *PrimaryDNSCreateSpecType) GetDnssecMode() *DNSSECMode {
	if m != nil {
		return m.DnssecMode
	}
	return nil
}

func (m *PrimaryDNSCreateSpecType) GetAllowHttpLbManagedRecords() bool {
	if m != nil {
		return m.AllowHttpLbManagedRecords
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PrimaryDNSCreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PrimaryDNSCreateSpecType_DefaultSoaParameters)(nil),
		(*PrimaryDNSCreateSpecType_SoaParameters)(nil),
	}
}

// SecondaryDNSCreateSpecType
//
// x-displayName: "SecondaryDNSCreateSpecType"
type SecondaryDNSCreateSpecType struct {
	// List of zone primary servers
	//
	// x-displayName: "DNS primary server IP"
	// x-example: "8.8.8.8"
	// x-required
	PrimaryServers []string `protobuf:"bytes,5,rep,name=primary_servers,json=primaryServers,proto3" json:"primary_servers,omitempty"`
	// TSIG Key Name
	//
	// x-displayName: "TSIG key name"
	// TSIG key name as used in TSIG protocol extension
	// x-example: "value"
	TsigKeyName string `protobuf:"bytes,6,opt,name=tsig_key_name,json=tsigKeyName,proto3" json:"tsig_key_name,omitempty"`
	// TSIG Key Algorithm
	//
	// x-displayName: "TSIG Key algorithm"
	// TSIG key value must be compatible with the specified algorithm
	TsigKeyAlgorithm TSIGKeyAlgorithm `protobuf:"varint,7,opt,name=tsig_key_algorithm,json=tsigKeyAlgorithm,proto3,enum=ves.io.schema.dns_zone.TSIGKeyAlgorithm" json:"tsig_key_algorithm,omitempty"`
	// TSIG Key value
	//
	// x-displayName: "TSIG key value in base 64 format"
	TsigKeyValue *schema.SecretType `protobuf:"bytes,8,opt,name=tsig_key_value,json=tsigKeyValue,proto3" json:"tsig_key_value,omitempty"`
}

func (m *SecondaryDNSCreateSpecType) Reset()      { *m = SecondaryDNSCreateSpecType{} }
func (*SecondaryDNSCreateSpecType) ProtoMessage() {}
func (*SecondaryDNSCreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{35}
}
func (m *SecondaryDNSCreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecondaryDNSCreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SecondaryDNSCreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecondaryDNSCreateSpecType.Merge(m, src)
}
func (m *SecondaryDNSCreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *SecondaryDNSCreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_SecondaryDNSCreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_SecondaryDNSCreateSpecType proto.InternalMessageInfo

func (m *SecondaryDNSCreateSpecType) GetPrimaryServers() []string {
	if m != nil {
		return m.PrimaryServers
	}
	return nil
}

func (m *SecondaryDNSCreateSpecType) GetTsigKeyName() string {
	if m != nil {
		return m.TsigKeyName
	}
	return ""
}

func (m *SecondaryDNSCreateSpecType) GetTsigKeyAlgorithm() TSIGKeyAlgorithm {
	if m != nil {
		return m.TsigKeyAlgorithm
	}
	return HMAC_MD5
}

func (m *SecondaryDNSCreateSpecType) GetTsigKeyValue() *schema.SecretType {
	if m != nil {
		return m.TsigKeyValue
	}
	return nil
}

// Create DNS Zone
//
// x-displayName: "Create DNS Zone"
// Create DNS Zone in a given namespace. If one already exist it will give a error.
type CreateSpecType struct {
	// Types that are valid to be assigned to DnsType:
	//	*CreateSpecType_Primary
	//	*CreateSpecType_Secondary
	DnsType isCreateSpecType_DnsType `protobuf_oneof:"dns_type"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{36}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_DnsType interface {
	isCreateSpecType_DnsType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_Primary struct {
	Primary *PrimaryDNSCreateSpecType `protobuf:"bytes,3,opt,name=primary,proto3,oneof" json:"primary,omitempty"`
}
type CreateSpecType_Secondary struct {
	Secondary *SecondaryDNSCreateSpecType `protobuf:"bytes,4,opt,name=secondary,proto3,oneof" json:"secondary,omitempty"`
}

func (*CreateSpecType_Primary) isCreateSpecType_DnsType()   {}
func (*CreateSpecType_Secondary) isCreateSpecType_DnsType() {}

func (m *CreateSpecType) GetDnsType() isCreateSpecType_DnsType {
	if m != nil {
		return m.DnsType
	}
	return nil
}

func (m *CreateSpecType) GetPrimary() *PrimaryDNSCreateSpecType {
	if x, ok := m.GetDnsType().(*CreateSpecType_Primary); ok {
		return x.Primary
	}
	return nil
}

func (m *CreateSpecType) GetSecondary() *SecondaryDNSCreateSpecType {
	if x, ok := m.GetDnsType().(*CreateSpecType_Secondary); ok {
		return x.Secondary
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_Primary)(nil),
		(*CreateSpecType_Secondary)(nil),
	}
}

// Replace DNS Zone
//
// x-displayName: "Replace DNS Zone"
// Replace DNS Zone in a given namespace.
type ReplaceSpecType struct {
	// Types that are valid to be assigned to DnsType:
	//	*ReplaceSpecType_Primary
	//	*ReplaceSpecType_Secondary
	DnsType isReplaceSpecType_DnsType `protobuf_oneof:"dns_type"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{37}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_DnsType interface {
	isReplaceSpecType_DnsType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_Primary struct {
	Primary *PrimaryDNSCreateSpecType `protobuf:"bytes,3,opt,name=primary,proto3,oneof" json:"primary,omitempty"`
}
type ReplaceSpecType_Secondary struct {
	Secondary *SecondaryDNSCreateSpecType `protobuf:"bytes,4,opt,name=secondary,proto3,oneof" json:"secondary,omitempty"`
}

func (*ReplaceSpecType_Primary) isReplaceSpecType_DnsType()   {}
func (*ReplaceSpecType_Secondary) isReplaceSpecType_DnsType() {}

func (m *ReplaceSpecType) GetDnsType() isReplaceSpecType_DnsType {
	if m != nil {
		return m.DnsType
	}
	return nil
}

func (m *ReplaceSpecType) GetPrimary() *PrimaryDNSCreateSpecType {
	if x, ok := m.GetDnsType().(*ReplaceSpecType_Primary); ok {
		return x.Primary
	}
	return nil
}

func (m *ReplaceSpecType) GetSecondary() *SecondaryDNSCreateSpecType {
	if x, ok := m.GetDnsType().(*ReplaceSpecType_Secondary); ok {
		return x.Secondary
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_Primary)(nil),
		(*ReplaceSpecType_Secondary)(nil),
	}
}

// PrimaryDNSGetSpecType
//
// x-displayName: "PrimaryDNSGetSpecType"
type PrimaryDNSGetSpecType struct {
	// Types that are valid to be assigned to SoaRecordParametersChoice:
	//	*PrimaryDNSGetSpecType_DefaultSoaParameters
	//	*PrimaryDNSGetSpecType_SoaParameters
	SoaRecordParametersChoice isPrimaryDNSGetSpecType_SoaRecordParametersChoice `protobuf_oneof:"soa_record_parameters_choice"`
	RrSetGroup                []*RRSetGroup                                     `protobuf:"bytes,8,rep,name=rr_set_group,json=rrSetGroup,proto3" json:"rr_set_group,omitempty"`
	Serial                    uint32                                            `protobuf:"varint,9,opt,name=serial,proto3" json:"serial,omitempty"`
	Admin                     string                                            `protobuf:"bytes,10,opt,name=admin,proto3" json:"admin,omitempty"`
	DefaultRrSetGroup         []*RRSet                                          `protobuf:"bytes,11,rep,name=default_rr_set_group,json=defaultRrSetGroup,proto3" json:"default_rr_set_group,omitempty"`
	DnssecMode                *DNSSECMode                                       `protobuf:"bytes,12,opt,name=dnssec_mode,json=dnssecMode,proto3" json:"dnssec_mode,omitempty"`
	AllowHttpLbManagedRecords bool                                              `protobuf:"varint,13,opt,name=allow_http_lb_managed_records,json=allowHttpLbManagedRecords,proto3" json:"allow_http_lb_managed_records,omitempty"`
}

func (m *PrimaryDNSGetSpecType) Reset()      { *m = PrimaryDNSGetSpecType{} }
func (*PrimaryDNSGetSpecType) ProtoMessage() {}
func (*PrimaryDNSGetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{38}
}
func (m *PrimaryDNSGetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimaryDNSGetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PrimaryDNSGetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimaryDNSGetSpecType.Merge(m, src)
}
func (m *PrimaryDNSGetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *PrimaryDNSGetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimaryDNSGetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_PrimaryDNSGetSpecType proto.InternalMessageInfo

type isPrimaryDNSGetSpecType_SoaRecordParametersChoice interface {
	isPrimaryDNSGetSpecType_SoaRecordParametersChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PrimaryDNSGetSpecType_DefaultSoaParameters struct {
	DefaultSoaParameters *schema.Empty `protobuf:"bytes,6,opt,name=default_soa_parameters,json=defaultSoaParameters,proto3,oneof" json:"default_soa_parameters,omitempty"`
}
type PrimaryDNSGetSpecType_SoaParameters struct {
	SoaParameters *SOARecordParameterConfig `protobuf:"bytes,7,opt,name=soa_parameters,json=soaParameters,proto3,oneof" json:"soa_parameters,omitempty"`
}

func (*PrimaryDNSGetSpecType_DefaultSoaParameters) isPrimaryDNSGetSpecType_SoaRecordParametersChoice() {
}
func (*PrimaryDNSGetSpecType_SoaParameters) isPrimaryDNSGetSpecType_SoaRecordParametersChoice() {}

func (m *PrimaryDNSGetSpecType) GetSoaRecordParametersChoice() isPrimaryDNSGetSpecType_SoaRecordParametersChoice {
	if m != nil {
		return m.SoaRecordParametersChoice
	}
	return nil
}

func (m *PrimaryDNSGetSpecType) GetDefaultSoaParameters() *schema.Empty {
	if x, ok := m.GetSoaRecordParametersChoice().(*PrimaryDNSGetSpecType_DefaultSoaParameters); ok {
		return x.DefaultSoaParameters
	}
	return nil
}

func (m *PrimaryDNSGetSpecType) GetSoaParameters() *SOARecordParameterConfig {
	if x, ok := m.GetSoaRecordParametersChoice().(*PrimaryDNSGetSpecType_SoaParameters); ok {
		return x.SoaParameters
	}
	return nil
}

func (m *PrimaryDNSGetSpecType) GetRrSetGroup() []*RRSetGroup {
	if m != nil {
		return m.RrSetGroup
	}
	return nil
}

func (m *PrimaryDNSGetSpecType) GetSerial() uint32 {
	if m != nil {
		return m.Serial
	}
	return 0
}

func (m *PrimaryDNSGetSpecType) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *PrimaryDNSGetSpecType) GetDefaultRrSetGroup() []*RRSet {
	if m != nil {
		return m.DefaultRrSetGroup
	}
	return nil
}

func (m *PrimaryDNSGetSpecType) GetDnssecMode() *DNSSECMode {
	if m != nil {
		return m.DnssecMode
	}
	return nil
}

func (m *PrimaryDNSGetSpecType) GetAllowHttpLbManagedRecords() bool {
	if m != nil {
		return m.AllowHttpLbManagedRecords
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PrimaryDNSGetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PrimaryDNSGetSpecType_DefaultSoaParameters)(nil),
		(*PrimaryDNSGetSpecType_SoaParameters)(nil),
	}
}

// SecondaryDNSGetSpecType
//
// x-displayName: "SecondaryDNSGetSpecType"
type SecondaryDNSGetSpecType struct {
	PrimaryServers    []string           `protobuf:"bytes,5,rep,name=primary_servers,json=primaryServers,proto3" json:"primary_servers,omitempty"`
	TsigKeyName       string             `protobuf:"bytes,6,opt,name=tsig_key_name,json=tsigKeyName,proto3" json:"tsig_key_name,omitempty"`
	TsigKeyAlgorithm  TSIGKeyAlgorithm   `protobuf:"varint,7,opt,name=tsig_key_algorithm,json=tsigKeyAlgorithm,proto3,enum=ves.io.schema.dns_zone.TSIGKeyAlgorithm" json:"tsig_key_algorithm,omitempty"`
	TsigKeyValue      *schema.SecretType `protobuf:"bytes,8,opt,name=tsig_key_value,json=tsigKeyValue,proto3" json:"tsig_key_value,omitempty"`
	LastAxfrTimestamp *types.Timestamp   `protobuf:"bytes,9,opt,name=last_axfr_timestamp,json=lastAxfrTimestamp,proto3" json:"last_axfr_timestamp,omitempty"`
	ZoneFile          string             `protobuf:"bytes,10,opt,name=zone_file,json=zoneFile,proto3" json:"zone_file,omitempty"`
}

func (m *SecondaryDNSGetSpecType) Reset()      { *m = SecondaryDNSGetSpecType{} }
func (*SecondaryDNSGetSpecType) ProtoMessage() {}
func (*SecondaryDNSGetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{39}
}
func (m *SecondaryDNSGetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecondaryDNSGetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SecondaryDNSGetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecondaryDNSGetSpecType.Merge(m, src)
}
func (m *SecondaryDNSGetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *SecondaryDNSGetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_SecondaryDNSGetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_SecondaryDNSGetSpecType proto.InternalMessageInfo

func (m *SecondaryDNSGetSpecType) GetPrimaryServers() []string {
	if m != nil {
		return m.PrimaryServers
	}
	return nil
}

func (m *SecondaryDNSGetSpecType) GetTsigKeyName() string {
	if m != nil {
		return m.TsigKeyName
	}
	return ""
}

func (m *SecondaryDNSGetSpecType) GetTsigKeyAlgorithm() TSIGKeyAlgorithm {
	if m != nil {
		return m.TsigKeyAlgorithm
	}
	return HMAC_MD5
}

func (m *SecondaryDNSGetSpecType) GetTsigKeyValue() *schema.SecretType {
	if m != nil {
		return m.TsigKeyValue
	}
	return nil
}

func (m *SecondaryDNSGetSpecType) GetLastAxfrTimestamp() *types.Timestamp {
	if m != nil {
		return m.LastAxfrTimestamp
	}
	return nil
}

func (m *SecondaryDNSGetSpecType) GetZoneFile() string {
	if m != nil {
		return m.ZoneFile
	}
	return ""
}

// Get DNS Zone
//
// x-displayName: "Get DNS Zone"
// Get DNS Zone details.
type GetSpecType struct {
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"` // Deprecated: Do not use.
	// Types that are valid to be assigned to DnsType:
	//	*GetSpecType_Primary
	//	*GetSpecType_Secondary
	DnsType         isGetSpecType_DnsType `protobuf_oneof:"dns_type"`
	NumOfDnsRecords uint32                `protobuf:"varint,7,opt,name=num_of_dns_records,json=numOfDnsRecords,proto3" json:"num_of_dns_records,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad554e1b0b937441, []int{40}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_DnsType interface {
	isGetSpecType_DnsType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_Primary struct {
	Primary *PrimaryDNSGetSpecType `protobuf:"bytes,3,opt,name=primary,proto3,oneof" json:"primary,omitempty"`
}
type GetSpecType_Secondary struct {
	Secondary *SecondaryDNSGetSpecType `protobuf:"bytes,4,opt,name=secondary,proto3,oneof" json:"secondary,omitempty"`
}

func (*GetSpecType_Primary) isGetSpecType_DnsType()   {}
func (*GetSpecType_Secondary) isGetSpecType_DnsType() {}

func (m *GetSpecType) GetDnsType() isGetSpecType_DnsType {
	if m != nil {
		return m.DnsType
	}
	return nil
}

// Deprecated: Do not use.
func (m *GetSpecType) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *GetSpecType) GetPrimary() *PrimaryDNSGetSpecType {
	if x, ok := m.GetDnsType().(*GetSpecType_Primary); ok {
		return x.Primary
	}
	return nil
}

func (m *GetSpecType) GetSecondary() *SecondaryDNSGetSpecType {
	if x, ok := m.GetDnsType().(*GetSpecType_Secondary); ok {
		return x.Secondary
	}
	return nil
}

func (m *GetSpecType) GetNumOfDnsRecords() uint32 {
	if m != nil {
		return m.NumOfDnsRecords
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_Primary)(nil),
		(*GetSpecType_Secondary)(nil),
	}
}

func init() {
	proto.RegisterEnum("ves.io.schema.dns_zone.DSKeyAlgorithm", DSKeyAlgorithm_name, DSKeyAlgorithm_value)
	golang_proto.RegisterEnum("ves.io.schema.dns_zone.DSKeyAlgorithm", DSKeyAlgorithm_name, DSKeyAlgorithm_value)
	proto.RegisterEnum("ves.io.schema.dns_zone.AFSDBRecordSubtype", AFSDBRecordSubtype_name, AFSDBRecordSubtype_value)
	golang_proto.RegisterEnum("ves.io.schema.dns_zone.AFSDBRecordSubtype", AFSDBRecordSubtype_name, AFSDBRecordSubtype_value)
	proto.RegisterEnum("ves.io.schema.dns_zone.LatitudeHemisphere", LatitudeHemisphere_name, LatitudeHemisphere_value)
	golang_proto.RegisterEnum("ves.io.schema.dns_zone.LatitudeHemisphere", LatitudeHemisphere_name, LatitudeHemisphere_value)
	proto.RegisterEnum("ves.io.schema.dns_zone.LongitudeHemisphere", LongitudeHemisphere_name, LongitudeHemisphere_value)
	golang_proto.RegisterEnum("ves.io.schema.dns_zone.LongitudeHemisphere", LongitudeHemisphere_name, LongitudeHemisphere_value)
	proto.RegisterEnum("ves.io.schema.dns_zone.TSIGKeyAlgorithm", TSIGKeyAlgorithm_name, TSIGKeyAlgorithm_value)
	golang_proto.RegisterEnum("ves.io.schema.dns_zone.TSIGKeyAlgorithm", TSIGKeyAlgorithm_name, TSIGKeyAlgorithm_value)
	proto.RegisterType((*PrimaryDNSConfig)(nil), "ves.io.schema.dns_zone.PrimaryDNSConfig")
	golang_proto.RegisterType((*PrimaryDNSConfig)(nil), "ves.io.schema.dns_zone.PrimaryDNSConfig")
	proto.RegisterType((*SOARecordParameterConfig)(nil), "ves.io.schema.dns_zone.SOARecordParameterConfig")
	golang_proto.RegisterType((*SOARecordParameterConfig)(nil), "ves.io.schema.dns_zone.SOARecordParameterConfig")
	proto.RegisterType((*RRSetGroup)(nil), "ves.io.schema.dns_zone.RRSetGroup")
	golang_proto.RegisterType((*RRSetGroup)(nil), "ves.io.schema.dns_zone.RRSetGroup")
	proto.RegisterType((*RRSet)(nil), "ves.io.schema.dns_zone.RRSet")
	golang_proto.RegisterType((*RRSet)(nil), "ves.io.schema.dns_zone.RRSet")
	proto.RegisterType((*DNSAResourceRecord)(nil), "ves.io.schema.dns_zone.DNSAResourceRecord")
	golang_proto.RegisterType((*DNSAResourceRecord)(nil), "ves.io.schema.dns_zone.DNSAResourceRecord")
	proto.RegisterType((*DNSAAAAResourceRecord)(nil), "ves.io.schema.dns_zone.DNSAAAAResourceRecord")
	golang_proto.RegisterType((*DNSAAAAResourceRecord)(nil), "ves.io.schema.dns_zone.DNSAAAAResourceRecord")
	proto.RegisterType((*DNSAliasResourceRecord)(nil), "ves.io.schema.dns_zone.DNSAliasResourceRecord")
	golang_proto.RegisterType((*DNSAliasResourceRecord)(nil), "ves.io.schema.dns_zone.DNSAliasResourceRecord")
	proto.RegisterType((*CertificationAuthorityAuthorization)(nil), "ves.io.schema.dns_zone.CertificationAuthorityAuthorization")
	golang_proto.RegisterType((*CertificationAuthorityAuthorization)(nil), "ves.io.schema.dns_zone.CertificationAuthorityAuthorization")
	proto.RegisterType((*DNSCAAResourceRecord)(nil), "ves.io.schema.dns_zone.DNSCAAResourceRecord")
	golang_proto.RegisterType((*DNSCAAResourceRecord)(nil), "ves.io.schema.dns_zone.DNSCAAResourceRecord")
	proto.RegisterType((*DNSCNAMEResourceRecord)(nil), "ves.io.schema.dns_zone.DNSCNAMEResourceRecord")
	golang_proto.RegisterType((*DNSCNAMEResourceRecord)(nil), "ves.io.schema.dns_zone.DNSCNAMEResourceRecord")
	proto.RegisterType((*MailExchanger)(nil), "ves.io.schema.dns_zone.MailExchanger")
	golang_proto.RegisterType((*MailExchanger)(nil), "ves.io.schema.dns_zone.MailExchanger")
	proto.RegisterType((*DNSMXResourceRecord)(nil), "ves.io.schema.dns_zone.DNSMXResourceRecord")
	golang_proto.RegisterType((*DNSMXResourceRecord)(nil), "ves.io.schema.dns_zone.DNSMXResourceRecord")
	proto.RegisterType((*DNSNSResourceRecord)(nil), "ves.io.schema.dns_zone.DNSNSResourceRecord")
	golang_proto.RegisterType((*DNSNSResourceRecord)(nil), "ves.io.schema.dns_zone.DNSNSResourceRecord")
	proto.RegisterType((*DNSPTRResourceRecord)(nil), "ves.io.schema.dns_zone.DNSPTRResourceRecord")
	golang_proto.RegisterType((*DNSPTRResourceRecord)(nil), "ves.io.schema.dns_zone.DNSPTRResourceRecord")
	proto.RegisterType((*DNSSRVResourceRecord)(nil), "ves.io.schema.dns_zone.DNSSRVResourceRecord")
	golang_proto.RegisterType((*DNSSRVResourceRecord)(nil), "ves.io.schema.dns_zone.DNSSRVResourceRecord")
	proto.RegisterType((*SRVService)(nil), "ves.io.schema.dns_zone.SRVService")
	golang_proto.RegisterType((*SRVService)(nil), "ves.io.schema.dns_zone.SRVService")
	proto.RegisterType((*DNSTXTResourceRecord)(nil), "ves.io.schema.dns_zone.DNSTXTResourceRecord")
	golang_proto.RegisterType((*DNSTXTResourceRecord)(nil), "ves.io.schema.dns_zone.DNSTXTResourceRecord")
	proto.RegisterType((*DNSLBResourceRecord)(nil), "ves.io.schema.dns_zone.DNSLBResourceRecord")
	golang_proto.RegisterType((*DNSLBResourceRecord)(nil), "ves.io.schema.dns_zone.DNSLBResourceRecord")
	proto.RegisterType((*DNSNAPTRResourceRecord)(nil), "ves.io.schema.dns_zone.DNSNAPTRResourceRecord")
	golang_proto.RegisterType((*DNSNAPTRResourceRecord)(nil), "ves.io.schema.dns_zone.DNSNAPTRResourceRecord")
	proto.RegisterType((*NAPTRValue)(nil), "ves.io.schema.dns_zone.NAPTRValue")
	golang_proto.RegisterType((*NAPTRValue)(nil), "ves.io.schema.dns_zone.NAPTRValue")
	proto.RegisterType((*DNSDSRecord)(nil), "ves.io.schema.dns_zone.DNSDSRecord")
	golang_proto.RegisterType((*DNSDSRecord)(nil), "ves.io.schema.dns_zone.DNSDSRecord")
	proto.RegisterType((*DNSCDSRecord)(nil), "ves.io.schema.dns_zone.DNSCDSRecord")
	golang_proto.RegisterType((*DNSCDSRecord)(nil), "ves.io.schema.dns_zone.DNSCDSRecord")
	proto.RegisterType((*DSRecordValue)(nil), "ves.io.schema.dns_zone.DSRecordValue")
	golang_proto.RegisterType((*DSRecordValue)(nil), "ves.io.schema.dns_zone.DSRecordValue")
	proto.RegisterType((*SHA1Digest)(nil), "ves.io.schema.dns_zone.SHA1Digest")
	golang_proto.RegisterType((*SHA1Digest)(nil), "ves.io.schema.dns_zone.SHA1Digest")
	proto.RegisterType((*SHA256Digest)(nil), "ves.io.schema.dns_zone.SHA256Digest")
	golang_proto.RegisterType((*SHA256Digest)(nil), "ves.io.schema.dns_zone.SHA256Digest")
	proto.RegisterType((*SHA384Digest)(nil), "ves.io.schema.dns_zone.SHA384Digest")
	golang_proto.RegisterType((*SHA384Digest)(nil), "ves.io.schema.dns_zone.SHA384Digest")
	proto.RegisterType((*DNSAFSDBRecord)(nil), "ves.io.schema.dns_zone.DNSAFSDBRecord")
	golang_proto.RegisterType((*DNSAFSDBRecord)(nil), "ves.io.schema.dns_zone.DNSAFSDBRecord")
	proto.RegisterType((*AFSDBRecordValue)(nil), "ves.io.schema.dns_zone.AFSDBRecordValue")
	golang_proto.RegisterType((*AFSDBRecordValue)(nil), "ves.io.schema.dns_zone.AFSDBRecordValue")
	proto.RegisterType((*DNSEUI48ResourceRecord)(nil), "ves.io.schema.dns_zone.DNSEUI48ResourceRecord")
	golang_proto.RegisterType((*DNSEUI48ResourceRecord)(nil), "ves.io.schema.dns_zone.DNSEUI48ResourceRecord")
	proto.RegisterType((*DNSEUI64ResourceRecord)(nil), "ves.io.schema.dns_zone.DNSEUI64ResourceRecord")
	golang_proto.RegisterType((*DNSEUI64ResourceRecord)(nil), "ves.io.schema.dns_zone.DNSEUI64ResourceRecord")
	proto.RegisterType((*DNSLOCResourceRecord)(nil), "ves.io.schema.dns_zone.DNSLOCResourceRecord")
	golang_proto.RegisterType((*DNSLOCResourceRecord)(nil), "ves.io.schema.dns_zone.DNSLOCResourceRecord")
	proto.RegisterType((*LOCValue)(nil), "ves.io.schema.dns_zone.LOCValue")
	golang_proto.RegisterType((*LOCValue)(nil), "ves.io.schema.dns_zone.LOCValue")
	proto.RegisterType((*SecondaryDNSConfig)(nil), "ves.io.schema.dns_zone.SecondaryDNSConfig")
	golang_proto.RegisterType((*SecondaryDNSConfig)(nil), "ves.io.schema.dns_zone.SecondaryDNSConfig")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.dns_zone.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.dns_zone.GlobalSpecType")
	proto.RegisterType((*PrimaryDNSCreateSpecType)(nil), "ves.io.schema.dns_zone.PrimaryDNSCreateSpecType")
	golang_proto.RegisterType((*PrimaryDNSCreateSpecType)(nil), "ves.io.schema.dns_zone.PrimaryDNSCreateSpecType")
	proto.RegisterType((*SecondaryDNSCreateSpecType)(nil), "ves.io.schema.dns_zone.SecondaryDNSCreateSpecType")
	golang_proto.RegisterType((*SecondaryDNSCreateSpecType)(nil), "ves.io.schema.dns_zone.SecondaryDNSCreateSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.dns_zone.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.dns_zone.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.dns_zone.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.dns_zone.ReplaceSpecType")
	proto.RegisterType((*PrimaryDNSGetSpecType)(nil), "ves.io.schema.dns_zone.PrimaryDNSGetSpecType")
	golang_proto.RegisterType((*PrimaryDNSGetSpecType)(nil), "ves.io.schema.dns_zone.PrimaryDNSGetSpecType")
	proto.RegisterType((*SecondaryDNSGetSpecType)(nil), "ves.io.schema.dns_zone.SecondaryDNSGetSpecType")
	golang_proto.RegisterType((*SecondaryDNSGetSpecType)(nil), "ves.io.schema.dns_zone.SecondaryDNSGetSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.dns_zone.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.dns_zone.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/dns_zone/types.proto", fileDescriptor_ad554e1b0b937441)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/dns_zone/types.proto", fileDescriptor_ad554e1b0b937441)
}

var fileDescriptor_ad554e1b0b937441 = []byte{
	// 4689 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5b, 0x5d, 0x6c, 0x1b, 0x57,
	0x76, 0xd6, 0xe5, 0x9f, 0xc8, 0x43, 0xfd, 0x8c, 0xae, 0x64, 0x8b, 0xa6, 0x6d, 0x85, 0xa1, 0xbd,
	0x59, 0x8a, 0x26, 0x29, 0x71, 0x24, 0xca, 0xb2, 0xdc, 0xb5, 0x4d, 0x8a, 0x72, 0x6c, 0x45, 0x7f,
	0x1d, 0x2a, 0xde, 0xc0, 0x8e, 0xcc, 0x1d, 0x91, 0x57, 0x14, 0xbb, 0x24, 0x87, 0x98, 0x19, 0x2a,
	0x52, 0x2c, 0x01, 0x46, 0xfa, 0x52, 0x14, 0x28, 0x10, 0xe4, 0xa9, 0x40, 0x8b, 0x02, 0x05, 0xb6,
	0x40, 0xdb, 0x7d, 0x29, 0xda, 0x6d, 0xd1, 0x96, 0x41, 0x61, 0xb8, 0x0f, 0x5d, 0xa8, 0x05, 0xea,
	0xa2, 0x40, 0x1b, 0xb8, 0x7d, 0x68, 0x14, 0xa0, 0x48, 0x8b, 0x02, 0x0d, 0x52, 0xa0, 0x28, 0x52,
	0x60, 0x5d, 0xcc, 0x9d, 0x7f, 0xfe, 0x48, 0x4a, 0x17, 0xce, 0x36, 0x45, 0x9e, 0xc4, 0x39, 0xf7,
	0x9c, 0x6f, 0xce, 0xfd, 0xce, 0x39, 0xf7, 0x6f, 0xae, 0x20, 0xbc, 0x43, 0xa4, 0x44, 0x59, 0x98,
	0x90, 0x0a, 0xdb, 0xa4, 0xca, 0x4f, 0x14, 0x6b, 0x52, 0xfe, 0x5d, 0xa1, 0x46, 0x26, 0xe4, 0xbd,
	0x3a, 0x91, 0x12, 0x75, 0x51, 0x90, 0x05, 0x7c, 0x56, 0xd5, 0x49, 0xa8, 0x3a, 0x09, 0x5d, 0x27,
	0x18, 0x2f, 0x95, 0xe5, 0xed, 0xc6, 0x66, 0xa2, 0x20, 0x54, 0x27, 0x4a, 0x42, 0x49, 0x98, 0xa0,
	0xea, 0x9b, 0x8d, 0x2d, 0xfa, 0x44, 0x1f, 0xe8, 0x2f, 0x15, 0x26, 0xf8, 0x4a, 0x49, 0x10, 0x4a,
	0x15, 0x62, 0x6a, 0xc9, 0xe5, 0x2a, 0x91, 0x64, 0xbe, 0x5a, 0xd7, 0x14, 0x2e, 0x75, 0xf1, 0xa5,
	0x58, 0x93, 0x24, 0x52, 0xd0, 0x94, 0x46, 0xed, 0x4a, 0x35, 0x22, 0x6b, 0x0d, 0xe7, 0xed, 0x0d,
	0x42, 0x5d, 0x2e, 0x0b, 0x35, 0xad, 0x0b, 0xc1, 0x73, 0xf6, 0x46, 0x4b, 0xef, 0x82, 0x17, 0xec,
	0x4d, 0x3b, 0x7c, 0xa5, 0x5c, 0xe4, 0x65, 0xa2, 0xb5, 0x86, 0x5a, 0x5a, 0xcb, 0xe4, 0x9d, 0xbc,
	0x1d, 0xfa, 0x95, 0x76, 0x0d, 0xc9, 0xfa, 0x82, 0xf0, 0x0f, 0xdd, 0xc0, 0xac, 0x89, 0xe5, 0x2a,
	0x2f, 0xee, 0x65, 0x57, 0x72, 0xf3, 0x42, 0x6d, 0xab, 0x5c, 0xc2, 0x4b, 0x70, 0xb6, 0x48, 0xb6,
	0xf8, 0x46, 0x45, 0xce, 0x4b, 0x02, 0x9f, 0xaf, 0xf3, 0x22, 0x5f, 0x25, 0x32, 0x11, 0xa5, 0x80,
	0x27, 0x84, 0x22, 0x7e, 0x76, 0x24, 0x61, 0x27, 0x7d, 0xa1, 0x5a, 0x97, 0xf7, 0xee, 0xf4, 0x70,
	0x23, 0x9a, 0x55, 0x4e, 0xe0, 0xd7, 0x0c, 0x1b, 0x9c, 0x87, 0x81, 0x16, 0x94, 0x5e, 0x8a, 0x32,
	0x99, 0xe8, 0x1c, 0xba, 0x44, 0x6e, 0x35, 0xcd, 0x91, 0x82, 0x20, 0x16, 0x0d, 0x10, 0xd5, 0xaf,
	0x8c, 0xeb, 0x59, 0x13, 0xa1, 0x3b, 0x3d, 0x5c, 0xbf, 0x64, 0x7b, 0xc1, 0x7d, 0xe8, 0x13, 0xc5,
	0xbc, 0x44, 0xe4, 0x7c, 0x49, 0x14, 0x1a, 0xf5, 0x80, 0x37, 0xe4, 0x8c, 0xf8, 0xd9, 0x70, 0x37,
	0x78, 0x8e, 0xcb, 0x11, 0xf9, 0x75, 0x45, 0x33, 0x33, 0xf2, 0xa7, 0xff, 0xf2, 0xc4, 0xe9, 0xfe,
	0x00, 0x39, 0x18, 0x56, 0xff, 0x35, 0x89, 0x38, 0x10, 0x45, 0x5d, 0x03, 0x9f, 0x05, 0x8f, 0x44,
	0xc4, 0x32, 0x5f, 0x09, 0xf8, 0x42, 0x28, 0xd2, 0xcf, 0x69, 0x4f, 0x78, 0x04, 0xdc, 0x7c, 0xb1,
	0x5a, 0xae, 0x05, 0x20, 0x84, 0x22, 0x3e, 0x4e, 0x7d, 0xc0, 0x0f, 0x40, 0xa7, 0x20, 0x6f, 0xf3,
	0xc8, 0x4f, 0x3d, 0xba, 0x78, 0xac, 0x47, 0x19, 0xbf, 0xe2, 0x82, 0xe7, 0x03, 0xe4, 0x64, 0xde,
	0x5f, 0xe1, 0x86, 0x34, 0x1c, 0xce, 0x74, 0x65, 0x1e, 0xfc, 0x6a, 0xb2, 0xe5, 0xab, 0x42, 0x91,
	0x04, 0xfa, 0x28, 0x89, 0x5d, 0x7b, 0x99, 0x5d, 0xc9, 0xe5, 0x16, 0xe6, 0x97, 0x85, 0x22, 0xe1,
	0x40, 0x35, 0x53, 0x7e, 0xe3, 0x5b, 0x70, 0x91, 0xaf, 0x54, 0x84, 0x77, 0xf2, 0xdb, 0xb2, 0x5c,
	0xcf, 0x57, 0x36, 0xf3, 0x55, 0xbe, 0xc6, 0x97, 0x48, 0x31, 0x2f, 0x52, 0xc6, 0xa5, 0x40, 0x7f,
	0x08, 0x45, 0xbc, 0xdc, 0x39, 0xaa, 0x74, 0x47, 0x96, 0xeb, 0x4b, 0x9b, 0xcb, 0xaa, 0x86, 0x1a,
	0x12, 0x69, 0xee, 0xca, 0xe7, 0x37, 0xfa, 0x52, 0xb1, 0x24, 0x1b, 0x4b, 0x4e, 0xc5, 0x92, 0xc9,
	0xd8, 0xec, 0xd3, 0x26, 0x0a, 0xc0, 0x59, 0x18, 0xca, 0xad, 0xa6, 0x43, 0x6a, 0x9c, 0x1a, 0x22,
	0xaf, 0xe4, 0x20, 0x46, 0xa9, 0xcc, 0x04, 0x5c, 0x50, 0x62, 0xaf, 0x82, 0x5b, 0x52, 0x20, 0x5f,
	0xd8, 0x16, 0xca, 0x05, 0x82, 0x07, 0x9f, 0x34, 0x91, 0xe7, 0x59, 0x13, 0xb9, 0x8f, 0x9a, 0xc8,
	0x39, 0x13, 0xbb, 0xba, 0xe8, 0xf2, 0x22, 0xc6, 0xb1, 0xe8, 0xf2, 0x3a, 0x18, 0xe7, 0xa2, 0xcb,
	0xeb, 0x64, 0x5c, 0x8b, 0x2e, 0xaf, 0x8b, 0x71, 0x2f, 0xba, 0xbc, 0x6e, 0xc6, 0x13, 0xfe, 0x0f,
	0x07, 0x04, 0xba, 0x65, 0x07, 0xbe, 0x0e, 0xbd, 0x22, 0xd9, 0x12, 0x89, 0xb4, 0x1d, 0x40, 0x4a,
	0xac, 0x32, 0xaf, 0x3e, 0x6f, 0x22, 0xf7, 0xec, 0xcc, 0xf4, 0xe4, 0xe4, 0x7f, 0x35, 0x51, 0xcf,
	0x2f, 0x7d, 0x88, 0x90, 0xc2, 0xb0, 0x3f, 0xea, 0x0b, 0xbc, 0x78, 0xf1, 0xe2, 0x45, 0x6f, 0xe4,
	0xfd, 0x0b, 0x9c, 0x6e, 0x81, 0x53, 0xe0, 0x16, 0x89, 0x2c, 0xee, 0x05, 0x1c, 0xd4, 0xf4, 0x95,
	0xe7, 0x4d, 0xe4, 0xba, 0xca, 0xda, 0x2d, 0x21, 0xea, 0xd5, 0x2c, 0x7f, 0x8e, 0x53, 0xb5, 0xf1,
	0x55, 0xf0, 0x90, 0xdd, 0x7a, 0x59, 0x24, 0x01, 0xa7, 0x61, 0xe7, 0x99, 0x9a, 0x99, 0x9c, 0xb4,
	0x5b, 0x7a, 0xa3, 0x1e, 0xd5, 0x92, 0xd3, 0xd4, 0xf1, 0x2d, 0xe8, 0xab, 0x91, 0x12, 0x2f, 0x97,
	0x77, 0x48, 0x5e, 0x96, 0x2b, 0x01, 0x17, 0x35, 0xbf, 0xa8, 0xbc, 0x36, 0x39, 0xdb, 0xcd, 0xd8,
	0xaf, 0x9b, 0xac, 0xcb, 0x15, 0x3c, 0x09, 0x4e, 0xc5, 0xd0, 0x4d, 0x0d, 0xc7, 0x3a, 0x76, 0xd5,
	0xb4, 0x54, 0x54, 0xe7, 0x66, 0x9e, 0x36, 0x11, 0x0b, 0x93, 0x70, 0x29, 0x27, 0xf3, 0xa2, 0x1c,
	0x5a, 0xdd, 0x0a, 0xa5, 0x1b, 0xf2, 0xb6, 0x20, 0x96, 0xe5, 0xbd, 0x50, 0x24, 0xb7, 0x9a, 0x1e,
	0x0f, 0xad, 0x89, 0x42, 0x9d, 0x88, 0x72, 0x99, 0x48, 0xd8, 0x97, 0x8c, 0xb1, 0xb1, 0xa9, 0xd8,
	0x74, 0x2c, 0x15, 0xfe, 0x0c, 0x01, 0x98, 0x45, 0x83, 0xe7, 0xc0, 0x5b, 0x25, 0x32, 0x5f, 0xe4,
	0x65, 0x9e, 0x12, 0xed, 0x67, 0xc7, 0x5a, 0x92, 0x70, 0x99, 0x48, 0x12, 0x5f, 0x22, 0xcb, 0x44,
	0xe6, 0xd7, 0xf7, 0xea, 0x84, 0x33, 0xf4, 0x71, 0x1a, 0x3c, 0x6a, 0x61, 0x04, 0x1c, 0x5f, 0xba,
	0x24, 0xdc, 0xb4, 0x2c, 0xe7, 0x0a, 0x87, 0x4d, 0x94, 0x87, 0x51, 0x70, 0xad, 0xf0, 0x55, 0x12,
	0x1c, 0x84, 0x7e, 0x1d, 0x3c, 0x51, 0xe3, 0xab, 0x04, 0xbe, 0x05, 0xfe, 0x2c, 0x91, 0x0a, 0x62,
	0x99, 0x8e, 0x83, 0xc1, 0xb3, 0x30, 0x62, 0xb4, 0x17, 0x4d, 0x39, 0x5c, 0x84, 0xa1, 0x95, 0x46,
	0x75, 0x93, 0x88, 0x21, 0x61, 0x2b, 0xc4, 0x71, 0xa1, 0x1c, 0x91, 0xa5, 0x39, 0xaf, 0xee, 0x5d,
	0xf8, 0xc3, 0xb3, 0xe0, 0xa6, 0x2e, 0xe0, 0xa4, 0x4a, 0x33, 0x32, 0xd3, 0x42, 0x09, 0x6f, 0xb7,
	0xb4, 0x50, 0x74, 0xf1, 0xeb, 0xe0, 0xd5, 0x53, 0x9e, 0x96, 0x93, 0x9f, 0x8d, 0x1e, 0x53, 0xa5,
	0x69, 0x8e, 0x48, 0x42, 0x43, 0x2c, 0x10, 0x35, 0xab, 0xef, 0xf4, 0x70, 0xbd, 0xbc, 0xfa, 0x13,
	0xaf, 0x81, 0x9f, 0xe7, 0x79, 0x03, 0x6b, 0x80, 0x62, 0xc5, 0x8f, 0xc3, 0x4a, 0xa7, 0xdb, 0xe1,
	0x40, 0xc1, 0xd0, 0x10, 0x73, 0xd0, 0xc7, 0x57, 0xca, 0xbc, 0xa4, 0x43, 0x0e, 0x52, 0xc8, 0xc4,
	0x71, 0x90, 0x8a, 0x7a, 0x1b, 0xa6, 0x9f, 0x57, 0xc5, 0x14, 0x74, 0x19, 0xa0, 0x60, 0x7a, 0xc9,
	0x50, 0xc8, 0xd8, 0x31, 0x90, 0xf3, 0x1d, 0x9c, 0xf4, 0x15, 0xac, 0x3e, 0x16, 0x94, 0x50, 0xea,
	0x80, 0x43, 0x27, 0xfa, 0x38, 0xbf, 0x92, 0x5e, 0x5e, 0x68, 0xf7, 0x91, 0xa2, 0x68, 0xa0, 0x8b,
	0xe0, 0xab, 0xee, 0xea, 0x88, 0x98, 0x22, 0x5e, 0x39, 0x06, 0x71, 0xf9, 0xad, 0x36, 0x38, 0x6f,
	0x75, 0xd7, 0xc4, 0xaa, 0x19, 0x0c, 0x0e, 0x9f, 0x88, 0xb5, 0x92, 0x6b, 0xc7, 0xaa, 0x59, 0xb8,
	0xab, 0xcb, 0xa2, 0x0e, 0x36, 0x72, 0x22, 0x77, 0x6b, 0xeb, 0x5c, 0x3b, 0x77, 0x75, 0x59, 0x34,
	0xe1, 0x24, 0x71, 0x47, 0x87, 0x3b, 0x73, 0x22, 0x5c, 0x8e, 0xbb, 0xd7, 0x0e, 0x27, 0x89, 0x3b,
	0x26, 0x9c, 0xbc, 0x2b, 0xeb, 0x70, 0x67, 0x4f, 0x84, 0x5b, 0x7f, 0x6b, 0xbd, 0x1d, 0x4e, 0xde,
	0x95, 0x4d, 0xe2, 0x2a, 0x9b, 0x3a, 0xda, 0xe8, 0x89, 0xc4, 0x2d, 0x65, 0xda, 0x89, 0xab, 0x6c,
	0x9a, 0x59, 0x52, 0xe3, 0x2d, 0xd4, 0x05, 0x4e, 0xcc, 0x92, 0x95, 0x74, 0x27, 0xf2, 0xfc, 0x14,
	0x45, 0x03, 0xcd, 0x80, 0xaf, 0x68, 0x44, 0xf6, 0x1c, 0x45, 0xbc, 0x74, 0x0c, 0x62, 0x36, 0x67,
	0x3a, 0x56, 0xd4, 0x23, 0xba, 0x00, 0x50, 0x30, 0x41, 0x82, 0x14, 0xe4, 0xf2, 0x71, 0xc9, 0x6b,
	0x41, 0xf1, 0x15, 0x0c, 0x98, 0x37, 0xa0, 0x8f, 0xdf, 0x92, 0x8a, 0x06, 0x5d, 0xe7, 0x29, 0xd0,
	0x6b, 0xc7, 0x55, 0xea, 0xed, 0x5c, 0x36, 0x63, 0xa9, 0x50, 0xc5, 0xda, 0x24, 0x8b, 0x34, 0xca,
	0xd3, 0xb3, 0x3a, 0xd8, 0x85, 0x13, 0xc9, 0x5a, 0x78, 0xf3, 0xee, 0xf4, 0x6c, 0x3b, 0x59, 0x14,
	0xc5, 0x06, 0x3a, 0x33, 0xad, 0x83, 0x5e, 0x3c, 0x0d, 0xe8, 0xcc, 0x74, 0x47, 0x50, 0x45, 0xac,
	0x67, 0x5c, 0x45, 0x28, 0xe8, 0x90, 0x63, 0x27, 0x66, 0xdc, 0xd2, 0xea, 0x7c, 0x7b, 0xc6, 0x55,
	0x84, 0x82, 0xfa, 0x30, 0xf7, 0x8f, 0xbe, 0xc3, 0x26, 0xfa, 0x7b, 0x1f, 0xfc, 0xb7, 0x03, 0x5c,
	0xca, 0x54, 0x14, 0xfd, 0xdc, 0x01, 0xff, 0xee, 0x80, 0x7e, 0x73, 0x84, 0x66, 0x51, 0x1a, 0x86,
	0x6d, 0xe3, 0x2c, 0xeb, 0x52, 0x86, 0x51, 0x38, 0x63, 0x1f, 0x2a, 0x59, 0x77, 0x7a, 0xe9, 0x6e,
	0x3a, 0x07, 0x43, 0xd6, 0xc1, 0x8e, 0x75, 0xce, 0xab, 0x9a, 0xd6, 0x01, 0x8b, 0x75, 0xd3, 0xf1,
	0x08, 0x06, 0x2d, 0x43, 0x0e, 0xeb, 0x58, 0x7e, 0x4b, 0x11, 0x18, 0xe3, 0x06, 0xeb, 0x58, 0xa1,
	0x58, 0x66, 0x06, 0xb3, 0xce, 0xb5, 0x75, 0x4e, 0x11, 0x99, 0x05, 0xcc, 0x3a, 0x73, 0xdc, 0x3d,
	0x45, 0x64, 0x16, 0x21, 0xeb, 0x5c, 0x7f, 0x6b, 0x1d, 0x82, 0x96, 0x42, 0x62, 0xfb, 0x97, 0x56,
	0xd3, 0xd9, 0x50, 0x26, 0xbd, 0x94, 0x5e, 0x99, 0x5f, 0xc8, 0x2a, 0xde, 0x58, 0x0b, 0x83, 0x75,
	0xd3, 0xbc, 0xa7, 0xdd, 0xb1, 0xe4, 0x13, 0xeb, 0xa6, 0xe9, 0xa2, 0x88, 0xad, 0x99, 0xc1, 0xba,
	0x69, 0xe0, 0x35, 0xb1, 0x11, 0x5b, 0x2a, 0x9e, 0x99, 0x56, 0x7a, 0x50, 0x34, 0x7b, 0x90, 0x55,
	0xd9, 0x30, 0x25, 0xce, 0x79, 0x55, 0x64, 0x46, 0x90, 0x75, 0x2e, 0xad, 0xce, 0xc3, 0x3f, 0x38,
	0xc0, 0xaf, 0x06, 0x24, 0xa4, 0x4c, 0xda, 0xd1, 0xbf, 0x74, 0xc0, 0x8f, 0x1d, 0x30, 0x08, 0xfd,
	0x3a, 0x8f, 0xea, 0xd4, 0x8d, 0x81, 0xb1, 0x84, 0x41, 0x95, 0x0d, 0xc1, 0x60, 0xa1, 0x45, 0x34,
	0x0c, 0x43, 0x56, 0xba, 0x55, 0x21, 0x03, 0x03, 0x06, 0xd9, 0x86, 0xc4, 0x60, 0xdb, 0xc0, 0x32,
	0x79, 0x31, 0x44, 0x26, 0xdd, 0x86, 0xc8, 0xa4, 0xdb, 0x80, 0x32, 0xe8, 0x36, 0x7c, 0xb0, 0x92,
	0x6c, 0x08, 0xad, 0x14, 0x1b, 0x42, 0x2b, 0xc1, 0x56, 0xa1, 0x41, 0xaf, 0xf1, 0x96, 0x62, 0x9b,
	0xc3, 0x85, 0x76, 0x91, 0xc9, 0xae, 0x2a, 0xfa, 0x57, 0x27, 0x0c, 0x6a, 0xec, 0xde, 0xe3, 0x2b,
	0x0d, 0x12, 0x91, 0xc6, 0xa3, 0x7f, 0xe7, 0x84, 0xbf, 0x75, 0xc2, 0x19, 0x18, 0x34, 0xa8, 0xdb,
	0x51, 0x9a, 0xa4, 0xb0, 0x83, 0x71, 0x41, 0x00, 0xb0, 0x95, 0x67, 0x4b, 0xcb, 0x08, 0x60, 0x6b,
	0xce, 0xab, 0x4d, 0x30, 0x0a, 0x43, 0x85, 0x6e, 0xea, 0xb6, 0x48, 0xa8, 0xea, 0x63, 0xc0, 0x98,
	0xa1, 0xd0, 0xb4, 0x81, 0x71, 0x85, 0x3d, 0x45, 0xa1, 0xca, 0x97, 0x6b, 0x70, 0x16, 0x98, 0x9a,
	0xd4, 0x01, 0x6d, 0x14, 0x86, 0x2c, 0x8c, 0xda, 0x1b, 0x2c, 0x41, 0xb2, 0x37, 0x58, 0x42, 0x65,
	0x69, 0x38, 0x0f, 0x83, 0x66, 0xc0, 0xa8, 0x1c, 0x7b, 0x83, 0x9e, 0xec, 0x4a, 0x2e, 0xb4, 0x94,
	0x81, 0x73, 0x30, 0x6c, 0x8b, 0x9d, 0xc5, 0xee, 0x1c, 0x0c, 0xdb, 0x22, 0x68, 0xef, 0xab, 0x2d,
	0x8e, 0x6a, 0x5f, 0x55, 0xa9, 0x19, 0x48, 0x55, 0x7a, 0x16, 0x98, 0x62, 0x97, 0x1e, 0x16, 0x3a,
	0x36, 0x44, 0x60, 0xc8, 0x12, 0x55, 0xad, 0x61, 0x98, 0x71, 0x85, 0x07, 0x2b, 0xbc, 0x5c, 0x96,
	0x1b, 0x45, 0x92, 0x2f, 0x92, 0x92, 0x48, 0x08, 0xf4, 0x81, 0x73, 0x7d, 0x7d, 0x29, 0xe8, 0xa6,
	0xab, 0xd2, 0xcc, 0x3a, 0x0c, 0x2a, 0x9b, 0x79, 0x7d, 0x7f, 0x25, 0x11, 0x19, 0xa7, 0x9f, 0x34,
	0x51, 0xff, 0xb3, 0x26, 0x72, 0x1c, 0x35, 0x51, 0x4a, 0xd9, 0xa2, 0x4d, 0xc7, 0x92, 0xa9, 0x58,
	0x72, 0x26, 0x96, 0xbc, 0x1a, 0x4b, 0xce, 0xc6, 0x92, 0xd7, 0x62, 0xec, 0x64, 0x8c, 0x4d, 0xc6,
	0x58, 0x36, 0xc6, 0x4e, 0xc5, 0xd8, 0xe9, 0x18, 0x9b, 0x8a, 0xb1, 0x33, 0x31, 0xf6, 0x6a, 0x8c,
	0x9d, 0x8d, 0xb1, 0xd7, 0x62, 0x53, 0x93, 0xdd, 0x76, 0x5f, 0x8b, 0x2e, 0xaf, 0x87, 0xe9, 0x5d,
	0x74, 0x79, 0x7b, 0x19, 0xef, 0xa2, 0xcb, 0xeb, 0x65, 0x7c, 0x8b, 0x2e, 0xaf, 0x8f, 0x81, 0x45,
	0x97, 0x17, 0x18, 0xff, 0xa2, 0xcb, 0xeb, 0x67, 0xfa, 0x16, 0x5d, 0xde, 0x3e, 0xa6, 0x3f, 0xfc,
	0xfb, 0x08, 0x70, 0xfb, 0xd2, 0x16, 0xdf, 0x03, 0x97, 0x92, 0x2e, 0x74, 0x31, 0xed, 0xcb, 0x64,
	0x94, 0xc5, 0xf3, 0x77, 0xc4, 0xeb, 0xec, 0xb5, 0x87, 0x97, 0xf7, 0x1f, 0x46, 0x1e, 0x44, 0x37,
	0xf6, 0x1f, 0xf0, 0xf1, 0x77, 0xd3, 0xf1, 0xfb, 0x93, 0xf1, 0x6b, 0xf1, 0x89, 0xfc, 0xc6, 0xa3,
	0x64, 0x6c, 0x66, 0xea, 0x60, 0x3c, 0xf2, 0x20, 0xb1, 0xd1, 0xb1, 0x21, 0x7a, 0x99, 0xa3, 0x78,
	0x38, 0x0b, 0x1e, 0x95, 0x33, 0xba, 0xab, 0xf0, 0x65, 0x62, 0x0a, 0xb2, 0xef, 0x03, 0xe4, 0x09,
	0xbb, 0x44, 0xc7, 0x2e, 0x32, 0x36, 0xf9, 0x45, 0xfd, 0x97, 0xd7, 0x90, 0x05, 0x10, 0xa7, 0xd9,
	0x86, 0xff, 0x08, 0xc1, 0x99, 0x8e, 0x6b, 0xe8, 0x97, 0xe6, 0xf7, 0x42, 0x8b, 0xdf, 0x71, 0xba,
	0x9d, 0xf8, 0x00, 0xf5, 0x86, 0xdd, 0xa2, 0xf3, 0x31, 0x3a, 0xad, 0xe3, 0x55, 0x38, 0xdb, 0x79,
	0xa1, 0x8e, 0x23, 0x36, 0xc7, 0x47, 0x3e, 0x3a, 0x40, 0x9f, 0x36, 0x55, 0x58, 0x8f, 0xe8, 0x62,
	0x1d, 0x0f, 0x2f, 0x07, 0x90, 0xe6, 0xca, 0x38, 0xb8, 0x29, 0x1a, 0xdd, 0xff, 0xfa, 0x32, 0xc3,
	0xf4, 0x35, 0xa2, 0x33, 0xf0, 0x82, 0x6a, 0xbb, 0x44, 0xc7, 0x36, 0xe2, 0x54, 0x8d, 0xf0, 0xef,
	0x21, 0xb8, 0x34, 0xaf, 0xec, 0x12, 0xb7, 0xca, 0x05, 0xba, 0xd1, 0x37, 0x76, 0x91, 0xda, 0x8f,
	0x77, 0xd5, 0xed, 0xff, 0x38, 0xb8, 0xb7, 0x2a, 0x7c, 0x49, 0xd2, 0xf6, 0x4e, 0xc3, 0xcf, 0x9b,
	0x08, 0xd1, 0x8d, 0x13, 0xc5, 0x8e, 0x2a, 0xd8, 0x9c, 0xaa, 0x81, 0xe7, 0xc0, 0x29, 0xf3, 0x25,
	0xed, 0xdd, 0x11, 0xa5, 0xfd, 0x92, 0xf8, 0x2a, 0xf7, 0xca, 0x83, 0x70, 0x59, 0x92, 0x1a, 0x24,
	0x1c, 0x0b, 0xa9, 0x3f, 0xde, 0x29, 0x57, 0x8a, 0xf4, 0x41, 0x28, 0x92, 0xad, 0xf0, 0x06, 0xa7,
	0x18, 0xe1, 0xb0, 0xee, 0xb9, 0x93, 0x5a, 0xf7, 0x29, 0xd6, 0xbd, 0xa2, 0x9b, 0x41, 0x81, 0xc7,
	0x5e, 0xdd, 0xe5, 0xbf, 0x46, 0x30, 0xd2, 0x69, 0xe3, 0xf1, 0xd2, 0x22, 0x9b, 0xb7, 0x45, 0xd6,
	0xcf, 0x5e, 0xef, 0xb6, 0x84, 0x39, 0x05, 0x91, 0x19, 0x30, 0xf3, 0xc0, 0x88, 0xf9, 0xaf, 0x22,
	0x1a, 0xf4, 0x0e, 0x3b, 0x1f, 0x9c, 0xb3, 0xf5, 0xe9, 0xa6, 0x62, 0x3c, 0x27, 0xce, 0xb2, 0x33,
	0x3f, 0x55, 0x87, 0xbe, 0x44, 0x7e, 0x10, 0xe8, 0x5f, 0xe6, 0xcb, 0x95, 0x85, 0xdd, 0xc2, 0x36,
	0x5f, 0x2b, 0x11, 0x11, 0xbf, 0x0a, 0xda, 0xd0, 0xaf, 0xb9, 0xe4, 0x33, 0x4d, 0xb4, 0x06, 0x9c,
	0x04, 0x6f, 0x5d, 0x2c, 0xd3, 0xbe, 0x6b, 0x27, 0x30, 0x67, 0x9e, 0x37, 0x91, 0x23, 0x69, 0xe4,
	0x8b, 0x27, 0xea, 0x0a, 0xbc, 0x78, 0xe1, 0xe4, 0x0c, 0xb5, 0xf0, 0x1f, 0x23, 0x18, 0xee, 0xb0,
	0x53, 0x7b, 0x69, 0x21, 0xbd, 0xdb, 0x12, 0xd2, 0x6f, 0x75, 0x0b, 0xa9, 0xad, 0xf3, 0x1d, 0x83,
	0xf7, 0x07, 0xaa, 0xeb, 0xad, 0x1b, 0xc3, 0x9f, 0xcd, 0xf8, 0xb8, 0x7d, 0xda, 0x61, 0xe6, 0x47,
	0x6a, 0x11, 0xb5, 0x6d, 0xa2, 0xfe, 0x8f, 0xbb, 0xdd, 0x54, 0xdd, 0x6e, 0xdb, 0xe9, 0xe2, 0x9f,
	0xb7, 0xb9, 0xfd, 0x1d, 0xc5, 0x74, 0x56, 0x9c, 0x61, 0xa7, 0xdb, 0x7c, 0xee, 0xe6, 0x72, 0xbb,
	0xc7, 0x6b, 0x2d, 0x39, 0xd2, 0xf5, 0x74, 0x36, 0xc7, 0xdd, 0xcb, 0x11, 0x71, 0xa7, 0x5c, 0x20,
	0x96, 0x33, 0x68, 0x4b, 0x3f, 0x0c, 0xef, 0x7f, 0xc5, 0x09, 0x60, 0x2a, 0xdb, 0xea, 0x04, 0x9d,
	0xaa, 0x4e, 0x70, 0x1c, 0x3c, 0xef, 0x90, 0x72, 0x69, 0x5b, 0x3e, 0xbe, 0xb0, 0x34, 0x25, 0x3c,
	0x0e, 0xae, 0xba, 0x20, 0xca, 0xda, 0x79, 0x66, 0x17, 0x65, 0xaa, 0x82, 0x7f, 0x0d, 0x81, 0x47,
	0xe6, 0xc5, 0x12, 0x91, 0xe9, 0xf1, 0xa5, 0x2f, 0xf3, 0x1e, 0xe5, 0xff, 0x40, 0x7c, 0xc4, 0xee,
	0x29, 0xb1, 0x7f, 0x90, 0xd8, 0xa0, 0x19, 0x60, 0x30, 0xb6, 0xf1, 0x28, 0x79, 0x60, 0x3e, 0xe5,
	0xe3, 0x1b, 0x8f, 0x26, 0x63, 0x33, 0xec, 0xc1, 0x78, 0xe4, 0xed, 0x84, 0x45, 0xdc, 0x4d, 0x2b,
	0x7a, 0xd3, 0xd4, 0xb3, 0xeb, 0xe8, 0x1a, 0x6f, 0x27, 0x6e, 0x5e, 0xe6, 0x34, 0x97, 0xe6, 0xd6,
	0x0f, 0x9b, 0x68, 0x0d, 0x30, 0x78, 0xd6, 0xe9, 0x73, 0xd0, 0xab, 0x3b, 0x0b, 0x03, 0xe0, 0x5a,
	0x13, 0x44, 0x39, 0xe8, 0x51, 0xbb, 0x0a, 0x67, 0xc1, 0xbb, 0xa6, 0xb1, 0x15, 0x04, 0x93, 0x60,
	0xc5, 0xf6, 0xbb, 0x94, 0x14, 0xc5, 0x56, 0xa5, 0x27, 0xfc, 0x87, 0x6a, 0x36, 0xb5, 0x1d, 0x74,
	0xfc, 0x6c, 0xd6, 0x08, 0x81, 0xc7, 0xae, 0xd3, 0x57, 0xc1, 0x70, 0x87, 0x23, 0x15, 0xbc, 0x6e,
	0x73, 0xfb, 0x96, 0x62, 0x79, 0x5d, 0xbc, 0xc6, 0x5e, 0xb5, 0x86, 0x2d, 0x7a, 0x73, 0x63, 0xdf,
	0xf2, 0x78, 0x33, 0xba, 0x71, 0x25, 0x6e, 0x6b, 0xbd, 0x32, 0x3e, 0xfe, 0x68, 0x32, 0xc6, 0xa6,
	0xa6, 0x0e, 0x34, 0xa7, 0x57, 0xac, 0xb3, 0x45, 0x7b, 0x19, 0xd0, 0xcf, 0x50, 0x89, 0xd5, 0xcd,
	0x5f, 0x20, 0x05, 0x99, 0x23, 0x5b, 0xca, 0xc6, 0x3c, 0x33, 0xf2, 0xbb, 0x07, 0x43, 0x4a, 0x79,
	0x54, 0x04, 0xbe, 0x98, 0xdf, 0xe4, 0x2b, 0x7c, 0xad, 0x40, 0x44, 0x7d, 0x4a, 0x79, 0xa2, 0xce,
	0x76, 0x1d, 0x4e, 0x70, 0x5e, 0x52, 0x07, 0x4e, 0x5d, 0xc8, 0xd4, 0x25, 0xba, 0xed, 0x3a, 0xa1,
	0x90, 0x7f, 0xe0, 0x02, 0x30, 0x95, 0xf1, 0x15, 0x70, 0x0b, 0x62, 0x91, 0x88, 0xc7, 0x57, 0xb1,
	0xaa, 0x83, 0x53, 0x00, 0x75, 0x91, 0x6c, 0x11, 0x91, 0xd4, 0x0a, 0xe4, 0xf8, 0x32, 0xb6, 0x28,
	0xe2, 0xac, 0xbe, 0x00, 0x53, 0x57, 0x46, 0x89, 0xe7, 0x4d, 0xd4, 0x63, 0xac, 0xbf, 0x8c, 0xb9,
	0x7b, 0x54, 0x3c, 0xc3, 0x0e, 0x3f, 0x8c, 0xe4, 0xf6, 0xa5, 0xfd, 0xf4, 0x3e, 0xbf, 0xff, 0xe6,
	0x7e, 0x63, 0x7f, 0x6d, 0xbf, 0x3e, 0x7e, 0x59, 0x5f, 0x9b, 0x09, 0xd0, 0x2b, 0xa9, 0xa3, 0x8f,
	0x56, 0xe5, 0x6f, 0x3e, 0x6f, 0xc3, 0xc8, 0x88, 0xb7, 0xd8, 0x1b, 0x0f, 0x23, 0x0f, 0xd2, 0xf1,
	0xfb, 0x7c, 0xfc, 0xdd, 0x0d, 0xed, 0xaf, 0x56, 0x99, 0x53, 0xc9, 0x83, 0xc8, 0xdb, 0x57, 0xba,
	0xb6, 0x8d, 0x47, 0x2f, 0xef, 0x3f, 0xbc, 0x3c, 0xce, 0xe9, 0x6f, 0xc1, 0xaf, 0x81, 0x47, 0x24,
	0x25, 0xb2, 0x5b, 0xa7, 0xdf, 0x36, 0x7c, 0x99, 0x01, 0xfb, 0xfb, 0x38, 0xad, 0x15, 0x4f, 0x80,
	0x5f, 0x24, 0xf5, 0x0a, 0x5f, 0x20, 0x55, 0x52, 0x93, 0xe9, 0xa7, 0x49, 0x5f, 0xa6, 0x5f, 0x57,
	0x56, 0xd7, 0x17, 0x56, 0x8d, 0xb9, 0xdf, 0x44, 0x87, 0x4d, 0xf4, 0xeb, 0x08, 0x18, 0x70, 0xaf,
	0x2a, 0xbc, 0x06, 0x7b, 0xb5, 0x20, 0x40, 0x10, 0x60, 0xcd, 0xe0, 0x2d, 0xd8, 0x67, 0xa5, 0x5b,
	0xd1, 0xbe, 0xad, 0x10, 0xa1, 0x68, 0x53, 0x46, 0x20, 0x02, 0xe7, 0xd7, 0x44, 0x41, 0x16, 0x0a,
	0x42, 0x25, 0xa4, 0x64, 0x63, 0xa5, 0xa1, 0x2c, 0xd3, 0x42, 0xda, 0x18, 0x1d, 0xf4, 0x19, 0x84,
	0x29, 0x23, 0x08, 0x47, 0x9d, 0x55, 0x46, 0x10, 0xd5, 0x6d, 0xb8, 0x00, 0x7e, 0xce, 0x74, 0x2a,
	0xd8, 0x6f, 0xeb, 0x85, 0xb2, 0xaa, 0xf1, 0x5b, 0x4e, 0x16, 0x5f, 0x52, 0x7a, 0xe7, 0x4e, 0xbb,
	0x96, 0xd1, 0xfd, 0x38, 0x4d, 0x86, 0xff, 0x09, 0x82, 0x3e, 0xeb, 0x79, 0xe6, 0xd7, 0xc9, 0xf7,
	0x7f, 0x76, 0x42, 0xbf, 0x4d, 0x1f, 0x47, 0xa1, 0xf7, 0xfb, 0x64, 0x2f, 0xaf, 0x6c, 0x4b, 0xd4,
	0x12, 0x1d, 0xd2, 0x4b, 0xc7, 0x1b, 0xf5, 0x04, 0x1e, 0x3f, 0x76, 0x45, 0x10, 0xe7, 0xf9, 0x3e,
	0xd9, 0x5b, 0xe7, 0x4b, 0xf8, 0x6d, 0xba, 0xdf, 0x57, 0xd4, 0xf9, 0x4a, 0x49, 0x99, 0x3b, 0xb6,
	0xab, 0xb4, 0x4a, 0x07, 0x8e, 0x39, 0xaf, 0xcd, 0xbd, 0x41, 0xf6, 0xd2, 0xba, 0xb6, 0xb6, 0x4a,
	0x7c, 0x0f, 0x39, 0x42, 0x3d, 0xdc, 0x40, 0x51, 0xb2, 0xb6, 0xe1, 0x05, 0xf0, 0x4b, 0xdb, 0x7c,
	0x32, 0x5f, 0x2c, 0x97, 0x88, 0xa4, 0x4e, 0xb5, 0xc7, 0xad, 0x2c, 0xee, 0xa4, 0x93, 0x59, 0xaa,
	0x79, 0xa7, 0x87, 0x03, 0xc5, 0x50, 0x7d, 0xc2, 0x6f, 0x40, 0xbf, 0xb4, 0xcd, 0xb3, 0xa9, 0x19,
	0x1d, 0xc8, 0x7d, 0xfc, 0xd1, 0x74, 0xee, 0x4e, 0x9a, 0x4d, 0xcd, 0x18, 0x50, 0x7d, 0xaa, 0xb1,
	0x0d, 0x6c, 0x6a, 0x76, 0x5a, 0x07, 0xf3, 0x9c, 0x08, 0x36, 0x35, 0x3b, 0x6d, 0x03, 0x33, 0x9e,
	0xe7, 0xb2, 0x87, 0x4d, 0x74, 0x0b, 0x46, 0xa0, 0xf7, 0x0d, 0xb2, 0x17, 0x5a, 0xe7, 0x4b, 0x4a,
	0x05, 0x69, 0xdc, 0x43, 0x04, 0x98, 0x6c, 0x2e, 0xa4, 0x34, 0x18, 0xd4, 0x06, 0x47, 0xda, 0xe9,
	0x0e, 0xa1, 0xcc, 0x18, 0xf4, 0xab, 0xbe, 0xe8, 0xdf, 0x96, 0xfb, 0x9f, 0x35, 0x91, 0xf3, 0xa8,
	0x89, 0xdc, 0xd3, 0xb1, 0x54, 0x6c, 0x46, 0x3d, 0xcf, 0x08, 0x27, 0x01, 0x4c, 0x86, 0xf0, 0x25,
	0xf0, 0x68, 0xfe, 0xab, 0x39, 0xea, 0xd7, 0xb6, 0xc6, 0x4c, 0x24, 0x10, 0xe1, 0xb4, 0xa6, 0xf0,
	0x14, 0xf4, 0x59, 0xb9, 0xb0, 0x18, 0x39, 0xec, 0x46, 0xb7, 0x02, 0xb7, 0x5a, 0x8c, 0x8c, 0x3e,
	0x76, 0x37, 0xfa, 0x5e, 0xe0, 0x7b, 0x86, 0xd1, 0x9f, 0x21, 0x18, 0xb0, 0x1f, 0xe4, 0xbf, 0xa4,
	0x1a, 0xba, 0xd7, 0x52, 0x43, 0x91, 0x6e, 0x71, 0xb3, 0xb8, 0x72, 0x9a, 0x32, 0x7a, 0x8a, 0x80,
	0x69, 0x35, 0xc1, 0x6b, 0xd0, 0x2b, 0x35, 0x36, 0xe5, 0xbd, 0xba, 0xda, 0x8b, 0x81, 0xee, 0x5f,
	0x43, 0x2d, 0xa6, 0x39, 0xd5, 0xc2, 0x56, 0x18, 0x3a, 0x0c, 0xfe, 0x16, 0x78, 0xb7, 0x05, 0x49,
	0xa6, 0xc4, 0x38, 0x5a, 0xb7, 0x94, 0x46, 0xd3, 0x5c, 0xea, 0xb0, 0x89, 0x92, 0x30, 0x0a, 0xde,
	0x5c, 0x63, 0x33, 0xa4, 0x18, 0x06, 0xfd, 0x86, 0x2b, 0x21, 0xa4, 0x2c, 0xfb, 0xee, 0x68, 0xaa,
	0xca, 0xb2, 0x4f, 0x37, 0xd3, 0x17, 0x1b, 0x1d, 0xbe, 0x80, 0xbc, 0xb4, 0xc5, 0x86, 0x6d, 0x6f,
	0x3d, 0xa7, 0xa7, 0xc6, 0x50, 0x60, 0x48, 0xf9, 0x19, 0x15, 0x23, 0xec, 0x6b, 0x0f, 0x23, 0x0f,
	0x26, 0xe3, 0xd7, 0xd2, 0xf1, 0xdb, 0x7c, 0x7c, 0x6b, 0xe3, 0x11, 0x7b, 0x10, 0x1f, 0x7f, 0x94,
	0x3a, 0x68, 0x91, 0x29, 0x73, 0xb6, 0x6d, 0xbd, 0xd4, 0xe1, 0x7b, 0xcb, 0x57, 0xdc, 0x85, 0xd1,
	0xc0, 0xe8, 0x71, 0x5d, 0xb8, 0xda, 0xbd, 0x0b, 0x1f, 0xaa, 0x0b, 0xed, 0xb6, 0xef, 0x3b, 0x2f,
	0x6d, 0xc5, 0x6a, 0xaf, 0x88, 0x50, 0xb7, 0x1c, 0x5d, 0x5a, 0x9d, 0x3f, 0x4d, 0x25, 0x7c, 0xd1,
	0x0b, 0x5e, 0x5d, 0x15, 0xb3, 0xd0, 0x7a, 0x8e, 0x4b, 0xbd, 0x77, 0x6b, 0x69, 0x1b, 0x74, 0x04,
	0xee, 0x73, 0x03, 0xba, 0x46, 0x96, 0x2a, 0xd8, 0x6c, 0xaa, 0xe5, 0x5a, 0x43, 0x56, 0xb9, 0xb5,
	0xd8, 0x5c, 0x37, 0x6d, 0x96, 0xa9, 0x02, 0x4e, 0x59, 0x6c, 0x24, 0x52, 0x10, 0x6a, 0x45, 0xba,
	0xf4, 0x73, 0x68, 0x87, 0x62, 0xe0, 0xbe, 0xf8, 0xc5, 0x4f, 0x84, 0x8c, 0x69, 0x96, 0xa3, 0x3a,
	0xf8, 0x01, 0x0c, 0x1b, 0x66, 0xdb, 0xa4, 0x5a, 0x96, 0xea, 0xdb, 0x44, 0x54, 0x57, 0x7b, 0xc7,
	0x14, 0xeb, 0x92, 0x66, 0x72, 0xc7, 0xb0, 0xe0, 0x70, 0xa5, 0x4d, 0x86, 0x53, 0xc0, 0x54, 0x84,
	0x5a, 0xc9, 0xd6, 0x79, 0x37, 0xed, 0x88, 0x5a, 0xda, 0x41, 0x67, 0xe0, 0x47, 0x88, 0x1b, 0x34,
	0x74, 0xb4, 0xee, 0x4f, 0x5b, 0xcd, 0xb4, 0xfe, 0x7b, 0x5a, 0xfb, 0x6f, 0x5a, 0x69, 0x04, 0x5c,
	0xb5, 0x5a, 0x69, 0x0c, 0xf4, 0x76, 0x60, 0xc0, 0x34, 0xd4, 0x28, 0x78, 0x08, 0x23, 0xa6, 0xa1,
	0x85, 0x03, 0x2f, 0xe5, 0xa0, 0xeb, 0x47, 0xea, 0x25, 0xdd, 0xc6, 0x42, 0xc2, 0x70, 0xa5, 0x5d,
	0x88, 0xe3, 0xe0, 0xe5, 0x2b, 0x2a, 0x37, 0xf4, 0x22, 0x99, 0x23, 0x43, 0x4b, 0xbb, 0x0f, 0xe0,
	0xe2, 0x66, 0xe3, 0xd2, 0x52, 0xbc, 0x67, 0xed, 0xcf, 0xff, 0x82, 0x33, 0x54, 0xf0, 0x35, 0xfa,
	0x3d, 0x80, 0x9e, 0xfe, 0xe5, 0x8b, 0x65, 0xf5, 0x96, 0x13, 0xbd, 0x69, 0x66, 0xe9, 0xc8, 0xda,
	0xef, 0xfc, 0x70, 0x89, 0x63, 0x74, 0xb5, 0xac, 0xa6, 0x85, 0x6f, 0xc2, 0x08, 0x3d, 0x3a, 0x14,
	0x6a, 0x32, 0x5f, 0xc9, 0xd7, 0x45, 0x52, 0x28, 0x4b, 0x65, 0xa1, 0x16, 0xf0, 0x77, 0xb0, 0x1e,
	0x36, 0x35, 0xd7, 0x74, 0x45, 0x7c, 0x1d, 0xf0, 0x0e, 0x11, 0xe5, 0x72, 0xc1, 0x66, 0xde, 0xd7,
	0xc1, 0x7c, 0x48, 0xd7, 0x33, 0x8c, 0xe7, 0x7e, 0xd1, 0x71, 0xd8, 0x44, 0x3f, 0x41, 0x70, 0x19,
	0x06, 0xf5, 0xfc, 0x08, 0xa9, 0x41, 0x0f, 0x0e, 0xb5, 0x15, 0x81, 0x4d, 0x4b, 0x8d, 0xb1, 0x4d,
	0x4b, 0x15, 0x41, 0x02, 0x86, 0x0d, 0x2d, 0x33, 0x34, 0xc1, 0xd1, 0x8e, 0x59, 0x1b, 0x42, 0xf0,
	0x1a, 0x30, 0x46, 0x5c, 0xf4, 0x97, 0xe3, 0xf6, 0x2c, 0xb4, 0xeb, 0x69, 0xaf, 0xc7, 0xed, 0x69,
	0x07, 0x93, 0x30, 0x62, 0xea, 0x59, 0x1c, 0x08, 0x74, 0xce, 0x99, 0x10, 0x0a, 0xff, 0x86, 0x0b,
	0xb0, 0x9a, 0x58, 0xb6, 0x6b, 0x95, 0x6f, 0xc2, 0x60, 0x5d, 0xbd, 0x6a, 0x99, 0x57, 0x36, 0x08,
	0x44, 0x94, 0x02, 0xee, 0x63, 0xbf, 0x57, 0x40, 0xc7, 0x2d, 0xfd, 0x80, 0x06, 0x92, 0x53, 0x31,
	0x70, 0x1c, 0xfa, 0x65, 0xa9, 0x5c, 0xa2, 0x0b, 0x22, 0x3a, 0x32, 0x7a, 0x5a, 0xa7, 0x44, 0xbf,
	0xd2, 0xfe, 0x06, 0xd9, 0x5b, 0x51, 0xe7, 0x7e, 0x6c, 0xa8, 0x9b, 0xcb, 0xd5, 0x5e, 0x9a, 0xe8,
	0x5d, 0xd7, 0x01, 0xeb, 0xb9, 0xbb, 0xaf, 0x5b, 0x17, 0xa5, 0x1c, 0xa3, 0x41, 0x5a, 0x97, 0xa9,
	0x03, 0x06, 0xae, 0x3a, 0x17, 0x78, 0xe9, 0x9a, 0xf0, 0x5c, 0x0b, 0x66, 0x8e, 0x14, 0x44, 0x22,
	0xd3, 0x3d, 0x3f, 0xbd, 0xcf, 0xc9, 0xf5, 0x69, 0x50, 0xea, 0x58, 0xb9, 0xa8, 0x84, 0x55, 0x92,
	0xf3, 0xfc, 0xee, 0x96, 0x98, 0x37, 0x2e, 0xe1, 0xd2, 0xa2, 0xf1, 0xb3, 0xc1, 0x84, 0x7a, 0x4d,
	0x37, 0xa1, 0x5f, 0xd3, 0x4d, 0xac, 0xeb, 0x1a, 0xdc, 0x90, 0x62, 0x96, 0xde, 0xdd, 0x12, 0x0d,
	0x11, 0x9e, 0x07, 0x9f, 0xe2, 0x7d, 0x7e, 0xab, 0x5c, 0x21, 0xea, 0x45, 0xcd, 0xcc, 0x6b, 0x1f,
	0x1d, 0xa0, 0xa3, 0x83, 0x0b, 0xcb, 0xc2, 0x0e, 0x29, 0x86, 0x64, 0x21, 0xa4, 0xd4, 0x4f, 0x25,
	0x6f, 0x68, 0x85, 0xf8, 0x7a, 0xf9, 0x53, 0xc5, 0x29, 0xaf, 0x22, 0xba, 0x5d, 0xae, 0x90, 0xb9,
	0xb9, 0xa7, 0x4d, 0x34, 0x03, 0xa3, 0x80, 0xef, 0x0b, 0x35, 0xd2, 0x76, 0xc3, 0x11, 0xce, 0x03,
	0x56, 0xc8, 0x69, 0x69, 0x70, 0xcf, 0xc4, 0xae, 0xc6, 0x66, 0xbb, 0xdd, 0x66, 0x0c, 0x3f, 0x76,
	0xc2, 0xc0, 0xeb, 0x15, 0x61, 0x93, 0xaf, 0xe4, 0xea, 0xa4, 0xa0, 0x70, 0x81, 0x17, 0xa1, 0x57,
	0x8b, 0x2b, 0x1d, 0xb3, 0x8f, 0x59, 0x93, 0xb5, 0x5e, 0xd7, 0x35, 0xae, 0xc5, 0xea, 0x00, 0x78,
	0x0d, 0x7c, 0x92, 0x9e, 0x7e, 0xda, 0x7e, 0xa1, 0xeb, 0x30, 0xde, 0x9e, 0xa7, 0x06, 0x9e, 0x09,
	0x82, 0xbf, 0x0d, 0x83, 0x52, 0x63, 0xd3, 0xb8, 0x3e, 0x97, 0x2f, 0x17, 0xd5, 0xcd, 0x39, 0x37,
	0x60, 0x15, 0xdf, 0x2d, 0xe2, 0x04, 0x0c, 0x6b, 0x9b, 0xdf, 0x7c, 0xb9, 0x26, 0xc9, 0x7c, 0x4d,
	0xf9, 0x51, 0x54, 0x53, 0x92, 0x1b, 0xd2, 0x9a, 0xee, 0x6a, 0x2d, 0x77, 0x8b, 0xf8, 0x0a, 0xe0,
	0x5a, 0xa3, 0x9a, 0x17, 0xb6, 0xf2, 0x45, 0xe3, 0xa3, 0xb0, 0x7a, 0x41, 0xb8, 0x9f, 0x1b, 0xac,
	0x35, 0xaa, 0xab, 0x5b, 0x59, 0xfd, 0xae, 0x94, 0x34, 0xf7, 0xea, 0xd3, 0x26, 0xba, 0x08, 0xe7,
	0xe9, 0xda, 0x26, 0xd4, 0x29, 0x1c, 0x6c, 0xe6, 0x3c, 0x78, 0x15, 0x20, 0xba, 0x4c, 0x1c, 0x7c,
	0xd2, 0x44, 0x4e, 0xed, 0x53, 0xa8, 0x73, 0x2a, 0x36, 0x6d, 0x0d, 0x47, 0xf8, 0xd0, 0x0d, 0x01,
	0x0b, 0x93, 0x22, 0xe1, 0x65, 0x62, 0x04, 0xe3, 0x6b, 0x76, 0x01, 0xfa, 0xe1, 0xff, 0xfa, 0x02,
	0x74, 0xe0, 0x49, 0xd3, 0xf2, 0x99, 0xb1, 0xdb, 0x25, 0xe8, 0x6e, 0xd7, 0x9a, 0x7d, 0xff, 0x8f,
	0xae, 0x35, 0x2f, 0x1d, 0xde, 0x68, 0xbb, 0x08, 0xff, 0xb4, 0x89, 0x52, 0xdd, 0xae, 0x36, 0xc3,
	0x79, 0x18, 0xd1, 0x57, 0xa6, 0x21, 0xed, 0xfa, 0x45, 0x8e, 0xc8, 0x12, 0x76, 0x5e, 0x8b, 0xcd,
	0x66, 0x56, 0x4f, 0xb8, 0xf7, 0x3c, 0xd1, 0x72, 0xef, 0xf9, 0xbd, 0x2f, 0xd0, 0xb1, 0x06, 0x27,
	0xdc, 0x8b, 0xfe, 0xc2, 0x01, 0x41, 0x5b, 0x21, 0xdb, 0xd3, 0xf9, 0x9b, 0x89, 0xe7, 0xe4, 0x89,
	0x67, 0xee, 0x95, 0xc3, 0x1b, 0x1d, 0x26, 0xed, 0xcf, 0x6f, 0xf4, 0xa6, 0x62, 0xc7, 0x0f, 0xe6,
	0xff, 0x89, 0x60, 0xa0, 0x6d, 0xfc, 0x68, 0x19, 0xcc, 0x27, 0x4f, 0x31, 0x98, 0xdb, 0x20, 0xac,
	0xc3, 0x39, 0xd7, 0x3e, 0x9c, 0xb3, 0xa7, 0x1a, 0xce, 0x5b, 0x11, 0x4d, 0x98, 0xb9, 0xa1, 0xc3,
	0x1b, 0x2d, 0x33, 0x50, 0xe6, 0x92, 0x65, 0xe8, 0x1c, 0x7d, 0xa2, 0x9e, 0x9d, 0x28, 0xc3, 0xe6,
	0x7b, 0x5f, 0x20, 0xa3, 0xc1, 0x36, 0x84, 0xfe, 0x1b, 0x82, 0x41, 0xed, 0x28, 0xf3, 0xeb, 0xdd,
	0xf3, 0x80, 0xa5, 0xe7, 0x7d, 0x5d, 0xbb, 0xfb, 0x57, 0x6e, 0x38, 0x63, 0x3a, 0xfd, 0x3a, 0x91,
	0xbf, 0xae, 0xd3, 0xc5, 0x37, 0xff, 0x2f, 0xf3, 0x55, 0x4e, 0x2c, 0xdf, 0xee, 0x30, 0xb1, 0x7c,
	0x7e, 0x63, 0x48, 0xff, 0x17, 0x9a, 0xd9, 0xd8, 0xb5, 0x58, 0x32, 0x19, 0x4b, 0x4e, 0x7e, 0xd5,
	0x73, 0xc6, 0xdf, 0x38, 0x61, 0xd4, 0x5a, 0x33, 0xd6, 0x84, 0xfe, 0x76, 0x97, 0x09, 0xa3, 0x6d,
	0x0a, 0x08, 0x77, 0x9c, 0x02, 0xbe, 0xd9, 0x70, 0xfc, 0x34, 0x1b, 0x8e, 0x57, 0xbb, 0x4c, 0x44,
	0x3e, 0x6d, 0x22, 0x8a, 0x5d, 0xeb, 0x3a, 0x15, 0xfd, 0x96, 0x03, 0xfc, 0xd6, 0x38, 0x06, 0x5b,
	0x6e, 0xde, 0xd0, 0x2f, 0xc2, 0xda, 0x95, 0x9b, 0xbb, 0xad, 0x23, 0x75, 0xfc, 0xe4, 0x91, 0xda,
	0x82, 0x6d, 0x1d, 0xa6, 0x57, 0xdb, 0x87, 0xe9, 0x89, 0xd3, 0x0c, 0xd3, 0x76, 0x38, 0xcb, 0x76,
	0xe3, 0x4b, 0xed, 0x0a, 0xbe, 0xe4, 0x80, 0xee, 0x60, 0x9c, 0xd1, 0x1f, 0x20, 0x18, 0xb0, 0x7f,
	0x81, 0xc1, 0x83, 0xe0, 0x7f, 0x73, 0x25, 0xb7, 0xb6, 0x30, 0x7f, 0xf7, 0xf6, 0xdd, 0x85, 0x2c,
	0xd3, 0x83, 0xfd, 0xd0, 0xcb, 0xe5, 0xd2, 0xb9, 0x3b, 0xe9, 0x24, 0xe3, 0xc6, 0x23, 0xc0, 0x68,
	0x0f, 0x2b, 0xb9, 0x85, 0xf9, 0x29, 0x2a, 0xed, 0xc5, 0xfd, 0xe0, 0x53, 0xa5, 0x6c, 0x6a, 0x86,
	0xf1, 0x9a, 0x8f, 0xa9, 0x24, 0xcb, 0x00, 0x1e, 0x86, 0xc1, 0x85, 0xf9, 0x6c, 0x2e, 0xbd, 0xc6,
	0xa6, 0x66, 0x34, 0x9d, 0x7e, 0x53, 0x38, 0x35, 0x3b, 0xad, 0x7e, 0x20, 0x60, 0x06, 0x94, 0x57,
	0x2d, 0x64, 0xd9, 0x54, 0x2a, 0x79, 0x8d, 0x19, 0xc4, 0x3e, 0x70, 0x2f, 0x64, 0xa7, 0xa7, 0x67,
	0x19, 0x26, 0xfa, 0x16, 0xe0, 0xf6, 0x23, 0x71, 0xec, 0x05, 0xd7, 0xca, 0xea, 0xca, 0x02, 0xd3,
	0x83, 0xcf, 0xc3, 0x68, 0xfa, 0x76, 0xee, 0x9e, 0x50, 0x69, 0x54, 0xc9, 0x92, 0x76, 0x10, 0xa4,
	0x56, 0x26, 0x83, 0x94, 0xc6, 0xec, 0xfc, 0x42, 0xba, 0x21, 0x6f, 0x93, 0x9a, 0x5c, 0xb6, 0x35,
	0x3a, 0xa2, 0x61, 0xc0, 0xed, 0xe7, 0x77, 0xd8, 0x0d, 0x68, 0x85, 0xe9, 0x51, 0xfe, 0xe4, 0x18,
	0x14, 0xbd, 0x04, 0xc3, 0x1d, 0xce, 0xb7, 0x94, 0xd6, 0x05, 0x55, 0xe9, 0xbb, 0x0c, 0x8a, 0x4a,
	0xc0, 0xb4, 0x96, 0x2a, 0xee, 0x03, 0xef, 0x9d, 0xe5, 0xf4, 0x7c, 0x7e, 0x39, 0x9b, 0x62, 0x7a,
	0x14, 0x56, 0xe8, 0x13, 0xe5, 0x0c, 0x29, 0x3c, 0xeb, 0x8f, 0x2c, 0x3b, 0xcd, 0x38, 0x6c, 0x82,
	0xd4, 0x0c, 0xe3, 0xb4, 0x0a, 0x14, 0x7a, 0x5c, 0x56, 0x81, 0xc2, 0xac, 0x3b, 0xf3, 0xcb, 0xe8,
	0xd9, 0xc7, 0x63, 0x3d, 0x1f, 0x7d, 0x3c, 0xd6, 0xf3, 0xd9, 0xc7, 0x63, 0xe8, 0xf1, 0xd1, 0x18,
	0xfa, 0xed, 0xa3, 0x31, 0xf4, 0xe3, 0xa3, 0x31, 0xf4, 0xec, 0x68, 0x0c, 0x7d, 0x74, 0x34, 0x86,
	0xfe, 0xe9, 0x68, 0x0c, 0x7d, 0x7a, 0x34, 0xd6, 0xf3, 0xd9, 0xd1, 0x18, 0x7a, 0xff, 0x93, 0xb1,
	0x9e, 0x27, 0x9f, 0x8c, 0xa1, 0x67, 0x9f, 0x8c, 0xf5, 0x7c, 0xf4, 0xc9, 0x58, 0xcf, 0xfd, 0xa5,
	0x92, 0x50, 0xff, 0x7e, 0x29, 0xb1, 0x23, 0x54, 0x64, 0x22, 0x8a, 0x7c, 0xa2, 0x21, 0x4d, 0xd0,
	0x1f, 0x5b, 0x82, 0x58, 0x8d, 0xd7, 0x45, 0x61, 0xa7, 0x5c, 0x24, 0x62, 0x5c, 0x6f, 0x9e, 0xa8,
	0x6f, 0x96, 0x84, 0x09, 0xb2, 0x2b, 0x6b, 0xff, 0x43, 0xdb, 0xf2, 0x0f, 0xc0, 0x9b, 0x1e, 0x3a,
	0x34, 0x4c, 0xfd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa6, 0xff, 0xa2, 0x24, 0xad, 0x3c, 0x00,
	0x00,
}

func (x DSKeyAlgorithm) String() string {
	s, ok := DSKeyAlgorithm_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AFSDBRecordSubtype) String() string {
	s, ok := AFSDBRecordSubtype_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x LatitudeHemisphere) String() string {
	s, ok := LatitudeHemisphere_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x LongitudeHemisphere) String() string {
	s, ok := LongitudeHemisphere_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TSIGKeyAlgorithm) String() string {
	s, ok := TSIGKeyAlgorithm_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *PrimaryDNSConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrimaryDNSConfig)
	if !ok {
		that2, ok := that.(PrimaryDNSConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SoaRecordParametersChoice == nil {
		if this.SoaRecordParametersChoice != nil {
			return false
		}
	} else if this.SoaRecordParametersChoice == nil {
		return false
	} else if !this.SoaRecordParametersChoice.Equal(that1.SoaRecordParametersChoice) {
		return false
	}
	if len(this.RrSetGroup) != len(that1.RrSetGroup) {
		return false
	}
	for i := range this.RrSetGroup {
		if !this.RrSetGroup[i].Equal(that1.RrSetGroup[i]) {
			return false
		}
	}
	if this.Serial != that1.Serial {
		return false
	}
	if this.Admin != that1.Admin {
		return false
	}
	if len(this.DefaultRrSetGroup) != len(that1.DefaultRrSetGroup) {
		return false
	}
	for i := range this.DefaultRrSetGroup {
		if !this.DefaultRrSetGroup[i].Equal(that1.DefaultRrSetGroup[i]) {
			return false
		}
	}
	if !this.DnssecMode.Equal(that1.DnssecMode) {
		return false
	}
	if this.AllowHttpLbManagedRecords != that1.AllowHttpLbManagedRecords {
		return false
	}
	return true
}
func (this *PrimaryDNSConfig_DefaultSoaParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrimaryDNSConfig_DefaultSoaParameters)
	if !ok {
		that2, ok := that.(PrimaryDNSConfig_DefaultSoaParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSoaParameters.Equal(that1.DefaultSoaParameters) {
		return false
	}
	return true
}
func (this *PrimaryDNSConfig_SoaParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrimaryDNSConfig_SoaParameters)
	if !ok {
		that2, ok := that.(PrimaryDNSConfig_SoaParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SoaParameters.Equal(that1.SoaParameters) {
		return false
	}
	return true
}
func (this *SOARecordParameterConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SOARecordParameterConfig)
	if !ok {
		that2, ok := that.(SOARecordParameterConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Refresh != that1.Refresh {
		return false
	}
	if this.Retry != that1.Retry {
		return false
	}
	if this.Expire != that1.Expire {
		return false
	}
	if this.NegativeTtl != that1.NegativeTtl {
		return false
	}
	if this.Ttl != that1.Ttl {
		return false
	}
	return true
}
func (this *RRSetGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RRSetGroup)
	if !ok {
		that2, ok := that.(RRSetGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if len(this.RrSet) != len(that1.RrSet) {
		return false
	}
	for i := range this.RrSet {
		if !this.RrSet[i].Equal(that1.RrSet[i]) {
			return false
		}
	}
	return true
}
func (this *RRSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RRSet)
	if !ok {
		that2, ok := that.(RRSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ttl != that1.Ttl {
		return false
	}
	if that1.TypeRecordSet == nil {
		if this.TypeRecordSet != nil {
			return false
		}
	} else if this.TypeRecordSet == nil {
		return false
	} else if !this.TypeRecordSet.Equal(that1.TypeRecordSet) {
		return false
	}
	return true
}
func (this *RRSet_ARecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RRSet_ARecord)
	if !ok {
		that2, ok := that.(RRSet_ARecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ARecord.Equal(that1.ARecord) {
		return false
	}
	return true
}
func (this *RRSet_AaaaRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RRSet_AaaaRecord)
	if !ok {
		that2, ok := that.(RRSet_AaaaRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AaaaRecord.Equal(that1.AaaaRecord) {
		return false
	}
	return true
}
func (this *RRSet_AliasRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RRSet_AliasRecord)
	if !ok {
		that2, ok := that.(RRSet_AliasRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AliasRecord.Equal(that1.AliasRecord) {
		return false
	}
	return true
}
func (this *RRSet_CaaRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RRSet_CaaRecord)
	if !ok {
		that2, ok := that.(RRSet_CaaRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaaRecord.Equal(that1.CaaRecord) {
		return false
	}
	return true
}
func (this *RRSet_CnameRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RRSet_CnameRecord)
	if !ok {
		that2, ok := that.(RRSet_CnameRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CnameRecord.Equal(that1.CnameRecord) {
		return false
	}
	return true
}
func (this *RRSet_MxRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RRSet_MxRecord)
	if !ok {
		that2, ok := that.(RRSet_MxRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MxRecord.Equal(that1.MxRecord) {
		return false
	}
	return true
}
func (this *RRSet_NsRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RRSet_NsRecord)
	if !ok {
		that2, ok := that.(RRSet_NsRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NsRecord.Equal(that1.NsRecord) {
		return false
	}
	return true
}
func (this *RRSet_PtrRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RRSet_PtrRecord)
	if !ok {
		that2, ok := that.(RRSet_PtrRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PtrRecord.Equal(that1.PtrRecord) {
		return false
	}
	return true
}
func (this *RRSet_SrvRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RRSet_SrvRecord)
	if !ok {
		that2, ok := that.(RRSet_SrvRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SrvRecord.Equal(that1.SrvRecord) {
		return false
	}
	return true
}
func (this *RRSet_TxtRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RRSet_TxtRecord)
	if !ok {
		that2, ok := that.(RRSet_TxtRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TxtRecord.Equal(that1.TxtRecord) {
		return false
	}
	return true
}
func (this *RRSet_LbRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RRSet_LbRecord)
	if !ok {
		that2, ok := that.(RRSet_LbRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LbRecord.Equal(that1.LbRecord) {
		return false
	}
	return true
}
func (this *RRSet_NaptrRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RRSet_NaptrRecord)
	if !ok {
		that2, ok := that.(RRSet_NaptrRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NaptrRecord.Equal(that1.NaptrRecord) {
		return false
	}
	return true
}
func (this *RRSet_DsRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RRSet_DsRecord)
	if !ok {
		that2, ok := that.(RRSet_DsRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DsRecord.Equal(that1.DsRecord) {
		return false
	}
	return true
}
func (this *RRSet_CdsRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RRSet_CdsRecord)
	if !ok {
		that2, ok := that.(RRSet_CdsRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CdsRecord.Equal(that1.CdsRecord) {
		return false
	}
	return true
}
func (this *RRSet_AfsdbRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RRSet_AfsdbRecord)
	if !ok {
		that2, ok := that.(RRSet_AfsdbRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AfsdbRecord.Equal(that1.AfsdbRecord) {
		return false
	}
	return true
}
func (this *RRSet_Eui48Record) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RRSet_Eui48Record)
	if !ok {
		that2, ok := that.(RRSet_Eui48Record)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Eui48Record.Equal(that1.Eui48Record) {
		return false
	}
	return true
}
func (this *RRSet_Eui64Record) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RRSet_Eui64Record)
	if !ok {
		that2, ok := that.(RRSet_Eui64Record)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Eui64Record.Equal(that1.Eui64Record) {
		return false
	}
	return true
}
func (this *RRSet_LocRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RRSet_LocRecord)
	if !ok {
		that2, ok := that.(RRSet_LocRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LocRecord.Equal(that1.LocRecord) {
		return false
	}
	return true
}
func (this *DNSAResourceRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSAResourceRecord)
	if !ok {
		that2, ok := that.(DNSAResourceRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	return true
}
func (this *DNSAAAAResourceRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSAAAAResourceRecord)
	if !ok {
		that2, ok := that.(DNSAAAAResourceRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	return true
}
func (this *DNSAliasResourceRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSAliasResourceRecord)
	if !ok {
		that2, ok := that.(DNSAliasResourceRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *CertificationAuthorityAuthorization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CertificationAuthorityAuthorization)
	if !ok {
		that2, ok := that.(CertificationAuthorityAuthorization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Flags != that1.Flags {
		return false
	}
	if this.Tag != that1.Tag {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *DNSCAAResourceRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSCAAResourceRecord)
	if !ok {
		that2, ok := that.(DNSCAAResourceRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	return true
}
func (this *DNSCNAMEResourceRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSCNAMEResourceRecord)
	if !ok {
		that2, ok := that.(DNSCNAMEResourceRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *MailExchanger) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MailExchanger)
	if !ok {
		that2, ok := that.(MailExchanger)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.Priority != that1.Priority {
		return false
	}
	return true
}
func (this *DNSMXResourceRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSMXResourceRecord)
	if !ok {
		that2, ok := that.(DNSMXResourceRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	return true
}
func (this *DNSNSResourceRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSNSResourceRecord)
	if !ok {
		that2, ok := that.(DNSNSResourceRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	return true
}
func (this *DNSPTRResourceRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSPTRResourceRecord)
	if !ok {
		that2, ok := that.(DNSPTRResourceRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	return true
}
func (this *DNSSRVResourceRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSSRVResourceRecord)
	if !ok {
		that2, ok := that.(DNSSRVResourceRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	return true
}
func (this *SRVService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SRVService)
	if !ok {
		that2, ok := that.(SRVService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Priority != that1.Priority {
		return false
	}
	if this.Weight != that1.Weight {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	return true
}
func (this *DNSTXTResourceRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSTXTResourceRecord)
	if !ok {
		that2, ok := that.(DNSTXTResourceRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	return true
}
func (this *DNSLBResourceRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSLBResourceRecord)
	if !ok {
		that2, ok := that.(DNSLBResourceRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *DNSNAPTRResourceRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSNAPTRResourceRecord)
	if !ok {
		that2, ok := that.(DNSNAPTRResourceRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	return true
}
func (this *NAPTRValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NAPTRValue)
	if !ok {
		that2, ok := that.(NAPTRValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Order != that1.Order {
		return false
	}
	if this.Preference != that1.Preference {
		return false
	}
	if this.Flags != that1.Flags {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if this.Regexp != that1.Regexp {
		return false
	}
	if this.Replacement != that1.Replacement {
		return false
	}
	return true
}
func (this *DNSDSRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSDSRecord)
	if !ok {
		that2, ok := that.(DNSDSRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	return true
}
func (this *DNSCDSRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSCDSRecord)
	if !ok {
		that2, ok := that.(DNSCDSRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	return true
}
func (this *DSRecordValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DSRecordValue)
	if !ok {
		that2, ok := that.(DSRecordValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.KeyTag != that1.KeyTag {
		return false
	}
	if this.DsKeyAlgorithm != that1.DsKeyAlgorithm {
		return false
	}
	if that1.DigestChoice == nil {
		if this.DigestChoice != nil {
			return false
		}
	} else if this.DigestChoice == nil {
		return false
	} else if !this.DigestChoice.Equal(that1.DigestChoice) {
		return false
	}
	return true
}
func (this *DSRecordValue_Sha1Digest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DSRecordValue_Sha1Digest)
	if !ok {
		that2, ok := that.(DSRecordValue_Sha1Digest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sha1Digest.Equal(that1.Sha1Digest) {
		return false
	}
	return true
}
func (this *DSRecordValue_Sha256Digest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DSRecordValue_Sha256Digest)
	if !ok {
		that2, ok := that.(DSRecordValue_Sha256Digest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sha256Digest.Equal(that1.Sha256Digest) {
		return false
	}
	return true
}
func (this *DSRecordValue_Sha384Digest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DSRecordValue_Sha384Digest)
	if !ok {
		that2, ok := that.(DSRecordValue_Sha384Digest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sha384Digest.Equal(that1.Sha384Digest) {
		return false
	}
	return true
}
func (this *SHA1Digest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SHA1Digest)
	if !ok {
		that2, ok := that.(SHA1Digest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Digest != that1.Digest {
		return false
	}
	return true
}
func (this *SHA256Digest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SHA256Digest)
	if !ok {
		that2, ok := that.(SHA256Digest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Digest != that1.Digest {
		return false
	}
	return true
}
func (this *SHA384Digest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SHA384Digest)
	if !ok {
		that2, ok := that.(SHA384Digest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Digest != that1.Digest {
		return false
	}
	return true
}
func (this *DNSAFSDBRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSAFSDBRecord)
	if !ok {
		that2, ok := that.(DNSAFSDBRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	return true
}
func (this *AFSDBRecordValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AFSDBRecordValue)
	if !ok {
		that2, ok := that.(AFSDBRecordValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Subtype != that1.Subtype {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	return true
}
func (this *DNSEUI48ResourceRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSEUI48ResourceRecord)
	if !ok {
		that2, ok := that.(DNSEUI48ResourceRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *DNSEUI64ResourceRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSEUI64ResourceRecord)
	if !ok {
		that2, ok := that.(DNSEUI64ResourceRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *DNSLOCResourceRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSLOCResourceRecord)
	if !ok {
		that2, ok := that.(DNSLOCResourceRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	return true
}
func (this *LOCValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LOCValue)
	if !ok {
		that2, ok := that.(LOCValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LatitudeDegree != that1.LatitudeDegree {
		return false
	}
	if this.LatitudeMinute != that1.LatitudeMinute {
		return false
	}
	if this.LatitudeSecond != that1.LatitudeSecond {
		return false
	}
	if this.LatitudeHemisphere != that1.LatitudeHemisphere {
		return false
	}
	if this.LongitudeDegree != that1.LongitudeDegree {
		return false
	}
	if this.LongitudeMinute != that1.LongitudeMinute {
		return false
	}
	if this.LongitudeSecond != that1.LongitudeSecond {
		return false
	}
	if this.LongitudeHemisphere != that1.LongitudeHemisphere {
		return false
	}
	if this.Altitude != that1.Altitude {
		return false
	}
	if this.LocationDiameter != that1.LocationDiameter {
		return false
	}
	if this.HorizontalPrecision != that1.HorizontalPrecision {
		return false
	}
	if this.VerticalPrecision != that1.VerticalPrecision {
		return false
	}
	return true
}
func (this *SecondaryDNSConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecondaryDNSConfig)
	if !ok {
		that2, ok := that.(SecondaryDNSConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PrimaryServers) != len(that1.PrimaryServers) {
		return false
	}
	for i := range this.PrimaryServers {
		if this.PrimaryServers[i] != that1.PrimaryServers[i] {
			return false
		}
	}
	if this.TsigKeyName != that1.TsigKeyName {
		return false
	}
	if this.TsigKeyAlgorithm != that1.TsigKeyAlgorithm {
		return false
	}
	if !this.TsigKeyValue.Equal(that1.TsigKeyValue) {
		return false
	}
	if !this.LastAxfrTimestamp.Equal(that1.LastAxfrTimestamp) {
		return false
	}
	if this.ZoneFile != that1.ZoneFile {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DnsType == nil {
		if this.DnsType != nil {
			return false
		}
	} else if this.DnsType == nil {
		return false
	} else if !this.DnsType.Equal(that1.DnsType) {
		return false
	}
	if this.SubscriptionId != that1.SubscriptionId {
		return false
	}
	if this.ServiceInstanceId != that1.ServiceInstanceId {
		return false
	}
	if this.NumOfDnsRecords != that1.NumOfDnsRecords {
		return false
	}
	return true
}
func (this *GlobalSpecType_Primary) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Primary)
	if !ok {
		that2, ok := that.(GlobalSpecType_Primary)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Primary.Equal(that1.Primary) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Secondary) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Secondary)
	if !ok {
		that2, ok := that.(GlobalSpecType_Secondary)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Secondary.Equal(that1.Secondary) {
		return false
	}
	return true
}
func (this *PrimaryDNSCreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrimaryDNSCreateSpecType)
	if !ok {
		that2, ok := that.(PrimaryDNSCreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SoaRecordParametersChoice == nil {
		if this.SoaRecordParametersChoice != nil {
			return false
		}
	} else if this.SoaRecordParametersChoice == nil {
		return false
	} else if !this.SoaRecordParametersChoice.Equal(that1.SoaRecordParametersChoice) {
		return false
	}
	if len(this.RrSetGroup) != len(that1.RrSetGroup) {
		return false
	}
	for i := range this.RrSetGroup {
		if !this.RrSetGroup[i].Equal(that1.RrSetGroup[i]) {
			return false
		}
	}
	if len(this.DefaultRrSetGroup) != len(that1.DefaultRrSetGroup) {
		return false
	}
	for i := range this.DefaultRrSetGroup {
		if !this.DefaultRrSetGroup[i].Equal(that1.DefaultRrSetGroup[i]) {
			return false
		}
	}
	if !this.DnssecMode.Equal(that1.DnssecMode) {
		return false
	}
	if this.AllowHttpLbManagedRecords != that1.AllowHttpLbManagedRecords {
		return false
	}
	return true
}
func (this *PrimaryDNSCreateSpecType_DefaultSoaParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrimaryDNSCreateSpecType_DefaultSoaParameters)
	if !ok {
		that2, ok := that.(PrimaryDNSCreateSpecType_DefaultSoaParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSoaParameters.Equal(that1.DefaultSoaParameters) {
		return false
	}
	return true
}
func (this *PrimaryDNSCreateSpecType_SoaParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrimaryDNSCreateSpecType_SoaParameters)
	if !ok {
		that2, ok := that.(PrimaryDNSCreateSpecType_SoaParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SoaParameters.Equal(that1.SoaParameters) {
		return false
	}
	return true
}
func (this *SecondaryDNSCreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecondaryDNSCreateSpecType)
	if !ok {
		that2, ok := that.(SecondaryDNSCreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PrimaryServers) != len(that1.PrimaryServers) {
		return false
	}
	for i := range this.PrimaryServers {
		if this.PrimaryServers[i] != that1.PrimaryServers[i] {
			return false
		}
	}
	if this.TsigKeyName != that1.TsigKeyName {
		return false
	}
	if this.TsigKeyAlgorithm != that1.TsigKeyAlgorithm {
		return false
	}
	if !this.TsigKeyValue.Equal(that1.TsigKeyValue) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DnsType == nil {
		if this.DnsType != nil {
			return false
		}
	} else if this.DnsType == nil {
		return false
	} else if !this.DnsType.Equal(that1.DnsType) {
		return false
	}
	return true
}
func (this *CreateSpecType_Primary) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Primary)
	if !ok {
		that2, ok := that.(CreateSpecType_Primary)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Primary.Equal(that1.Primary) {
		return false
	}
	return true
}
func (this *CreateSpecType_Secondary) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Secondary)
	if !ok {
		that2, ok := that.(CreateSpecType_Secondary)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Secondary.Equal(that1.Secondary) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DnsType == nil {
		if this.DnsType != nil {
			return false
		}
	} else if this.DnsType == nil {
		return false
	} else if !this.DnsType.Equal(that1.DnsType) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Primary) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Primary)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Primary)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Primary.Equal(that1.Primary) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Secondary) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Secondary)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Secondary)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Secondary.Equal(that1.Secondary) {
		return false
	}
	return true
}
func (this *PrimaryDNSGetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrimaryDNSGetSpecType)
	if !ok {
		that2, ok := that.(PrimaryDNSGetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SoaRecordParametersChoice == nil {
		if this.SoaRecordParametersChoice != nil {
			return false
		}
	} else if this.SoaRecordParametersChoice == nil {
		return false
	} else if !this.SoaRecordParametersChoice.Equal(that1.SoaRecordParametersChoice) {
		return false
	}
	if len(this.RrSetGroup) != len(that1.RrSetGroup) {
		return false
	}
	for i := range this.RrSetGroup {
		if !this.RrSetGroup[i].Equal(that1.RrSetGroup[i]) {
			return false
		}
	}
	if this.Serial != that1.Serial {
		return false
	}
	if this.Admin != that1.Admin {
		return false
	}
	if len(this.DefaultRrSetGroup) != len(that1.DefaultRrSetGroup) {
		return false
	}
	for i := range this.DefaultRrSetGroup {
		if !this.DefaultRrSetGroup[i].Equal(that1.DefaultRrSetGroup[i]) {
			return false
		}
	}
	if !this.DnssecMode.Equal(that1.DnssecMode) {
		return false
	}
	if this.AllowHttpLbManagedRecords != that1.AllowHttpLbManagedRecords {
		return false
	}
	return true
}
func (this *PrimaryDNSGetSpecType_DefaultSoaParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrimaryDNSGetSpecType_DefaultSoaParameters)
	if !ok {
		that2, ok := that.(PrimaryDNSGetSpecType_DefaultSoaParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSoaParameters.Equal(that1.DefaultSoaParameters) {
		return false
	}
	return true
}
func (this *PrimaryDNSGetSpecType_SoaParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrimaryDNSGetSpecType_SoaParameters)
	if !ok {
		that2, ok := that.(PrimaryDNSGetSpecType_SoaParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SoaParameters.Equal(that1.SoaParameters) {
		return false
	}
	return true
}
func (this *SecondaryDNSGetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecondaryDNSGetSpecType)
	if !ok {
		that2, ok := that.(SecondaryDNSGetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PrimaryServers) != len(that1.PrimaryServers) {
		return false
	}
	for i := range this.PrimaryServers {
		if this.PrimaryServers[i] != that1.PrimaryServers[i] {
			return false
		}
	}
	if this.TsigKeyName != that1.TsigKeyName {
		return false
	}
	if this.TsigKeyAlgorithm != that1.TsigKeyAlgorithm {
		return false
	}
	if !this.TsigKeyValue.Equal(that1.TsigKeyValue) {
		return false
	}
	if !this.LastAxfrTimestamp.Equal(that1.LastAxfrTimestamp) {
		return false
	}
	if this.ZoneFile != that1.ZoneFile {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if that1.DnsType == nil {
		if this.DnsType != nil {
			return false
		}
	} else if this.DnsType == nil {
		return false
	} else if !this.DnsType.Equal(that1.DnsType) {
		return false
	}
	if this.NumOfDnsRecords != that1.NumOfDnsRecords {
		return false
	}
	return true
}
func (this *GetSpecType_Primary) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Primary)
	if !ok {
		that2, ok := that.(GetSpecType_Primary)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Primary.Equal(that1.Primary) {
		return false
	}
	return true
}
func (this *GetSpecType_Secondary) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Secondary)
	if !ok {
		that2, ok := that.(GetSpecType_Secondary)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Secondary.Equal(that1.Secondary) {
		return false
	}
	return true
}
func (this *PrimaryDNSConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&dns_zone.PrimaryDNSConfig{")
	if this.SoaRecordParametersChoice != nil {
		s = append(s, "SoaRecordParametersChoice: "+fmt.Sprintf("%#v", this.SoaRecordParametersChoice)+",\n")
	}
	if this.RrSetGroup != nil {
		s = append(s, "RrSetGroup: "+fmt.Sprintf("%#v", this.RrSetGroup)+",\n")
	}
	s = append(s, "Serial: "+fmt.Sprintf("%#v", this.Serial)+",\n")
	s = append(s, "Admin: "+fmt.Sprintf("%#v", this.Admin)+",\n")
	if this.DefaultRrSetGroup != nil {
		s = append(s, "DefaultRrSetGroup: "+fmt.Sprintf("%#v", this.DefaultRrSetGroup)+",\n")
	}
	if this.DnssecMode != nil {
		s = append(s, "DnssecMode: "+fmt.Sprintf("%#v", this.DnssecMode)+",\n")
	}
	s = append(s, "AllowHttpLbManagedRecords: "+fmt.Sprintf("%#v", this.AllowHttpLbManagedRecords)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PrimaryDNSConfig_DefaultSoaParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.PrimaryDNSConfig_DefaultSoaParameters{` +
		`DefaultSoaParameters:` + fmt.Sprintf("%#v", this.DefaultSoaParameters) + `}`}, ", ")
	return s
}
func (this *PrimaryDNSConfig_SoaParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.PrimaryDNSConfig_SoaParameters{` +
		`SoaParameters:` + fmt.Sprintf("%#v", this.SoaParameters) + `}`}, ", ")
	return s
}
func (this *SOARecordParameterConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dns_zone.SOARecordParameterConfig{")
	s = append(s, "Refresh: "+fmt.Sprintf("%#v", this.Refresh)+",\n")
	s = append(s, "Retry: "+fmt.Sprintf("%#v", this.Retry)+",\n")
	s = append(s, "Expire: "+fmt.Sprintf("%#v", this.Expire)+",\n")
	s = append(s, "NegativeTtl: "+fmt.Sprintf("%#v", this.NegativeTtl)+",\n")
	s = append(s, "Ttl: "+fmt.Sprintf("%#v", this.Ttl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RRSetGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.RRSetGroup{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.RrSet != nil {
		s = append(s, "RrSet: "+fmt.Sprintf("%#v", this.RrSet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RRSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 23)
	s = append(s, "&dns_zone.RRSet{")
	s = append(s, "Ttl: "+fmt.Sprintf("%#v", this.Ttl)+",\n")
	if this.TypeRecordSet != nil {
		s = append(s, "TypeRecordSet: "+fmt.Sprintf("%#v", this.TypeRecordSet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RRSet_ARecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.RRSet_ARecord{` +
		`ARecord:` + fmt.Sprintf("%#v", this.ARecord) + `}`}, ", ")
	return s
}
func (this *RRSet_AaaaRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.RRSet_AaaaRecord{` +
		`AaaaRecord:` + fmt.Sprintf("%#v", this.AaaaRecord) + `}`}, ", ")
	return s
}
func (this *RRSet_AliasRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.RRSet_AliasRecord{` +
		`AliasRecord:` + fmt.Sprintf("%#v", this.AliasRecord) + `}`}, ", ")
	return s
}
func (this *RRSet_CaaRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.RRSet_CaaRecord{` +
		`CaaRecord:` + fmt.Sprintf("%#v", this.CaaRecord) + `}`}, ", ")
	return s
}
func (this *RRSet_CnameRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.RRSet_CnameRecord{` +
		`CnameRecord:` + fmt.Sprintf("%#v", this.CnameRecord) + `}`}, ", ")
	return s
}
func (this *RRSet_MxRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.RRSet_MxRecord{` +
		`MxRecord:` + fmt.Sprintf("%#v", this.MxRecord) + `}`}, ", ")
	return s
}
func (this *RRSet_NsRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.RRSet_NsRecord{` +
		`NsRecord:` + fmt.Sprintf("%#v", this.NsRecord) + `}`}, ", ")
	return s
}
func (this *RRSet_PtrRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.RRSet_PtrRecord{` +
		`PtrRecord:` + fmt.Sprintf("%#v", this.PtrRecord) + `}`}, ", ")
	return s
}
func (this *RRSet_SrvRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.RRSet_SrvRecord{` +
		`SrvRecord:` + fmt.Sprintf("%#v", this.SrvRecord) + `}`}, ", ")
	return s
}
func (this *RRSet_TxtRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.RRSet_TxtRecord{` +
		`TxtRecord:` + fmt.Sprintf("%#v", this.TxtRecord) + `}`}, ", ")
	return s
}
func (this *RRSet_LbRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.RRSet_LbRecord{` +
		`LbRecord:` + fmt.Sprintf("%#v", this.LbRecord) + `}`}, ", ")
	return s
}
func (this *RRSet_NaptrRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.RRSet_NaptrRecord{` +
		`NaptrRecord:` + fmt.Sprintf("%#v", this.NaptrRecord) + `}`}, ", ")
	return s
}
func (this *RRSet_DsRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.RRSet_DsRecord{` +
		`DsRecord:` + fmt.Sprintf("%#v", this.DsRecord) + `}`}, ", ")
	return s
}
func (this *RRSet_CdsRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.RRSet_CdsRecord{` +
		`CdsRecord:` + fmt.Sprintf("%#v", this.CdsRecord) + `}`}, ", ")
	return s
}
func (this *RRSet_AfsdbRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.RRSet_AfsdbRecord{` +
		`AfsdbRecord:` + fmt.Sprintf("%#v", this.AfsdbRecord) + `}`}, ", ")
	return s
}
func (this *RRSet_Eui48Record) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.RRSet_Eui48Record{` +
		`Eui48Record:` + fmt.Sprintf("%#v", this.Eui48Record) + `}`}, ", ")
	return s
}
func (this *RRSet_Eui64Record) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.RRSet_Eui64Record{` +
		`Eui64Record:` + fmt.Sprintf("%#v", this.Eui64Record) + `}`}, ", ")
	return s
}
func (this *RRSet_LocRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.RRSet_LocRecord{` +
		`LocRecord:` + fmt.Sprintf("%#v", this.LocRecord) + `}`}, ", ")
	return s
}
func (this *DNSAResourceRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.DNSAResourceRecord{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSAAAAResourceRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.DNSAAAAResourceRecord{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSAliasResourceRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.DNSAliasResourceRecord{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CertificationAuthorityAuthorization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dns_zone.CertificationAuthorityAuthorization{")
	s = append(s, "Flags: "+fmt.Sprintf("%#v", this.Flags)+",\n")
	s = append(s, "Tag: "+fmt.Sprintf("%#v", this.Tag)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSCAAResourceRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.DNSCAAResourceRecord{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSCNAMEResourceRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.DNSCNAMEResourceRecord{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MailExchanger) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.MailExchanger{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "Priority: "+fmt.Sprintf("%#v", this.Priority)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSMXResourceRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.DNSMXResourceRecord{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSNSResourceRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.DNSNSResourceRecord{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSPTRResourceRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.DNSPTRResourceRecord{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSSRVResourceRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.DNSSRVResourceRecord{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SRVService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dns_zone.SRVService{")
	s = append(s, "Priority: "+fmt.Sprintf("%#v", this.Priority)+",\n")
	s = append(s, "Weight: "+fmt.Sprintf("%#v", this.Weight)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSTXTResourceRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.DNSTXTResourceRecord{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSLBResourceRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.DNSLBResourceRecord{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSNAPTRResourceRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.DNSNAPTRResourceRecord{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NAPTRValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dns_zone.NAPTRValue{")
	s = append(s, "Order: "+fmt.Sprintf("%#v", this.Order)+",\n")
	s = append(s, "Preference: "+fmt.Sprintf("%#v", this.Preference)+",\n")
	s = append(s, "Flags: "+fmt.Sprintf("%#v", this.Flags)+",\n")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "Regexp: "+fmt.Sprintf("%#v", this.Regexp)+",\n")
	s = append(s, "Replacement: "+fmt.Sprintf("%#v", this.Replacement)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSDSRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.DNSDSRecord{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSCDSRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.DNSCDSRecord{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DSRecordValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dns_zone.DSRecordValue{")
	s = append(s, "KeyTag: "+fmt.Sprintf("%#v", this.KeyTag)+",\n")
	s = append(s, "DsKeyAlgorithm: "+fmt.Sprintf("%#v", this.DsKeyAlgorithm)+",\n")
	if this.DigestChoice != nil {
		s = append(s, "DigestChoice: "+fmt.Sprintf("%#v", this.DigestChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DSRecordValue_Sha1Digest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.DSRecordValue_Sha1Digest{` +
		`Sha1Digest:` + fmt.Sprintf("%#v", this.Sha1Digest) + `}`}, ", ")
	return s
}
func (this *DSRecordValue_Sha256Digest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.DSRecordValue_Sha256Digest{` +
		`Sha256Digest:` + fmt.Sprintf("%#v", this.Sha256Digest) + `}`}, ", ")
	return s
}
func (this *DSRecordValue_Sha384Digest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.DSRecordValue_Sha384Digest{` +
		`Sha384Digest:` + fmt.Sprintf("%#v", this.Sha384Digest) + `}`}, ", ")
	return s
}
func (this *SHA1Digest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dns_zone.SHA1Digest{")
	s = append(s, "Digest: "+fmt.Sprintf("%#v", this.Digest)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SHA256Digest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dns_zone.SHA256Digest{")
	s = append(s, "Digest: "+fmt.Sprintf("%#v", this.Digest)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SHA384Digest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dns_zone.SHA384Digest{")
	s = append(s, "Digest: "+fmt.Sprintf("%#v", this.Digest)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSAFSDBRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.DNSAFSDBRecord{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AFSDBRecordValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.AFSDBRecordValue{")
	s = append(s, "Subtype: "+fmt.Sprintf("%#v", this.Subtype)+",\n")
	s = append(s, "Hostname: "+fmt.Sprintf("%#v", this.Hostname)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSEUI48ResourceRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.DNSEUI48ResourceRecord{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSEUI64ResourceRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.DNSEUI64ResourceRecord{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSLOCResourceRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.DNSLOCResourceRecord{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LOCValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&dns_zone.LOCValue{")
	s = append(s, "LatitudeDegree: "+fmt.Sprintf("%#v", this.LatitudeDegree)+",\n")
	s = append(s, "LatitudeMinute: "+fmt.Sprintf("%#v", this.LatitudeMinute)+",\n")
	s = append(s, "LatitudeSecond: "+fmt.Sprintf("%#v", this.LatitudeSecond)+",\n")
	s = append(s, "LatitudeHemisphere: "+fmt.Sprintf("%#v", this.LatitudeHemisphere)+",\n")
	s = append(s, "LongitudeDegree: "+fmt.Sprintf("%#v", this.LongitudeDegree)+",\n")
	s = append(s, "LongitudeMinute: "+fmt.Sprintf("%#v", this.LongitudeMinute)+",\n")
	s = append(s, "LongitudeSecond: "+fmt.Sprintf("%#v", this.LongitudeSecond)+",\n")
	s = append(s, "LongitudeHemisphere: "+fmt.Sprintf("%#v", this.LongitudeHemisphere)+",\n")
	s = append(s, "Altitude: "+fmt.Sprintf("%#v", this.Altitude)+",\n")
	s = append(s, "LocationDiameter: "+fmt.Sprintf("%#v", this.LocationDiameter)+",\n")
	s = append(s, "HorizontalPrecision: "+fmt.Sprintf("%#v", this.HorizontalPrecision)+",\n")
	s = append(s, "VerticalPrecision: "+fmt.Sprintf("%#v", this.VerticalPrecision)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecondaryDNSConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dns_zone.SecondaryDNSConfig{")
	s = append(s, "PrimaryServers: "+fmt.Sprintf("%#v", this.PrimaryServers)+",\n")
	s = append(s, "TsigKeyName: "+fmt.Sprintf("%#v", this.TsigKeyName)+",\n")
	s = append(s, "TsigKeyAlgorithm: "+fmt.Sprintf("%#v", this.TsigKeyAlgorithm)+",\n")
	if this.TsigKeyValue != nil {
		s = append(s, "TsigKeyValue: "+fmt.Sprintf("%#v", this.TsigKeyValue)+",\n")
	}
	if this.LastAxfrTimestamp != nil {
		s = append(s, "LastAxfrTimestamp: "+fmt.Sprintf("%#v", this.LastAxfrTimestamp)+",\n")
	}
	s = append(s, "ZoneFile: "+fmt.Sprintf("%#v", this.ZoneFile)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dns_zone.GlobalSpecType{")
	if this.DnsType != nil {
		s = append(s, "DnsType: "+fmt.Sprintf("%#v", this.DnsType)+",\n")
	}
	s = append(s, "SubscriptionId: "+fmt.Sprintf("%#v", this.SubscriptionId)+",\n")
	s = append(s, "ServiceInstanceId: "+fmt.Sprintf("%#v", this.ServiceInstanceId)+",\n")
	s = append(s, "NumOfDnsRecords: "+fmt.Sprintf("%#v", this.NumOfDnsRecords)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_Primary) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.GlobalSpecType_Primary{` +
		`Primary:` + fmt.Sprintf("%#v", this.Primary) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Secondary) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.GlobalSpecType_Secondary{` +
		`Secondary:` + fmt.Sprintf("%#v", this.Secondary) + `}`}, ", ")
	return s
}
func (this *PrimaryDNSCreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dns_zone.PrimaryDNSCreateSpecType{")
	if this.SoaRecordParametersChoice != nil {
		s = append(s, "SoaRecordParametersChoice: "+fmt.Sprintf("%#v", this.SoaRecordParametersChoice)+",\n")
	}
	if this.RrSetGroup != nil {
		s = append(s, "RrSetGroup: "+fmt.Sprintf("%#v", this.RrSetGroup)+",\n")
	}
	if this.DefaultRrSetGroup != nil {
		s = append(s, "DefaultRrSetGroup: "+fmt.Sprintf("%#v", this.DefaultRrSetGroup)+",\n")
	}
	if this.DnssecMode != nil {
		s = append(s, "DnssecMode: "+fmt.Sprintf("%#v", this.DnssecMode)+",\n")
	}
	s = append(s, "AllowHttpLbManagedRecords: "+fmt.Sprintf("%#v", this.AllowHttpLbManagedRecords)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PrimaryDNSCreateSpecType_DefaultSoaParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.PrimaryDNSCreateSpecType_DefaultSoaParameters{` +
		`DefaultSoaParameters:` + fmt.Sprintf("%#v", this.DefaultSoaParameters) + `}`}, ", ")
	return s
}
func (this *PrimaryDNSCreateSpecType_SoaParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.PrimaryDNSCreateSpecType_SoaParameters{` +
		`SoaParameters:` + fmt.Sprintf("%#v", this.SoaParameters) + `}`}, ", ")
	return s
}
func (this *SecondaryDNSCreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dns_zone.SecondaryDNSCreateSpecType{")
	s = append(s, "PrimaryServers: "+fmt.Sprintf("%#v", this.PrimaryServers)+",\n")
	s = append(s, "TsigKeyName: "+fmt.Sprintf("%#v", this.TsigKeyName)+",\n")
	s = append(s, "TsigKeyAlgorithm: "+fmt.Sprintf("%#v", this.TsigKeyAlgorithm)+",\n")
	if this.TsigKeyValue != nil {
		s = append(s, "TsigKeyValue: "+fmt.Sprintf("%#v", this.TsigKeyValue)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.CreateSpecType{")
	if this.DnsType != nil {
		s = append(s, "DnsType: "+fmt.Sprintf("%#v", this.DnsType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_Primary) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.CreateSpecType_Primary{` +
		`Primary:` + fmt.Sprintf("%#v", this.Primary) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Secondary) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.CreateSpecType_Secondary{` +
		`Secondary:` + fmt.Sprintf("%#v", this.Secondary) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.ReplaceSpecType{")
	if this.DnsType != nil {
		s = append(s, "DnsType: "+fmt.Sprintf("%#v", this.DnsType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_Primary) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.ReplaceSpecType_Primary{` +
		`Primary:` + fmt.Sprintf("%#v", this.Primary) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Secondary) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.ReplaceSpecType_Secondary{` +
		`Secondary:` + fmt.Sprintf("%#v", this.Secondary) + `}`}, ", ")
	return s
}
func (this *PrimaryDNSGetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&dns_zone.PrimaryDNSGetSpecType{")
	if this.SoaRecordParametersChoice != nil {
		s = append(s, "SoaRecordParametersChoice: "+fmt.Sprintf("%#v", this.SoaRecordParametersChoice)+",\n")
	}
	if this.RrSetGroup != nil {
		s = append(s, "RrSetGroup: "+fmt.Sprintf("%#v", this.RrSetGroup)+",\n")
	}
	s = append(s, "Serial: "+fmt.Sprintf("%#v", this.Serial)+",\n")
	s = append(s, "Admin: "+fmt.Sprintf("%#v", this.Admin)+",\n")
	if this.DefaultRrSetGroup != nil {
		s = append(s, "DefaultRrSetGroup: "+fmt.Sprintf("%#v", this.DefaultRrSetGroup)+",\n")
	}
	if this.DnssecMode != nil {
		s = append(s, "DnssecMode: "+fmt.Sprintf("%#v", this.DnssecMode)+",\n")
	}
	s = append(s, "AllowHttpLbManagedRecords: "+fmt.Sprintf("%#v", this.AllowHttpLbManagedRecords)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PrimaryDNSGetSpecType_DefaultSoaParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.PrimaryDNSGetSpecType_DefaultSoaParameters{` +
		`DefaultSoaParameters:` + fmt.Sprintf("%#v", this.DefaultSoaParameters) + `}`}, ", ")
	return s
}
func (this *PrimaryDNSGetSpecType_SoaParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.PrimaryDNSGetSpecType_SoaParameters{` +
		`SoaParameters:` + fmt.Sprintf("%#v", this.SoaParameters) + `}`}, ", ")
	return s
}
func (this *SecondaryDNSGetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dns_zone.SecondaryDNSGetSpecType{")
	s = append(s, "PrimaryServers: "+fmt.Sprintf("%#v", this.PrimaryServers)+",\n")
	s = append(s, "TsigKeyName: "+fmt.Sprintf("%#v", this.TsigKeyName)+",\n")
	s = append(s, "TsigKeyAlgorithm: "+fmt.Sprintf("%#v", this.TsigKeyAlgorithm)+",\n")
	if this.TsigKeyValue != nil {
		s = append(s, "TsigKeyValue: "+fmt.Sprintf("%#v", this.TsigKeyValue)+",\n")
	}
	if this.LastAxfrTimestamp != nil {
		s = append(s, "LastAxfrTimestamp: "+fmt.Sprintf("%#v", this.LastAxfrTimestamp)+",\n")
	}
	s = append(s, "ZoneFile: "+fmt.Sprintf("%#v", this.ZoneFile)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dns_zone.GetSpecType{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.DnsType != nil {
		s = append(s, "DnsType: "+fmt.Sprintf("%#v", this.DnsType)+",\n")
	}
	s = append(s, "NumOfDnsRecords: "+fmt.Sprintf("%#v", this.NumOfDnsRecords)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_Primary) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.GetSpecType_Primary{` +
		`Primary:` + fmt.Sprintf("%#v", this.Primary) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Secondary) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.GetSpecType_Secondary{` +
		`Secondary:` + fmt.Sprintf("%#v", this.Secondary) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PrimaryDNSConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimaryDNSConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimaryDNSConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowHttpLbManagedRecords {
		i--
		if m.AllowHttpLbManagedRecords {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.DnssecMode != nil {
		{
			size, err := m.DnssecMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.DefaultRrSetGroup) > 0 {
		for iNdEx := len(m.DefaultRrSetGroup) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DefaultRrSetGroup[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x52
	}
	if m.Serial != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Serial))
		i--
		dAtA[i] = 0x48
	}
	if len(m.RrSetGroup) > 0 {
		for iNdEx := len(m.RrSetGroup) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RrSetGroup[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.SoaRecordParametersChoice != nil {
		{
			size := m.SoaRecordParametersChoice.Size()
			i -= size
			if _, err := m.SoaRecordParametersChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PrimaryDNSConfig_DefaultSoaParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimaryDNSConfig_DefaultSoaParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSoaParameters != nil {
		{
			size, err := m.DefaultSoaParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *PrimaryDNSConfig_SoaParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimaryDNSConfig_SoaParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SoaParameters != nil {
		{
			size, err := m.SoaParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *SOARecordParameterConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SOARecordParameterConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SOARecordParameterConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ttl != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Ttl))
		i--
		dAtA[i] = 0x28
	}
	if m.NegativeTtl != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NegativeTtl))
		i--
		dAtA[i] = 0x20
	}
	if m.Expire != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Expire))
		i--
		dAtA[i] = 0x18
	}
	if m.Retry != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Retry))
		i--
		dAtA[i] = 0x10
	}
	if m.Refresh != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Refresh))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RRSetGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RRSetGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RRSetGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RrSet) > 0 {
		for iNdEx := len(m.RrSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RrSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RRSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RRSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RRSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypeRecordSet != nil {
		{
			size := m.TypeRecordSet.Size()
			i -= size
			if _, err := m.TypeRecordSet.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Ttl != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Ttl))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RRSet_ARecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RRSet_ARecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ARecord != nil {
		{
			size, err := m.ARecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *RRSet_AaaaRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RRSet_AaaaRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AaaaRecord != nil {
		{
			size, err := m.AaaaRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *RRSet_AliasRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RRSet_AliasRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AliasRecord != nil {
		{
			size, err := m.AliasRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *RRSet_CaaRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RRSet_CaaRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CaaRecord != nil {
		{
			size, err := m.CaaRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RRSet_CnameRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RRSet_CnameRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CnameRecord != nil {
		{
			size, err := m.CnameRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RRSet_MxRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RRSet_MxRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MxRecord != nil {
		{
			size, err := m.MxRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RRSet_NsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RRSet_NsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NsRecord != nil {
		{
			size, err := m.NsRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RRSet_PtrRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RRSet_PtrRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PtrRecord != nil {
		{
			size, err := m.PtrRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RRSet_SrvRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RRSet_SrvRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SrvRecord != nil {
		{
			size, err := m.SrvRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RRSet_TxtRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RRSet_TxtRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TxtRecord != nil {
		{
			size, err := m.TxtRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RRSet_LbRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RRSet_LbRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LbRecord != nil {
		{
			size, err := m.LbRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RRSet_NaptrRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RRSet_NaptrRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NaptrRecord != nil {
		{
			size, err := m.NaptrRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RRSet_DsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RRSet_DsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DsRecord != nil {
		{
			size, err := m.DsRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RRSet_CdsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RRSet_CdsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CdsRecord != nil {
		{
			size, err := m.CdsRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RRSet_AfsdbRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RRSet_AfsdbRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AfsdbRecord != nil {
		{
			size, err := m.AfsdbRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RRSet_Eui48Record) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RRSet_Eui48Record) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Eui48Record != nil {
		{
			size, err := m.Eui48Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RRSet_Eui64Record) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RRSet_Eui64Record) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Eui64Record != nil {
		{
			size, err := m.Eui64Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RRSet_LocRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RRSet_LocRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LocRecord != nil {
		{
			size, err := m.LocRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *DNSAResourceRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSAResourceRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSAResourceRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNSAAAAResourceRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSAAAAResourceRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSAAAAResourceRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNSAliasResourceRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSAliasResourceRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSAliasResourceRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CertificationAuthorityAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertificationAuthorityAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertificationAuthorityAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x12
	}
	if m.Flags != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DNSCAAResourceRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSCAAResourceRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSCAAResourceRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNSCNAMEResourceRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSCNAMEResourceRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSCNAMEResourceRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MailExchanger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailExchanger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MailExchanger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Priority != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNSMXResourceRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSMXResourceRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSMXResourceRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNSNSResourceRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSNSResourceRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSNSResourceRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNSPTRResourceRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSPTRResourceRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSPTRResourceRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNSSRVResourceRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSSRVResourceRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSSRVResourceRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SRVService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SRVService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SRVService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x22
	}
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x18
	}
	if m.Weight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x10
	}
	if m.Priority != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DNSTXTResourceRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSTXTResourceRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSTXTResourceRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNSLBResourceRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSLBResourceRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSLBResourceRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNSNAPTRResourceRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSNAPTRResourceRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSNAPTRResourceRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NAPTRValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NAPTRValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NAPTRValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Replacement) > 0 {
		i -= len(m.Replacement)
		copy(dAtA[i:], m.Replacement)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Replacement)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Regexp) > 0 {
		i -= len(m.Regexp)
		copy(dAtA[i:], m.Regexp)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Regexp)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Flags) > 0 {
		i -= len(m.Flags)
		copy(dAtA[i:], m.Flags)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Flags)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Preference != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Preference))
		i--
		dAtA[i] = 0x10
	}
	if m.Order != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DNSDSRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSDSRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSDSRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNSCDSRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSCDSRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSCDSRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DSRecordValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSRecordValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DSRecordValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DigestChoice != nil {
		{
			size := m.DigestChoice.Size()
			i -= size
			if _, err := m.DigestChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DsKeyAlgorithm != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DsKeyAlgorithm))
		i--
		dAtA[i] = 0x10
	}
	if m.KeyTag != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.KeyTag))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DSRecordValue_Sha1Digest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DSRecordValue_Sha1Digest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sha1Digest != nil {
		{
			size, err := m.Sha1Digest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DSRecordValue_Sha256Digest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DSRecordValue_Sha256Digest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sha256Digest != nil {
		{
			size, err := m.Sha256Digest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *DSRecordValue_Sha384Digest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DSRecordValue_Sha384Digest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sha384Digest != nil {
		{
			size, err := m.Sha384Digest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *SHA1Digest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SHA1Digest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SHA1Digest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Digest) > 0 {
		i -= len(m.Digest)
		copy(dAtA[i:], m.Digest)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Digest)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SHA256Digest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SHA256Digest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SHA256Digest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Digest) > 0 {
		i -= len(m.Digest)
		copy(dAtA[i:], m.Digest)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Digest)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *SHA384Digest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SHA384Digest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SHA384Digest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Digest) > 0 {
		i -= len(m.Digest)
		copy(dAtA[i:], m.Digest)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Digest)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *DNSAFSDBRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSAFSDBRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSAFSDBRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AFSDBRecordValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AFSDBRecordValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AFSDBRecordValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0x12
	}
	if m.Subtype != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Subtype))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DNSEUI48ResourceRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSEUI48ResourceRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSEUI48ResourceRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNSEUI64ResourceRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSEUI64ResourceRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSEUI64ResourceRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNSLOCResourceRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSLOCResourceRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSLOCResourceRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LOCValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LOCValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LOCValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VerticalPrecision != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.VerticalPrecision))))
		i--
		dAtA[i] = 0x65
	}
	if m.HorizontalPrecision != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.HorizontalPrecision))))
		i--
		dAtA[i] = 0x5d
	}
	if m.LocationDiameter != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LocationDiameter))))
		i--
		dAtA[i] = 0x55
	}
	if m.Altitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Altitude))))
		i--
		dAtA[i] = 0x4d
	}
	if m.LongitudeHemisphere != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LongitudeHemisphere))
		i--
		dAtA[i] = 0x40
	}
	if m.LongitudeSecond != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LongitudeSecond))))
		i--
		dAtA[i] = 0x3d
	}
	if m.LongitudeMinute != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LongitudeMinute))
		i--
		dAtA[i] = 0x30
	}
	if m.LongitudeDegree != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LongitudeDegree))
		i--
		dAtA[i] = 0x28
	}
	if m.LatitudeHemisphere != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LatitudeHemisphere))
		i--
		dAtA[i] = 0x20
	}
	if m.LatitudeSecond != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LatitudeSecond))))
		i--
		dAtA[i] = 0x1d
	}
	if m.LatitudeMinute != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LatitudeMinute))
		i--
		dAtA[i] = 0x10
	}
	if m.LatitudeDegree != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LatitudeDegree))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SecondaryDNSConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecondaryDNSConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecondaryDNSConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ZoneFile) > 0 {
		i -= len(m.ZoneFile)
		copy(dAtA[i:], m.ZoneFile)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ZoneFile)))
		i--
		dAtA[i] = 0x52
	}
	if m.LastAxfrTimestamp != nil {
		{
			size, err := m.LastAxfrTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.TsigKeyValue != nil {
		{
			size, err := m.TsigKeyValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.TsigKeyAlgorithm != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TsigKeyAlgorithm))
		i--
		dAtA[i] = 0x38
	}
	if len(m.TsigKeyName) > 0 {
		i -= len(m.TsigKeyName)
		copy(dAtA[i:], m.TsigKeyName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TsigKeyName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PrimaryServers) > 0 {
		for iNdEx := len(m.PrimaryServers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PrimaryServers[iNdEx])
			copy(dAtA[i:], m.PrimaryServers[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.PrimaryServers[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumOfDnsRecords != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NumOfDnsRecords))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ServiceInstanceId) > 0 {
		i -= len(m.ServiceInstanceId)
		copy(dAtA[i:], m.ServiceInstanceId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ServiceInstanceId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SubscriptionId) > 0 {
		i -= len(m.SubscriptionId)
		copy(dAtA[i:], m.SubscriptionId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SubscriptionId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.DnsType != nil {
		{
			size := m.DnsType.Size()
			i -= size
			if _, err := m.DnsType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_Primary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Primary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Primary != nil {
		{
			size, err := m.Primary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Secondary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Secondary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Secondary != nil {
		{
			size, err := m.Secondary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *PrimaryDNSCreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimaryDNSCreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimaryDNSCreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowHttpLbManagedRecords {
		i--
		if m.AllowHttpLbManagedRecords {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.DnssecMode != nil {
		{
			size, err := m.DnssecMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.DefaultRrSetGroup) > 0 {
		for iNdEx := len(m.DefaultRrSetGroup) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DefaultRrSetGroup[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.RrSetGroup) > 0 {
		for iNdEx := len(m.RrSetGroup) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RrSetGroup[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.SoaRecordParametersChoice != nil {
		{
			size := m.SoaRecordParametersChoice.Size()
			i -= size
			if _, err := m.SoaRecordParametersChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PrimaryDNSCreateSpecType_DefaultSoaParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimaryDNSCreateSpecType_DefaultSoaParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSoaParameters != nil {
		{
			size, err := m.DefaultSoaParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *PrimaryDNSCreateSpecType_SoaParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimaryDNSCreateSpecType_SoaParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SoaParameters != nil {
		{
			size, err := m.SoaParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *SecondaryDNSCreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecondaryDNSCreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecondaryDNSCreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TsigKeyValue != nil {
		{
			size, err := m.TsigKeyValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.TsigKeyAlgorithm != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TsigKeyAlgorithm))
		i--
		dAtA[i] = 0x38
	}
	if len(m.TsigKeyName) > 0 {
		i -= len(m.TsigKeyName)
		copy(dAtA[i:], m.TsigKeyName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TsigKeyName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PrimaryServers) > 0 {
		for iNdEx := len(m.PrimaryServers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PrimaryServers[iNdEx])
			copy(dAtA[i:], m.PrimaryServers[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.PrimaryServers[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DnsType != nil {
		{
			size := m.DnsType.Size()
			i -= size
			if _, err := m.DnsType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_Primary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Primary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Primary != nil {
		{
			size, err := m.Primary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Secondary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Secondary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Secondary != nil {
		{
			size, err := m.Secondary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DnsType != nil {
		{
			size := m.DnsType.Size()
			i -= size
			if _, err := m.DnsType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_Primary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Primary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Primary != nil {
		{
			size, err := m.Primary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Secondary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Secondary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Secondary != nil {
		{
			size, err := m.Secondary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *PrimaryDNSGetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimaryDNSGetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimaryDNSGetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowHttpLbManagedRecords {
		i--
		if m.AllowHttpLbManagedRecords {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.DnssecMode != nil {
		{
			size, err := m.DnssecMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.DefaultRrSetGroup) > 0 {
		for iNdEx := len(m.DefaultRrSetGroup) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DefaultRrSetGroup[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x52
	}
	if m.Serial != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Serial))
		i--
		dAtA[i] = 0x48
	}
	if len(m.RrSetGroup) > 0 {
		for iNdEx := len(m.RrSetGroup) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RrSetGroup[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.SoaRecordParametersChoice != nil {
		{
			size := m.SoaRecordParametersChoice.Size()
			i -= size
			if _, err := m.SoaRecordParametersChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PrimaryDNSGetSpecType_DefaultSoaParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimaryDNSGetSpecType_DefaultSoaParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSoaParameters != nil {
		{
			size, err := m.DefaultSoaParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *PrimaryDNSGetSpecType_SoaParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimaryDNSGetSpecType_SoaParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SoaParameters != nil {
		{
			size, err := m.SoaParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *SecondaryDNSGetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecondaryDNSGetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecondaryDNSGetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ZoneFile) > 0 {
		i -= len(m.ZoneFile)
		copy(dAtA[i:], m.ZoneFile)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ZoneFile)))
		i--
		dAtA[i] = 0x52
	}
	if m.LastAxfrTimestamp != nil {
		{
			size, err := m.LastAxfrTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.TsigKeyValue != nil {
		{
			size, err := m.TsigKeyValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.TsigKeyAlgorithm != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TsigKeyAlgorithm))
		i--
		dAtA[i] = 0x38
	}
	if len(m.TsigKeyName) > 0 {
		i -= len(m.TsigKeyName)
		copy(dAtA[i:], m.TsigKeyName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TsigKeyName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PrimaryServers) > 0 {
		for iNdEx := len(m.PrimaryServers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PrimaryServers[iNdEx])
			copy(dAtA[i:], m.PrimaryServers[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.PrimaryServers[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumOfDnsRecords != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NumOfDnsRecords))
		i--
		dAtA[i] = 0x38
	}
	if m.DnsType != nil {
		{
			size := m.DnsType.Size()
			i -= size
			if _, err := m.DnsType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_Primary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Primary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Primary != nil {
		{
			size, err := m.Primary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Secondary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Secondary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Secondary != nil {
		{
			size, err := m.Secondary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PrimaryDNSConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SoaRecordParametersChoice != nil {
		n += m.SoaRecordParametersChoice.Size()
	}
	if len(m.RrSetGroup) > 0 {
		for _, e := range m.RrSetGroup {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Serial != 0 {
		n += 1 + sovTypes(uint64(m.Serial))
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.DefaultRrSetGroup) > 0 {
		for _, e := range m.DefaultRrSetGroup {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.DnssecMode != nil {
		l = m.DnssecMode.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AllowHttpLbManagedRecords {
		n += 2
	}
	return n
}

func (m *PrimaryDNSConfig_DefaultSoaParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSoaParameters != nil {
		l = m.DefaultSoaParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PrimaryDNSConfig_SoaParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SoaParameters != nil {
		l = m.SoaParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SOARecordParameterConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Refresh != 0 {
		n += 1 + sovTypes(uint64(m.Refresh))
	}
	if m.Retry != 0 {
		n += 1 + sovTypes(uint64(m.Retry))
	}
	if m.Expire != 0 {
		n += 1 + sovTypes(uint64(m.Expire))
	}
	if m.NegativeTtl != 0 {
		n += 1 + sovTypes(uint64(m.NegativeTtl))
	}
	if m.Ttl != 0 {
		n += 1 + sovTypes(uint64(m.Ttl))
	}
	return n
}

func (m *RRSetGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.RrSet) > 0 {
		for _, e := range m.RrSet {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *RRSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ttl != 0 {
		n += 1 + sovTypes(uint64(m.Ttl))
	}
	if m.TypeRecordSet != nil {
		n += m.TypeRecordSet.Size()
	}
	return n
}

func (m *RRSet_ARecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ARecord != nil {
		l = m.ARecord.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RRSet_AaaaRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AaaaRecord != nil {
		l = m.AaaaRecord.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RRSet_AliasRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AliasRecord != nil {
		l = m.AliasRecord.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RRSet_CaaRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaaRecord != nil {
		l = m.CaaRecord.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RRSet_CnameRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CnameRecord != nil {
		l = m.CnameRecord.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RRSet_MxRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MxRecord != nil {
		l = m.MxRecord.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RRSet_NsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NsRecord != nil {
		l = m.NsRecord.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RRSet_PtrRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PtrRecord != nil {
		l = m.PtrRecord.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RRSet_SrvRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SrvRecord != nil {
		l = m.SrvRecord.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RRSet_TxtRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxtRecord != nil {
		l = m.TxtRecord.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RRSet_LbRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LbRecord != nil {
		l = m.LbRecord.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RRSet_NaptrRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NaptrRecord != nil {
		l = m.NaptrRecord.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RRSet_DsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DsRecord != nil {
		l = m.DsRecord.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RRSet_CdsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CdsRecord != nil {
		l = m.CdsRecord.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RRSet_AfsdbRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AfsdbRecord != nil {
		l = m.AfsdbRecord.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RRSet_Eui48Record) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Eui48Record != nil {
		l = m.Eui48Record.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RRSet_Eui64Record) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Eui64Record != nil {
		l = m.Eui64Record.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RRSet_LocRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LocRecord != nil {
		l = m.LocRecord.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DNSAResourceRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *DNSAAAAResourceRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *DNSAliasResourceRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CertificationAuthorityAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovTypes(uint64(m.Flags))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DNSCAAResourceRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *DNSCNAMEResourceRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *MailExchanger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Priority != 0 {
		n += 1 + sovTypes(uint64(m.Priority))
	}
	return n
}

func (m *DNSMXResourceRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *DNSNSResourceRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *DNSPTRResourceRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *DNSSRVResourceRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *SRVService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Priority != 0 {
		n += 1 + sovTypes(uint64(m.Priority))
	}
	if m.Weight != 0 {
		n += 1 + sovTypes(uint64(m.Weight))
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DNSTXTResourceRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *DNSLBResourceRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DNSNAPTRResourceRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *NAPTRValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != 0 {
		n += 1 + sovTypes(uint64(m.Order))
	}
	if m.Preference != 0 {
		n += 1 + sovTypes(uint64(m.Preference))
	}
	l = len(m.Flags)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Regexp)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Replacement)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DNSDSRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *DNSCDSRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *DSRecordValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyTag != 0 {
		n += 1 + sovTypes(uint64(m.KeyTag))
	}
	if m.DsKeyAlgorithm != 0 {
		n += 1 + sovTypes(uint64(m.DsKeyAlgorithm))
	}
	if m.DigestChoice != nil {
		n += m.DigestChoice.Size()
	}
	return n
}

func (m *DSRecordValue_Sha1Digest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sha1Digest != nil {
		l = m.Sha1Digest.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DSRecordValue_Sha256Digest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sha256Digest != nil {
		l = m.Sha256Digest.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DSRecordValue_Sha384Digest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sha384Digest != nil {
		l = m.Sha384Digest.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SHA1Digest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SHA256Digest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SHA384Digest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DNSAFSDBRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *AFSDBRecordValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subtype != 0 {
		n += 1 + sovTypes(uint64(m.Subtype))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DNSEUI48ResourceRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DNSEUI64ResourceRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DNSLOCResourceRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *LOCValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatitudeDegree != 0 {
		n += 1 + sovTypes(uint64(m.LatitudeDegree))
	}
	if m.LatitudeMinute != 0 {
		n += 1 + sovTypes(uint64(m.LatitudeMinute))
	}
	if m.LatitudeSecond != 0 {
		n += 5
	}
	if m.LatitudeHemisphere != 0 {
		n += 1 + sovTypes(uint64(m.LatitudeHemisphere))
	}
	if m.LongitudeDegree != 0 {
		n += 1 + sovTypes(uint64(m.LongitudeDegree))
	}
	if m.LongitudeMinute != 0 {
		n += 1 + sovTypes(uint64(m.LongitudeMinute))
	}
	if m.LongitudeSecond != 0 {
		n += 5
	}
	if m.LongitudeHemisphere != 0 {
		n += 1 + sovTypes(uint64(m.LongitudeHemisphere))
	}
	if m.Altitude != 0 {
		n += 5
	}
	if m.LocationDiameter != 0 {
		n += 5
	}
	if m.HorizontalPrecision != 0 {
		n += 5
	}
	if m.VerticalPrecision != 0 {
		n += 5
	}
	return n
}

func (m *SecondaryDNSConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PrimaryServers) > 0 {
		for _, s := range m.PrimaryServers {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.TsigKeyName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TsigKeyAlgorithm != 0 {
		n += 1 + sovTypes(uint64(m.TsigKeyAlgorithm))
	}
	if m.TsigKeyValue != nil {
		l = m.TsigKeyValue.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LastAxfrTimestamp != nil {
		l = m.LastAxfrTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ZoneFile)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsType != nil {
		n += m.DnsType.Size()
	}
	l = len(m.SubscriptionId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ServiceInstanceId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.NumOfDnsRecords != 0 {
		n += 1 + sovTypes(uint64(m.NumOfDnsRecords))
	}
	return n
}

func (m *GlobalSpecType_Primary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Primary != nil {
		l = m.Primary.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Secondary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Secondary != nil {
		l = m.Secondary.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PrimaryDNSCreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SoaRecordParametersChoice != nil {
		n += m.SoaRecordParametersChoice.Size()
	}
	if len(m.RrSetGroup) > 0 {
		for _, e := range m.RrSetGroup {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DefaultRrSetGroup) > 0 {
		for _, e := range m.DefaultRrSetGroup {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.DnssecMode != nil {
		l = m.DnssecMode.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AllowHttpLbManagedRecords {
		n += 2
	}
	return n
}

func (m *PrimaryDNSCreateSpecType_DefaultSoaParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSoaParameters != nil {
		l = m.DefaultSoaParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PrimaryDNSCreateSpecType_SoaParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SoaParameters != nil {
		l = m.SoaParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SecondaryDNSCreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PrimaryServers) > 0 {
		for _, s := range m.PrimaryServers {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.TsigKeyName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TsigKeyAlgorithm != 0 {
		n += 1 + sovTypes(uint64(m.TsigKeyAlgorithm))
	}
	if m.TsigKeyValue != nil {
		l = m.TsigKeyValue.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsType != nil {
		n += m.DnsType.Size()
	}
	return n
}

func (m *CreateSpecType_Primary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Primary != nil {
		l = m.Primary.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Secondary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Secondary != nil {
		l = m.Secondary.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsType != nil {
		n += m.DnsType.Size()
	}
	return n
}

func (m *ReplaceSpecType_Primary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Primary != nil {
		l = m.Primary.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Secondary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Secondary != nil {
		l = m.Secondary.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PrimaryDNSGetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SoaRecordParametersChoice != nil {
		n += m.SoaRecordParametersChoice.Size()
	}
	if len(m.RrSetGroup) > 0 {
		for _, e := range m.RrSetGroup {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Serial != 0 {
		n += 1 + sovTypes(uint64(m.Serial))
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.DefaultRrSetGroup) > 0 {
		for _, e := range m.DefaultRrSetGroup {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.DnssecMode != nil {
		l = m.DnssecMode.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AllowHttpLbManagedRecords {
		n += 2
	}
	return n
}

func (m *PrimaryDNSGetSpecType_DefaultSoaParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSoaParameters != nil {
		l = m.DefaultSoaParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PrimaryDNSGetSpecType_SoaParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SoaParameters != nil {
		l = m.SoaParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SecondaryDNSGetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PrimaryServers) > 0 {
		for _, s := range m.PrimaryServers {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.TsigKeyName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TsigKeyAlgorithm != 0 {
		n += 1 + sovTypes(uint64(m.TsigKeyAlgorithm))
	}
	if m.TsigKeyValue != nil {
		l = m.TsigKeyValue.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LastAxfrTimestamp != nil {
		l = m.LastAxfrTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ZoneFile)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DnsType != nil {
		n += m.DnsType.Size()
	}
	if m.NumOfDnsRecords != 0 {
		n += 1 + sovTypes(uint64(m.NumOfDnsRecords))
	}
	return n
}

func (m *GetSpecType_Primary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Primary != nil {
		l = m.Primary.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Secondary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Secondary != nil {
		l = m.Secondary.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PrimaryDNSConfig) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRrSetGroup := "[]*RRSetGroup{"
	for _, f := range this.RrSetGroup {
		repeatedStringForRrSetGroup += strings.Replace(f.String(), "RRSetGroup", "RRSetGroup", 1) + ","
	}
	repeatedStringForRrSetGroup += "}"
	repeatedStringForDefaultRrSetGroup := "[]*RRSet{"
	for _, f := range this.DefaultRrSetGroup {
		repeatedStringForDefaultRrSetGroup += strings.Replace(f.String(), "RRSet", "RRSet", 1) + ","
	}
	repeatedStringForDefaultRrSetGroup += "}"
	s := strings.Join([]string{`&PrimaryDNSConfig{`,
		`SoaRecordParametersChoice:` + fmt.Sprintf("%v", this.SoaRecordParametersChoice) + `,`,
		`RrSetGroup:` + repeatedStringForRrSetGroup + `,`,
		`Serial:` + fmt.Sprintf("%v", this.Serial) + `,`,
		`Admin:` + fmt.Sprintf("%v", this.Admin) + `,`,
		`DefaultRrSetGroup:` + repeatedStringForDefaultRrSetGroup + `,`,
		`DnssecMode:` + strings.Replace(fmt.Sprintf("%v", this.DnssecMode), "DNSSECMode", "DNSSECMode", 1) + `,`,
		`AllowHttpLbManagedRecords:` + fmt.Sprintf("%v", this.AllowHttpLbManagedRecords) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrimaryDNSConfig_DefaultSoaParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrimaryDNSConfig_DefaultSoaParameters{`,
		`DefaultSoaParameters:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSoaParameters), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrimaryDNSConfig_SoaParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrimaryDNSConfig_SoaParameters{`,
		`SoaParameters:` + strings.Replace(fmt.Sprintf("%v", this.SoaParameters), "SOARecordParameterConfig", "SOARecordParameterConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SOARecordParameterConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SOARecordParameterConfig{`,
		`Refresh:` + fmt.Sprintf("%v", this.Refresh) + `,`,
		`Retry:` + fmt.Sprintf("%v", this.Retry) + `,`,
		`Expire:` + fmt.Sprintf("%v", this.Expire) + `,`,
		`NegativeTtl:` + fmt.Sprintf("%v", this.NegativeTtl) + `,`,
		`Ttl:` + fmt.Sprintf("%v", this.Ttl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RRSetGroup) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRrSet := "[]*RRSet{"
	for _, f := range this.RrSet {
		repeatedStringForRrSet += strings.Replace(f.String(), "RRSet", "RRSet", 1) + ","
	}
	repeatedStringForRrSet += "}"
	s := strings.Join([]string{`&RRSetGroup{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`RrSet:` + repeatedStringForRrSet + `,`,
		`}`,
	}, "")
	return s
}
func (this *RRSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RRSet{`,
		`Ttl:` + fmt.Sprintf("%v", this.Ttl) + `,`,
		`TypeRecordSet:` + fmt.Sprintf("%v", this.TypeRecordSet) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RRSet_ARecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RRSet_ARecord{`,
		`ARecord:` + strings.Replace(fmt.Sprintf("%v", this.ARecord), "DNSAResourceRecord", "DNSAResourceRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RRSet_AaaaRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RRSet_AaaaRecord{`,
		`AaaaRecord:` + strings.Replace(fmt.Sprintf("%v", this.AaaaRecord), "DNSAAAAResourceRecord", "DNSAAAAResourceRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RRSet_AliasRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RRSet_AliasRecord{`,
		`AliasRecord:` + strings.Replace(fmt.Sprintf("%v", this.AliasRecord), "DNSAliasResourceRecord", "DNSAliasResourceRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RRSet_CaaRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RRSet_CaaRecord{`,
		`CaaRecord:` + strings.Replace(fmt.Sprintf("%v", this.CaaRecord), "DNSCAAResourceRecord", "DNSCAAResourceRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RRSet_CnameRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RRSet_CnameRecord{`,
		`CnameRecord:` + strings.Replace(fmt.Sprintf("%v", this.CnameRecord), "DNSCNAMEResourceRecord", "DNSCNAMEResourceRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RRSet_MxRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RRSet_MxRecord{`,
		`MxRecord:` + strings.Replace(fmt.Sprintf("%v", this.MxRecord), "DNSMXResourceRecord", "DNSMXResourceRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RRSet_NsRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RRSet_NsRecord{`,
		`NsRecord:` + strings.Replace(fmt.Sprintf("%v", this.NsRecord), "DNSNSResourceRecord", "DNSNSResourceRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RRSet_PtrRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RRSet_PtrRecord{`,
		`PtrRecord:` + strings.Replace(fmt.Sprintf("%v", this.PtrRecord), "DNSPTRResourceRecord", "DNSPTRResourceRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RRSet_SrvRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RRSet_SrvRecord{`,
		`SrvRecord:` + strings.Replace(fmt.Sprintf("%v", this.SrvRecord), "DNSSRVResourceRecord", "DNSSRVResourceRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RRSet_TxtRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RRSet_TxtRecord{`,
		`TxtRecord:` + strings.Replace(fmt.Sprintf("%v", this.TxtRecord), "DNSTXTResourceRecord", "DNSTXTResourceRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RRSet_LbRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RRSet_LbRecord{`,
		`LbRecord:` + strings.Replace(fmt.Sprintf("%v", this.LbRecord), "DNSLBResourceRecord", "DNSLBResourceRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RRSet_NaptrRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RRSet_NaptrRecord{`,
		`NaptrRecord:` + strings.Replace(fmt.Sprintf("%v", this.NaptrRecord), "DNSNAPTRResourceRecord", "DNSNAPTRResourceRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RRSet_DsRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RRSet_DsRecord{`,
		`DsRecord:` + strings.Replace(fmt.Sprintf("%v", this.DsRecord), "DNSDSRecord", "DNSDSRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RRSet_CdsRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RRSet_CdsRecord{`,
		`CdsRecord:` + strings.Replace(fmt.Sprintf("%v", this.CdsRecord), "DNSCDSRecord", "DNSCDSRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RRSet_AfsdbRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RRSet_AfsdbRecord{`,
		`AfsdbRecord:` + strings.Replace(fmt.Sprintf("%v", this.AfsdbRecord), "DNSAFSDBRecord", "DNSAFSDBRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RRSet_Eui48Record) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RRSet_Eui48Record{`,
		`Eui48Record:` + strings.Replace(fmt.Sprintf("%v", this.Eui48Record), "DNSEUI48ResourceRecord", "DNSEUI48ResourceRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RRSet_Eui64Record) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RRSet_Eui64Record{`,
		`Eui64Record:` + strings.Replace(fmt.Sprintf("%v", this.Eui64Record), "DNSEUI64ResourceRecord", "DNSEUI64ResourceRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RRSet_LocRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RRSet_LocRecord{`,
		`LocRecord:` + strings.Replace(fmt.Sprintf("%v", this.LocRecord), "DNSLOCResourceRecord", "DNSLOCResourceRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSAResourceRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSAResourceRecord{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Values:` + fmt.Sprintf("%v", this.Values) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSAAAAResourceRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSAAAAResourceRecord{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Values:` + fmt.Sprintf("%v", this.Values) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSAliasResourceRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSAliasResourceRecord{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CertificationAuthorityAuthorization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CertificationAuthorityAuthorization{`,
		`Flags:` + fmt.Sprintf("%v", this.Flags) + `,`,
		`Tag:` + fmt.Sprintf("%v", this.Tag) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSCAAResourceRecord) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValues := "[]*CertificationAuthorityAuthorization{"
	for _, f := range this.Values {
		repeatedStringForValues += strings.Replace(f.String(), "CertificationAuthorityAuthorization", "CertificationAuthorityAuthorization", 1) + ","
	}
	repeatedStringForValues += "}"
	s := strings.Join([]string{`&DNSCAAResourceRecord{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Values:` + repeatedStringForValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSCNAMEResourceRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSCNAMEResourceRecord{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MailExchanger) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MailExchanger{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`Priority:` + fmt.Sprintf("%v", this.Priority) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSMXResourceRecord) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValues := "[]*MailExchanger{"
	for _, f := range this.Values {
		repeatedStringForValues += strings.Replace(f.String(), "MailExchanger", "MailExchanger", 1) + ","
	}
	repeatedStringForValues += "}"
	s := strings.Join([]string{`&DNSMXResourceRecord{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Values:` + repeatedStringForValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSNSResourceRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSNSResourceRecord{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Values:` + fmt.Sprintf("%v", this.Values) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSPTRResourceRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSPTRResourceRecord{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Values:` + fmt.Sprintf("%v", this.Values) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSSRVResourceRecord) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValues := "[]*SRVService{"
	for _, f := range this.Values {
		repeatedStringForValues += strings.Replace(f.String(), "SRVService", "SRVService", 1) + ","
	}
	repeatedStringForValues += "}"
	s := strings.Join([]string{`&DNSSRVResourceRecord{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Values:` + repeatedStringForValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *SRVService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SRVService{`,
		`Priority:` + fmt.Sprintf("%v", this.Priority) + `,`,
		`Weight:` + fmt.Sprintf("%v", this.Weight) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSTXTResourceRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSTXTResourceRecord{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Values:` + fmt.Sprintf("%v", this.Values) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSLBResourceRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSLBResourceRecord{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Value:` + strings.Replace(fmt.Sprintf("%v", this.Value), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSNAPTRResourceRecord) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValues := "[]*NAPTRValue{"
	for _, f := range this.Values {
		repeatedStringForValues += strings.Replace(f.String(), "NAPTRValue", "NAPTRValue", 1) + ","
	}
	repeatedStringForValues += "}"
	s := strings.Join([]string{`&DNSNAPTRResourceRecord{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Values:` + repeatedStringForValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *NAPTRValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NAPTRValue{`,
		`Order:` + fmt.Sprintf("%v", this.Order) + `,`,
		`Preference:` + fmt.Sprintf("%v", this.Preference) + `,`,
		`Flags:` + fmt.Sprintf("%v", this.Flags) + `,`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`Regexp:` + fmt.Sprintf("%v", this.Regexp) + `,`,
		`Replacement:` + fmt.Sprintf("%v", this.Replacement) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSDSRecord) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValues := "[]*DSRecordValue{"
	for _, f := range this.Values {
		repeatedStringForValues += strings.Replace(f.String(), "DSRecordValue", "DSRecordValue", 1) + ","
	}
	repeatedStringForValues += "}"
	s := strings.Join([]string{`&DNSDSRecord{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Values:` + repeatedStringForValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSCDSRecord) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValues := "[]*DSRecordValue{"
	for _, f := range this.Values {
		repeatedStringForValues += strings.Replace(f.String(), "DSRecordValue", "DSRecordValue", 1) + ","
	}
	repeatedStringForValues += "}"
	s := strings.Join([]string{`&DNSCDSRecord{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Values:` + repeatedStringForValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *DSRecordValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DSRecordValue{`,
		`KeyTag:` + fmt.Sprintf("%v", this.KeyTag) + `,`,
		`DsKeyAlgorithm:` + fmt.Sprintf("%v", this.DsKeyAlgorithm) + `,`,
		`DigestChoice:` + fmt.Sprintf("%v", this.DigestChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DSRecordValue_Sha1Digest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DSRecordValue_Sha1Digest{`,
		`Sha1Digest:` + strings.Replace(fmt.Sprintf("%v", this.Sha1Digest), "SHA1Digest", "SHA1Digest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DSRecordValue_Sha256Digest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DSRecordValue_Sha256Digest{`,
		`Sha256Digest:` + strings.Replace(fmt.Sprintf("%v", this.Sha256Digest), "SHA256Digest", "SHA256Digest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DSRecordValue_Sha384Digest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DSRecordValue_Sha384Digest{`,
		`Sha384Digest:` + strings.Replace(fmt.Sprintf("%v", this.Sha384Digest), "SHA384Digest", "SHA384Digest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SHA1Digest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SHA1Digest{`,
		`Digest:` + fmt.Sprintf("%v", this.Digest) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SHA256Digest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SHA256Digest{`,
		`Digest:` + fmt.Sprintf("%v", this.Digest) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SHA384Digest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SHA384Digest{`,
		`Digest:` + fmt.Sprintf("%v", this.Digest) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSAFSDBRecord) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValues := "[]*AFSDBRecordValue{"
	for _, f := range this.Values {
		repeatedStringForValues += strings.Replace(f.String(), "AFSDBRecordValue", "AFSDBRecordValue", 1) + ","
	}
	repeatedStringForValues += "}"
	s := strings.Join([]string{`&DNSAFSDBRecord{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Values:` + repeatedStringForValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *AFSDBRecordValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AFSDBRecordValue{`,
		`Subtype:` + fmt.Sprintf("%v", this.Subtype) + `,`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSEUI48ResourceRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSEUI48ResourceRecord{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSEUI64ResourceRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSEUI64ResourceRecord{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSLOCResourceRecord) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValues := "[]*LOCValue{"
	for _, f := range this.Values {
		repeatedStringForValues += strings.Replace(f.String(), "LOCValue", "LOCValue", 1) + ","
	}
	repeatedStringForValues += "}"
	s := strings.Join([]string{`&DNSLOCResourceRecord{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Values:` + repeatedStringForValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *LOCValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LOCValue{`,
		`LatitudeDegree:` + fmt.Sprintf("%v", this.LatitudeDegree) + `,`,
		`LatitudeMinute:` + fmt.Sprintf("%v", this.LatitudeMinute) + `,`,
		`LatitudeSecond:` + fmt.Sprintf("%v", this.LatitudeSecond) + `,`,
		`LatitudeHemisphere:` + fmt.Sprintf("%v", this.LatitudeHemisphere) + `,`,
		`LongitudeDegree:` + fmt.Sprintf("%v", this.LongitudeDegree) + `,`,
		`LongitudeMinute:` + fmt.Sprintf("%v", this.LongitudeMinute) + `,`,
		`LongitudeSecond:` + fmt.Sprintf("%v", this.LongitudeSecond) + `,`,
		`LongitudeHemisphere:` + fmt.Sprintf("%v", this.LongitudeHemisphere) + `,`,
		`Altitude:` + fmt.Sprintf("%v", this.Altitude) + `,`,
		`LocationDiameter:` + fmt.Sprintf("%v", this.LocationDiameter) + `,`,
		`HorizontalPrecision:` + fmt.Sprintf("%v", this.HorizontalPrecision) + `,`,
		`VerticalPrecision:` + fmt.Sprintf("%v", this.VerticalPrecision) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecondaryDNSConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecondaryDNSConfig{`,
		`PrimaryServers:` + fmt.Sprintf("%v", this.PrimaryServers) + `,`,
		`TsigKeyName:` + fmt.Sprintf("%v", this.TsigKeyName) + `,`,
		`TsigKeyAlgorithm:` + fmt.Sprintf("%v", this.TsigKeyAlgorithm) + `,`,
		`TsigKeyValue:` + strings.Replace(fmt.Sprintf("%v", this.TsigKeyValue), "SecretType", "schema.SecretType", 1) + `,`,
		`LastAxfrTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.LastAxfrTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`ZoneFile:` + fmt.Sprintf("%v", this.ZoneFile) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`DnsType:` + fmt.Sprintf("%v", this.DnsType) + `,`,
		`SubscriptionId:` + fmt.Sprintf("%v", this.SubscriptionId) + `,`,
		`ServiceInstanceId:` + fmt.Sprintf("%v", this.ServiceInstanceId) + `,`,
		`NumOfDnsRecords:` + fmt.Sprintf("%v", this.NumOfDnsRecords) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Primary) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Primary{`,
		`Primary:` + strings.Replace(fmt.Sprintf("%v", this.Primary), "PrimaryDNSConfig", "PrimaryDNSConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Secondary) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Secondary{`,
		`Secondary:` + strings.Replace(fmt.Sprintf("%v", this.Secondary), "SecondaryDNSConfig", "SecondaryDNSConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrimaryDNSCreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRrSetGroup := "[]*RRSetGroup{"
	for _, f := range this.RrSetGroup {
		repeatedStringForRrSetGroup += strings.Replace(f.String(), "RRSetGroup", "RRSetGroup", 1) + ","
	}
	repeatedStringForRrSetGroup += "}"
	repeatedStringForDefaultRrSetGroup := "[]*RRSet{"
	for _, f := range this.DefaultRrSetGroup {
		repeatedStringForDefaultRrSetGroup += strings.Replace(f.String(), "RRSet", "RRSet", 1) + ","
	}
	repeatedStringForDefaultRrSetGroup += "}"
	s := strings.Join([]string{`&PrimaryDNSCreateSpecType{`,
		`SoaRecordParametersChoice:` + fmt.Sprintf("%v", this.SoaRecordParametersChoice) + `,`,
		`RrSetGroup:` + repeatedStringForRrSetGroup + `,`,
		`DefaultRrSetGroup:` + repeatedStringForDefaultRrSetGroup + `,`,
		`DnssecMode:` + strings.Replace(fmt.Sprintf("%v", this.DnssecMode), "DNSSECMode", "DNSSECMode", 1) + `,`,
		`AllowHttpLbManagedRecords:` + fmt.Sprintf("%v", this.AllowHttpLbManagedRecords) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrimaryDNSCreateSpecType_DefaultSoaParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrimaryDNSCreateSpecType_DefaultSoaParameters{`,
		`DefaultSoaParameters:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSoaParameters), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrimaryDNSCreateSpecType_SoaParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrimaryDNSCreateSpecType_SoaParameters{`,
		`SoaParameters:` + strings.Replace(fmt.Sprintf("%v", this.SoaParameters), "SOARecordParameterConfig", "SOARecordParameterConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecondaryDNSCreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecondaryDNSCreateSpecType{`,
		`PrimaryServers:` + fmt.Sprintf("%v", this.PrimaryServers) + `,`,
		`TsigKeyName:` + fmt.Sprintf("%v", this.TsigKeyName) + `,`,
		`TsigKeyAlgorithm:` + fmt.Sprintf("%v", this.TsigKeyAlgorithm) + `,`,
		`TsigKeyValue:` + strings.Replace(fmt.Sprintf("%v", this.TsigKeyValue), "SecretType", "schema.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`DnsType:` + fmt.Sprintf("%v", this.DnsType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Primary) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Primary{`,
		`Primary:` + strings.Replace(fmt.Sprintf("%v", this.Primary), "PrimaryDNSCreateSpecType", "PrimaryDNSCreateSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Secondary) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Secondary{`,
		`Secondary:` + strings.Replace(fmt.Sprintf("%v", this.Secondary), "SecondaryDNSCreateSpecType", "SecondaryDNSCreateSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`DnsType:` + fmt.Sprintf("%v", this.DnsType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Primary) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Primary{`,
		`Primary:` + strings.Replace(fmt.Sprintf("%v", this.Primary), "PrimaryDNSCreateSpecType", "PrimaryDNSCreateSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Secondary) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Secondary{`,
		`Secondary:` + strings.Replace(fmt.Sprintf("%v", this.Secondary), "SecondaryDNSCreateSpecType", "SecondaryDNSCreateSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrimaryDNSGetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRrSetGroup := "[]*RRSetGroup{"
	for _, f := range this.RrSetGroup {
		repeatedStringForRrSetGroup += strings.Replace(f.String(), "RRSetGroup", "RRSetGroup", 1) + ","
	}
	repeatedStringForRrSetGroup += "}"
	repeatedStringForDefaultRrSetGroup := "[]*RRSet{"
	for _, f := range this.DefaultRrSetGroup {
		repeatedStringForDefaultRrSetGroup += strings.Replace(f.String(), "RRSet", "RRSet", 1) + ","
	}
	repeatedStringForDefaultRrSetGroup += "}"
	s := strings.Join([]string{`&PrimaryDNSGetSpecType{`,
		`SoaRecordParametersChoice:` + fmt.Sprintf("%v", this.SoaRecordParametersChoice) + `,`,
		`RrSetGroup:` + repeatedStringForRrSetGroup + `,`,
		`Serial:` + fmt.Sprintf("%v", this.Serial) + `,`,
		`Admin:` + fmt.Sprintf("%v", this.Admin) + `,`,
		`DefaultRrSetGroup:` + repeatedStringForDefaultRrSetGroup + `,`,
		`DnssecMode:` + strings.Replace(fmt.Sprintf("%v", this.DnssecMode), "DNSSECMode", "DNSSECMode", 1) + `,`,
		`AllowHttpLbManagedRecords:` + fmt.Sprintf("%v", this.AllowHttpLbManagedRecords) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrimaryDNSGetSpecType_DefaultSoaParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrimaryDNSGetSpecType_DefaultSoaParameters{`,
		`DefaultSoaParameters:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSoaParameters), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrimaryDNSGetSpecType_SoaParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrimaryDNSGetSpecType_SoaParameters{`,
		`SoaParameters:` + strings.Replace(fmt.Sprintf("%v", this.SoaParameters), "SOARecordParameterConfig", "SOARecordParameterConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecondaryDNSGetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecondaryDNSGetSpecType{`,
		`PrimaryServers:` + fmt.Sprintf("%v", this.PrimaryServers) + `,`,
		`TsigKeyName:` + fmt.Sprintf("%v", this.TsigKeyName) + `,`,
		`TsigKeyAlgorithm:` + fmt.Sprintf("%v", this.TsigKeyAlgorithm) + `,`,
		`TsigKeyValue:` + strings.Replace(fmt.Sprintf("%v", this.TsigKeyValue), "SecretType", "schema.SecretType", 1) + `,`,
		`LastAxfrTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.LastAxfrTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`ZoneFile:` + fmt.Sprintf("%v", this.ZoneFile) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`DnsType:` + fmt.Sprintf("%v", this.DnsType) + `,`,
		`NumOfDnsRecords:` + fmt.Sprintf("%v", this.NumOfDnsRecords) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Primary) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Primary{`,
		`Primary:` + strings.Replace(fmt.Sprintf("%v", this.Primary), "PrimaryDNSGetSpecType", "PrimaryDNSGetSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Secondary) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Secondary{`,
		`Secondary:` + strings.Replace(fmt.Sprintf("%v", this.Secondary), "SecondaryDNSGetSpecType", "SecondaryDNSGetSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PrimaryDNSConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimaryDNSConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimaryDNSConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSoaParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SoaRecordParametersChoice = &PrimaryDNSConfig_DefaultSoaParameters{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoaParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SOARecordParameterConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SoaRecordParametersChoice = &PrimaryDNSConfig_SoaParameters{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RrSetGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RrSetGroup = append(m.RrSetGroup, &RRSetGroup{})
			if err := m.RrSetGroup[len(m.RrSetGroup)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serial", wireType)
			}
			m.Serial = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Serial |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRrSetGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultRrSetGroup = append(m.DefaultRrSetGroup, &RRSet{})
			if err := m.DefaultRrSetGroup[len(m.DefaultRrSetGroup)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnssecMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DnssecMode == nil {
				m.DnssecMode = &DNSSECMode{}
			}
			if err := m.DnssecMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowHttpLbManagedRecords", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowHttpLbManagedRecords = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SOARecordParameterConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SOARecordParameterConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SOARecordParameterConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refresh", wireType)
			}
			m.Refresh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Refresh |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retry", wireType)
			}
			m.Retry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retry |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NegativeTtl", wireType)
			}
			m.NegativeTtl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NegativeTtl |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			m.Ttl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ttl |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RRSetGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RRSetGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RRSetGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RrSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RrSet = append(m.RrSet, &RRSet{})
			if err := m.RrSet[len(m.RrSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RRSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RRSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RRSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			m.Ttl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ttl |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ARecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DNSAResourceRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeRecordSet = &RRSet_ARecord{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AaaaRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DNSAAAAResourceRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeRecordSet = &RRSet_AaaaRecord{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliasRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DNSAliasResourceRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeRecordSet = &RRSet_AliasRecord{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaaRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DNSCAAResourceRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeRecordSet = &RRSet_CaaRecord{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CnameRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DNSCNAMEResourceRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeRecordSet = &RRSet_CnameRecord{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MxRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DNSMXResourceRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeRecordSet = &RRSet_MxRecord{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DNSNSResourceRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeRecordSet = &RRSet_NsRecord{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtrRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DNSPTRResourceRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeRecordSet = &RRSet_PtrRecord{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrvRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DNSSRVResourceRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeRecordSet = &RRSet_SrvRecord{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxtRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DNSTXTResourceRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeRecordSet = &RRSet_TxtRecord{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LbRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DNSLBResourceRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeRecordSet = &RRSet_LbRecord{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NaptrRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DNSNAPTRResourceRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeRecordSet = &RRSet_NaptrRecord{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DsRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DNSDSRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeRecordSet = &RRSet_DsRecord{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdsRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DNSCDSRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeRecordSet = &RRSet_CdsRecord{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfsdbRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DNSAFSDBRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeRecordSet = &RRSet_AfsdbRecord{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eui48Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DNSEUI48ResourceRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeRecordSet = &RRSet_Eui48Record{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eui64Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DNSEUI64ResourceRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeRecordSet = &RRSet_Eui64Record{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DNSLOCResourceRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeRecordSet = &RRSet_LocRecord{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSAResourceRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSAResourceRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSAResourceRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSAAAAResourceRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSAAAAResourceRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSAAAAResourceRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSAliasResourceRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSAliasResourceRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSAliasResourceRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertificationAuthorityAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificationAuthorityAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificationAuthorityAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSCAAResourceRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSCAAResourceRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSCAAResourceRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &CertificationAuthorityAuthorization{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSCNAMEResourceRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSCNAMEResourceRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSCNAMEResourceRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailExchanger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailExchanger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailExchanger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSMXResourceRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSMXResourceRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSMXResourceRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &MailExchanger{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSNSResourceRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSNSResourceRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSNSResourceRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSPTRResourceRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSPTRResourceRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSPTRResourceRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSSRVResourceRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSSRVResourceRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSSRVResourceRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &SRVService{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SRVService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SRVService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SRVService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSTXTResourceRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSTXTResourceRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSTXTResourceRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSLBResourceRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSLBResourceRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSLBResourceRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &views.ObjectRefType{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSNAPTRResourceRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSNAPTRResourceRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSNAPTRResourceRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &NAPTRValue{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NAPTRValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NAPTRValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NAPTRValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preference", wireType)
			}
			m.Preference = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Preference |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regexp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Regexp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replacement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replacement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSDSRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSDSRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSDSRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &DSRecordValue{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSCDSRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSCDSRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSCDSRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &DSRecordValue{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSRecordValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSRecordValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSRecordValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyTag", wireType)
			}
			m.KeyTag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyTag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DsKeyAlgorithm", wireType)
			}
			m.DsKeyAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DsKeyAlgorithm |= DSKeyAlgorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha1Digest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SHA1Digest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DigestChoice = &DSRecordValue_Sha1Digest{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha256Digest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SHA256Digest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DigestChoice = &DSRecordValue_Sha256Digest{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha384Digest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SHA384Digest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DigestChoice = &DSRecordValue_Sha384Digest{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SHA1Digest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SHA1Digest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SHA1Digest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SHA256Digest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SHA256Digest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SHA256Digest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SHA384Digest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SHA384Digest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SHA384Digest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSAFSDBRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSAFSDBRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSAFSDBRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &AFSDBRecordValue{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AFSDBRecordValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AFSDBRecordValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AFSDBRecordValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtype", wireType)
			}
			m.Subtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subtype |= AFSDBRecordSubtype(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSEUI48ResourceRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSEUI48ResourceRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSEUI48ResourceRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSEUI64ResourceRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSEUI64ResourceRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSEUI64ResourceRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSLOCResourceRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSLOCResourceRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSLOCResourceRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &LOCValue{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LOCValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LOCValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LOCValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatitudeDegree", wireType)
			}
			m.LatitudeDegree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatitudeDegree |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatitudeMinute", wireType)
			}
			m.LatitudeMinute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatitudeMinute |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatitudeSecond", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.LatitudeSecond = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatitudeHemisphere", wireType)
			}
			m.LatitudeHemisphere = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatitudeHemisphere |= LatitudeHemisphere(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongitudeDegree", wireType)
			}
			m.LongitudeDegree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LongitudeDegree |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongitudeMinute", wireType)
			}
			m.LongitudeMinute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LongitudeMinute |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongitudeSecond", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.LongitudeSecond = float32(math.Float32frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongitudeHemisphere", wireType)
			}
			m.LongitudeHemisphere = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LongitudeHemisphere |= LongitudeHemisphere(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Altitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Altitude = float32(math.Float32frombits(v))
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationDiameter", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.LocationDiameter = float32(math.Float32frombits(v))
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HorizontalPrecision", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.HorizontalPrecision = float32(math.Float32frombits(v))
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerticalPrecision", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.VerticalPrecision = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecondaryDNSConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecondaryDNSConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecondaryDNSConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryServers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryServers = append(m.PrimaryServers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsigKeyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TsigKeyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsigKeyAlgorithm", wireType)
			}
			m.TsigKeyAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TsigKeyAlgorithm |= TSIGKeyAlgorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsigKeyValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TsigKeyValue == nil {
				m.TsigKeyValue = &schema.SecretType{}
			}
			if err := m.TsigKeyValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAxfrTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastAxfrTimestamp == nil {
				m.LastAxfrTimestamp = &types.Timestamp{}
			}
			if err := m.LastAxfrTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZoneFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Primary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrimaryDNSConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DnsType = &GlobalSpecType_Primary{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secondary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SecondaryDNSConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DnsType = &GlobalSpecType_Secondary{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceInstanceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceInstanceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOfDnsRecords", wireType)
			}
			m.NumOfDnsRecords = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOfDnsRecords |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimaryDNSCreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimaryDNSCreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimaryDNSCreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSoaParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SoaRecordParametersChoice = &PrimaryDNSCreateSpecType_DefaultSoaParameters{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoaParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SOARecordParameterConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SoaRecordParametersChoice = &PrimaryDNSCreateSpecType_SoaParameters{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RrSetGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RrSetGroup = append(m.RrSetGroup, &RRSetGroup{})
			if err := m.RrSetGroup[len(m.RrSetGroup)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRrSetGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultRrSetGroup = append(m.DefaultRrSetGroup, &RRSet{})
			if err := m.DefaultRrSetGroup[len(m.DefaultRrSetGroup)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnssecMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DnssecMode == nil {
				m.DnssecMode = &DNSSECMode{}
			}
			if err := m.DnssecMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowHttpLbManagedRecords", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowHttpLbManagedRecords = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecondaryDNSCreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecondaryDNSCreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecondaryDNSCreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryServers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryServers = append(m.PrimaryServers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsigKeyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TsigKeyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsigKeyAlgorithm", wireType)
			}
			m.TsigKeyAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TsigKeyAlgorithm |= TSIGKeyAlgorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsigKeyValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TsigKeyValue == nil {
				m.TsigKeyValue = &schema.SecretType{}
			}
			if err := m.TsigKeyValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Primary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrimaryDNSCreateSpecType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DnsType = &CreateSpecType_Primary{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secondary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SecondaryDNSCreateSpecType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DnsType = &CreateSpecType_Secondary{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Primary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrimaryDNSCreateSpecType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DnsType = &ReplaceSpecType_Primary{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secondary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SecondaryDNSCreateSpecType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DnsType = &ReplaceSpecType_Secondary{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimaryDNSGetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimaryDNSGetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimaryDNSGetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSoaParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SoaRecordParametersChoice = &PrimaryDNSGetSpecType_DefaultSoaParameters{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoaParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SOARecordParameterConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SoaRecordParametersChoice = &PrimaryDNSGetSpecType_SoaParameters{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RrSetGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RrSetGroup = append(m.RrSetGroup, &RRSetGroup{})
			if err := m.RrSetGroup[len(m.RrSetGroup)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serial", wireType)
			}
			m.Serial = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Serial |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRrSetGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultRrSetGroup = append(m.DefaultRrSetGroup, &RRSet{})
			if err := m.DefaultRrSetGroup[len(m.DefaultRrSetGroup)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnssecMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DnssecMode == nil {
				m.DnssecMode = &DNSSECMode{}
			}
			if err := m.DnssecMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowHttpLbManagedRecords", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowHttpLbManagedRecords = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecondaryDNSGetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecondaryDNSGetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecondaryDNSGetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryServers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryServers = append(m.PrimaryServers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsigKeyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TsigKeyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsigKeyAlgorithm", wireType)
			}
			m.TsigKeyAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TsigKeyAlgorithm |= TSIGKeyAlgorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsigKeyValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TsigKeyValue == nil {
				m.TsigKeyValue = &schema.SecretType{}
			}
			if err := m.TsigKeyValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAxfrTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastAxfrTimestamp == nil {
				m.LastAxfrTimestamp = &types.Timestamp{}
			}
			if err := m.LastAxfrTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZoneFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Primary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrimaryDNSGetSpecType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DnsType = &GetSpecType_Primary{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secondary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SecondaryDNSGetSpecType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DnsType = &GetSpecType_Secondary{v}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOfDnsRecords", wireType)
			}
			m.NumOfDnsRecords = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOfDnsRecords |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
