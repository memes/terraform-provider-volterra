//
// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package dns_zone

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *DNSSECMode) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DNSSECMode) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DNSSECMode) DeepCopy() *DNSSECMode {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DNSSECMode{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DNSSECMode) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DNSSECMode) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DNSSECModeValidator().Validate(ctx, m, opts...)
}

type ValidateDNSSECMode struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDNSSECMode) ModeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mode")
	}
	return validatorFn, nil
}

func (v *ValidateDNSSECMode) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DNSSECMode)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DNSSECMode got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["mode"]; exists {
		val := m.GetMode()
		vOpts := append(opts,
			db.WithValidateField("mode"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMode().(type) {
	case *DNSSECMode_Disable:
		if fv, exists := v.FldValidators["mode.disable"]; exists {
			val := m.GetMode().(*DNSSECMode_Disable).Disable
			vOpts := append(opts,
				db.WithValidateField("mode"),
				db.WithValidateField("disable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DNSSECMode_Enable:
		if fv, exists := v.FldValidators["mode.enable"]; exists {
			val := m.GetMode().(*DNSSECMode_Enable).Enable
			vOpts := append(opts,
				db.WithValidateField("mode"),
				db.WithValidateField("enable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDNSSECModeValidator = func() *ValidateDNSSECMode {
	v := &ValidateDNSSECMode{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhMode := v.ModeValidationRuleHandler
	rulesMode := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMode(rulesMode)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DNSSECMode.mode: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mode"] = vFn

	return v
}()

func DNSSECModeValidator() db.Validator {
	return DefaultDNSSECModeValidator
}

// augmented methods on protoc/std generated struct

func (m *DNSSECModeEnable) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DNSSECModeEnable) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DNSSECModeEnable) DeepCopy() *DNSSECModeEnable {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DNSSECModeEnable{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DNSSECModeEnable) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DNSSECModeEnable) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DNSSECModeEnableValidator().Validate(ctx, m, opts...)
}

type ValidateDNSSECModeEnable struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDNSSECModeEnable) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DNSSECModeEnable)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DNSSECModeEnable got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDNSSECModeEnableValidator = func() *ValidateDNSSECModeEnable {
	v := &ValidateDNSSECModeEnable{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func DNSSECModeEnableValidator() db.Validator {
	return DefaultDNSSECModeEnableValidator
}

// augmented methods on protoc/std generated struct

func (m *DNSSECStatus) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DNSSECStatus) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DNSSECStatus) DeepCopy() *DNSSECStatus {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DNSSECStatus{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DNSSECStatus) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DNSSECStatus) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DNSSECStatusValidator().Validate(ctx, m, opts...)
}

type ValidateDNSSECStatus struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDNSSECStatus) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DNSSECStatus)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DNSSECStatus got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ds_records"]; exists {

		vOpts := append(opts, db.WithValidateField("ds_records"))
		for idx, item := range m.GetDsRecords() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["mode"]; exists {

		vOpts := append(opts, db.WithValidateField("mode"))
		if err := fv(ctx, m.GetMode(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDNSSECStatusValidator = func() *ValidateDNSSECStatus {
	v := &ValidateDNSSECStatus{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["mode"] = DNSSECModeValidator().Validate

	v.FldValidators["ds_records"] = DSRecordValidator().Validate

	return v
}()

func DNSSECStatusValidator() db.Validator {
	return DefaultDNSSECStatusValidator
}

// augmented methods on protoc/std generated struct

func (m *DSRecord) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DSRecord) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DSRecord) DeepCopy() *DSRecord {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DSRecord{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DSRecord) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DSRecord) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DSRecordValidator().Validate(ctx, m, opts...)
}

type ValidateDSRecord struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDSRecord) KeyTagValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for key_tag")
	}

	return validatorFn, nil
}

func (v *ValidateDSRecord) AlgorithmValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for algorithm")
	}

	return validatorFn, nil
}

func (v *ValidateDSRecord) DigestTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for digest_type")
	}

	return validatorFn, nil
}

func (v *ValidateDSRecord) DigestValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for digest")
	}

	return validatorFn, nil
}

func (v *ValidateDSRecord) FlagsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for flags")
	}

	return validatorFn, nil
}

func (v *ValidateDSRecord) TtlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ttl")
	}

	return validatorFn, nil
}

func (v *ValidateDSRecord) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DSRecord)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DSRecord got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["algorithm"]; exists {

		vOpts := append(opts, db.WithValidateField("algorithm"))
		if err := fv(ctx, m.GetAlgorithm(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["digest"]; exists {

		vOpts := append(opts, db.WithValidateField("digest"))
		if err := fv(ctx, m.GetDigest(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["digest_type"]; exists {

		vOpts := append(opts, db.WithValidateField("digest_type"))
		if err := fv(ctx, m.GetDigestType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["flags"]; exists {

		vOpts := append(opts, db.WithValidateField("flags"))
		if err := fv(ctx, m.GetFlags(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["key_tag"]; exists {

		vOpts := append(opts, db.WithValidateField("key_tag"))
		if err := fv(ctx, m.GetKeyTag(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["public_key"]; exists {

		vOpts := append(opts, db.WithValidateField("public_key"))
		if err := fv(ctx, m.GetPublicKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ttl"]; exists {

		vOpts := append(opts, db.WithValidateField("ttl"))
		if err := fv(ctx, m.GetTtl(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDSRecordValidator = func() *ValidateDSRecord {
	v := &ValidateDSRecord{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhKeyTag := v.KeyTagValidationRuleHandler
	rulesKeyTag := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhKeyTag(rulesKeyTag)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DSRecord.key_tag: %s", err)
		panic(errMsg)
	}
	v.FldValidators["key_tag"] = vFn

	vrhAlgorithm := v.AlgorithmValidationRuleHandler
	rulesAlgorithm := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAlgorithm(rulesAlgorithm)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DSRecord.algorithm: %s", err)
		panic(errMsg)
	}
	v.FldValidators["algorithm"] = vFn

	vrhDigestType := v.DigestTypeValidationRuleHandler
	rulesDigestType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhDigestType(rulesDigestType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DSRecord.digest_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["digest_type"] = vFn

	vrhDigest := v.DigestValidationRuleHandler
	rulesDigest := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhDigest(rulesDigest)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DSRecord.digest: %s", err)
		panic(errMsg)
	}
	v.FldValidators["digest"] = vFn

	vrhFlags := v.FlagsValidationRuleHandler
	rulesFlags := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhFlags(rulesFlags)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DSRecord.flags: %s", err)
		panic(errMsg)
	}
	v.FldValidators["flags"] = vFn

	vrhTtl := v.TtlValidationRuleHandler
	rulesTtl := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.lte":       "2147483647",
	}
	vFn, err = vrhTtl(rulesTtl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DSRecord.ttl: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ttl"] = vFn

	return v
}()

func DSRecordValidator() db.Validator {
	return DefaultDSRecordValidator
}
