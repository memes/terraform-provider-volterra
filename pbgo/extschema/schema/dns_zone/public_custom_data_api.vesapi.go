//
// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//

package dns_zone

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CustomDataAPI GRPC Client satisfying server.CustomClient
type CustomDataAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CustomDataAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CustomDataAPIGrpcClient) doRPCDnsZoneMetrics(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &DnsZoneMetricsRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.DnsZoneMetricsRequest", yamlReq)
	}
	rsp, err := c.grpcClient.DnsZoneMetrics(ctx, req, opts...)
	return rsp, err
}

func (c *CustomDataAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCustomDataAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CustomDataAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCustomDataAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["DnsZoneMetrics"] = ccl.doRPCDnsZoneMetrics

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomDataAPI REST Client satisfying server.CustomClient
type CustomDataAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CustomDataAPIRestClient) doRPCDnsZoneMetrics(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &DnsZoneMetricsRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.dns_zone.DnsZoneMetricsRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("end_time", fmt.Sprintf("%v", req.EndTime))
		q.Add("filter", fmt.Sprintf("%v", req.Filter))
		q.Add("group_by", fmt.Sprintf("%v", req.GroupBy))
		q.Add("limit", fmt.Sprintf("%v", req.Limit))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("sort", fmt.Sprintf("%v", req.Sort))
		q.Add("start_time", fmt.Sprintf("%v", req.StartTime))
		q.Add("step", fmt.Sprintf("%v", req.Step))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &DnsZoneMetricsResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.dns_zone.DnsZoneMetricsResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomDataAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCustomDataAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CustomDataAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["DnsZoneMetrics"] = ccl.doRPCDnsZoneMetrics

	ccl.rpcFns = rpcFns

	return ccl
}

// Create customDataAPIInprocClient

// INPROC Client (satisfying CustomDataAPIClient interface)
type customDataAPIInprocClient struct {
	CustomDataAPIServer
}

func (c *customDataAPIInprocClient) DnsZoneMetrics(ctx context.Context, in *DnsZoneMetricsRequest, opts ...grpc.CallOption) (*DnsZoneMetricsResponse, error) {
	return c.CustomDataAPIServer.DnsZoneMetrics(ctx, in)
}

func NewCustomDataAPIInprocClient(svc svcfw.Service) CustomDataAPIClient {
	return &customDataAPIInprocClient{CustomDataAPIServer: NewCustomDataAPIServer(svc)}
}

// RegisterGwCustomDataAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCustomDataAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCustomDataAPIHandlerClient(ctx, mux, NewCustomDataAPIInprocClient(s))
}

// Create customDataAPISrv

// SERVER (satisfying CustomDataAPIServer interface)
type customDataAPISrv struct {
	svc svcfw.Service
}

func (s *customDataAPISrv) DnsZoneMetrics(ctx context.Context, in *DnsZoneMetricsRequest) (*DnsZoneMetricsResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.dns_zone.CustomDataAPI")
	cah, ok := ah.(CustomDataAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomDataAPIServer", ah)
	}

	var (
		rsp *DnsZoneMetricsResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.DnsZoneMetricsRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomDataAPI.DnsZoneMetrics' operation on 'dns_zone'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.dns_zone.CustomDataAPI.DnsZoneMetrics"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.DnsZoneMetrics(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.dns_zone.DnsZoneMetricsResponse", rsp)...)

	return rsp, nil
}

func NewCustomDataAPIServer(svc svcfw.Service) CustomDataAPIServer {
	return &customDataAPISrv{svc: svc}
}

var CustomDataAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "DNS Zone",
        "description": "DNS Zone Metrics",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {},
    "definitions": {
        "dns_zoneDnsZoneMetricsRequest": {
            "type": "object",
            "description": "x-displayName: \"Dns Zone Metrics Request\"",
            "title": "Dns Zone Metrics Request",
            "properties": {
                "end_time": {
                    "type": "string",
                    "description": "x-displayName: \"End Time\"\nx-example: \"1570197600\"\nend time of flow collection\nFormat: unix_timestamp|rfc 3339\n\nOptional: If not specified, then the end_time will be evaluated to start_time+10m\n          If start_time is not specified, then the end_time will be evaluated to \u003ccurrent time\u003e",
                    "title": "End time"
                },
                "filter": {
                    "type": "string",
                    "description": "x-displayName: \"Filter\"\nx-example: \"{COUNTRY_CODE=\\\"CH\\\"}\"\nfilter is used to specify the list of matchers\nsyntax for filter := {[\u003cmatcher\u003e]}\n\u003cmatcher\u003e := \u003clabel\u003e\u003coperator\u003e\"\u003cvalue\u003e\"\n  \u003clabel\u003e := string\n    One or more labels defined in Label can be specified in the filter.\n  \u003cvalue\u003e := string\n  \u003coperator\u003e := [\"=\"|\"!=\"]\n    =  : equal to\n    != : not equal to\n\nOptional: If not specified, counter will be aggregated based on the group_by labels.",
                    "title": "Label Filter"
                },
                "group_by": {
                    "type": "array",
                    "description": "x-displayName: \"Group By\"\nAggregate data by labels specified in the group_by field",
                    "title": "Group by",
                    "items": {
                        "$ref": "#/definitions/schemadns_zoneLabel"
                    }
                },
                "limit": {
                    "type": "integer",
                    "description": "x-displayName: \"Limit\"\nx-example: \"10\"\nLimits the number of domain or query types returned in the response\nDefault 10",
                    "title": "Limit",
                    "format": "int64"
                },
                "namespace": {
                    "type": "string",
                    "description": "x-displayName: \"Namespace\"\nx-example: \"system\"\nNamespace is always system for dns_zone",
                    "title": "Namespace"
                },
                "sort": {
                    "description": "x-displayName: \"Sort Order\"\nspecifies whether the response should be sorted in ascending or descending order based on timestamp in the log\nOptional: default is descending order",
                    "title": "sort order",
                    "$ref": "#/definitions/schemaSortOrder"
                },
                "start_time": {
                    "type": "string",
                    "description": "x-displayName: \"Start Time\"\nx-example: \"1570194000\"\nstart time of flow collection\nFormat: unix_timestamp|rfc 3339\n\nOptional: If not specified, then the start_time will be evaluated to end_time-10m\n          If end_time is not specified, then the start_time will be evaluated to \u003ccurrent time\u003e-10m",
                    "title": "Start time"
                },
                "step": {
                    "type": "string",
                    "description": "x-displayName: \"Step\"\nx-example: \"5m\"\nstep is the resolution width, which determines the number of the data points [x-axis (time)] to be returned in the response.\nThe timestamps in the response will be t1=start_time, t2=t1+step, ... tn=tn-1+step, where tn \u003c= end_time.\nFormat: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days\n\nOptional: If not specified, then step size is evaluated to \u003cend_time - start_time\u003e",
                    "title": "Step"
                }
            }
        },
        "dns_zoneDnsZoneMetricsResponse": {
            "type": "object",
            "description": "x-displayName: \"Dns Zone Metrics Response\"",
            "title": "Dns Zone Metrics Response",
            "properties": {
                "data": {
                    "type": "array",
                    "description": "x-displayName: \"Data\"\nMetrics Data wraps the response for the dns zone metrics request",
                    "title": "Data",
                    "items": {
                        "$ref": "#/definitions/dns_zoneMetricsData"
                    }
                }
            }
        },
        "dns_zoneMetricsData": {
            "type": "object",
            "description": "x-displayName: \"Metrics Data\"\nMetrics Data contains key/value pairs that uniquely identifies the group_by labels specified in the request.",
            "title": "Metrics Data",
            "properties": {
                "labels": {
                    "type": "object",
                    "description": "x-displayName: \"Labels\"\nLabels contains the name/value pair.\n\"name\" is the label defined in Labels",
                    "title": "Labels"
                },
                "value": {
                    "type": "array",
                    "description": "x-displayName: \"Value\"\nList of metric values.",
                    "title": "Value",
                    "items": {
                        "$ref": "#/definitions/schemaMetricValue"
                    }
                }
            }
        },
        "schemaMetricValue": {
            "type": "object",
            "description": "x-displayName: \"Metric Value\"\nMetric data contains timestamp and the value.",
            "title": "Metric Value",
            "properties": {
                "timestamp": {
                    "type": "number",
                    "description": "x-displayName: \"Timestamp\"\nx-example: \"1570007981\"\ntimestamp",
                    "title": "Timestamp",
                    "format": "double"
                },
                "trend_value": {
                    "description": "x-displayName: \"Trend Value\"\nx-example: \"100.000000\"\ntrend value for the metric",
                    "title": "Trend value",
                    "$ref": "#/definitions/schemaTrendValue"
                },
                "value": {
                    "type": "string",
                    "description": "x-displayName: \"Value\"\nx-example: \"15\"",
                    "title": "Value"
                }
            }
        },
        "schemaSortOrder": {
            "type": "string",
            "description": "x-displayName: \"Sort Order\"\nSort algorithm\n\n - DESCENDING: x-displayName: \"Descending Order\"\nSort in descending order\n - ASCENDING: x-displayName: \"Ascending Order\"\nSort in ascending order",
            "title": "SortOrder",
            "enum": [
                "DESCENDING",
                "ASCENDING"
            ],
            "default": "DESCENDING"
        },
        "schemaTrendSentiment": {
            "type": "string",
            "description": "x-displayName: \"Trend Sentiment\"\ntrend sentiment\n\n - TREND_SENTIMENT_NONE: x-displayName: \"None\"\n - TREND_SENTIMENT_POSITIVE: x-displayName: \"Positive\"\nIndicates trend sentiment is positive\n - TREND_SENTIMENT_NEGATIVE: x-displayName: \"Negative\"\nIndicates trend sentiment is negative.",
            "title": "Trend Sentiment",
            "enum": [
                "TREND_SENTIMENT_NONE",
                "TREND_SENTIMENT_POSITIVE",
                "TREND_SENTIMENT_NEGATIVE"
            ],
            "default": "TREND_SENTIMENT_NONE"
        },
        "schemaTrendValue": {
            "type": "object",
            "description": "x-displayName: \"Trend Value\"\nTrend value contains trend value, trend sentiment and trend calculation description and window size.",
            "title": "Trend Value",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "x-displayName: \"Description\"\nx-example: \"Trend was calculated by comparing the avg of window size intervals of end-start Time and last window time interval\"\ndescription of the method used to calculate trend.",
                    "title": "Description"
                },
                "previous_value": {
                    "type": "string",
                    "description": "x-displayName: \"Previous Value\"\nx-example: \"200.00\"",
                    "title": "Previous Value"
                },
                "sentiment": {
                    "description": "x-displayName: \"Sentiment\"\nx-example: \"Positive\"",
                    "title": "Sentiment",
                    "$ref": "#/definitions/schemaTrendSentiment"
                },
                "value": {
                    "type": "string",
                    "description": "x-displayName: \"Value\"\nx-example: \"-15\"",
                    "title": "Value"
                }
            }
        },
        "schemadns_zoneLabel": {
            "type": "string",
            "description": "x-displayName: \"Labels\"\nLabels is used to select one or more fields for the data\n\n - COUNTRY_CODE: x-displayName: \"Country code\"\nIdentifies the country code .\n - DOMAIN: x-displayName: \"Domain\"\nIdentifies the domain.\n - QUERY_TYPE: x-displayName: \"Query type\"\nIdentifies the query type.\n - RESPONSE_CODE: x-displayName: \"Response code\"\nIdentifies the response code.\n - DNS_ZONE_NAME: x-displayName: \"Dns zone name\"\nIdentifies the dns zone name.",
            "title": "Labels",
            "enum": [
                "COUNTRY_CODE",
                "DOMAIN",
                "QUERY_TYPE",
                "RESPONSE_CODE",
                "DNS_ZONE_NAME"
            ],
            "default": "COUNTRY_CODE"
        }
    },
    "x-displayname": "DNS Zone",
    "x-ves-proto-file": "ves.io/schema/dns_zone/public_custom_data_api.proto"
}`
