// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/cloud_re_region/types.proto

package cloud_re_region

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AWS Type
//
// x-displayName: "AWS Type"
// AWS Type
type AWSType struct {
	// TGW Subnet
	//
	// x-displayName: "TGW Subnet"
	// x-required
	// Pool for allocating ip for TGW
	TgwSubnet *schema.IpSubnetType `protobuf:"bytes,1,opt,name=tgw_subnet,json=tgwSubnet,proto3" json:"tgw_subnet,omitempty"`
	// TGW
	//
	// x-displayName: "TGW"
	// TGW
	Tgws []*TGWType `protobuf:"bytes,2,rep,name=tgws,proto3" json:"tgws,omitempty"`
	// Nodes
	//
	// x-displayName: "Nodes"
	// Node
	Nodes []*NodeType `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *AWSType) Reset()      { *m = AWSType{} }
func (*AWSType) ProtoMessage() {}
func (*AWSType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6549ac21d1c74c33, []int{0}
}
func (m *AWSType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSType.Merge(m, src)
}
func (m *AWSType) XXX_Size() int {
	return m.Size()
}
func (m *AWSType) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSType.DiscardUnknown(m)
}

var xxx_messageInfo_AWSType proto.InternalMessageInfo

func (m *AWSType) GetTgwSubnet() *schema.IpSubnetType {
	if m != nil {
		return m.TgwSubnet
	}
	return nil
}

func (m *AWSType) GetTgws() []*TGWType {
	if m != nil {
		return m.Tgws
	}
	return nil
}

func (m *AWSType) GetNodes() []*NodeType {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// TGW
//
// x-displayName: "TGW"
// TGW
type TGWType struct {
	// Name
	//
	// x-displayName: "Name"
	// Name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// TGW Subnet
	//
	// x-displayName: "TGW Subnet"
	// TGW Subnet
	TgwSubnet *schema.IpSubnetType `protobuf:"bytes,2,opt,name=tgw_subnet,json=tgwSubnet,proto3" json:"tgw_subnet,omitempty"`
}

func (m *TGWType) Reset()      { *m = TGWType{} }
func (*TGWType) ProtoMessage() {}
func (*TGWType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6549ac21d1c74c33, []int{1}
}
func (m *TGWType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TGWType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TGWType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TGWType.Merge(m, src)
}
func (m *TGWType) XXX_Size() int {
	return m.Size()
}
func (m *TGWType) XXX_DiscardUnknown() {
	xxx_messageInfo_TGWType.DiscardUnknown(m)
}

var xxx_messageInfo_TGWType proto.InternalMessageInfo

func (m *TGWType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TGWType) GetTgwSubnet() *schema.IpSubnetType {
	if m != nil {
		return m.TgwSubnet
	}
	return nil
}

// Node
//
// x-displayName: "Node"
// Node
type NodeType struct {
	// Name
	//
	// x-displayName: "Name"
	// Name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Address
	//
	// x-displayName: "Address"
	// IP Address
	Address *schema.IpAddressType `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Site Reference
	//
	// x-displayName: "Site"
	// Site
	Site *views.ObjectRefType `protobuf:"bytes,3,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *NodeType) Reset()      { *m = NodeType{} }
func (*NodeType) ProtoMessage() {}
func (*NodeType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6549ac21d1c74c33, []int{2}
}
func (m *NodeType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeType.Merge(m, src)
}
func (m *NodeType) XXX_Size() int {
	return m.Size()
}
func (m *NodeType) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeType.DiscardUnknown(m)
}

var xxx_messageInfo_NodeType proto.InternalMessageInfo

func (m *NodeType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeType) GetAddress() *schema.IpAddressType {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *NodeType) GetSite() *views.ObjectRefType {
	if m != nil {
		return m.Site
	}
	return nil
}

// Cloud RE Region specification
//
// x-displayName: "Specification"
// Desired state for Cloud RE Region spec
type GlobalSpecType struct {
	// Cloud Type
	//
	// x-displayName: "Cloud Type"
	// x-required
	// Cloud Type
	//
	// Types that are valid to be assigned to Cloud:
	//	*GlobalSpecType_Aws
	Cloud isGlobalSpecType_Cloud `protobuf_oneof:"cloud"`
	// Region
	//
	// x-displayName: "Region"
	// x-required
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6549ac21d1c74c33, []int{3}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_Cloud interface {
	isGlobalSpecType_Cloud()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_Aws struct {
	Aws *AWSType `protobuf:"bytes,2,opt,name=aws,proto3,oneof" json:"aws,omitempty"`
}

func (*GlobalSpecType_Aws) isGlobalSpecType_Cloud() {}

func (m *GlobalSpecType) GetCloud() isGlobalSpecType_Cloud {
	if m != nil {
		return m.Cloud
	}
	return nil
}

func (m *GlobalSpecType) GetAws() *AWSType {
	if x, ok := m.GetCloud().(*GlobalSpecType_Aws); ok {
		return x.Aws
	}
	return nil
}

func (m *GlobalSpecType) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_Aws)(nil),
	}
}

func init() {
	proto.RegisterType((*AWSType)(nil), "ves.io.schema.cloud_re_region.AWSType")
	golang_proto.RegisterType((*AWSType)(nil), "ves.io.schema.cloud_re_region.AWSType")
	proto.RegisterType((*TGWType)(nil), "ves.io.schema.cloud_re_region.TGWType")
	golang_proto.RegisterType((*TGWType)(nil), "ves.io.schema.cloud_re_region.TGWType")
	proto.RegisterType((*NodeType)(nil), "ves.io.schema.cloud_re_region.NodeType")
	golang_proto.RegisterType((*NodeType)(nil), "ves.io.schema.cloud_re_region.NodeType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.cloud_re_region.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.cloud_re_region.GlobalSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/cloud_re_region/types.proto", fileDescriptor_6549ac21d1c74c33)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/cloud_re_region/types.proto", fileDescriptor_6549ac21d1c74c33)
}

var fileDescriptor_6549ac21d1c74c33 = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0xfd, 0x92, 0xb4, 0x69, 0xaf, 0x02, 0x21, 0x0f, 0x25, 0xa4, 0xe5, 0x88, 0x32, 0x40,
	0x19, 0x72, 0x96, 0x82, 0xc4, 0x50, 0x09, 0xa1, 0x66, 0x29, 0x30, 0x80, 0xe4, 0x54, 0xaa, 0x60,
	0x89, 0xec, 0xf8, 0xe5, 0x6a, 0x48, 0x7c, 0x96, 0xef, 0x12, 0xd3, 0x01, 0x09, 0xf1, 0x09, 0x60,
	0xe2, 0x2b, 0x20, 0xbe, 0x42, 0x96, 0x8c, 0x8c, 0x19, 0x33, 0x12, 0x67, 0x61, 0xec, 0x47, 0x40,
	0x39, 0x3b, 0x52, 0x9d, 0x56, 0x54, 0x2c, 0xd6, 0x7b, 0xfa, 0xbf, 0xdf, 0xff, 0xbd, 0xbb, 0x77,
	0x26, 0x8f, 0x47, 0x28, 0x99, 0x2f, 0x2c, 0xd9, 0x3d, 0xc3, 0x81, 0x63, 0x75, 0xfb, 0x62, 0xe8,
	0x75, 0x22, 0xec, 0x44, 0xc8, 0x7d, 0x11, 0x58, 0xea, 0x3c, 0x44, 0xc9, 0xc2, 0x48, 0x28, 0x61,
	0xde, 0x4f, 0x4b, 0x59, 0x5a, 0xca, 0xd6, 0x4a, 0xab, 0x0d, 0xee, 0xab, 0xb3, 0xa1, 0xcb, 0xba,
	0x62, 0x60, 0x71, 0xc1, 0x85, 0xa5, 0x29, 0x77, 0xd8, 0xd3, 0x99, 0x4e, 0x74, 0x94, 0xba, 0x55,
	0xef, 0xe6, 0x1b, 0x07, 0xa8, 0x32, 0x61, 0x2f, 0x2f, 0x88, 0x50, 0xf9, 0x22, 0xc8, 0x66, 0xa8,
	0xde, 0xcb, 0x8b, 0x97, 0xc6, 0xab, 0xee, 0xe7, 0xa5, 0x91, 0xd3, 0xf7, 0x3d, 0x47, 0x61, 0xa6,
	0xd6, 0xd6, 0x54, 0x1f, 0xe3, 0x4e, 0xde, 0xfa, 0xc1, 0xd5, 0x0a, 0x79, 0xb9, 0x41, 0x7d, 0x02,
	0xa4, 0x7c, 0x74, 0xda, 0x3e, 0x39, 0x0f, 0xd1, 0x3c, 0x24, 0x44, 0xf1, 0xb8, 0x23, 0x87, 0x6e,
	0x80, 0xaa, 0x02, 0x35, 0x38, 0xd8, 0x69, 0xee, 0xb1, 0xfc, 0x05, 0xbd, 0x0c, 0xdb, 0x5a, 0x5e,
	0x02, 0xf6, 0xb6, 0xe2, 0x71, 0x9a, 0x9a, 0x87, 0xa4, 0xa4, 0x78, 0x2c, 0x2b, 0x85, 0x5a, 0xf1,
	0x60, 0xa7, 0xf9, 0x90, 0xfd, 0xf3, 0x5a, 0xd9, 0xc9, 0xf1, 0xa9, 0x36, 0xd0, 0x8c, 0xf9, 0x8c,
	0x6c, 0x04, 0xc2, 0x43, 0x59, 0x29, 0x6a, 0xf8, 0xd1, 0x0d, 0xf0, 0x6b, 0xe1, 0xa1, 0xa6, 0x53,
	0xaa, 0xfe, 0x96, 0x94, 0x33, 0x3f, 0xd3, 0x24, 0xa5, 0xc0, 0x19, 0xa0, 0x9e, 0x7d, 0xdb, 0xd6,
	0xf1, 0xda, 0xa9, 0x0a, 0xff, 0x73, 0xaa, 0xfa, 0x77, 0x20, 0x5b, 0xab, 0x76, 0xd7, 0x9a, 0x3f,
	0x25, 0x65, 0xc7, 0xf3, 0x22, 0x94, 0x32, 0x73, 0xde, 0xbf, 0xe2, 0x7c, 0x94, 0xea, 0xda, 0x7a,
	0x55, 0x6c, 0x3e, 0x27, 0x25, 0xe9, 0x2b, 0xac, 0x14, 0x35, 0x54, 0x5f, 0x83, 0xf4, 0x9a, 0xd8,
	0x1b, 0xf7, 0x3d, 0x76, 0x95, 0x8d, 0xbd, 0x25, 0xda, 0x2a, 0xff, 0xfc, 0xa4, 0x11, 0x5b, 0x7f,
	0xeb, 0x5f, 0x80, 0xdc, 0x3e, 0xee, 0x0b, 0xd7, 0xe9, 0xb7, 0x43, 0xec, 0x66, 0xeb, 0x2b, 0x3a,
	0xf1, 0x6a, 0x8e, 0x9b, 0x36, 0x90, 0xed, 0xfc, 0x85, 0x61, 0x2f, 0x21, 0x73, 0x97, 0x6c, 0xa6,
	0x82, 0x9e, 0x68, 0xdb, 0xce, 0xb2, 0xd6, 0x2e, 0xd9, 0xd0, 0xa4, 0x79, 0x6b, 0x32, 0x86, 0xc2,
	0x74, 0x0c, 0x90, 0x8c, 0x01, 0x9a, 0xaf, 0x4a, 0x5b, 0x70, 0xa7, 0xd0, 0xfa, 0x06, 0xd3, 0x39,
	0x35, 0x66, 0x73, 0x6a, 0x5c, 0xcc, 0x29, 0x7c, 0x4e, 0x28, 0xfc, 0x48, 0x28, 0xfc, 0x4a, 0x28,
	0x4c, 0x13, 0x0a, 0xb3, 0x84, 0xc2, 0xef, 0x84, 0xc2, 0x9f, 0x84, 0x1a, 0x17, 0x09, 0x85, 0xaf,
	0x0b, 0x6a, 0x4c, 0x16, 0x14, 0xa6, 0x0b, 0x6a, 0xcc, 0x16, 0xd4, 0x78, 0xd7, 0xe6, 0x22, 0xfc,
	0xc0, 0xd9, 0x48, 0xf4, 0x15, 0x46, 0x91, 0xc3, 0x86, 0xd2, 0xd2, 0x41, 0x4f, 0x44, 0x83, 0x46,
	0x18, 0x89, 0x91, 0xef, 0x61, 0xd4, 0x58, 0xc9, 0x56, 0xe8, 0x72, 0x61, 0xe1, 0x47, 0x95, 0xbd,
	0xe5, 0xeb, 0x7f, 0x6e, 0x77, 0x53, 0xbf, 0xeb, 0x27, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe3,
	0x06, 0xa7, 0x2f, 0x04, 0x04, 0x00, 0x00,
}

func (this *AWSType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSType)
	if !ok {
		that2, ok := that.(AWSType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TgwSubnet.Equal(that1.TgwSubnet) {
		return false
	}
	if len(this.Tgws) != len(that1.Tgws) {
		return false
	}
	for i := range this.Tgws {
		if !this.Tgws[i].Equal(that1.Tgws[i]) {
			return false
		}
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	return true
}
func (this *TGWType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TGWType)
	if !ok {
		that2, ok := that.(TGWType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.TgwSubnet.Equal(that1.TgwSubnet) {
		return false
	}
	return true
}
func (this *NodeType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeType)
	if !ok {
		that2, ok := that.(NodeType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Address.Equal(that1.Address) {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Cloud == nil {
		if this.Cloud != nil {
			return false
		}
	} else if this.Cloud == nil {
		return false
	} else if !this.Cloud.Equal(that1.Cloud) {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	return true
}
func (this *GlobalSpecType_Aws) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Aws)
	if !ok {
		that2, ok := that.(GlobalSpecType_Aws)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aws.Equal(that1.Aws) {
		return false
	}
	return true
}
func (this *AWSType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cloud_re_region.AWSType{")
	if this.TgwSubnet != nil {
		s = append(s, "TgwSubnet: "+fmt.Sprintf("%#v", this.TgwSubnet)+",\n")
	}
	if this.Tgws != nil {
		s = append(s, "Tgws: "+fmt.Sprintf("%#v", this.Tgws)+",\n")
	}
	if this.Nodes != nil {
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TGWType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cloud_re_region.TGWType{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.TgwSubnet != nil {
		s = append(s, "TgwSubnet: "+fmt.Sprintf("%#v", this.TgwSubnet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cloud_re_region.NodeType{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Address != nil {
		s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	}
	if this.Site != nil {
		s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cloud_re_region.GlobalSpecType{")
	if this.Cloud != nil {
		s = append(s, "Cloud: "+fmt.Sprintf("%#v", this.Cloud)+",\n")
	}
	s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_Aws) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_re_region.GlobalSpecType_Aws{` +
		`Aws:` + fmt.Sprintf("%#v", this.Aws) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AWSType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Tgws) > 0 {
		for iNdEx := len(m.Tgws) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tgws[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TgwSubnet != nil {
		{
			size, err := m.TgwSubnet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TGWType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TGWType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TGWType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TgwSubnet != nil {
		{
			size, err := m.TgwSubnet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Site != nil {
		{
			size, err := m.Site.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Cloud != nil {
		{
			size := m.Cloud.Size()
			i -= size
			if _, err := m.Cloud.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_Aws) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Aws) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Aws != nil {
		{
			size, err := m.Aws.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AWSType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TgwSubnet != nil {
		l = m.TgwSubnet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Tgws) > 0 {
		for _, e := range m.Tgws {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *TGWType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TgwSubnet != nil {
		l = m.TgwSubnet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *NodeType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cloud != nil {
		n += m.Cloud.Size()
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_Aws) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aws != nil {
		l = m.Aws.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AWSType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTgws := "[]*TGWType{"
	for _, f := range this.Tgws {
		repeatedStringForTgws += strings.Replace(f.String(), "TGWType", "TGWType", 1) + ","
	}
	repeatedStringForTgws += "}"
	repeatedStringForNodes := "[]*NodeType{"
	for _, f := range this.Nodes {
		repeatedStringForNodes += strings.Replace(f.String(), "NodeType", "NodeType", 1) + ","
	}
	repeatedStringForNodes += "}"
	s := strings.Join([]string{`&AWSType{`,
		`TgwSubnet:` + strings.Replace(fmt.Sprintf("%v", this.TgwSubnet), "IpSubnetType", "schema.IpSubnetType", 1) + `,`,
		`Tgws:` + repeatedStringForTgws + `,`,
		`Nodes:` + repeatedStringForNodes + `,`,
		`}`,
	}, "")
	return s
}
func (this *TGWType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TGWType{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`TgwSubnet:` + strings.Replace(fmt.Sprintf("%v", this.TgwSubnet), "IpSubnetType", "schema.IpSubnetType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeType{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Address:` + strings.Replace(fmt.Sprintf("%v", this.Address), "IpAddressType", "schema.IpAddressType", 1) + `,`,
		`Site:` + strings.Replace(fmt.Sprintf("%v", this.Site), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Cloud:` + fmt.Sprintf("%v", this.Cloud) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Aws) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Aws{`,
		`Aws:` + strings.Replace(fmt.Sprintf("%v", this.Aws), "AWSType", "AWSType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AWSType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwSubnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TgwSubnet == nil {
				m.TgwSubnet = &schema.IpSubnetType{}
			}
			if err := m.TgwSubnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tgws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tgws = append(m.Tgws, &TGWType{})
			if err := m.Tgws[len(m.Tgws)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &NodeType{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TGWType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TGWType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TGWType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwSubnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TgwSubnet == nil {
				m.TgwSubnet = &schema.IpSubnetType{}
			}
			if err := m.TgwSubnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &schema.IpAddressType{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Site == nil {
				m.Site = &views.ObjectRefType{}
			}
			if err := m.Site.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cloud = &GlobalSpecType_Aws{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
