// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
package alert_policy

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetReceiversDRefInfo()

}

func (m *CreateSpecType) GetReceiversDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetReceivers()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("CreateSpecType.receivers[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "alert_receiver.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "receivers",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetReceiversDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetReceiversDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "alert_receiver.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: alert_receiver")
	}
	for _, ref := range m.GetReceivers() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) ReceiversValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for receivers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for receivers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated receivers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items receivers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) RoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for routes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Route, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RouteValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Route)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Route, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["notification_parameters"]; exists {

		vOpts := append(opts, db.WithValidateField("notification_parameters"))
		if err := fv(ctx, m.GetNotificationParameters(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["receivers"]; exists {
		vOpts := append(opts, db.WithValidateField("receivers"))
		if err := fv(ctx, m.GetReceivers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["routes"]; exists {
		vOpts := append(opts, db.WithValidateField("routes"))
		if err := fv(ctx, m.GetRoutes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhReceivers := v.ReceiversValidationRuleHandler
	rulesReceivers := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "4",
	}
	vFn, err = vrhReceivers(rulesReceivers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.receivers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receivers"] = vFn

	vrhRoutes := v.RoutesValidationRuleHandler
	rulesRoutes := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhRoutes(rulesRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["routes"] = vFn

	v.FldValidators["notification_parameters"] = NotificationParametersValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CustomGroupBy) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CustomGroupBy) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CustomGroupBy) DeepCopy() *CustomGroupBy {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CustomGroupBy{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CustomGroupBy) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CustomGroupBy) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CustomGroupByValidator().Validate(ctx, m, opts...)
}

type ValidateCustomGroupBy struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCustomGroupBy) LabelsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for labels")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for labels")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated labels")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items labels")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCustomGroupBy) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CustomGroupBy)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CustomGroupBy got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["labels"]; exists {
		vOpts := append(opts, db.WithValidateField("labels"))
		if err := fv(ctx, m.GetLabels(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCustomGroupByValidator = func() *ValidateCustomGroupBy {
	v := &ValidateCustomGroupBy{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhLabels := v.LabelsValidationRuleHandler
	rulesLabels := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "5",
		"ves.io.schema.rules.repeated.unique":    "true",
		"ves.io.schema.rules.string.pattern":     "^[a-zA-Z_][a-zA-Z0-9_]*$",
	}
	vFn, err = vrhLabels(rulesLabels)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CustomGroupBy.labels: %s", err)
		panic(errMsg)
	}
	v.FldValidators["labels"] = vFn

	return v
}()

func CustomGroupByValidator() db.Validator {
	return DefaultCustomGroupByValidator
}

// augmented methods on protoc/std generated struct

func (m *CustomMatcher) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CustomMatcher) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CustomMatcher) DeepCopy() *CustomMatcher {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CustomMatcher{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CustomMatcher) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CustomMatcher) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CustomMatcherValidator().Validate(ctx, m, opts...)
}

type ValidateCustomMatcher struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCustomMatcher) AlertlabelValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for alertlabel")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]*LabelMatcher, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := LabelMatcherValidator().Validate(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for alertlabel")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]*LabelMatcher)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]*LabelMatcher, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map alertlabel")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items alertlabel")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCustomMatcher) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CustomMatcher)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CustomMatcher got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["alertlabel"]; exists {
		vOpts := append(opts, db.WithValidateField("alertlabel"))
		if err := fv(ctx, m.GetAlertlabel(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["alertname"]; exists {

		vOpts := append(opts, db.WithValidateField("alertname"))
		if err := fv(ctx, m.GetAlertname(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["group"]; exists {

		vOpts := append(opts, db.WithValidateField("group"))
		if err := fv(ctx, m.GetGroup(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["severity"]; exists {

		vOpts := append(opts, db.WithValidateField("severity"))
		if err := fv(ctx, m.GetSeverity(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCustomMatcherValidator = func() *ValidateCustomMatcher {
	v := &ValidateCustomMatcher{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAlertlabel := v.AlertlabelValidationRuleHandler
	rulesAlertlabel := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len": "64",
		"ves.io.schema.rules.map.keys.string.min_len": "1",
		"ves.io.schema.rules.map.keys.string.pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
		"ves.io.schema.rules.map.max_pairs":           "3",
	}
	vFn, err = vrhAlertlabel(rulesAlertlabel)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CustomMatcher.alertlabel: %s", err)
		panic(errMsg)
	}
	v.FldValidators["alertlabel"] = vFn

	v.FldValidators["severity"] = LabelMatcherValidator().Validate

	v.FldValidators["group"] = LabelMatcherValidator().Validate

	v.FldValidators["alertname"] = LabelMatcherValidator().Validate

	return v
}()

func CustomMatcherValidator() db.Validator {
	return DefaultCustomMatcherValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetReceiversDRefInfo()

}

func (m *GetSpecType) GetReceiversDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetReceivers()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GetSpecType.receivers[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "alert_receiver.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "receivers",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetReceiversDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetReceiversDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "alert_receiver.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: alert_receiver")
	}
	for _, ref := range m.GetReceivers() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) ReceiversValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for receivers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for receivers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated receivers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items receivers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) RoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for routes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Route, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RouteValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Route)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Route, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["notification_parameters"]; exists {

		vOpts := append(opts, db.WithValidateField("notification_parameters"))
		if err := fv(ctx, m.GetNotificationParameters(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["receivers"]; exists {
		vOpts := append(opts, db.WithValidateField("receivers"))
		if err := fv(ctx, m.GetReceivers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["routes"]; exists {
		vOpts := append(opts, db.WithValidateField("routes"))
		if err := fv(ctx, m.GetRoutes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhReceivers := v.ReceiversValidationRuleHandler
	rulesReceivers := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "4",
	}
	vFn, err = vrhReceivers(rulesReceivers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.receivers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receivers"] = vFn

	vrhRoutes := v.RoutesValidationRuleHandler
	rulesRoutes := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhRoutes(rulesRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["routes"] = vFn

	v.FldValidators["notification_parameters"] = NotificationParametersValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetReceiversDRefInfo()

}

func (m *GlobalSpecType) GetReceiversDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetReceivers()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.receivers[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "alert_receiver.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "receivers",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetReceiversDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetReceiversDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "alert_receiver.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: alert_receiver")
	}
	for _, ref := range m.GetReceivers() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) ReceiversValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for receivers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for receivers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated receivers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items receivers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) RoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for routes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Route, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RouteValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Route)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Route, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["notification_parameters"]; exists {

		vOpts := append(opts, db.WithValidateField("notification_parameters"))
		if err := fv(ctx, m.GetNotificationParameters(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["receivers"]; exists {
		vOpts := append(opts, db.WithValidateField("receivers"))
		if err := fv(ctx, m.GetReceivers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["routes"]; exists {
		vOpts := append(opts, db.WithValidateField("routes"))
		if err := fv(ctx, m.GetRoutes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhReceivers := v.ReceiversValidationRuleHandler
	rulesReceivers := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "4",
	}
	vFn, err = vrhReceivers(rulesReceivers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.receivers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receivers"] = vFn

	vrhRoutes := v.RoutesValidationRuleHandler
	rulesRoutes := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhRoutes(rulesRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["routes"] = vFn

	v.FldValidators["notification_parameters"] = NotificationParametersValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GroupMatcher) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GroupMatcher) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GroupMatcher) DeepCopy() *GroupMatcher {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GroupMatcher{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GroupMatcher) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GroupMatcher) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GroupMatcherValidator().Validate(ctx, m, opts...)
}

type ValidateGroupMatcher struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGroupMatcher) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GroupMatcher)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GroupMatcher got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["groups"]; exists {

		vOpts := append(opts, db.WithValidateField("groups"))
		for idx, item := range m.GetGroups() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGroupMatcherValidator = func() *ValidateGroupMatcher {
	v := &ValidateGroupMatcher{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GroupMatcherValidator() db.Validator {
	return DefaultGroupMatcherValidator
}

// augmented methods on protoc/std generated struct

func (m *LabelMatcher) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *LabelMatcher) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *LabelMatcher) DeepCopy() *LabelMatcher {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &LabelMatcher{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *LabelMatcher) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *LabelMatcher) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LabelMatcherValidator().Validate(ctx, m, opts...)
}

type ValidateLabelMatcher struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLabelMatcher) MatcherTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for matcher_type")
	}
	return validatorFn, nil
}

func (v *ValidateLabelMatcher) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*LabelMatcher)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *LabelMatcher got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["matcher_type"]; exists {
		val := m.GetMatcherType()
		vOpts := append(opts,
			db.WithValidateField("matcher_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMatcherType().(type) {
	case *LabelMatcher_ExactMatch:
		if fv, exists := v.FldValidators["matcher_type.exact_match"]; exists {
			val := m.GetMatcherType().(*LabelMatcher_ExactMatch).ExactMatch
			vOpts := append(opts,
				db.WithValidateField("matcher_type"),
				db.WithValidateField("exact_match"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *LabelMatcher_RegexMatch:
		if fv, exists := v.FldValidators["matcher_type.regex_match"]; exists {
			val := m.GetMatcherType().(*LabelMatcher_RegexMatch).RegexMatch
			vOpts := append(opts,
				db.WithValidateField("matcher_type"),
				db.WithValidateField("regex_match"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLabelMatcherValidator = func() *ValidateLabelMatcher {
	v := &ValidateLabelMatcher{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhMatcherType := v.MatcherTypeValidationRuleHandler
	rulesMatcherType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMatcherType(rulesMatcherType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for LabelMatcher.matcher_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["matcher_type"] = vFn

	return v
}()

func LabelMatcherValidator() db.Validator {
	return DefaultLabelMatcherValidator
}

// augmented methods on protoc/std generated struct

func (m *NotificationParameters) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NotificationParameters) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NotificationParameters) DeepCopy() *NotificationParameters {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NotificationParameters{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NotificationParameters) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NotificationParameters) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NotificationParametersValidator().Validate(ctx, m, opts...)
}

type ValidateNotificationParameters struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNotificationParameters) GroupByValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for group_by")
	}
	return validatorFn, nil
}

func (v *ValidateNotificationParameters) GroupWaitValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for group_wait")
	}

	return validatorFn, nil
}

func (v *ValidateNotificationParameters) GroupIntervalValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for group_interval")
	}

	return validatorFn, nil
}

func (v *ValidateNotificationParameters) RepeatIntervalValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for repeat_interval")
	}

	return validatorFn, nil
}

func (v *ValidateNotificationParameters) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NotificationParameters)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NotificationParameters got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["group_by"]; exists {
		val := m.GetGroupBy()
		vOpts := append(opts,
			db.WithValidateField("group_by"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGroupBy().(type) {
	case *NotificationParameters_Default:
		if fv, exists := v.FldValidators["group_by.default"]; exists {
			val := m.GetGroupBy().(*NotificationParameters_Default).Default
			vOpts := append(opts,
				db.WithValidateField("group_by"),
				db.WithValidateField("default"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *NotificationParameters_Individual:
		if fv, exists := v.FldValidators["group_by.individual"]; exists {
			val := m.GetGroupBy().(*NotificationParameters_Individual).Individual
			vOpts := append(opts,
				db.WithValidateField("group_by"),
				db.WithValidateField("individual"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *NotificationParameters_VesIoGroup:
		if fv, exists := v.FldValidators["group_by.ves_io_group"]; exists {
			val := m.GetGroupBy().(*NotificationParameters_VesIoGroup).VesIoGroup
			vOpts := append(opts,
				db.WithValidateField("group_by"),
				db.WithValidateField("ves_io_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *NotificationParameters_Custom:
		if fv, exists := v.FldValidators["group_by.custom"]; exists {
			val := m.GetGroupBy().(*NotificationParameters_Custom).Custom
			vOpts := append(opts,
				db.WithValidateField("group_by"),
				db.WithValidateField("custom"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["group_interval"]; exists {

		vOpts := append(opts, db.WithValidateField("group_interval"))
		if err := fv(ctx, m.GetGroupInterval(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["group_wait"]; exists {

		vOpts := append(opts, db.WithValidateField("group_wait"))
		if err := fv(ctx, m.GetGroupWait(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["repeat_interval"]; exists {

		vOpts := append(opts, db.WithValidateField("repeat_interval"))
		if err := fv(ctx, m.GetRepeatInterval(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNotificationParametersValidator = func() *ValidateNotificationParameters {
	v := &ValidateNotificationParameters{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhGroupBy := v.GroupByValidationRuleHandler
	rulesGroupBy := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGroupBy(rulesGroupBy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for NotificationParameters.group_by: %s", err)
		panic(errMsg)
	}
	v.FldValidators["group_by"] = vFn

	vrhGroupWait := v.GroupWaitValidationRuleHandler
	rulesGroupWait := map[string]string{
		"ves.io.schema.rules.string.max_time_interval": "5m",
		"ves.io.schema.rules.string.min_time_interval": "0s",
		"ves.io.schema.rules.string.time_interval":     "true",
	}
	vFn, err = vrhGroupWait(rulesGroupWait)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for NotificationParameters.group_wait: %s", err)
		panic(errMsg)
	}
	v.FldValidators["group_wait"] = vFn

	vrhGroupInterval := v.GroupIntervalValidationRuleHandler
	rulesGroupInterval := map[string]string{
		"ves.io.schema.rules.string.max_time_interval": "10m",
		"ves.io.schema.rules.string.min_time_interval": "30s",
		"ves.io.schema.rules.string.time_interval":     "true",
	}
	vFn, err = vrhGroupInterval(rulesGroupInterval)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for NotificationParameters.group_interval: %s", err)
		panic(errMsg)
	}
	v.FldValidators["group_interval"] = vFn

	vrhRepeatInterval := v.RepeatIntervalValidationRuleHandler
	rulesRepeatInterval := map[string]string{
		"ves.io.schema.rules.string.max_time_interval": "10d",
		"ves.io.schema.rules.string.min_time_interval": "30m",
		"ves.io.schema.rules.string.time_interval":     "true",
	}
	vFn, err = vrhRepeatInterval(rulesRepeatInterval)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for NotificationParameters.repeat_interval: %s", err)
		panic(errMsg)
	}
	v.FldValidators["repeat_interval"] = vFn

	v.FldValidators["group_by.custom"] = CustomGroupByValidator().Validate

	return v
}()

func NotificationParametersValidator() db.Validator {
	return DefaultNotificationParametersValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetReceiversDRefInfo()

}

func (m *ReplaceSpecType) GetReceiversDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetReceivers()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("ReplaceSpecType.receivers[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "alert_receiver.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "receivers",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetReceiversDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetReceiversDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "alert_receiver.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: alert_receiver")
	}
	for _, ref := range m.GetReceivers() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) ReceiversValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for receivers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for receivers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated receivers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items receivers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) RoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for routes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Route, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RouteValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Route)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Route, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["notification_parameters"]; exists {

		vOpts := append(opts, db.WithValidateField("notification_parameters"))
		if err := fv(ctx, m.GetNotificationParameters(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["receivers"]; exists {
		vOpts := append(opts, db.WithValidateField("receivers"))
		if err := fv(ctx, m.GetReceivers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["routes"]; exists {
		vOpts := append(opts, db.WithValidateField("routes"))
		if err := fv(ctx, m.GetRoutes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhReceivers := v.ReceiversValidationRuleHandler
	rulesReceivers := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "4",
	}
	vFn, err = vrhReceivers(rulesReceivers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.receivers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receivers"] = vFn

	vrhRoutes := v.RoutesValidationRuleHandler
	rulesRoutes := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhRoutes(rulesRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["routes"] = vFn

	v.FldValidators["notification_parameters"] = NotificationParametersValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *Route) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Route) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Route) DeepCopy() *Route {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Route{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Route) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Route) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteValidator().Validate(ctx, m, opts...)
}

type ValidateRoute struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRoute) ActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for action")
	}
	return validatorFn, nil
}

func (v *ValidateRoute) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Route)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Route got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {
		val := m.GetAction()
		vOpts := append(opts,
			db.WithValidateField("action"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAction().(type) {
	case *Route_Send:
		if fv, exists := v.FldValidators["action.send"]; exists {
			val := m.GetAction().(*Route_Send).Send
			vOpts := append(opts,
				db.WithValidateField("action"),
				db.WithValidateField("send"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Route_DontSend:
		if fv, exists := v.FldValidators["action.dont_send"]; exists {
			val := m.GetAction().(*Route_DontSend).DontSend
			vOpts := append(opts,
				db.WithValidateField("action"),
				db.WithValidateField("dont_send"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetMatcher().(type) {
	case *Route_Any:
		if fv, exists := v.FldValidators["matcher.any"]; exists {
			val := m.GetMatcher().(*Route_Any).Any
			vOpts := append(opts,
				db.WithValidateField("matcher"),
				db.WithValidateField("any"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Route_Severity:
		if fv, exists := v.FldValidators["matcher.severity"]; exists {
			val := m.GetMatcher().(*Route_Severity).Severity
			vOpts := append(opts,
				db.WithValidateField("matcher"),
				db.WithValidateField("severity"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Route_Group:
		if fv, exists := v.FldValidators["matcher.group"]; exists {
			val := m.GetMatcher().(*Route_Group).Group
			vOpts := append(opts,
				db.WithValidateField("matcher"),
				db.WithValidateField("group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Route_Alertname:
		if fv, exists := v.FldValidators["matcher.alertname"]; exists {
			val := m.GetMatcher().(*Route_Alertname).Alertname
			vOpts := append(opts,
				db.WithValidateField("matcher"),
				db.WithValidateField("alertname"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Route_AlertnameRegex:
		if fv, exists := v.FldValidators["matcher.alertname_regex"]; exists {
			val := m.GetMatcher().(*Route_AlertnameRegex).AlertnameRegex
			vOpts := append(opts,
				db.WithValidateField("matcher"),
				db.WithValidateField("alertname_regex"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Route_Custom:
		if fv, exists := v.FldValidators["matcher.custom"]; exists {
			val := m.GetMatcher().(*Route_Custom).Custom
			vOpts := append(opts,
				db.WithValidateField("matcher"),
				db.WithValidateField("custom"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["notification_parameters"]; exists {

		vOpts := append(opts, db.WithValidateField("notification_parameters"))
		if err := fv(ctx, m.GetNotificationParameters(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteValidator = func() *ValidateRoute {
	v := &ValidateRoute{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAction := v.ActionValidationRuleHandler
	rulesAction := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAction(rulesAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Route.action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["action"] = vFn

	v.FldValidators["matcher.custom"] = CustomMatcherValidator().Validate

	v.FldValidators["notification_parameters"] = NotificationParametersValidator().Validate

	return v
}()

func RouteValidator() db.Validator {
	return DefaultRouteValidator
}

// augmented methods on protoc/std generated struct

func (m *SeverityMatcher) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SeverityMatcher) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SeverityMatcher) DeepCopy() *SeverityMatcher {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SeverityMatcher{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SeverityMatcher) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SeverityMatcher) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SeverityMatcherValidator().Validate(ctx, m, opts...)
}

type ValidateSeverityMatcher struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSeverityMatcher) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SeverityMatcher)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SeverityMatcher got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["severities"]; exists {

		vOpts := append(opts, db.WithValidateField("severities"))
		for idx, item := range m.GetSeverities() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSeverityMatcherValidator = func() *ValidateSeverityMatcher {
	v := &ValidateSeverityMatcher{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SeverityMatcherValidator() db.Validator {
	return DefaultSeverityMatcherValidator
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.NotificationParameters = f.GetNotificationParameters()
	m.Receivers = f.GetReceivers()
	m.Routes = f.GetRoutes()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.NotificationParameters = m1.NotificationParameters
	f.Receivers = m1.Receivers
	f.Routes = m1.Routes
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.NotificationParameters = f.GetNotificationParameters()
	m.Receivers = f.GetReceivers()
	m.Routes = f.GetRoutes()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.NotificationParameters = m1.NotificationParameters
	f.Receivers = m1.Receivers
	f.Routes = m1.Routes
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.NotificationParameters = f.GetNotificationParameters()
	m.Receivers = f.GetReceivers()
	m.Routes = f.GetRoutes()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.NotificationParameters = m1.NotificationParameters
	f.Receivers = m1.Receivers
	f.Routes = m1.Routes
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}
