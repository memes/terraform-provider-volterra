// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package topology

import (
	"bytes"
	"context"
	"fmt"
	io "io"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create PrivateCustomAPI GRPC Client satisfying server.CustomClient
type PrivateCustomAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient PrivateCustomAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *PrivateCustomAPIGrpcClient) doRPCGetAWSDCConnection(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetAWSDCConnectionRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.topology.GetAWSDCConnectionRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetAWSDCConnection(ctx, req, opts...)
	return rsp, err
}

func (c *PrivateCustomAPIGrpcClient) doRPCGetAWSDCGateway(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetAWSDCGatewayRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.topology.GetAWSDCGatewayRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetAWSDCGateway(ctx, req, opts...)
	return rsp, err
}

func (c *PrivateCustomAPIGrpcClient) doRPCGetAWSDCVIF(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetAWSDCVIFRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.topology.GetAWSDCVIFRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetAWSDCVIF(ctx, req, opts...)
	return rsp, err
}

func (c *PrivateCustomAPIGrpcClient) doRPCListCloudNetworkTagKeys(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ListCloudNetworkTagKeysRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.topology.ListCloudNetworkTagKeysRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ListCloudNetworkTagKeys(ctx, req, opts...)
	return rsp, err
}

func (c *PrivateCustomAPIGrpcClient) doRPCListCloudNetworkTagValues(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ListCloudNetworkTagValuesRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.topology.ListCloudNetworkTagValuesRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ListCloudNetworkTagValues(ctx, req, opts...)
	return rsp, err
}

func (c *PrivateCustomAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewPrivateCustomAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &PrivateCustomAPIGrpcClient{
		conn:       cc,
		grpcClient: NewPrivateCustomAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["GetAWSDCConnection"] = ccl.doRPCGetAWSDCConnection

	rpcFns["GetAWSDCGateway"] = ccl.doRPCGetAWSDCGateway

	rpcFns["GetAWSDCVIF"] = ccl.doRPCGetAWSDCVIF

	rpcFns["ListCloudNetworkTagKeys"] = ccl.doRPCListCloudNetworkTagKeys

	rpcFns["ListCloudNetworkTagValues"] = ccl.doRPCListCloudNetworkTagValues

	ccl.rpcFns = rpcFns

	return ccl
}

// Create PrivateCustomAPI REST Client satisfying server.CustomClient
type PrivateCustomAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *PrivateCustomAPIRestClient) doRPCGetAWSDCConnection(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetAWSDCConnectionRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.topology.GetAWSDCConnectionRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("connect_id", fmt.Sprintf("%v", req.ConnectId))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &GetAWSDCConnectionResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.topology.GetAWSDCConnectionResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *PrivateCustomAPIRestClient) doRPCGetAWSDCGateway(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetAWSDCGatewayRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.topology.GetAWSDCGatewayRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("gateway_id", fmt.Sprintf("%v", req.GatewayId))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &GetAWSDCGatewayResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.topology.GetAWSDCGatewayResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *PrivateCustomAPIRestClient) doRPCGetAWSDCVIF(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetAWSDCVIFRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.topology.GetAWSDCVIFRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("vif_id", fmt.Sprintf("%v", req.VifId))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &GetAWSDCVIFResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.topology.GetAWSDCVIFResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *PrivateCustomAPIRestClient) doRPCListCloudNetworkTagKeys(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ListCloudNetworkTagKeysRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.topology.ListCloudNetworkTagKeysRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("cloud_type", fmt.Sprintf("%v", req.CloudType))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("query_key", fmt.Sprintf("%v", req.QueryKey))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ListCloudNetworkTagKeysResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.topology.ListCloudNetworkTagKeysResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *PrivateCustomAPIRestClient) doRPCListCloudNetworkTagValues(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ListCloudNetworkTagValuesRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.topology.ListCloudNetworkTagValuesRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("cloud_type", fmt.Sprintf("%v", req.CloudType))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("query_key", fmt.Sprintf("%v", req.QueryKey))
		q.Add("query_value", fmt.Sprintf("%v", req.QueryValue))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ListCloudNetworkTagValuesResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.topology.ListCloudNetworkTagValuesResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *PrivateCustomAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewPrivateCustomAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &PrivateCustomAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["GetAWSDCConnection"] = ccl.doRPCGetAWSDCConnection

	rpcFns["GetAWSDCGateway"] = ccl.doRPCGetAWSDCGateway

	rpcFns["GetAWSDCVIF"] = ccl.doRPCGetAWSDCVIF

	rpcFns["ListCloudNetworkTagKeys"] = ccl.doRPCListCloudNetworkTagKeys

	rpcFns["ListCloudNetworkTagValues"] = ccl.doRPCListCloudNetworkTagValues

	ccl.rpcFns = rpcFns

	return ccl
}

// Create privateCustomAPIInprocClient

// INPROC Client (satisfying PrivateCustomAPIClient interface)
type privateCustomAPIInprocClient struct {
	PrivateCustomAPIServer
}

func (c *privateCustomAPIInprocClient) GetAWSDCConnection(ctx context.Context, in *GetAWSDCConnectionRequest, opts ...grpc.CallOption) (*GetAWSDCConnectionResponse, error) {
	return c.PrivateCustomAPIServer.GetAWSDCConnection(ctx, in)
}
func (c *privateCustomAPIInprocClient) GetAWSDCGateway(ctx context.Context, in *GetAWSDCGatewayRequest, opts ...grpc.CallOption) (*GetAWSDCGatewayResponse, error) {
	return c.PrivateCustomAPIServer.GetAWSDCGateway(ctx, in)
}
func (c *privateCustomAPIInprocClient) GetAWSDCVIF(ctx context.Context, in *GetAWSDCVIFRequest, opts ...grpc.CallOption) (*GetAWSDCVIFResponse, error) {
	return c.PrivateCustomAPIServer.GetAWSDCVIF(ctx, in)
}
func (c *privateCustomAPIInprocClient) ListCloudNetworkTagKeys(ctx context.Context, in *ListCloudNetworkTagKeysRequest, opts ...grpc.CallOption) (*ListCloudNetworkTagKeysResponse, error) {
	return c.PrivateCustomAPIServer.ListCloudNetworkTagKeys(ctx, in)
}
func (c *privateCustomAPIInprocClient) ListCloudNetworkTagValues(ctx context.Context, in *ListCloudNetworkTagValuesRequest, opts ...grpc.CallOption) (*ListCloudNetworkTagValuesResponse, error) {
	return c.PrivateCustomAPIServer.ListCloudNetworkTagValues(ctx, in)
}

func NewPrivateCustomAPIInprocClient(svc svcfw.Service) PrivateCustomAPIClient {
	return &privateCustomAPIInprocClient{PrivateCustomAPIServer: NewPrivateCustomAPIServer(svc)}
}

// RegisterGwPrivateCustomAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwPrivateCustomAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterPrivateCustomAPIHandlerClient(ctx, mux, NewPrivateCustomAPIInprocClient(s))
}

// Create privateCustomAPISrv

// SERVER (satisfying PrivateCustomAPIServer interface)
type privateCustomAPISrv struct {
	svc svcfw.Service
}

func (s *privateCustomAPISrv) GetAWSDCConnection(ctx context.Context, in *GetAWSDCConnectionRequest) (*GetAWSDCConnectionResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.topology.PrivateCustomAPI")
	cah, ok := ah.(PrivateCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *PrivateCustomAPIServer", ah)
	}

	var (
		rsp *GetAWSDCConnectionResponse
		err error
	)

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.topology.PrivateCustomAPI.GetAWSDCConnection"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetAWSDCConnection(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	return rsp, nil
}
func (s *privateCustomAPISrv) GetAWSDCGateway(ctx context.Context, in *GetAWSDCGatewayRequest) (*GetAWSDCGatewayResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.topology.PrivateCustomAPI")
	cah, ok := ah.(PrivateCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *PrivateCustomAPIServer", ah)
	}

	var (
		rsp *GetAWSDCGatewayResponse
		err error
	)

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.topology.PrivateCustomAPI.GetAWSDCGateway"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetAWSDCGateway(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	return rsp, nil
}
func (s *privateCustomAPISrv) GetAWSDCVIF(ctx context.Context, in *GetAWSDCVIFRequest) (*GetAWSDCVIFResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.topology.PrivateCustomAPI")
	cah, ok := ah.(PrivateCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *PrivateCustomAPIServer", ah)
	}

	var (
		rsp *GetAWSDCVIFResponse
		err error
	)

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.topology.PrivateCustomAPI.GetAWSDCVIF"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetAWSDCVIF(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	return rsp, nil
}
func (s *privateCustomAPISrv) ListCloudNetworkTagKeys(ctx context.Context, in *ListCloudNetworkTagKeysRequest) (*ListCloudNetworkTagKeysResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.topology.PrivateCustomAPI")
	cah, ok := ah.(PrivateCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *PrivateCustomAPIServer", ah)
	}

	var (
		rsp *ListCloudNetworkTagKeysResponse
		err error
	)

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.topology.PrivateCustomAPI.ListCloudNetworkTagKeys"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ListCloudNetworkTagKeys(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	return rsp, nil
}
func (s *privateCustomAPISrv) ListCloudNetworkTagValues(ctx context.Context, in *ListCloudNetworkTagValuesRequest) (*ListCloudNetworkTagValuesResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.topology.PrivateCustomAPI")
	cah, ok := ah.(PrivateCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *PrivateCustomAPIServer", ah)
	}

	var (
		rsp *ListCloudNetworkTagValuesResponse
		err error
	)

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.topology.PrivateCustomAPI.ListCloudNetworkTagValues"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ListCloudNetworkTagValues(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	return rsp, nil
}

func NewPrivateCustomAPIServer(svc svcfw.Service) PrivateCustomAPIServer {
	return &privateCustomAPISrv{svc: svc}
}

var PrivateCustomAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "ves.io/schema/topology/private_customapi.proto",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/private/custom/namespaces/{namespace}/direct_connect/connection/{connect_id}": {
            "get": {
                "summary": "Get AWS Direct Connect Connection",
                "description": "Retrieves AWS Direct Connect Connection",
                "operationId": "ves.io.schema.topology.PrivateCustomAPI.GetAWSDCConnection",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/topologyGetAWSDCConnectionResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nValue of namespace is always \"system\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "connect_id",
                        "description": "ConnectId\n\nConnect Id of the AWS Direct Connect Connection",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "ConnectId"
                    }
                ],
                "tags": [
                    "PrivateCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-topology-privatecustomapi-getawsdcconnection"
                },
                "x-ves-proto-rpc": "ves.io.schema.topology.PrivateCustomAPI.GetAWSDCConnection"
            },
            "x-displayname": "Private Custom API",
            "x-ves-proto-service": "ves.io.schema.topology.PrivateCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PRIVATE"
        },
        "/private/custom/namespaces/{namespace}/direct_connect/gateway/{gateway_id}": {
            "get": {
                "summary": "Get AWS Direct Connect Gateway",
                "description": "Retrieves AWS Direct Connect Gateway",
                "operationId": "ves.io.schema.topology.PrivateCustomAPI.GetAWSDCGateway",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/topologyGetAWSDCGatewayResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nValue of namespace is always \"system\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "gateway_id",
                        "description": "GatewayId\n\nId Of Gateway Associated With AWS Direct Connect Connection",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "GatewayId"
                    }
                ],
                "tags": [
                    "PrivateCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-topology-privatecustomapi-getawsdcgateway"
                },
                "x-ves-proto-rpc": "ves.io.schema.topology.PrivateCustomAPI.GetAWSDCGateway"
            },
            "x-displayname": "Private Custom API",
            "x-ves-proto-service": "ves.io.schema.topology.PrivateCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PRIVATE"
        },
        "/private/custom/namespaces/{namespace}/direct_connect/vif/{vif_id}": {
            "get": {
                "summary": "Get AWS Direct Connect VIF",
                "description": "Retrieves AWS Direct Connect VIF",
                "operationId": "ves.io.schema.topology.PrivateCustomAPI.GetAWSDCVIF",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/topologyGetAWSDCVIFResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nValue of namespace is always \"system\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "vif_id",
                        "description": "VIFId\n\nVIF Id associated with AWS Direct Connect Connection",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "VIFId"
                    }
                ],
                "tags": [
                    "PrivateCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-topology-privatecustomapi-getawsdcvif"
                },
                "x-ves-proto-rpc": "ves.io.schema.topology.PrivateCustomAPI.GetAWSDCVIF"
            },
            "x-displayname": "Private Custom API",
            "x-ves-proto-service": "ves.io.schema.topology.PrivateCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PRIVATE"
        },
        "/private/custom/namespaces/{namespace}/network_tag_keys": {
            "get": {
                "summary": "List Cloud Network Tag Keys",
                "description": "ListCloudNetworkTagKeys retrieves cloud provider Keys of tags.\nThe tag keys are retrieved based on the key substring",
                "operationId": "ves.io.schema.topology.PrivateCustomAPI.ListCloudNetworkTagKeys",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/topologyListCloudNetworkTagKeysResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nValue of namespace is always \"system\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "cloud_type",
                        "description": "Cloud type\n\nProviderType unspecified\nAWS backend\nGCP backend\nAzure backend\nF5XC backend",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "PROVIDER_TYPE_UNSPECIFIED",
                            "PROVIDER_TYPE_AWS",
                            "PROVIDER_TYPE_GCP",
                            "PROVIDER_TYPE_AZURE",
                            "PROVIDER_TYPE_VOLTERRA"
                        ],
                        "default": "PROVIDER_TYPE_UNSPECIFIED",
                        "x-displayname": "Volterra"
                    },
                    {
                        "name": "query_key",
                        "description": "Query Key",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Query Key"
                    }
                ],
                "tags": [
                    "PrivateCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-topology-privatecustomapi-listcloudnetworktagkeys"
                },
                "x-ves-proto-rpc": "ves.io.schema.topology.PrivateCustomAPI.ListCloudNetworkTagKeys"
            },
            "x-displayname": "Private Custom API",
            "x-ves-proto-service": "ves.io.schema.topology.PrivateCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PRIVATE"
        },
        "/private/custom/namespaces/{namespace}/network_tag_values": {
            "get": {
                "summary": "List Cloud Network Tag Values",
                "description": "ListCloudNetworkTagValues retrieves cloud provider Values of tags.\nThe tag values are retrieved based on the key",
                "operationId": "ves.io.schema.topology.PrivateCustomAPI.ListCloudNetworkTagValues",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/topologyListCloudNetworkTagValuesResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nValue of namespace is always \"system\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "cloud_type",
                        "description": "Cloud type\n\nProviderType unspecified\nAWS backend\nGCP backend\nAzure backend\nF5XC backend",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "PROVIDER_TYPE_UNSPECIFIED",
                            "PROVIDER_TYPE_AWS",
                            "PROVIDER_TYPE_GCP",
                            "PROVIDER_TYPE_AZURE",
                            "PROVIDER_TYPE_VOLTERRA"
                        ],
                        "default": "PROVIDER_TYPE_UNSPECIFIED",
                        "x-displayname": "Volterra"
                    },
                    {
                        "name": "query_key",
                        "description": "Query Key",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Query Key"
                    },
                    {
                        "name": "query_value",
                        "description": "Query Value",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Query Value"
                    }
                ],
                "tags": [
                    "PrivateCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-topology-privatecustomapi-listcloudnetworktagvalues"
                },
                "x-ves-proto-rpc": "ves.io.schema.topology.PrivateCustomAPI.ListCloudNetworkTagValues"
            },
            "x-displayname": "Private Custom API",
            "x-ves-proto-service": "ves.io.schema.topology.PrivateCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PRIVATE"
        },
        "/ves.io.schema/introspect/read/private/custom/namespaces/{namespace}/direct_connect/connection/{connect_id}": {
            "get": {
                "summary": "Get AWS Direct Connect Connection",
                "description": "Retrieves AWS Direct Connect Connection",
                "operationId": "ves.io.schema.topology.PrivateCustomAPI.GetAWSDCConnection",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/topologyGetAWSDCConnectionResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nValue of namespace is always \"system\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "connect_id",
                        "description": "ConnectId\n\nConnect Id of the AWS Direct Connect Connection",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "ConnectId"
                    }
                ],
                "tags": [
                    "PrivateCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-topology-privatecustomapi-getawsdcconnection"
                },
                "x-ves-proto-rpc": "ves.io.schema.topology.PrivateCustomAPI.GetAWSDCConnection"
            },
            "x-displayname": "Private Custom API",
            "x-ves-proto-service": "ves.io.schema.topology.PrivateCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PRIVATE"
        },
        "/ves.io.schema/introspect/read/private/custom/namespaces/{namespace}/direct_connect/gateway/{gateway_id}": {
            "get": {
                "summary": "Get AWS Direct Connect Gateway",
                "description": "Retrieves AWS Direct Connect Gateway",
                "operationId": "ves.io.schema.topology.PrivateCustomAPI.GetAWSDCGateway",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/topologyGetAWSDCGatewayResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nValue of namespace is always \"system\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "gateway_id",
                        "description": "GatewayId\n\nId Of Gateway Associated With AWS Direct Connect Connection",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "GatewayId"
                    }
                ],
                "tags": [
                    "PrivateCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-topology-privatecustomapi-getawsdcgateway"
                },
                "x-ves-proto-rpc": "ves.io.schema.topology.PrivateCustomAPI.GetAWSDCGateway"
            },
            "x-displayname": "Private Custom API",
            "x-ves-proto-service": "ves.io.schema.topology.PrivateCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PRIVATE"
        },
        "/ves.io.schema/introspect/read/private/custom/namespaces/{namespace}/direct_connect/vif/{vif_id}": {
            "get": {
                "summary": "Get AWS Direct Connect VIF",
                "description": "Retrieves AWS Direct Connect VIF",
                "operationId": "ves.io.schema.topology.PrivateCustomAPI.GetAWSDCVIF",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/topologyGetAWSDCVIFResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nValue of namespace is always \"system\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "vif_id",
                        "description": "VIFId\n\nVIF Id associated with AWS Direct Connect Connection",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "VIFId"
                    }
                ],
                "tags": [
                    "PrivateCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-topology-privatecustomapi-getawsdcvif"
                },
                "x-ves-proto-rpc": "ves.io.schema.topology.PrivateCustomAPI.GetAWSDCVIF"
            },
            "x-displayname": "Private Custom API",
            "x-ves-proto-service": "ves.io.schema.topology.PrivateCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PRIVATE"
        },
        "/ves.io.schema/introspect/read/private/custom/namespaces/{namespace}/network_tag_keys": {
            "get": {
                "summary": "List Cloud Network Tag Keys",
                "description": "ListCloudNetworkTagKeys retrieves cloud provider Keys of tags.\nThe tag keys are retrieved based on the key substring",
                "operationId": "ves.io.schema.topology.PrivateCustomAPI.ListCloudNetworkTagKeys",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/topologyListCloudNetworkTagKeysResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nValue of namespace is always \"system\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "cloud_type",
                        "description": "Cloud type\n\nProviderType unspecified\nAWS backend\nGCP backend\nAzure backend\nF5XC backend",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "PROVIDER_TYPE_UNSPECIFIED",
                            "PROVIDER_TYPE_AWS",
                            "PROVIDER_TYPE_GCP",
                            "PROVIDER_TYPE_AZURE",
                            "PROVIDER_TYPE_VOLTERRA"
                        ],
                        "default": "PROVIDER_TYPE_UNSPECIFIED",
                        "x-displayname": "Volterra"
                    },
                    {
                        "name": "query_key",
                        "description": "Query Key",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Query Key"
                    }
                ],
                "tags": [
                    "PrivateCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-topology-privatecustomapi-listcloudnetworktagkeys"
                },
                "x-ves-proto-rpc": "ves.io.schema.topology.PrivateCustomAPI.ListCloudNetworkTagKeys"
            },
            "x-displayname": "Private Custom API",
            "x-ves-proto-service": "ves.io.schema.topology.PrivateCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PRIVATE"
        },
        "/ves.io.schema/introspect/read/private/custom/namespaces/{namespace}/network_tag_values": {
            "get": {
                "summary": "List Cloud Network Tag Values",
                "description": "ListCloudNetworkTagValues retrieves cloud provider Values of tags.\nThe tag values are retrieved based on the key",
                "operationId": "ves.io.schema.topology.PrivateCustomAPI.ListCloudNetworkTagValues",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/topologyListCloudNetworkTagValuesResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nValue of namespace is always \"system\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "cloud_type",
                        "description": "Cloud type\n\nProviderType unspecified\nAWS backend\nGCP backend\nAzure backend\nF5XC backend",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "PROVIDER_TYPE_UNSPECIFIED",
                            "PROVIDER_TYPE_AWS",
                            "PROVIDER_TYPE_GCP",
                            "PROVIDER_TYPE_AZURE",
                            "PROVIDER_TYPE_VOLTERRA"
                        ],
                        "default": "PROVIDER_TYPE_UNSPECIFIED",
                        "x-displayname": "Volterra"
                    },
                    {
                        "name": "query_key",
                        "description": "Query Key",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Query Key"
                    },
                    {
                        "name": "query_value",
                        "description": "Query Value",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Query Value"
                    }
                ],
                "tags": [
                    "PrivateCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-topology-privatecustomapi-listcloudnetworktagvalues"
                },
                "x-ves-proto-rpc": "ves.io.schema.topology.PrivateCustomAPI.ListCloudNetworkTagValues"
            },
            "x-displayname": "Private Custom API",
            "x-ves-proto-service": "ves.io.schema.topology.PrivateCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PRIVATE"
        }
    },
    "definitions": {
        "cloud_linkBGPPeerType": {
            "type": "object",
            "description": "The BGP peer object.",
            "title": "BGP Peer",
            "x-displayname": "BGP Peer",
            "x-ves-proto-message": "ves.io.schema.cloud_link.BGPPeerType",
            "properties": {
                "address_family": {
                    "type": "string",
                    "description": " The address family setup for the BGP peer.\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"ipv4\\\",\\\"ipv6\\\"]\n",
                    "title": "Address Family",
                    "x-displayname": "Address Family",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"ipv4\\\",\\\"ipv6\\\"]"
                    }
                },
                "amazon_address": {
                    "type": "string",
                    "description": " The BGP peer IP configured on the AWS endpoint",
                    "title": "AWS Router Peer IP",
                    "x-displayname": "AWS Router Peer IP"
                },
                "asn": {
                    "type": "integer",
                    "description": " The autonomous system number (ASN) for the Amazon side of the connection",
                    "title": "Amazon Web Services (AWS) ASN",
                    "format": "int64",
                    "x-displayname": "Amazon Web Services (AWS) ASN"
                },
                "bgp_peer_id": {
                    "type": "string",
                    "description": " The ID of the BGP peer",
                    "title": "BGP Peer IP",
                    "x-displayname": "BGP Peer IP"
                },
                "bgp_peer_state": {
                    "type": "string",
                    "description": " The state of the BGP peer.\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"verifying\\\",\\\"pending\\\",\\\"available\\\",\\\"deleting\\\",\\\"deleted\\\"]\n",
                    "title": "BGP Peer State",
                    "x-displayname": "BGP Peer State",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"verifying\\\",\\\"pending\\\",\\\"available\\\",\\\"deleting\\\",\\\"deleted\\\"]"
                    }
                },
                "bgp_status": {
                    "type": "string",
                    "description": " The status of the BGP peer.\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"up\\\",\\\"down\\\",\\\"unknown\\\"]\n",
                    "title": "BGP Peer Status",
                    "x-displayname": "BGP Peer Status",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"up\\\",\\\"down\\\",\\\"unknown\\\"]"
                    }
                },
                "customer_address": {
                    "type": "string",
                    "description": " The BGP peer IP configured on the Customer endpoint",
                    "title": "Customer Peer IP",
                    "x-displayname": "Customer Peer IP"
                }
            }
        },
        "cloud_linkDirectConnectConnectionStatusType": {
            "type": "object",
            "description": "Status reported by Amazon Web Services (AWS) Direct Connect Connection related to this Cloud Link",
            "title": "Direct Connect Connection Status",
            "x-displayname": "Direct Connect Connection Status",
            "x-ves-proto-message": "ves.io.schema.cloud_link.DirectConnectConnectionStatusType",
            "properties": {
                "bandwidth": {
                    "type": "string",
                    "description": " The bandwidth of the connection.",
                    "title": "Bandwidth",
                    "x-displayname": "Bandwidth"
                },
                "connection_id": {
                    "type": "string",
                    "description": " The ID of the direct connect connection",
                    "title": "Connection Id",
                    "x-displayname": "Connection Id"
                },
                "connection_name": {
                    "type": "string",
                    "description": " The Name of the connection",
                    "title": "Connection Name",
                    "x-displayname": "Connection Name"
                },
                "connection_state": {
                    "type": "string",
                    "description": " The state of the Direct Connect Connection\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"ordering\\\",\\\"requested\\\",\\\"pending\\\",\\\"available\\\",\\\"down\\\",\\\"deleting\\\",\\\"deleted\\\",\\\"rejected\\\",\\\"unknown\\\"]\n",
                    "title": "Connection State",
                    "x-displayname": "Connection State",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"ordering\\\",\\\"requested\\\",\\\"pending\\\",\\\"available\\\",\\\"down\\\",\\\"deleting\\\",\\\"deleted\\\",\\\"rejected\\\",\\\"unknown\\\"]"
                    }
                },
                "has_logical_redundancy": {
                    "type": "string",
                    "description": " Whether the connection supports a secondary BGP peer in the same address family (IPv4/IPv6)\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"unknown\\\",\\\"yes\\\",\\\"no\\\"]\n",
                    "title": "Logical Redundancy Status",
                    "x-displayname": "Logical Redundancy Status",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"unknown\\\",\\\"yes\\\",\\\"no\\\"]"
                    }
                },
                "jumbo_frame_capable": {
                    "type": "boolean",
                    "description": " Indicates whether jumbo frames (9001 MTU) are supported.",
                    "title": "Jumbo Frame Capable",
                    "format": "boolean",
                    "x-displayname": "Jumbo Frame Capable"
                },
                "location": {
                    "type": "string",
                    "description": " Location of the connection",
                    "title": "Location",
                    "x-displayname": "Location"
                },
                "owner_account": {
                    "type": "string",
                    "description": " The ID of the AWS account that owns the connection",
                    "title": "Owner Account",
                    "x-displayname": "Owner Account"
                },
                "partner_name": {
                    "type": "string",
                    "description": " The name of the AWS Direct Connect service provider associated with the connection.",
                    "title": "Connection Partner",
                    "x-displayname": "Connection Partner"
                },
                "provider_name": {
                    "type": "string",
                    "description": " The name of the service provider associated with the connection.",
                    "title": "Connection Provider",
                    "x-displayname": "Connection Provider"
                },
                "region": {
                    "type": "string",
                    "description": " Region where the connection is located",
                    "title": "Region",
                    "x-displayname": "Region"
                },
                "tags": {
                    "type": "object",
                    "description": " AWS Tags is a label consisting of a user-defined key and value which are assocaited with this coonnection.\n It helps to manage, identify, organize, search for, and filter resources in AWS console.\n\nExample: - \"devstaging\"-",
                    "title": "AWS Tags",
                    "x-displayname": "AWS Tags",
                    "x-ves-example": "dev: staging"
                },
                "vlan": {
                    "type": "integer",
                    "description": " Virtual Local Area Network number for the new virtual interface to be configured on the AWS.\n\nExample: - \"700\"-",
                    "title": "Virtual Local Area Network (VLAN)",
                    "format": "int64",
                    "x-displayname": "Virtual Local Area Network (VLAN)",
                    "x-ves-example": "700"
                }
            }
        },
        "cloud_linkDirectConnectGatewayStatusType": {
            "type": "object",
            "description": "Status reported by Amazon Web Services (AWS) Direct Connect Gateway Status and associations related to this Cloud Link",
            "title": "Direct Connect Gateway Status",
            "x-displayname": "Direct Connect Gateway Status",
            "x-ves-proto-message": "ves.io.schema.cloud_link.DirectConnectGatewayStatusType",
            "properties": {
                "amazon_asn": {
                    "type": "string",
                    "description": " The autonomous system number (ASN) for the Amazon side of the connection",
                    "title": "Amazon Web Services (AWS) ASN",
                    "format": "uint64",
                    "x-displayname": "Amazon Web Services (AWS) ASN"
                },
                "direct_connect_gateway_id": {
                    "type": "string",
                    "description": " The ID of the direct connect gateway",
                    "title": "Gateway Id",
                    "x-displayname": "Gateway Id"
                },
                "direct_connect_gateway_name": {
                    "type": "string",
                    "description": " The Name of the direct connect gateway",
                    "title": "Gateway Name",
                    "x-displayname": "Gateway Name"
                },
                "direct_connect_gateway_state": {
                    "type": "string",
                    "description": " The state of the Direct Connect gateway\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"pending\\\",\\\"available\\\",\\\"deleting\\\",\\\"deleted\\\"]\n",
                    "title": "Direct Connect Gateway State",
                    "x-displayname": "Direct Connect Gateway State",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"pending\\\",\\\"available\\\",\\\"deleting\\\",\\\"deleted\\\"]"
                    }
                },
                "owner_account": {
                    "type": "string",
                    "description": " The ID of the AWS account that owns the connection",
                    "title": "Owner Account",
                    "x-displayname": "Owner Account"
                },
                "state_change_error": {
                    "type": "string",
                    "description": " The error message if the state of an object failed to advance",
                    "title": "Direct Connect Gateway Error",
                    "x-displayname": "Direct Connect Gateway Error"
                }
            }
        },
        "cloud_linkVirtualInterfaceStatusType": {
            "type": "object",
            "description": "Status reported by Amazon Web Services (AWS) Virtual Interface Status related to this Cloud Link",
            "title": "Virtual Interface Status",
            "x-displayname": "Virtual Interface Status",
            "x-ves-proto-message": "ves.io.schema.cloud_link.VirtualInterfaceStatusType",
            "properties": {
                "address_family": {
                    "type": "string",
                    "description": " The address family setup for the BGP peer.\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"ipv4\\\",\\\"ipv6\\\"]\n",
                    "title": "Address Family",
                    "x-displayname": "Address Family",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"ipv4\\\",\\\"ipv6\\\"]"
                    }
                },
                "amazon_address": {
                    "type": "string",
                    "description": " The BGP peer IP configured on the AWS endpoint",
                    "title": "AWS Router Peer IP",
                    "x-displayname": "AWS Router Peer IP"
                },
                "amazon_asn": {
                    "type": "string",
                    "description": " The autonomous system number (ASN) for the Amazon side of the connection",
                    "title": "Amazon Web Services (AWS) ASN",
                    "format": "uint64",
                    "x-displayname": "Amazon Web Services (AWS) ASN"
                },
                "attachment_state_change_error": {
                    "type": "string",
                    "description": " The error message if the state of an object failed to advance.",
                    "title": "Gateway Attachment State Error",
                    "x-displayname": "Gateway Attachment State Error"
                },
                "bgp_asn": {
                    "type": "integer",
                    "description": " The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration",
                    "title": "Border Gateway Protocol (BGP) ASN",
                    "format": "int64",
                    "x-displayname": "Border Gateway Protocol (BGP) ASN"
                },
                "bgp_peers": {
                    "type": "array",
                    "description": " The BGP peers configured on this virtual interface.",
                    "title": "BGP Peers",
                    "items": {
                        "$ref": "#/definitions/cloud_linkBGPPeerType"
                    },
                    "x-displayname": "BGP Peers"
                },
                "connection_id": {
                    "type": "string",
                    "description": " The ID of the direct connect connection",
                    "title": "Connection Id",
                    "x-displayname": "Connection Id"
                },
                "direct_connect_attachment_state": {
                    "type": "string",
                    "description": " The state of the Attachment.\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"attaching\\\",\\\"attached\\\",\\\"detaching\\\",\\\"detached\\\"]\n",
                    "title": "Direct Connect Attachment State",
                    "x-displayname": "Direct Connect  Attachment State",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"attaching\\\",\\\"attached\\\",\\\"detaching\\\",\\\"detached\\\"]"
                    }
                },
                "direct_connect_gateway_id": {
                    "type": "string",
                    "description": " The ID of the direct connect gateway",
                    "title": "Gateway Id",
                    "x-displayname": "Gateway Id"
                },
                "direct_connect_gateway_name": {
                    "type": "string",
                    "description": " The Name of the direct connect gateway",
                    "title": "Gateway Name",
                    "x-displayname": "Gateway Name"
                },
                "jumbo_frame_capable": {
                    "type": "boolean",
                    "description": " Indicates whether jumbo frames (9001 MTU) are supported.",
                    "title": "Jumbo Frame Capable",
                    "format": "boolean",
                    "x-displayname": "Jumbo Frame Capable"
                },
                "location": {
                    "type": "string",
                    "description": " Location where the virtual interface is located",
                    "title": "Location",
                    "x-displayname": "Location"
                },
                "mtu": {
                    "type": "integer",
                    "description": " The maximum transmission unit (MTU), in bytes.",
                    "title": "Maximum Transmission Unit (MTU)",
                    "format": "int64",
                    "x-displayname": "Maximum Transmission Unit (MTU)"
                },
                "owner_account": {
                    "type": "string",
                    "description": " The ID of the AWS account that owns the connection",
                    "title": "Owner Account",
                    "x-displayname": "Owner Account"
                },
                "region": {
                    "type": "string",
                    "description": " Region where the virtual interface is located",
                    "title": "Region",
                    "x-displayname": "Region"
                },
                "tags": {
                    "type": "object",
                    "description": " AWS Tags is a label consisting of a user-defined key and value which are assocaited with this coonnection.\n It helps to manage, identify, organize, search for, and filter resources in AWS console.\n\nExample: - \"devstaging\"-",
                    "title": "AWS Tags",
                    "x-displayname": "AWS Tags",
                    "x-ves-example": "dev: staging"
                },
                "virtual_interface_id": {
                    "type": "string",
                    "description": " ID of the virtual interface",
                    "title": "Virtual Interface Id",
                    "x-displayname": "Virtual Interface Id"
                },
                "virtual_interface_name": {
                    "type": "string",
                    "description": " Name of the virtual interface",
                    "title": "Virtual Interface Name",
                    "x-displayname": "Virtual Interface Name"
                },
                "virtual_interface_state": {
                    "type": "string",
                    "description": " The state of the virtual interface\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"confirming\\\",\\\"verifying\\\",\\\"pending\\\",\\\"available\\\",\\\"down\\\",\\\"deleting\\\",\\\"deleted\\\",\\\"rejected\\\",\\\"unknown\\\"]\n",
                    "title": "Virtual Interface State",
                    "x-displayname": "Virtual Interface State",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"confirming\\\",\\\"verifying\\\",\\\"pending\\\",\\\"available\\\",\\\"down\\\",\\\"deleting\\\",\\\"deleted\\\",\\\"rejected\\\",\\\"unknown\\\"]"
                    }
                },
                "virtual_interface_type": {
                    "type": "string",
                    "description": " Type of the virtual interface\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"private\\\",\\\"public\\\",\\\"transit\\\"]\n",
                    "title": "Virtual Interface Type",
                    "x-displayname": "Virtual Interface Type",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"private\\\",\\\"public\\\",\\\"transit\\\"]"
                    }
                },
                "vlan": {
                    "type": "integer",
                    "description": " Virtual Local Area Network number for the new virtual interface to be configured on the AWS.\n\nExample: - \"700\"-",
                    "title": "Virtual Local Area Network (VLAN)",
                    "format": "int64",
                    "x-displayname": "Virtual Local Area Network (VLAN)",
                    "x-ves-example": "700"
                }
            }
        },
        "topologyGetAWSDCConnectionResponse": {
            "type": "object",
            "description": "AWS Direct Connect Connection Response",
            "title": "Get AWS Direct Connect Connection Response",
            "x-displayname": "Get AWS Direct Connect Connection Response",
            "x-ves-proto-message": "ves.io.schema.topology.GetAWSDCConnectionResponse",
            "properties": {
                "connection_status": {
                    "$ref": "#/definitions/cloud_linkDirectConnectConnectionStatusType"
                }
            }
        },
        "topologyGetAWSDCGatewayResponse": {
            "type": "object",
            "description": "AWS Direct Connect Gateway Response",
            "title": "Get AWS Direct Connect Gateway Response",
            "x-displayname": "Get AWS Direct Connect Gateway Response",
            "x-ves-proto-message": "ves.io.schema.topology.GetAWSDCGatewayResponse",
            "properties": {
                "gateway_status": {
                    "$ref": "#/definitions/cloud_linkDirectConnectGatewayStatusType"
                }
            }
        },
        "topologyGetAWSDCVIFResponse": {
            "type": "object",
            "description": "AWS Direct Connect VIF Response",
            "title": "Get AWS Direct Connect VIF Response",
            "x-displayname": "Get AWS Direct Connect VIF Response",
            "x-ves-proto-message": "ves.io.schema.topology.GetAWSDCVIFResponse",
            "properties": {
                "vif_status": {
                    "$ref": "#/definitions/cloud_linkVirtualInterfaceStatusType"
                }
            }
        },
        "topologyListCloudNetworkTagKeysResponse": {
            "type": "object",
            "description": "Listing of cloud network tag keys response",
            "title": "List Cloud Network Tag Keys Response",
            "x-displayname": "List Cloud Network Tag Keys Response",
            "x-ves-proto-message": "ves.io.schema.topology.ListCloudNetworkTagKeysResponse",
            "properties": {
                "keys": {
                    "type": "array",
                    "description": " List of Keys.",
                    "title": "List Of Keys",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Keys"
                }
            }
        },
        "topologyListCloudNetworkTagValuesResponse": {
            "type": "object",
            "description": "Listing of cloud network tag values response",
            "title": "List Cloud Network Tag Values Response",
            "x-displayname": "List Cloud Network Tag Values Response",
            "x-ves-proto-message": "ves.io.schema.topology.ListCloudNetworkTagValuesResponse",
            "properties": {
                "values": {
                    "type": "array",
                    "description": " List of Values.",
                    "title": "List Of Values",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Values"
                }
            }
        },
        "topologyProviderType": {
            "type": "string",
            "description": "x-displayName: \"Provider Type\"\nprovider type\n\n - PROVIDER_TYPE_UNSPECIFIED: x-displayName: \"Unspecified\"\nProviderType unspecified\n - PROVIDER_TYPE_AWS: x-displayName: \"AWS\"\nAWS backend\n - PROVIDER_TYPE_GCP: x-displayName: \"GCP\"\nGCP backend\n - PROVIDER_TYPE_AZURE: x-displayName: \"Azure\"\nAzure backend\n - PROVIDER_TYPE_VOLTERRA: x-displayName: \"Volterra\"\nF5XC backend",
            "title": "ProviderType",
            "enum": [
                "PROVIDER_TYPE_UNSPECIFIED",
                "PROVIDER_TYPE_AWS",
                "PROVIDER_TYPE_GCP",
                "PROVIDER_TYPE_AZURE",
                "PROVIDER_TYPE_VOLTERRA"
            ],
            "default": "PROVIDER_TYPE_UNSPECIFIED"
        }
    },
    "x-displayname": "",
    "x-ves-proto-file": "ves.io/schema/topology/private_customapi.proto"
}`
