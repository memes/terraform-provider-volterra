// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/topology/topology_transit_gateway/types.proto

package topology_transit_gateway

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	topology "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/topology"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Topology Transit Gateway
//
// x-displayName: "Transit Gateway"
//
//	A node represents transit gateway in the topology graph.
type GlobalSpecType struct {
	// Topology Metadata
	//
	// x-displayName: "Metadata"
	// A common metadata for topology.
	TopologyMetadata *topology.MetaType `protobuf:"bytes,1,opt,name=topology_metadata,json=topologyMetadata,proto3" json:"topology_metadata,omitempty"`
	// Topology Spec
	//
	// x-displayName: "Spec"
	// A canonical spec for this topology node.
	TopologySpec *topology.TransitGatewayType `protobuf:"bytes,2,opt,name=topology_spec,json=topologySpec,proto3" json:"topology_spec,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9c5c5950dfd9258, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetTopologyMetadata() *topology.MetaType {
	if m != nil {
		return m.TopologyMetadata
	}
	return nil
}

func (m *GlobalSpecType) GetTopologySpec() *topology.TransitGatewayType {
	if m != nil {
		return m.TopologySpec
	}
	return nil
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.topology.topology_transit_gateway.GlobalSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/topology/topology_transit_gateway/types.proto", fileDescriptor_e9c5c5950dfd9258)
}

var fileDescriptor_e9c5c5950dfd9258 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xbf, 0x4e, 0xfb, 0x30,
	0x10, 0xc7, 0xe3, 0xdf, 0xf0, 0x1b, 0xc2, 0x1f, 0x41, 0xa7, 0xaa, 0xc3, 0xa9, 0xea, 0x84, 0x90,
	0x6a, 0x4b, 0x30, 0xb2, 0xb1, 0x74, 0xaa, 0x90, 0xa0, 0x13, 0x4b, 0xe5, 0xa4, 0x57, 0x37, 0x22,
	0xe1, 0x2c, 0xc7, 0x2d, 0x64, 0xe3, 0x11, 0x78, 0x03, 0x56, 0x46, 0x1e, 0x83, 0xb1, 0x63, 0x47,
	0xea, 0x2e, 0x8c, 0x7d, 0x04, 0x54, 0xa7, 0x09, 0x53, 0x24, 0xb6, 0x3b, 0x9f, 0x3e, 0x1f, 0x7d,
	0xef, 0x1c, 0x5e, 0x2d, 0x30, 0xe7, 0x09, 0x89, 0x3c, 0x9e, 0x61, 0x26, 0x85, 0x25, 0x4d, 0x29,
	0xa9, 0xa2, 0x2e, 0xc6, 0xd6, 0xc8, 0xc7, 0x3c, 0xb1, 0x63, 0x25, 0x2d, 0x3e, 0xc9, 0x42, 0xd8,
	0x42, 0x63, 0xce, 0xb5, 0x21, 0x4b, 0x2d, 0x51, 0xc2, 0xbc, 0x84, 0x79, 0xc5, 0xf0, 0x26, 0xb8,
	0xd3, 0x57, 0x89, 0x9d, 0xcd, 0x23, 0x1e, 0x53, 0x26, 0x14, 0x29, 0x12, 0xde, 0x13, 0xcd, 0xa7,
	0xbe, 0xf3, 0x8d, 0xaf, 0x4a, 0x7f, 0xa7, 0xd7, 0x14, 0xee, 0x37, 0x43, 0xef, 0x83, 0x85, 0xc7,
	0x83, 0x94, 0x22, 0x99, 0xde, 0x69, 0x8c, 0x47, 0x85, 0xc6, 0xd6, 0x30, 0x3c, 0xad, 0x13, 0x64,
	0x68, 0xe5, 0x44, 0x5a, 0xd9, 0x66, 0x5d, 0x76, 0x76, 0x70, 0xd1, 0xe5, 0x0d, 0x91, 0x87, 0x68,
	0xe5, 0x0e, 0xbe, 0x3d, 0xa9, 0x9e, 0x86, 0x7b, 0xb2, 0x75, 0x13, 0x1e, 0xd5, 0xba, 0x5c, 0x63,
	0xdc, 0xfe, 0xe7, 0x55, 0xe7, 0x4d, 0xaa, 0x51, 0xb9, 0xf4, 0xa0, 0xdc, 0xd9, 0x4b, 0x0f, 0xab,
	0xe1, 0x2e, 0xe3, 0xf5, 0x1b, 0x5b, 0xae, 0x21, 0x58, 0xad, 0x21, 0xd8, 0xae, 0x81, 0xbd, 0x38,
	0x60, 0xef, 0x0e, 0xd8, 0xa7, 0x03, 0xb6, 0x74, 0xc0, 0x56, 0x0e, 0xd8, 0x97, 0x03, 0xf6, 0xed,
	0x20, 0xd8, 0x3a, 0x60, 0xaf, 0x1b, 0x08, 0x96, 0x1b, 0x08, 0x56, 0x1b, 0x08, 0xee, 0x51, 0x91,
	0x7e, 0x50, 0x7c, 0x41, 0xa9, 0x45, 0x63, 0x24, 0x9f, 0xe7, 0xc2, 0x17, 0x53, 0x32, 0x59, 0x5f,
	0x1b, 0x5a, 0x24, 0x13, 0x34, 0xfd, 0x6a, 0x2c, 0x74, 0xa4, 0x48, 0xe0, 0xb3, 0xdd, 0x1f, 0xf0,
	0xaf, 0x9f, 0x1c, 0xfd, 0xf7, 0xb7, 0xbd, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0x94, 0x1a, 0x6e,
	0xbc, 0x1e, 0x02, 0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TopologyMetadata.Equal(that1.TopologyMetadata) {
		return false
	}
	if !this.TopologySpec.Equal(that1.TopologySpec) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&topology_transit_gateway.GlobalSpecType{")
	if this.TopologyMetadata != nil {
		s = append(s, "TopologyMetadata: "+fmt.Sprintf("%#v", this.TopologyMetadata)+",\n")
	}
	if this.TopologySpec != nil {
		s = append(s, "TopologySpec: "+fmt.Sprintf("%#v", this.TopologySpec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopologySpec != nil {
		{
			size, err := m.TopologySpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TopologyMetadata != nil {
		{
			size, err := m.TopologyMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopologyMetadata != nil {
		l = m.TopologyMetadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TopologySpec != nil {
		l = m.TopologySpec.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`TopologyMetadata:` + strings.Replace(fmt.Sprintf("%v", this.TopologyMetadata), "MetaType", "topology.MetaType", 1) + `,`,
		`TopologySpec:` + strings.Replace(fmt.Sprintf("%v", this.TopologySpec), "TransitGatewayType", "topology.TransitGatewayType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopologyMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopologyMetadata == nil {
				m.TopologyMetadata = &topology.MetaType{}
			}
			if err := m.TopologyMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopologySpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopologySpec == nil {
				m.TopologySpec = &topology.TransitGatewayType{}
			}
			if err := m.TopologySpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
