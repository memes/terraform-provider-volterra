// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package topology

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *ListCloudNetworkTagKeysRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ListCloudNetworkTagKeysRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ListCloudNetworkTagKeysRequest) DeepCopy() *ListCloudNetworkTagKeysRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ListCloudNetworkTagKeysRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ListCloudNetworkTagKeysRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ListCloudNetworkTagKeysRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ListCloudNetworkTagKeysRequestValidator().Validate(ctx, m, opts...)
}

type ValidateListCloudNetworkTagKeysRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateListCloudNetworkTagKeysRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ListCloudNetworkTagKeysRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ListCloudNetworkTagKeysRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cloud_type"]; exists {

		vOpts := append(opts, db.WithValidateField("cloud_type"))
		if err := fv(ctx, m.GetCloudType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["query_key"]; exists {

		vOpts := append(opts, db.WithValidateField("query_key"))
		if err := fv(ctx, m.GetQueryKey(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultListCloudNetworkTagKeysRequestValidator = func() *ValidateListCloudNetworkTagKeysRequest {
	v := &ValidateListCloudNetworkTagKeysRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ListCloudNetworkTagKeysRequestValidator() db.Validator {
	return DefaultListCloudNetworkTagKeysRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *ListCloudNetworkTagKeysResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ListCloudNetworkTagKeysResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ListCloudNetworkTagKeysResponse) DeepCopy() *ListCloudNetworkTagKeysResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ListCloudNetworkTagKeysResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ListCloudNetworkTagKeysResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ListCloudNetworkTagKeysResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ListCloudNetworkTagKeysResponseValidator().Validate(ctx, m, opts...)
}

type ValidateListCloudNetworkTagKeysResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateListCloudNetworkTagKeysResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ListCloudNetworkTagKeysResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ListCloudNetworkTagKeysResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["keys"]; exists {

		vOpts := append(opts, db.WithValidateField("keys"))
		for idx, item := range m.GetKeys() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultListCloudNetworkTagKeysResponseValidator = func() *ValidateListCloudNetworkTagKeysResponse {
	v := &ValidateListCloudNetworkTagKeysResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ListCloudNetworkTagKeysResponseValidator() db.Validator {
	return DefaultListCloudNetworkTagKeysResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *ListCloudNetworkTagValuesRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ListCloudNetworkTagValuesRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ListCloudNetworkTagValuesRequest) DeepCopy() *ListCloudNetworkTagValuesRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ListCloudNetworkTagValuesRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ListCloudNetworkTagValuesRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ListCloudNetworkTagValuesRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ListCloudNetworkTagValuesRequestValidator().Validate(ctx, m, opts...)
}

type ValidateListCloudNetworkTagValuesRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateListCloudNetworkTagValuesRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ListCloudNetworkTagValuesRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ListCloudNetworkTagValuesRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cloud_type"]; exists {

		vOpts := append(opts, db.WithValidateField("cloud_type"))
		if err := fv(ctx, m.GetCloudType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["query_key"]; exists {

		vOpts := append(opts, db.WithValidateField("query_key"))
		if err := fv(ctx, m.GetQueryKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["query_value"]; exists {

		vOpts := append(opts, db.WithValidateField("query_value"))
		if err := fv(ctx, m.GetQueryValue(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultListCloudNetworkTagValuesRequestValidator = func() *ValidateListCloudNetworkTagValuesRequest {
	v := &ValidateListCloudNetworkTagValuesRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ListCloudNetworkTagValuesRequestValidator() db.Validator {
	return DefaultListCloudNetworkTagValuesRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *ListCloudNetworkTagValuesResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ListCloudNetworkTagValuesResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ListCloudNetworkTagValuesResponse) DeepCopy() *ListCloudNetworkTagValuesResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ListCloudNetworkTagValuesResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ListCloudNetworkTagValuesResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ListCloudNetworkTagValuesResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ListCloudNetworkTagValuesResponseValidator().Validate(ctx, m, opts...)
}

type ValidateListCloudNetworkTagValuesResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateListCloudNetworkTagValuesResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ListCloudNetworkTagValuesResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ListCloudNetworkTagValuesResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["values"]; exists {

		vOpts := append(opts, db.WithValidateField("values"))
		for idx, item := range m.GetValues() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultListCloudNetworkTagValuesResponseValidator = func() *ValidateListCloudNetworkTagValuesResponse {
	v := &ValidateListCloudNetworkTagValuesResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ListCloudNetworkTagValuesResponseValidator() db.Validator {
	return DefaultListCloudNetworkTagValuesResponseValidator
}
