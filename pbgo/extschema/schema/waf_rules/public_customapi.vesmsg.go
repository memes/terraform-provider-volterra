// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package waf_rules

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *RulesReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RulesReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RulesReq) DeepCopy() *RulesReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RulesReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RulesReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RulesReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RulesReqValidator().Validate(ctx, m, opts...)
}

type ValidateRulesReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRulesReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RulesReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RulesReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRulesReqValidator = func() *ValidateRulesReq {
	v := &ValidateRulesReq{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func RulesReqValidator() db.Validator {
	return DefaultRulesReqValidator
}

// augmented methods on protoc/std generated struct

func (m *RulesRsp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RulesRsp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RulesRsp) DeepCopy() *RulesRsp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RulesRsp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RulesRsp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RulesRsp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RulesRspValidator().Validate(ctx, m, opts...)
}

type ValidateRulesRsp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRulesRsp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RulesRsp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RulesRsp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["rules"]; exists {

		vOpts := append(opts, db.WithValidateField("rules"))
		for idx, item := range m.GetRules() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRulesRspValidator = func() *ValidateRulesRsp {
	v := &ValidateRulesRsp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func RulesRspValidator() db.Validator {
	return DefaultRulesRspValidator
}

// augmented methods on protoc/std generated struct

func (m *VirtualHostWafRulesStatusReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *VirtualHostWafRulesStatusReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *VirtualHostWafRulesStatusReq) DeepCopy() *VirtualHostWafRulesStatusReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &VirtualHostWafRulesStatusReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *VirtualHostWafRulesStatusReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *VirtualHostWafRulesStatusReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VirtualHostWafRulesStatusReqValidator().Validate(ctx, m, opts...)
}

type ValidateVirtualHostWafRulesStatusReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVirtualHostWafRulesStatusReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*VirtualHostWafRulesStatusReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *VirtualHostWafRulesStatusReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVirtualHostWafRulesStatusReqValidator = func() *ValidateVirtualHostWafRulesStatusReq {
	v := &ValidateVirtualHostWafRulesStatusReq{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func VirtualHostWafRulesStatusReqValidator() db.Validator {
	return DefaultVirtualHostWafRulesStatusReqValidator
}

// augmented methods on protoc/std generated struct

func (m *VirtualHostWafRulesStatusRsp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *VirtualHostWafRulesStatusRsp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *VirtualHostWafRulesStatusRsp) DeepCopy() *VirtualHostWafRulesStatusRsp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &VirtualHostWafRulesStatusRsp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *VirtualHostWafRulesStatusRsp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *VirtualHostWafRulesStatusRsp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VirtualHostWafRulesStatusRspValidator().Validate(ctx, m, opts...)
}

type ValidateVirtualHostWafRulesStatusRsp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVirtualHostWafRulesStatusRsp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*VirtualHostWafRulesStatusRsp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *VirtualHostWafRulesStatusRsp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["waf_rules_status"]; exists {

		vOpts := append(opts, db.WithValidateField("waf_rules_status"))
		for idx, item := range m.GetWafRulesStatus() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVirtualHostWafRulesStatusRspValidator = func() *ValidateVirtualHostWafRulesStatusRsp {
	v := &ValidateVirtualHostWafRulesStatusRsp{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["waf_rules_status"] = WafRulesStatusValidator().Validate

	return v
}()

func VirtualHostWafRulesStatusRspValidator() db.Validator {
	return DefaultVirtualHostWafRulesStatusRspValidator
}

// augmented methods on protoc/std generated struct

func (m *WafRulesStatus) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *WafRulesStatus) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *WafRulesStatus) DeepCopy() *WafRulesStatus {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &WafRulesStatus{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *WafRulesStatus) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *WafRulesStatus) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return WafRulesStatusValidator().Validate(ctx, m, opts...)
}

type ValidateWafRulesStatus struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateWafRulesStatus) ParanoiaLevelValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for paranoia_level")
	}

	return validatorFn, nil
}

func (v *ValidateWafRulesStatus) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*WafRulesStatus)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *WafRulesStatus got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["anomaly_score_threshold"]; exists {

		vOpts := append(opts, db.WithValidateField("anomaly_score_threshold"))
		if err := fv(ctx, m.GetAnomalyScoreThreshold(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["mode"]; exists {

		vOpts := append(opts, db.WithValidateField("mode"))
		if err := fv(ctx, m.GetMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["paranoia_level"]; exists {

		vOpts := append(opts, db.WithValidateField("paranoia_level"))
		if err := fv(ctx, m.GetParanoiaLevel(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rules"]; exists {

		vOpts := append(opts, db.WithValidateField("rules"))
		for idx, item := range m.GetRules() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultWafRulesStatusValidator = func() *ValidateWafRulesStatus {
	v := &ValidateWafRulesStatus{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhParanoiaLevel := v.ParanoiaLevelValidationRuleHandler
	rulesParanoiaLevel := map[string]string{
		"ves.io.schema.rules.uint32.gt":  "0",
		"ves.io.schema.rules.uint32.lte": "4",
	}
	vFn, err = vrhParanoiaLevel(rulesParanoiaLevel)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for WafRulesStatus.paranoia_level: %s", err)
		panic(errMsg)
	}
	v.FldValidators["paranoia_level"] = vFn

	return v
}()

func WafRulesStatusValidator() db.Validator {
	return DefaultWafRulesStatusValidator
}

// augmented methods on protoc/std generated struct

func (m *WafRulesStatusReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *WafRulesStatusReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *WafRulesStatusReq) DeepCopy() *WafRulesStatusReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &WafRulesStatusReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *WafRulesStatusReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *WafRulesStatusReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return WafRulesStatusReqValidator().Validate(ctx, m, opts...)
}

type ValidateWafRulesStatusReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateWafRulesStatusReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*WafRulesStatusReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *WafRulesStatusReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultWafRulesStatusReqValidator = func() *ValidateWafRulesStatusReq {
	v := &ValidateWafRulesStatusReq{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func WafRulesStatusReqValidator() db.Validator {
	return DefaultWafRulesStatusReqValidator
}

// augmented methods on protoc/std generated struct

func (m *WafRulesStatusRsp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *WafRulesStatusRsp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *WafRulesStatusRsp) DeepCopy() *WafRulesStatusRsp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &WafRulesStatusRsp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *WafRulesStatusRsp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *WafRulesStatusRsp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return WafRulesStatusRspValidator().Validate(ctx, m, opts...)
}

type ValidateWafRulesStatusRsp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateWafRulesStatusRsp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*WafRulesStatusRsp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *WafRulesStatusRsp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["waf_rules_status"]; exists {

		vOpts := append(opts, db.WithValidateField("waf_rules_status"))
		if err := fv(ctx, m.GetWafRulesStatus(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultWafRulesStatusRspValidator = func() *ValidateWafRulesStatusRsp {
	v := &ValidateWafRulesStatusRsp{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["waf_rules_status"] = WafRulesStatusValidator().Validate

	return v
}()

func WafRulesStatusRspValidator() db.Validator {
	return DefaultWafRulesStatusRspValidator
}
