// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/tenant_management/managed_tenant/types.proto

package managed_tenant

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/contact"
	tenant_management "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/tenant_management"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GroupAssignmentType
//
// x-displayName: "Group to Assign"
// Shape for specifying user group assosciation to user groups in a managed tenant.
type GroupAssignmentType struct {
	// group
	//
	// x-displayName: "Group"
	// x-required
	// Assosciate existing local user group which will be used to map groups in managed tenant.
	// User should be member of this group to gain access into managed tenant.
	Group *views.ObjectRefType `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	// managed_tenant_groups
	//
	// x-displayName: "Managed Tenant Groups"
	// x-required
	// x-example: "user-group1"
	// List of group names in managed tenant (MT).
	// Note - To properly establish access, admin of managed tenant need to create corresponding Allowed Tenant
	// configuration object with access to use same group names. Once it's setup, when user from original tenant
	// access managed tenant, underlying roles from managed tenant will be applied to user.
	ManagedTenantGroups []string `protobuf:"bytes,2,rep,name=managed_tenant_groups,json=managedTenantGroups,proto3" json:"managed_tenant_groups,omitempty"`
}

func (m *GroupAssignmentType) Reset()      { *m = GroupAssignmentType{} }
func (*GroupAssignmentType) ProtoMessage() {}
func (*GroupAssignmentType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e85f277aa02575c0, []int{0}
}
func (m *GroupAssignmentType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupAssignmentType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GroupAssignmentType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupAssignmentType.Merge(m, src)
}
func (m *GroupAssignmentType) XXX_Size() int {
	return m.Size()
}
func (m *GroupAssignmentType) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupAssignmentType.DiscardUnknown(m)
}

var xxx_messageInfo_GroupAssignmentType proto.InternalMessageInfo

func (m *GroupAssignmentType) GetGroup() *views.ObjectRefType {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *GroupAssignmentType) GetManagedTenantGroups() []string {
	if m != nil {
		return m.ManagedTenantGroups
	}
	return nil
}

// GlobalSpecType
//
// x-displayName: "Specification"
// Shape of managed_tenant in the storage backend.
type GlobalSpecType struct {
	// tenant_choice
	//
	// x-required
	// x-displayName: "Managed Tenant Type"
	// choice to specify tenant selection criteria for this managed config.
	//
	// Types that are valid to be assigned to TenantChoice:
	//	*GlobalSpecType_TenantId
	//	*GlobalSpecType_AllTenants
	//	*GlobalSpecType_TenantRegex
	TenantChoice isGlobalSpecType_TenantChoice `protobuf_oneof:"tenant_choice"`
	// groups
	//
	// x-displayName: "Group Mapping"
	// List of local user group association to user groups in the managed tenant specified in the tenant_choice.
	Groups []*GroupAssignmentType `protobuf:"bytes,5,rep,name=groups,proto3" json:"groups,omitempty"`
	// Status
	//
	// x-displayName: "Status"
	// Status is to identify the status of the managed tenant configuration.
	Status tenant_management.Status `protobuf:"varint,8,opt,name=status,proto3,enum=ves.io.schema.tenant_management.Status" json:"status,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e85f277aa02575c0, []int{1}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_TenantChoice interface {
	isGlobalSpecType_TenantChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_TenantId struct {
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3,oneof" json:"tenant_id,omitempty"`
}
type GlobalSpecType_AllTenants struct {
	AllTenants *schema.Empty `protobuf:"bytes,3,opt,name=all_tenants,json=allTenants,proto3,oneof" json:"all_tenants,omitempty"`
}
type GlobalSpecType_TenantRegex struct {
	TenantRegex string `protobuf:"bytes,4,opt,name=tenant_regex,json=tenantRegex,proto3,oneof" json:"tenant_regex,omitempty"`
}

func (*GlobalSpecType_TenantId) isGlobalSpecType_TenantChoice()    {}
func (*GlobalSpecType_AllTenants) isGlobalSpecType_TenantChoice()  {}
func (*GlobalSpecType_TenantRegex) isGlobalSpecType_TenantChoice() {}

func (m *GlobalSpecType) GetTenantChoice() isGlobalSpecType_TenantChoice {
	if m != nil {
		return m.TenantChoice
	}
	return nil
}

func (m *GlobalSpecType) GetTenantId() string {
	if x, ok := m.GetTenantChoice().(*GlobalSpecType_TenantId); ok {
		return x.TenantId
	}
	return ""
}

func (m *GlobalSpecType) GetAllTenants() *schema.Empty {
	if x, ok := m.GetTenantChoice().(*GlobalSpecType_AllTenants); ok {
		return x.AllTenants
	}
	return nil
}

func (m *GlobalSpecType) GetTenantRegex() string {
	if x, ok := m.GetTenantChoice().(*GlobalSpecType_TenantRegex); ok {
		return x.TenantRegex
	}
	return ""
}

func (m *GlobalSpecType) GetGroups() []*GroupAssignmentType {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *GlobalSpecType) GetStatus() tenant_management.Status {
	if m != nil {
		return m.Status
	}
	return tenant_management.UNKNOWN
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_TenantId)(nil),
		(*GlobalSpecType_AllTenants)(nil),
		(*GlobalSpecType_TenantRegex)(nil),
	}
}

// Create Managed Tenant
//
// x-displayName: "Create Managed Tenant"
// Creates a managed_tenant config instance. Name of the object is name of the tenant that is allowed to manage.
type CreateSpecType struct {
	// Types that are valid to be assigned to TenantChoice:
	//	*CreateSpecType_TenantId
	TenantChoice isCreateSpecType_TenantChoice `protobuf_oneof:"tenant_choice"`
	Groups       []*GroupAssignmentType        `protobuf:"bytes,5,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e85f277aa02575c0, []int{2}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_TenantChoice interface {
	isCreateSpecType_TenantChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_TenantId struct {
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3,oneof" json:"tenant_id,omitempty"`
}

func (*CreateSpecType_TenantId) isCreateSpecType_TenantChoice() {}

func (m *CreateSpecType) GetTenantChoice() isCreateSpecType_TenantChoice {
	if m != nil {
		return m.TenantChoice
	}
	return nil
}

func (m *CreateSpecType) GetTenantId() string {
	if x, ok := m.GetTenantChoice().(*CreateSpecType_TenantId); ok {
		return x.TenantId
	}
	return ""
}

func (m *CreateSpecType) GetGroups() []*GroupAssignmentType {
	if m != nil {
		return m.Groups
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_TenantId)(nil),
	}
}

// Replace Managed Tenant
//
// x-displayName: "Replace Managed Tenant"
// Replaces attributes of a managed_tenant configuration.
// Update of existing tenant_choice selection is not supported but user may update existing group assignments.
type ReplaceSpecType struct {
	Groups []*GroupAssignmentType `protobuf:"bytes,5,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e85f277aa02575c0, []int{3}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetGroups() []*GroupAssignmentType {
	if m != nil {
		return m.Groups
	}
	return nil
}

// Get managed tenant
//
// x-displayName: "Get Managed Tenant"
// Get managed_tenant reads a given object from storage backend for metadata.namespace.
type GetSpecType struct {
	// Types that are valid to be assigned to TenantChoice:
	//	*GetSpecType_TenantId
	//	*GetSpecType_AllTenants
	//	*GetSpecType_TenantRegex
	TenantChoice isGetSpecType_TenantChoice `protobuf_oneof:"tenant_choice"`
	Groups       []*GroupAssignmentType     `protobuf:"bytes,5,rep,name=groups,proto3" json:"groups,omitempty"`
	Status       tenant_management.Status   `protobuf:"varint,8,opt,name=status,proto3,enum=ves.io.schema.tenant_management.Status" json:"status,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e85f277aa02575c0, []int{4}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_TenantChoice interface {
	isGetSpecType_TenantChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_TenantId struct {
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3,oneof" json:"tenant_id,omitempty"`
}
type GetSpecType_AllTenants struct {
	AllTenants *schema.Empty `protobuf:"bytes,3,opt,name=all_tenants,json=allTenants,proto3,oneof" json:"all_tenants,omitempty"`
}
type GetSpecType_TenantRegex struct {
	TenantRegex string `protobuf:"bytes,4,opt,name=tenant_regex,json=tenantRegex,proto3,oneof" json:"tenant_regex,omitempty"`
}

func (*GetSpecType_TenantId) isGetSpecType_TenantChoice()    {}
func (*GetSpecType_AllTenants) isGetSpecType_TenantChoice()  {}
func (*GetSpecType_TenantRegex) isGetSpecType_TenantChoice() {}

func (m *GetSpecType) GetTenantChoice() isGetSpecType_TenantChoice {
	if m != nil {
		return m.TenantChoice
	}
	return nil
}

func (m *GetSpecType) GetTenantId() string {
	if x, ok := m.GetTenantChoice().(*GetSpecType_TenantId); ok {
		return x.TenantId
	}
	return ""
}

func (m *GetSpecType) GetAllTenants() *schema.Empty {
	if x, ok := m.GetTenantChoice().(*GetSpecType_AllTenants); ok {
		return x.AllTenants
	}
	return nil
}

func (m *GetSpecType) GetTenantRegex() string {
	if x, ok := m.GetTenantChoice().(*GetSpecType_TenantRegex); ok {
		return x.TenantRegex
	}
	return ""
}

func (m *GetSpecType) GetGroups() []*GroupAssignmentType {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *GetSpecType) GetStatus() tenant_management.Status {
	if m != nil {
		return m.Status
	}
	return tenant_management.UNKNOWN
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_TenantId)(nil),
		(*GetSpecType_AllTenants)(nil),
		(*GetSpecType_TenantRegex)(nil),
	}
}

// AccessInfo
//
// x-displayName: "Access Info"
// Access details of a managed tenant.
type AccessInfo struct {
	// Name
	//
	// x-displayName: "Name"
	// x-example: "l1-support"
	// Name of the managed tenant config object. it can be used as known identifier.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Link
	//
	// x-displayName: "Link"
	// Info about hyperlink to access the managed tenant.
	Link *views.LinkRefType `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	// groups
	//
	// x-displayName: "Groups"
	// List of local user group association to user groups in the managed tenant.
	Groups []*GroupAssignmentType `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (m *AccessInfo) Reset()      { *m = AccessInfo{} }
func (*AccessInfo) ProtoMessage() {}
func (*AccessInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e85f277aa02575c0, []int{5}
}
func (m *AccessInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccessInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AccessInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessInfo.Merge(m, src)
}
func (m *AccessInfo) XXX_Size() int {
	return m.Size()
}
func (m *AccessInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AccessInfo proto.InternalMessageInfo

func (m *AccessInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AccessInfo) GetLink() *views.LinkRefType {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *AccessInfo) GetGroups() []*GroupAssignmentType {
	if m != nil {
		return m.Groups
	}
	return nil
}

func init() {
	proto.RegisterType((*GroupAssignmentType)(nil), "ves.io.schema.tenant_management.managed_tenant.GroupAssignmentType")
	golang_proto.RegisterType((*GroupAssignmentType)(nil), "ves.io.schema.tenant_management.managed_tenant.GroupAssignmentType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.tenant_management.managed_tenant.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.tenant_management.managed_tenant.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.tenant_management.managed_tenant.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.tenant_management.managed_tenant.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.tenant_management.managed_tenant.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.tenant_management.managed_tenant.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.tenant_management.managed_tenant.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.tenant_management.managed_tenant.GetSpecType")
	proto.RegisterType((*AccessInfo)(nil), "ves.io.schema.tenant_management.managed_tenant.AccessInfo")
	golang_proto.RegisterType((*AccessInfo)(nil), "ves.io.schema.tenant_management.managed_tenant.AccessInfo")
}

func init() {
	proto.RegisterFile("ves.io/schema/tenant_management/managed_tenant/types.proto", fileDescriptor_e85f277aa02575c0)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/tenant_management/managed_tenant/types.proto", fileDescriptor_e85f277aa02575c0)
}

var fileDescriptor_e85f277aa02575c0 = []byte{
	// 879 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xc1, 0x6f, 0xdb, 0x64,
	0x14, 0xcf, 0xb3, 0x9d, 0xd6, 0xf9, 0x02, 0xc5, 0xf3, 0x56, 0x2d, 0xed, 0x98, 0x31, 0x99, 0x04,
	0x91, 0x48, 0x6d, 0xc8, 0x56, 0x40, 0x39, 0x8c, 0xcd, 0x03, 0xba, 0x05, 0x10, 0x92, 0x37, 0x09,
	0x09, 0x0e, 0x95, 0xe3, 0x7c, 0x75, 0x4d, 0x1d, 0x7f, 0xc6, 0xdf, 0x97, 0x6e, 0x3d, 0x54, 0xaa,
	0xb8, 0x70, 0x45, 0xfc, 0x09, 0x70, 0x41, 0x1c, 0xe1, 0xd6, 0xf6, 0xd0, 0x23, 0xda, 0xa9, 0xc7,
	0x1c, 0x69, 0x2a, 0xa4, 0x71, 0x9b, 0xb8, 0x20, 0x71, 0x42, 0xf9, 0xec, 0xa4, 0xb1, 0x1b, 0xb4,
	0x82, 0xd6, 0xdb, 0x73, 0xde, 0xef, 0xbd, 0xf7, 0x7b, 0xbf, 0xf7, 0x9e, 0x1d, 0xd4, 0xdc, 0xc4,
	0xd4, 0xf0, 0x89, 0x49, 0xdd, 0x75, 0xdc, 0x75, 0x4c, 0x86, 0x43, 0x27, 0x64, 0xab, 0x5d, 0x27,
	0x74, 0x3c, 0xdc, 0xc5, 0x21, 0x33, 0x13, 0xb3, 0xb3, 0x9a, 0x78, 0x4c, 0xb6, 0x15, 0x61, 0x6a,
	0x44, 0x31, 0x61, 0x44, 0x35, 0x92, 0x58, 0x23, 0x89, 0x35, 0x4e, 0xc5, 0x1a, 0xd9, 0xd8, 0xc5,
	0x25, 0xcf, 0x67, 0xeb, 0xbd, 0xb6, 0xe1, 0x92, 0xae, 0xe9, 0x11, 0x8f, 0x98, 0x3c, 0x4d, 0xbb,
	0xb7, 0xc6, 0x9f, 0xf8, 0x03, 0xb7, 0x92, 0xf4, 0x8b, 0xaf, 0x66, 0xa9, 0xb9, 0x24, 0x64, 0x8e,
	0x9b, 0x61, 0xb0, 0x78, 0x25, 0x0b, 0x21, 0x11, 0xf3, 0x49, 0x38, 0x72, 0xbe, 0xf1, 0xac, 0xd6,
	0x26, 0x33, 0x2d, 0xe4, 0xc0, 0x13, 0xae, 0x97, 0xb3, 0xae, 0x4d, 0x27, 0xf0, 0x3b, 0x0e, 0xc3,
	0xa9, 0x57, 0xcf, 0x79, 0x7d, 0xfc, 0x70, 0x35, 0xcb, 0xe3, 0x95, 0xd3, 0x08, 0x3a, 0x59, 0xa0,
	0xfa, 0x8d, 0x80, 0x2e, 0xae, 0xc4, 0xa4, 0x17, 0xdd, 0xa6, 0xd4, 0xf7, 0xc2, 0x21, 0xb7, 0x07,
	0x5b, 0x11, 0x56, 0x3f, 0x42, 0x45, 0x6f, 0xf8, 0x73, 0x05, 0x74, 0xa8, 0x95, 0x1b, 0xd5, 0x9c,
	0xde, 0x3c, 0x91, 0xf1, 0x69, 0xfb, 0x4b, 0xec, 0x32, 0x1b, 0xaf, 0x0d, 0x43, 0xac, 0x0b, 0x3f,
	0x6d, 0xa3, 0x1e, 0xc5, 0xf1, 0x2a, 0x0f, 0xdc, 0xd9, 0x07, 0xb0, 0x93, 0x1c, 0xea, 0x67, 0x68,
	0x3e, 0x3b, 0x8e, 0x04, 0x42, 0x2b, 0x82, 0x2e, 0xd6, 0x4a, 0xd6, 0xb5, 0xdd, 0x7d, 0x28, 0xcb,
	0x50, 0x83, 0x37, 0xa1, 0x29, 0x3e, 0xc4, 0xed, 0xdd, 0x3f, 0x0e, 0xc4, 0xe2, 0x77, 0x20, 0x28,
	0xfa, 0xc8, 0xaa, 0x80, 0x7d, 0x31, 0xcd, 0xf0, 0x80, 0x27, 0xe0, 0x94, 0x69, 0xb3, 0xf5, 0x78,
	0x0f, 0x3e, 0x44, 0x0a, 0x2a, 0xf2, 0xe7, 0xc5, 0xd9, 0x94, 0x34, 0x6a, 0xa0, 0xf9, 0x4f, 0x12,
	0xb8, 0x9e, 0xe0, 0xf5, 0x24, 0xc0, 0x5a, 0xf8, 0x17, 0x26, 0x8a, 0x5e, 0xfd, 0x59, 0x44, 0x73,
	0x2b, 0x01, 0x69, 0x3b, 0xc1, 0xfd, 0x08, 0xbb, 0x5c, 0x84, 0xb7, 0x51, 0x29, 0x45, 0xf9, 0x9d,
	0x8a, 0xa0, 0x43, 0xad, 0x64, 0x5d, 0xde, 0xdd, 0x87, 0x92, 0x9c, 0x61, 0x1a, 0x8b, 0x95, 0x1d,
	0xe1, 0x6e, 0xc1, 0x96, 0x13, 0xec, 0xbd, 0x8e, 0x7a, 0x0b, 0x95, 0x9d, 0x20, 0x48, 0x2b, 0xd0,
	0x8a, 0xc8, 0x25, 0xbc, 0x94, 0x93, 0xf0, 0x83, 0x6e, 0xc4, 0xb6, 0xac, 0xd9, 0xfe, 0x36, 0x3c,
	0xd9, 0x03, 0xb8, 0x5b, 0xb0, 0x91, 0x13, 0x04, 0x09, 0x5b, 0xaa, 0xde, 0x42, 0x2f, 0xa4, 0x95,
	0x63, 0xec, 0xe1, 0x47, 0x15, 0x89, 0x17, 0xbf, 0x92, 0x82, 0x4f, 0xca, 0xa6, 0xd6, 0x01, 0x4f,
	0x50, 0x4e, 0x42, 0xec, 0x61, 0x84, 0xfa, 0x15, 0x9a, 0x49, 0x45, 0x2e, 0xea, 0x62, 0xad, 0xdc,
	0xb8, 0xf3, 0x1f, 0x2f, 0xc6, 0x98, 0xb2, 0x15, 0xd6, 0xa5, 0xf1, 0x68, 0x94, 0x89, 0xd1, 0xa4,
	0x85, 0xd4, 0xf7, 0xd1, 0x0c, 0x65, 0x0e, 0xeb, 0xd1, 0x8a, 0xac, 0x43, 0x6d, 0xae, 0xf1, 0xfa,
	0x33, 0x4b, 0xde, 0xe7, 0x70, 0x4b, 0xec, 0x6f, 0x83, 0x9d, 0xc6, 0x5a, 0x0b, 0xe8, 0xc5, 0x14,
	0xe8, 0xae, 0x13, 0xdf, 0xc5, 0xaa, 0x7c, 0xb0, 0x07, 0xc2, 0xe1, 0x1e, 0x40, 0x4b, 0x92, 0x41,
	0x11, 0x5a, 0x92, 0x3c, 0xa3, 0xcc, 0xb6, 0x24, 0x79, 0x56, 0x91, 0xab, 0xbf, 0x03, 0x9a, 0xbb,
	0x13, 0x63, 0x87, 0xe1, 0xf1, 0xd0, 0xae, 0x9e, 0x1a, 0x5a, 0x66, 0x36, 0x5f, 0x9c, 0x83, 0x2e,
	0x23, 0x05, 0x9a, 0x97, 0x1f, 0xdf, 0xcc, 0xed, 0xd0, 0x9f, 0x37, 0xc5, 0xb7, 0xea, 0xcb, 0xd6,
	0x6b, 0xf9, 0xa6, 0xe6, 0x87, 0x0d, 0x7d, 0xfd, 0x37, 0x64, 0x7f, 0x1e, 0x77, 0x28, 0x2a, 0x52,
	0x4b, 0x92, 0x25, 0xa5, 0x98, 0x74, 0x5b, 0xfd, 0x01, 0xd0, 0x4b, 0x36, 0x8e, 0x02, 0xc7, 0x3d,
	0x69, 0xf4, 0x5c, 0x3b, 0x99, 0x9f, 0xd2, 0x09, 0x2c, 0x8f, 0xf9, 0x09, 0x8a, 0x38, 0x85, 0xe5,
	0x5f, 0x02, 0x2a, 0xaf, 0x60, 0x76, 0xd6, 0x51, 0xbc, 0x73, 0xe6, 0x33, 0xc9, 0x5d, 0xc7, 0xb5,
	0x69, 0xd7, 0x91, 0x3f, 0x80, 0xf3, 0x94, 0x47, 0x7d, 0xef, 0x7f, 0xae, 0xfa, 0x68, 0xcb, 0x9b,
	0x57, 0xa7, 0xe8, 0x5b, 0x6a, 0xd4, 0xaf, 0xd7, 0x6f, 0xd4, 0x97, 0xeb, 0xef, 0x5a, 0xd5, 0xfc,
	0xbe, 0x5c, 0x98, 0xb6, 0x2b, 0x27, 0x77, 0xf0, 0x0b, 0x20, 0x74, 0xdb, 0x75, 0x31, 0xa5, 0xf7,
	0xc2, 0x35, 0xa2, 0xaa, 0x48, 0x0a, 0x9d, 0x2e, 0xe6, 0x2f, 0xef, 0x92, 0xcd, 0x6d, 0xf5, 0x06,
	0x92, 0x02, 0x3f, 0xdc, 0xe0, 0x73, 0x28, 0x37, 0xf4, 0xa9, 0x2f, 0xf4, 0x8f, 0xfd, 0x70, 0x23,
	0x7d, 0x9d, 0xdb, 0x1c, 0x3d, 0xa1, 0xa2, 0xf8, 0xdc, 0x55, 0xb4, 0xbe, 0x87, 0xc3, 0x23, 0xad,
	0xd0, 0x3f, 0xd2, 0x0a, 0x4f, 0x8f, 0x34, 0xd8, 0x19, 0x68, 0xf0, 0xe3, 0x40, 0x83, 0x5f, 0x07,
	0x1a, 0x1c, 0x0e, 0x34, 0xe8, 0x0f, 0x34, 0xf8, 0x6d, 0xa0, 0xc1, 0x93, 0x81, 0x56, 0x78, 0x3a,
	0xd0, 0xe0, 0xdb, 0x63, 0xad, 0x70, 0x70, 0xac, 0xc1, 0xe1, 0xb1, 0x56, 0xe8, 0x1f, 0x6b, 0x85,
	0xcf, 0x3b, 0x1e, 0x89, 0x36, 0x3c, 0x63, 0x93, 0x04, 0x0c, 0xc7, 0xb1, 0x63, 0xf4, 0xa8, 0xc9,
	0x8d, 0x35, 0x12, 0x77, 0x97, 0xa2, 0x98, 0x6c, 0xfa, 0x1d, 0x1c, 0x2f, 0x8d, 0xdc, 0x66, 0xd4,
	0xf6, 0x88, 0x89, 0x1f, 0xb1, 0xf4, 0x5b, 0x78, 0xc6, 0x7f, 0x1d, 0xed, 0x19, 0xfe, 0xa1, 0xbc,
	0xfe, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbd, 0xfe, 0x75, 0x30, 0xae, 0x08, 0x00, 0x00,
}

func (this *GroupAssignmentType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GroupAssignmentType)
	if !ok {
		that2, ok := that.(GroupAssignmentType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Group.Equal(that1.Group) {
		return false
	}
	if len(this.ManagedTenantGroups) != len(that1.ManagedTenantGroups) {
		return false
	}
	for i := range this.ManagedTenantGroups {
		if this.ManagedTenantGroups[i] != that1.ManagedTenantGroups[i] {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.TenantChoice == nil {
		if this.TenantChoice != nil {
			return false
		}
	} else if this.TenantChoice == nil {
		return false
	} else if !this.TenantChoice.Equal(that1.TenantChoice) {
		return false
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *GlobalSpecType_TenantId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_TenantId)
	if !ok {
		that2, ok := that.(GlobalSpecType_TenantId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	return true
}
func (this *GlobalSpecType_AllTenants) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AllTenants)
	if !ok {
		that2, ok := that.(GlobalSpecType_AllTenants)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllTenants.Equal(that1.AllTenants) {
		return false
	}
	return true
}
func (this *GlobalSpecType_TenantRegex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_TenantRegex)
	if !ok {
		that2, ok := that.(GlobalSpecType_TenantRegex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TenantRegex != that1.TenantRegex {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.TenantChoice == nil {
		if this.TenantChoice != nil {
			return false
		}
	} else if this.TenantChoice == nil {
		return false
	} else if !this.TenantChoice.Equal(that1.TenantChoice) {
		return false
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType_TenantId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_TenantId)
	if !ok {
		that2, ok := that.(CreateSpecType_TenantId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.TenantChoice == nil {
		if this.TenantChoice != nil {
			return false
		}
	} else if this.TenantChoice == nil {
		return false
	} else if !this.TenantChoice.Equal(that1.TenantChoice) {
		return false
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *GetSpecType_TenantId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_TenantId)
	if !ok {
		that2, ok := that.(GetSpecType_TenantId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	return true
}
func (this *GetSpecType_AllTenants) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AllTenants)
	if !ok {
		that2, ok := that.(GetSpecType_AllTenants)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllTenants.Equal(that1.AllTenants) {
		return false
	}
	return true
}
func (this *GetSpecType_TenantRegex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_TenantRegex)
	if !ok {
		that2, ok := that.(GetSpecType_TenantRegex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TenantRegex != that1.TenantRegex {
		return false
	}
	return true
}
func (this *AccessInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccessInfo)
	if !ok {
		that2, ok := that.(AccessInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Link.Equal(that1.Link) {
		return false
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	return true
}
func (this *GroupAssignmentType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&managed_tenant.GroupAssignmentType{")
	if this.Group != nil {
		s = append(s, "Group: "+fmt.Sprintf("%#v", this.Group)+",\n")
	}
	s = append(s, "ManagedTenantGroups: "+fmt.Sprintf("%#v", this.ManagedTenantGroups)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&managed_tenant.GlobalSpecType{")
	if this.TenantChoice != nil {
		s = append(s, "TenantChoice: "+fmt.Sprintf("%#v", this.TenantChoice)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_TenantId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&managed_tenant.GlobalSpecType_TenantId{` +
		`TenantId:` + fmt.Sprintf("%#v", this.TenantId) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AllTenants) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&managed_tenant.GlobalSpecType_AllTenants{` +
		`AllTenants:` + fmt.Sprintf("%#v", this.AllTenants) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_TenantRegex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&managed_tenant.GlobalSpecType_TenantRegex{` +
		`TenantRegex:` + fmt.Sprintf("%#v", this.TenantRegex) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&managed_tenant.CreateSpecType{")
	if this.TenantChoice != nil {
		s = append(s, "TenantChoice: "+fmt.Sprintf("%#v", this.TenantChoice)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_TenantId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&managed_tenant.CreateSpecType_TenantId{` +
		`TenantId:` + fmt.Sprintf("%#v", this.TenantId) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&managed_tenant.ReplaceSpecType{")
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&managed_tenant.GetSpecType{")
	if this.TenantChoice != nil {
		s = append(s, "TenantChoice: "+fmt.Sprintf("%#v", this.TenantChoice)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_TenantId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&managed_tenant.GetSpecType_TenantId{` +
		`TenantId:` + fmt.Sprintf("%#v", this.TenantId) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AllTenants) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&managed_tenant.GetSpecType_AllTenants{` +
		`AllTenants:` + fmt.Sprintf("%#v", this.AllTenants) + `}`}, ", ")
	return s
}
func (this *GetSpecType_TenantRegex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&managed_tenant.GetSpecType_TenantRegex{` +
		`TenantRegex:` + fmt.Sprintf("%#v", this.TenantRegex) + `}`}, ", ")
	return s
}
func (this *AccessInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&managed_tenant.AccessInfo{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Link != nil {
		s = append(s, "Link: "+fmt.Sprintf("%#v", this.Link)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GroupAssignmentType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupAssignmentType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupAssignmentType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ManagedTenantGroups) > 0 {
		for iNdEx := len(m.ManagedTenantGroups) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ManagedTenantGroups[iNdEx])
			copy(dAtA[i:], m.ManagedTenantGroups[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ManagedTenantGroups[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Group != nil {
		{
			size, err := m.Group.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.TenantChoice != nil {
		{
			size := m.TenantChoice.Size()
			i -= size
			if _, err := m.TenantChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_TenantId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_TenantId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.TenantId)
	copy(dAtA[i:], m.TenantId)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.TenantId)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AllTenants) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AllTenants) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllTenants != nil {
		{
			size, err := m.AllTenants.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_TenantRegex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_TenantRegex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.TenantRegex)
	copy(dAtA[i:], m.TenantRegex)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.TenantRegex)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.TenantChoice != nil {
		{
			size := m.TenantChoice.Size()
			i -= size
			if _, err := m.TenantChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_TenantId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_TenantId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.TenantId)
	copy(dAtA[i:], m.TenantId)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.TenantId)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.TenantChoice != nil {
		{
			size := m.TenantChoice.Size()
			i -= size
			if _, err := m.TenantChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_TenantId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_TenantId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.TenantId)
	copy(dAtA[i:], m.TenantId)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.TenantId)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AllTenants) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AllTenants) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllTenants != nil {
		{
			size, err := m.AllTenants.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_TenantRegex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_TenantRegex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.TenantRegex)
	copy(dAtA[i:], m.TenantRegex)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.TenantRegex)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *AccessInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccessInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Link != nil {
		{
			size, err := m.Link.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GroupAssignmentType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.ManagedTenantGroups) > 0 {
		for _, s := range m.ManagedTenantGroups {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TenantChoice != nil {
		n += m.TenantChoice.Size()
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	return n
}

func (m *GlobalSpecType_TenantId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TenantId)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *GlobalSpecType_AllTenants) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllTenants != nil {
		l = m.AllTenants.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_TenantRegex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TenantRegex)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TenantChoice != nil {
		n += m.TenantChoice.Size()
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType_TenantId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TenantId)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TenantChoice != nil {
		n += m.TenantChoice.Size()
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	return n
}

func (m *GetSpecType_TenantId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TenantId)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *GetSpecType_AllTenants) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllTenants != nil {
		l = m.AllTenants.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_TenantRegex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TenantRegex)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *AccessInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Link != nil {
		l = m.Link.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GroupAssignmentType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GroupAssignmentType{`,
		`Group:` + strings.Replace(fmt.Sprintf("%v", this.Group), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`ManagedTenantGroups:` + fmt.Sprintf("%v", this.ManagedTenantGroups) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGroups := "[]*GroupAssignmentType{"
	for _, f := range this.Groups {
		repeatedStringForGroups += strings.Replace(f.String(), "GroupAssignmentType", "GroupAssignmentType", 1) + ","
	}
	repeatedStringForGroups += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`TenantChoice:` + fmt.Sprintf("%v", this.TenantChoice) + `,`,
		`Groups:` + repeatedStringForGroups + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_TenantId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_TenantId{`,
		`TenantId:` + fmt.Sprintf("%v", this.TenantId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AllTenants) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AllTenants{`,
		`AllTenants:` + strings.Replace(fmt.Sprintf("%v", this.AllTenants), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_TenantRegex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_TenantRegex{`,
		`TenantRegex:` + fmt.Sprintf("%v", this.TenantRegex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGroups := "[]*GroupAssignmentType{"
	for _, f := range this.Groups {
		repeatedStringForGroups += strings.Replace(f.String(), "GroupAssignmentType", "GroupAssignmentType", 1) + ","
	}
	repeatedStringForGroups += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`TenantChoice:` + fmt.Sprintf("%v", this.TenantChoice) + `,`,
		`Groups:` + repeatedStringForGroups + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_TenantId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_TenantId{`,
		`TenantId:` + fmt.Sprintf("%v", this.TenantId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGroups := "[]*GroupAssignmentType{"
	for _, f := range this.Groups {
		repeatedStringForGroups += strings.Replace(f.String(), "GroupAssignmentType", "GroupAssignmentType", 1) + ","
	}
	repeatedStringForGroups += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Groups:` + repeatedStringForGroups + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGroups := "[]*GroupAssignmentType{"
	for _, f := range this.Groups {
		repeatedStringForGroups += strings.Replace(f.String(), "GroupAssignmentType", "GroupAssignmentType", 1) + ","
	}
	repeatedStringForGroups += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`TenantChoice:` + fmt.Sprintf("%v", this.TenantChoice) + `,`,
		`Groups:` + repeatedStringForGroups + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_TenantId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_TenantId{`,
		`TenantId:` + fmt.Sprintf("%v", this.TenantId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AllTenants) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AllTenants{`,
		`AllTenants:` + strings.Replace(fmt.Sprintf("%v", this.AllTenants), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_TenantRegex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_TenantRegex{`,
		`TenantRegex:` + fmt.Sprintf("%v", this.TenantRegex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AccessInfo) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGroups := "[]*GroupAssignmentType{"
	for _, f := range this.Groups {
		repeatedStringForGroups += strings.Replace(f.String(), "GroupAssignmentType", "GroupAssignmentType", 1) + ","
	}
	repeatedStringForGroups += "}"
	s := strings.Join([]string{`&AccessInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Link:` + strings.Replace(fmt.Sprintf("%v", this.Link), "LinkRefType", "views.LinkRefType", 1) + `,`,
		`Groups:` + repeatedStringForGroups + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GroupAssignmentType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupAssignmentType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupAssignmentType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &views.ObjectRefType{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagedTenantGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagedTenantGroups = append(m.ManagedTenantGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantChoice = &GlobalSpecType_TenantId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllTenants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TenantChoice = &GlobalSpecType_AllTenants{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantRegex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantChoice = &GlobalSpecType_TenantRegex{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupAssignmentType{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= tenant_management.Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantChoice = &CreateSpecType_TenantId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupAssignmentType{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupAssignmentType{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantChoice = &GetSpecType_TenantId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllTenants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TenantChoice = &GetSpecType_AllTenants{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantRegex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantChoice = &GetSpecType_TenantRegex{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupAssignmentType{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= tenant_management.Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccessInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccessInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccessInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Link == nil {
				m.Link = &views.LinkRefType{}
			}
			if err := m.Link.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupAssignmentType{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
