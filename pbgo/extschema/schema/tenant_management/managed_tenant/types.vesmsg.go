// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package managed_tenant

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AccessInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AccessInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AccessInfo) DeepCopy() *AccessInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AccessInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AccessInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AccessInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AccessInfoValidator().Validate(ctx, m, opts...)
}

func (m *AccessInfo) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetGroupsDRefInfo()

}

// GetDRefInfo for the field's type
func (m *AccessInfo) GetGroupsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGroups() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetGroups() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGroups() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("groups[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateAccessInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAccessInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AccessInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AccessInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["groups"]; exists {

		vOpts := append(opts, db.WithValidateField("groups"))
		for idx, item := range m.GetGroups() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["link"]; exists {

		vOpts := append(opts, db.WithValidateField("link"))
		if err := fv(ctx, m.GetLink(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAccessInfoValidator = func() *ValidateAccessInfo {
	v := &ValidateAccessInfo{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["link"] = ves_io_schema_views.LinkRefTypeValidator().Validate

	v.FldValidators["groups"] = GroupAssignmentTypeValidator().Validate

	return v
}()

func AccessInfoValidator() db.Validator {
	return DefaultAccessInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetGroupsDRefInfo()

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetGroupsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGroups() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetGroups() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGroups() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("groups[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) TenantChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tenant_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) TenantChoiceTenantIdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_TenantId, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tenant_id")
	}
	return oValidatorFn_TenantId, nil
}

func (v *ValidateCreateSpecType) GroupsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for groups")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*GroupAssignmentType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := GroupAssignmentTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for groups")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*GroupAssignmentType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*GroupAssignmentType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated groups")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items groups")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["groups"]; exists {
		vOpts := append(opts, db.WithValidateField("groups"))
		if err := fv(ctx, m.GetGroups(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tenant_choice"]; exists {
		val := m.GetTenantChoice()
		vOpts := append(opts,
			db.WithValidateField("tenant_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTenantChoice().(type) {
	case *CreateSpecType_TenantId:
		if fv, exists := v.FldValidators["tenant_choice.tenant_id"]; exists {
			val := m.GetTenantChoice().(*CreateSpecType_TenantId).TenantId
			vOpts := append(opts,
				db.WithValidateField("tenant_choice"),
				db.WithValidateField("tenant_id"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTenantChoice := v.TenantChoiceValidationRuleHandler
	rulesTenantChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTenantChoice(rulesTenantChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.tenant_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tenant_choice"] = vFn

	vrhTenantChoiceTenantId := v.TenantChoiceTenantIdValidationRuleHandler
	rulesTenantChoiceTenantId := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFnMap["tenant_choice.tenant_id"], err = vrhTenantChoiceTenantId(rulesTenantChoiceTenantId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CreateSpecType.tenant_choice_tenant_id: %s", err)
		panic(errMsg)
	}

	v.FldValidators["tenant_choice.tenant_id"] = vFnMap["tenant_choice.tenant_id"]

	vrhGroups := v.GroupsValidationRuleHandler
	rulesGroups := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhGroups(rulesGroups)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.groups: %s", err)
		panic(errMsg)
	}
	v.FldValidators["groups"] = vFn

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetGroupsDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetGroupsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGroups() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetGroups() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGroups() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("groups[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) TenantChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tenant_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) TenantChoiceTenantIdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_TenantId, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tenant_id")
	}
	return oValidatorFn_TenantId, nil
}
func (v *ValidateGetSpecType) TenantChoiceTenantRegexValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_TenantRegex, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tenant_regex")
	}
	return oValidatorFn_TenantRegex, nil
}

func (v *ValidateGetSpecType) GroupsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for groups")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*GroupAssignmentType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := GroupAssignmentTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for groups")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*GroupAssignmentType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*GroupAssignmentType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated groups")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items groups")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["groups"]; exists {
		vOpts := append(opts, db.WithValidateField("groups"))
		if err := fv(ctx, m.GetGroups(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["status"]; exists {

		vOpts := append(opts, db.WithValidateField("status"))
		if err := fv(ctx, m.GetStatus(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tenant_choice"]; exists {
		val := m.GetTenantChoice()
		vOpts := append(opts,
			db.WithValidateField("tenant_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTenantChoice().(type) {
	case *GetSpecType_TenantId:
		if fv, exists := v.FldValidators["tenant_choice.tenant_id"]; exists {
			val := m.GetTenantChoice().(*GetSpecType_TenantId).TenantId
			vOpts := append(opts,
				db.WithValidateField("tenant_choice"),
				db.WithValidateField("tenant_id"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AllTenants:
		if fv, exists := v.FldValidators["tenant_choice.all_tenants"]; exists {
			val := m.GetTenantChoice().(*GetSpecType_AllTenants).AllTenants
			vOpts := append(opts,
				db.WithValidateField("tenant_choice"),
				db.WithValidateField("all_tenants"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_TenantRegex:
		if fv, exists := v.FldValidators["tenant_choice.tenant_regex"]; exists {
			val := m.GetTenantChoice().(*GetSpecType_TenantRegex).TenantRegex
			vOpts := append(opts,
				db.WithValidateField("tenant_choice"),
				db.WithValidateField("tenant_regex"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTenantChoice := v.TenantChoiceValidationRuleHandler
	rulesTenantChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTenantChoice(rulesTenantChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.tenant_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tenant_choice"] = vFn

	vrhTenantChoiceTenantId := v.TenantChoiceTenantIdValidationRuleHandler
	rulesTenantChoiceTenantId := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFnMap["tenant_choice.tenant_id"], err = vrhTenantChoiceTenantId(rulesTenantChoiceTenantId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GetSpecType.tenant_choice_tenant_id: %s", err)
		panic(errMsg)
	}
	vrhTenantChoiceTenantRegex := v.TenantChoiceTenantRegexValidationRuleHandler
	rulesTenantChoiceTenantRegex := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
		"ves.io.schema.rules.string.regex":   "true",
	}
	vFnMap["tenant_choice.tenant_regex"], err = vrhTenantChoiceTenantRegex(rulesTenantChoiceTenantRegex)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GetSpecType.tenant_choice_tenant_regex: %s", err)
		panic(errMsg)
	}

	v.FldValidators["tenant_choice.tenant_id"] = vFnMap["tenant_choice.tenant_id"]
	v.FldValidators["tenant_choice.tenant_regex"] = vFnMap["tenant_choice.tenant_regex"]

	vrhGroups := v.GroupsValidationRuleHandler
	rulesGroups := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhGroups(rulesGroups)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.groups: %s", err)
		panic(errMsg)
	}
	v.FldValidators["groups"] = vFn

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetGroupsDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetGroupsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGroups() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetGroups() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGroups() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("groups[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) TenantChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tenant_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) TenantChoiceTenantIdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_TenantId, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tenant_id")
	}
	return oValidatorFn_TenantId, nil
}
func (v *ValidateGlobalSpecType) TenantChoiceTenantRegexValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_TenantRegex, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tenant_regex")
	}
	return oValidatorFn_TenantRegex, nil
}

func (v *ValidateGlobalSpecType) GroupsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for groups")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*GroupAssignmentType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := GroupAssignmentTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for groups")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*GroupAssignmentType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*GroupAssignmentType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated groups")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items groups")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["groups"]; exists {
		vOpts := append(opts, db.WithValidateField("groups"))
		if err := fv(ctx, m.GetGroups(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["status"]; exists {

		vOpts := append(opts, db.WithValidateField("status"))
		if err := fv(ctx, m.GetStatus(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tenant_choice"]; exists {
		val := m.GetTenantChoice()
		vOpts := append(opts,
			db.WithValidateField("tenant_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTenantChoice().(type) {
	case *GlobalSpecType_TenantId:
		if fv, exists := v.FldValidators["tenant_choice.tenant_id"]; exists {
			val := m.GetTenantChoice().(*GlobalSpecType_TenantId).TenantId
			vOpts := append(opts,
				db.WithValidateField("tenant_choice"),
				db.WithValidateField("tenant_id"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AllTenants:
		if fv, exists := v.FldValidators["tenant_choice.all_tenants"]; exists {
			val := m.GetTenantChoice().(*GlobalSpecType_AllTenants).AllTenants
			vOpts := append(opts,
				db.WithValidateField("tenant_choice"),
				db.WithValidateField("all_tenants"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_TenantRegex:
		if fv, exists := v.FldValidators["tenant_choice.tenant_regex"]; exists {
			val := m.GetTenantChoice().(*GlobalSpecType_TenantRegex).TenantRegex
			vOpts := append(opts,
				db.WithValidateField("tenant_choice"),
				db.WithValidateField("tenant_regex"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTenantChoice := v.TenantChoiceValidationRuleHandler
	rulesTenantChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTenantChoice(rulesTenantChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.tenant_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tenant_choice"] = vFn

	vrhTenantChoiceTenantId := v.TenantChoiceTenantIdValidationRuleHandler
	rulesTenantChoiceTenantId := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFnMap["tenant_choice.tenant_id"], err = vrhTenantChoiceTenantId(rulesTenantChoiceTenantId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GlobalSpecType.tenant_choice_tenant_id: %s", err)
		panic(errMsg)
	}
	vrhTenantChoiceTenantRegex := v.TenantChoiceTenantRegexValidationRuleHandler
	rulesTenantChoiceTenantRegex := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
		"ves.io.schema.rules.string.regex":   "true",
	}
	vFnMap["tenant_choice.tenant_regex"], err = vrhTenantChoiceTenantRegex(rulesTenantChoiceTenantRegex)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GlobalSpecType.tenant_choice_tenant_regex: %s", err)
		panic(errMsg)
	}

	v.FldValidators["tenant_choice.tenant_id"] = vFnMap["tenant_choice.tenant_id"]
	v.FldValidators["tenant_choice.tenant_regex"] = vFnMap["tenant_choice.tenant_regex"]

	vrhGroups := v.GroupsValidationRuleHandler
	rulesGroups := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhGroups(rulesGroups)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.groups: %s", err)
		panic(errMsg)
	}
	v.FldValidators["groups"] = vFn

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GroupAssignmentType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GroupAssignmentType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GroupAssignmentType) DeepCopy() *GroupAssignmentType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GroupAssignmentType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GroupAssignmentType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GroupAssignmentType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GroupAssignmentTypeValidator().Validate(ctx, m, opts...)
}

func (m *GroupAssignmentType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetGroupDRefInfo()

}

func (m *GroupAssignmentType) GetGroupDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetGroup()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("user_group.Object")
	dri := db.DRefInfo{
		RefdType:   "user_group.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "group",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetGroupDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GroupAssignmentType) GetGroupDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "user_group.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: user_group")
	}

	vref := m.GetGroup()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "user_group.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGroupAssignmentType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGroupAssignmentType) GroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for group")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGroupAssignmentType) ManagedTenantGroupsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for managed_tenant_groups")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for managed_tenant_groups")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated managed_tenant_groups")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items managed_tenant_groups")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGroupAssignmentType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GroupAssignmentType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GroupAssignmentType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["group"]; exists {

		vOpts := append(opts, db.WithValidateField("group"))
		if err := fv(ctx, m.GetGroup(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["managed_tenant_groups"]; exists {
		vOpts := append(opts, db.WithValidateField("managed_tenant_groups"))
		if err := fv(ctx, m.GetManagedTenantGroups(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGroupAssignmentTypeValidator = func() *ValidateGroupAssignmentType {
	v := &ValidateGroupAssignmentType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhGroup := v.GroupValidationRuleHandler
	rulesGroup := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhGroup(rulesGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GroupAssignmentType.group: %s", err)
		panic(errMsg)
	}
	v.FldValidators["group"] = vFn

	vrhManagedTenantGroups := v.ManagedTenantGroupsValidationRuleHandler
	rulesManagedTenantGroups := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhManagedTenantGroups(rulesManagedTenantGroups)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GroupAssignmentType.managed_tenant_groups: %s", err)
		panic(errMsg)
	}
	v.FldValidators["managed_tenant_groups"] = vFn

	return v
}()

func GroupAssignmentTypeValidator() db.Validator {
	return DefaultGroupAssignmentTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetGroupsDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetGroupsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGroups() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetGroups() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGroups() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("groups[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) GroupsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for groups")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*GroupAssignmentType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := GroupAssignmentTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for groups")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*GroupAssignmentType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*GroupAssignmentType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated groups")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items groups")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["groups"]; exists {
		vOpts := append(opts, db.WithValidateField("groups"))
		if err := fv(ctx, m.GetGroups(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhGroups := v.GroupsValidationRuleHandler
	rulesGroups := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhGroups(rulesGroups)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.groups: %s", err)
		panic(errMsg)
	}
	v.FldValidators["groups"] = vFn

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetTenantChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.TenantChoice.(type) {
	case nil:
		o.TenantChoice = nil

	case *CreateSpecType_TenantId:
		o.TenantChoice = &GlobalSpecType_TenantId{TenantId: of.TenantId}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetTenantChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.TenantChoice.(type) {
	case nil:
		r.TenantChoice = nil

	case *GlobalSpecType_TenantId:
		r.TenantChoice = &CreateSpecType_TenantId{TenantId: of.TenantId}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Groups = f.GetGroups()
	m.GetTenantChoiceFromGlobalSpecType(f)
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Groups = m1.Groups
	m1.SetTenantChoiceToGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetTenantChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.TenantChoice.(type) {
	case nil:
		o.TenantChoice = nil

	case *GetSpecType_AllTenants:
		o.TenantChoice = &GlobalSpecType_AllTenants{AllTenants: of.AllTenants}

	case *GetSpecType_TenantId:
		o.TenantChoice = &GlobalSpecType_TenantId{TenantId: of.TenantId}

	case *GetSpecType_TenantRegex:
		o.TenantChoice = &GlobalSpecType_TenantRegex{TenantRegex: of.TenantRegex}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetTenantChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.TenantChoice.(type) {
	case nil:
		r.TenantChoice = nil

	case *GlobalSpecType_AllTenants:
		r.TenantChoice = &GetSpecType_AllTenants{AllTenants: of.AllTenants}

	case *GlobalSpecType_TenantId:
		r.TenantChoice = &GetSpecType_TenantId{TenantId: of.TenantId}

	case *GlobalSpecType_TenantRegex:
		r.TenantChoice = &GetSpecType_TenantRegex{TenantRegex: of.TenantRegex}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Groups = f.GetGroups()
	m.Status = f.GetStatus()
	m.GetTenantChoiceFromGlobalSpecType(f)
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Groups = m1.Groups
	f.Status = m1.Status
	m1.SetTenantChoiceToGlobalSpecType(f)
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Groups = f.GetGroups()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Groups = m1.Groups
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}
