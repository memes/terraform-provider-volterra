// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package cloud_link

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AssociatedSitesRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AssociatedSitesRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AssociatedSitesRequest) DeepCopy() *AssociatedSitesRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AssociatedSitesRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AssociatedSitesRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AssociatedSitesRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AssociatedSitesRequestValidator().Validate(ctx, m, opts...)
}

type ValidateAssociatedSitesRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAssociatedSitesRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AssociatedSitesRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AssociatedSitesRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAssociatedSitesRequestValidator = func() *ValidateAssociatedSitesRequest {
	v := &ValidateAssociatedSitesRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AssociatedSitesRequestValidator() db.Validator {
	return DefaultAssociatedSitesRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *AssociatedSitesResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AssociatedSitesResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AssociatedSitesResponse) DeepCopy() *AssociatedSitesResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AssociatedSitesResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AssociatedSitesResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AssociatedSitesResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AssociatedSitesResponseValidator().Validate(ctx, m, opts...)
}

func (m *AssociatedSitesResponse) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetSitesDRefInfo()

}

func (m *AssociatedSitesResponse) GetSitesDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetSites()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("AssociatedSitesResponse.sites[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("site.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "site.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "sites",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetSitesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AssociatedSitesResponse) GetSitesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "site.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: site")
	}
	for i, vref := range m.GetSites() {
		if vref == nil {
			return nil, fmt.Errorf("AssociatedSitesResponse.sites[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "site.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateAssociatedSitesResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAssociatedSitesResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AssociatedSitesResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AssociatedSitesResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["sites"]; exists {

		vOpts := append(opts, db.WithValidateField("sites"))
		for idx, item := range m.GetSites() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAssociatedSitesResponseValidator = func() *ValidateAssociatedSitesResponse {
	v := &ValidateAssociatedSitesResponse{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["sites"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func AssociatedSitesResponseValidator() db.Validator {
	return DefaultAssociatedSitesResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *ReapplyConfigRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReapplyConfigRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReapplyConfigRequest) DeepCopy() *ReapplyConfigRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReapplyConfigRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReapplyConfigRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReapplyConfigRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReapplyConfigRequestValidator().Validate(ctx, m, opts...)
}

type ValidateReapplyConfigRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReapplyConfigRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReapplyConfigRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReapplyConfigRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReapplyConfigRequestValidator = func() *ValidateReapplyConfigRequest {
	v := &ValidateReapplyConfigRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ReapplyConfigRequestValidator() db.Validator {
	return DefaultReapplyConfigRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *ReapplyConfigResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReapplyConfigResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReapplyConfigResponse) DeepCopy() *ReapplyConfigResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReapplyConfigResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReapplyConfigResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReapplyConfigResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReapplyConfigResponseValidator().Validate(ctx, m, opts...)
}

type ValidateReapplyConfigResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReapplyConfigResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReapplyConfigResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReapplyConfigResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReapplyConfigResponseValidator = func() *ValidateReapplyConfigResponse {
	v := &ValidateReapplyConfigResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ReapplyConfigResponseValidator() db.Validator {
	return DefaultReapplyConfigResponseValidator
}
