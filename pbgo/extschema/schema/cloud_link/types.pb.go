// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/cloud_link/types.proto

package cloud_link

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_policy_set"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Cloud Link Status
//
// x-displayName: "Status"
// Status of the cloud link deployment
type CloudLinkStatus int32

const (
	// In-Progress
	//
	// x-displayName: "In-Progress"
	// Cloud link provisioning is in-progress
	IN_PROGRESS CloudLinkStatus = 0
	// Error
	//
	// x-displayName: "Error"
	// An error occurred while deploying cloud link. Check the error description and suggested action
	ERROR CloudLinkStatus = 1
	// Ready
	//
	// x-displayName: "Ready"
	// Cloud link is ready for use
	READY CloudLinkStatus = 2
	// In Use
	//
	// x-displayName: "In Use"
	// Cloud link provisioning is in use by CE Sites
	IN_USE CloudLinkStatus = 3
	// Fully Used
	//
	// x-displayName: "Fully Used"
	// Cloud link is fully used by CE Sites. Currently 20 CE sites are supported
	FULLY_USED CloudLinkStatus = 4
)

var CloudLinkStatus_name = map[int32]string{
	0: "IN_PROGRESS",
	1: "ERROR",
	2: "READY",
	3: "IN_USE",
	4: "FULLY_USED",
}

var CloudLinkStatus_value = map[string]int32{
	"IN_PROGRESS": 0,
	"ERROR":       1,
	"READY":       2,
	"IN_USE":      3,
	"FULLY_USED":  4,
}

func (CloudLinkStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_580b870794b9a906, []int{0}
}

// Virtual Interface Type
//
// x-displayName: "Virtual Interface Type"
// Defines the type of virtual interface that needs to be configured on AWS
type VirtualInterfaceType int32

const (
	// Private
	//
	// x-displayName: "Private"
	// A private virtual interface should be used to access an Amazon VPC using private IP addresses.
	PRIVATE VirtualInterfaceType = 0
	// Transit
	//
	// x-displayName: "Transit"
	// A transit virtual interface is a VLAN that transports traffic from a Direct Connect gateway to one or more transit gateways.
	TRANSIT VirtualInterfaceType = 1
)

var VirtualInterfaceType_name = map[int32]string{
	0: "PRIVATE",
	1: "TRANSIT",
}

var VirtualInterfaceType_value = map[string]int32{
	"PRIVATE": 0,
	"TRANSIT": 1,
}

func (VirtualInterfaceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_580b870794b9a906, []int{1}
}

// Cloud Link specification
//
// x-displayName: "Specification"
// Desired specification of cloud link
type GlobalSpecType struct {
	// Cloud Provider
	//
	// x-displayName: "Cloud Provider"
	// x-required
	// Select the cloud provider where cloud link needs to be deployed
	//
	// Types that are valid to be assigned to CloudProvider:
	//	*GlobalSpecType_Aws
	//	*GlobalSpecType_Azure
	CloudProvider isGlobalSpecType_CloudProvider `protobuf_oneof:"cloud_provider"`
	// Cloud Link Status
	//
	// x-displayName: "Status"
	// Status of the cloud link deployment
	Status CloudLinkStatus `protobuf:"varint,4,opt,name=status,proto3,enum=ves.io.schema.cloud_link.CloudLinkStatus" json:"status,omitempty"`
	// Suggested Action
	//
	// x-displayName: "Suggested Action"
	// x-example: "value"
	// Suggested action for customer on error
	SuggestedAction string `protobuf:"bytes,5,opt,name=suggested_action,json=suggestedAction,proto3" json:"suggested_action,omitempty"`
	// Error Description
	//
	// x-displayName: "Error Description"
	// x-example: "value"
	// Description of error on site
	ErrorDescription string `protobuf:"bytes,6,opt,name=error_description,json=errorDescription,proto3" json:"error_description,omitempty"`
	// Sites
	//
	// x-displayName: "Sites"
	// This field indicates the number of Sites connected to this Cloud Link object.
	Sites int32 `protobuf:"varint,7,opt,name=sites,proto3" json:"sites,omitempty"`
	// Cloud Link to RE
	//
	// x-displayName: "Enable/Disable Connection to RE"
	// x-required
	// Enable/disable Cloud link connection to RE
	//
	// Types that are valid to be assigned to EnableConnectionToReChoice:
	//	*GlobalSpecType_Disabled
	//	*GlobalSpecType_Enabled
	EnableConnectionToReChoice isGlobalSpecType_EnableConnectionToReChoice `protobuf_oneof:"enable_connection_to_re_choice"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_580b870794b9a906, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_CloudProvider interface {
	isGlobalSpecType_CloudProvider()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_EnableConnectionToReChoice interface {
	isGlobalSpecType_EnableConnectionToReChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_Aws struct {
	Aws *AWSType `protobuf:"bytes,2,opt,name=aws,proto3,oneof" json:"aws,omitempty"`
}
type GlobalSpecType_Azure struct {
	Azure *AzureType `protobuf:"bytes,3,opt,name=azure,proto3,oneof" json:"azure,omitempty"`
}
type GlobalSpecType_Disabled struct {
	Disabled *schema.Empty `protobuf:"bytes,9,opt,name=disabled,proto3,oneof" json:"disabled,omitempty"`
}
type GlobalSpecType_Enabled struct {
	Enabled *views.CloudLinkADNType `protobuf:"bytes,10,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
}

func (*GlobalSpecType_Aws) isGlobalSpecType_CloudProvider()                   {}
func (*GlobalSpecType_Azure) isGlobalSpecType_CloudProvider()                 {}
func (*GlobalSpecType_Disabled) isGlobalSpecType_EnableConnectionToReChoice() {}
func (*GlobalSpecType_Enabled) isGlobalSpecType_EnableConnectionToReChoice()  {}

func (m *GlobalSpecType) GetCloudProvider() isGlobalSpecType_CloudProvider {
	if m != nil {
		return m.CloudProvider
	}
	return nil
}
func (m *GlobalSpecType) GetEnableConnectionToReChoice() isGlobalSpecType_EnableConnectionToReChoice {
	if m != nil {
		return m.EnableConnectionToReChoice
	}
	return nil
}

func (m *GlobalSpecType) GetAws() *AWSType {
	if x, ok := m.GetCloudProvider().(*GlobalSpecType_Aws); ok {
		return x.Aws
	}
	return nil
}

func (m *GlobalSpecType) GetAzure() *AzureType {
	if x, ok := m.GetCloudProvider().(*GlobalSpecType_Azure); ok {
		return x.Azure
	}
	return nil
}

func (m *GlobalSpecType) GetStatus() CloudLinkStatus {
	if m != nil {
		return m.Status
	}
	return IN_PROGRESS
}

func (m *GlobalSpecType) GetSuggestedAction() string {
	if m != nil {
		return m.SuggestedAction
	}
	return ""
}

func (m *GlobalSpecType) GetErrorDescription() string {
	if m != nil {
		return m.ErrorDescription
	}
	return ""
}

func (m *GlobalSpecType) GetSites() int32 {
	if m != nil {
		return m.Sites
	}
	return 0
}

func (m *GlobalSpecType) GetDisabled() *schema.Empty {
	if x, ok := m.GetEnableConnectionToReChoice().(*GlobalSpecType_Disabled); ok {
		return x.Disabled
	}
	return nil
}

func (m *GlobalSpecType) GetEnabled() *views.CloudLinkADNType {
	if x, ok := m.GetEnableConnectionToReChoice().(*GlobalSpecType_Enabled); ok {
		return x.Enabled
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_Aws)(nil),
		(*GlobalSpecType_Azure)(nil),
		(*GlobalSpecType_Disabled)(nil),
		(*GlobalSpecType_Enabled)(nil),
	}
}

// Amazon Web Services(AWS) Cloud Link Provider
//
// x-displayName: "Amazon Web Services(AWS) Cloud Link Provider"
// Cloud Link for AWS Cloud Provider
type AWSType struct {
	// Account Credential
	//
	// x-displayName: "Account Credential"
	// Reference to AWS cloud account credential object used to deploy cloud link specific object
	AwsCred *views.ObjectRefType `protobuf:"bytes,1,opt,name=aws_cred,json=awsCred,proto3" json:"aws_cred,omitempty"`
	// Cloud Link
	//
	// x-displayName: "Cloud Link"
	// x-required
	// Type of cloud link which needs to be created
	//
	// Types that are valid to be assigned to CloudLinkType:
	//	*AWSType_Byoc
	//	*AWSType_F5XcManaged
	CloudLinkType isAWSType_CloudLinkType `protobuf_oneof:"cloud_link_type"`
	// ASN Option
	//
	// x-displayName: "ASN Option"
	// Option to provide ASN for Direct Connect Gateway. AWS Direct Connect Gateway will be created automatically by F5XC.
	//
	// Types that are valid to be assigned to DirectConnectGatewayAsnChoice:
	//	*AWSType_Auto
	//	*AWSType_CustomAsn
	DirectConnectGatewayAsnChoice isAWSType_DirectConnectGatewayAsnChoice `protobuf_oneof:"direct_connect_gateway_asn_choice"`
}

func (m *AWSType) Reset()      { *m = AWSType{} }
func (*AWSType) ProtoMessage() {}
func (*AWSType) Descriptor() ([]byte, []int) {
	return fileDescriptor_580b870794b9a906, []int{1}
}
func (m *AWSType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSType.Merge(m, src)
}
func (m *AWSType) XXX_Size() int {
	return m.Size()
}
func (m *AWSType) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSType.DiscardUnknown(m)
}

var xxx_messageInfo_AWSType proto.InternalMessageInfo

type isAWSType_CloudLinkType interface {
	isAWSType_CloudLinkType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSType_DirectConnectGatewayAsnChoice interface {
	isAWSType_DirectConnectGatewayAsnChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AWSType_Byoc struct {
	Byoc *AWSBYOCListType `protobuf:"bytes,3,opt,name=byoc,proto3,oneof" json:"byoc,omitempty"`
}
type AWSType_F5XcManaged struct {
	F5XcManaged *AWSF5XCManagedType `protobuf:"bytes,4,opt,name=f5xc_managed,json=f5xcManaged,proto3,oneof" json:"f5xc_managed,omitempty"`
}
type AWSType_Auto struct {
	Auto *schema.Empty `protobuf:"bytes,6,opt,name=auto,proto3,oneof" json:"auto,omitempty"`
}
type AWSType_CustomAsn struct {
	CustomAsn uint32 `protobuf:"varint,7,opt,name=custom_asn,json=customAsn,proto3,oneof" json:"custom_asn,omitempty"`
}

func (*AWSType_Byoc) isAWSType_CloudLinkType()                      {}
func (*AWSType_F5XcManaged) isAWSType_CloudLinkType()               {}
func (*AWSType_Auto) isAWSType_DirectConnectGatewayAsnChoice()      {}
func (*AWSType_CustomAsn) isAWSType_DirectConnectGatewayAsnChoice() {}

func (m *AWSType) GetCloudLinkType() isAWSType_CloudLinkType {
	if m != nil {
		return m.CloudLinkType
	}
	return nil
}
func (m *AWSType) GetDirectConnectGatewayAsnChoice() isAWSType_DirectConnectGatewayAsnChoice {
	if m != nil {
		return m.DirectConnectGatewayAsnChoice
	}
	return nil
}

func (m *AWSType) GetAwsCred() *views.ObjectRefType {
	if m != nil {
		return m.AwsCred
	}
	return nil
}

func (m *AWSType) GetByoc() *AWSBYOCListType {
	if x, ok := m.GetCloudLinkType().(*AWSType_Byoc); ok {
		return x.Byoc
	}
	return nil
}

func (m *AWSType) GetF5XcManaged() *AWSF5XCManagedType {
	if x, ok := m.GetCloudLinkType().(*AWSType_F5XcManaged); ok {
		return x.F5XcManaged
	}
	return nil
}

func (m *AWSType) GetAuto() *schema.Empty {
	if x, ok := m.GetDirectConnectGatewayAsnChoice().(*AWSType_Auto); ok {
		return x.Auto
	}
	return nil
}

func (m *AWSType) GetCustomAsn() uint32 {
	if x, ok := m.GetDirectConnectGatewayAsnChoice().(*AWSType_CustomAsn); ok {
		return x.CustomAsn
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AWSType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AWSType_Byoc)(nil),
		(*AWSType_F5XcManaged)(nil),
		(*AWSType_Auto)(nil),
		(*AWSType_CustomAsn)(nil),
	}
}

// Azure Cloud Provider
//
// x-displayName: "Azure Cloud Provider"
// Cloud Link for Azure Cloud Provider
type AzureType struct {
}

func (m *AzureType) Reset()      { *m = AzureType{} }
func (*AzureType) ProtoMessage() {}
func (*AzureType) Descriptor() ([]byte, []int) {
	return fileDescriptor_580b870794b9a906, []int{2}
}
func (m *AzureType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AzureType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureType.Merge(m, src)
}
func (m *AzureType) XXX_Size() int {
	return m.Size()
}
func (m *AzureType) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureType.DiscardUnknown(m)
}

var xxx_messageInfo_AzureType proto.InternalMessageInfo

// Bring You Own Connection List
//
// x-displayName: "Bring Your Own Connections"
// List of Bring You Own Connection
type AWSBYOCListType struct {
	// List of Bring You Own Connections
	//
	// x-displayName: "Bring Your Own Connections"
	// x-required
	// List of Bring You Own Connections. These AWS Direct Connect connections are not managed by F5XC but will be used for connecting sites and REs.
	Connections []*AWSBYOCType `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (m *AWSBYOCListType) Reset()      { *m = AWSBYOCListType{} }
func (*AWSBYOCListType) ProtoMessage() {}
func (*AWSBYOCListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_580b870794b9a906, []int{3}
}
func (m *AWSBYOCListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSBYOCListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSBYOCListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSBYOCListType.Merge(m, src)
}
func (m *AWSBYOCListType) XXX_Size() int {
	return m.Size()
}
func (m *AWSBYOCListType) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSBYOCListType.DiscardUnknown(m)
}

var xxx_messageInfo_AWSBYOCListType proto.InternalMessageInfo

func (m *AWSBYOCListType) GetConnections() []*AWSBYOCType {
	if m != nil {
		return m.Connections
	}
	return nil
}

// Bring You Own Connection
//
// x-displayName: "Bring You Own Connection"
// AWS Bring You Own Connection. F5XC supports Virtual interfaces from the same AWS cloud account.
type AWSBYOCType struct {
	// Direct Connect Connection Id
	//
	// x-displayName: "Direct Connect Connection Id"
	// x-example: "dxcon-a2h48678"
	// x-required
	// Id of the existing AWS Direct Connect Connection
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// AWS Resource Name
	//
	// x-displayName: "Resource Name"
	// x-required
	// Amazon Web Services (AWS) unique name which will be used to create the cloud resource objects on cloud
	//
	// Types that are valid to be assigned to ResourceNameChoice:
	//	*AWSBYOCType_SystemGeneratedName
	//	*AWSBYOCType_UserAssignedName
	ResourceNameChoice isAWSBYOCType_ResourceNameChoice `protobuf_oneof:"resource_name_choice"`
	// Virtual Interface Type
	//
	// x-displayName: "Virtual Interface Type"
	// Specifies the virtual interface type that needs to be configured on AWS
	VirtualInterfaceType VirtualInterfaceType `protobuf:"varint,5,opt,name=virtual_interface_type,json=virtualInterfaceType,proto3,enum=ves.io.schema.cloud_link.VirtualInterfaceType" json:"virtual_interface_type,omitempty"`
	// Virtual Local Area Network (VLAN)
	//
	// x-displayName: "Virtual Local Area Network (VLAN)"
	// x-example: "700"
	// x-required
	// Virtual Local Area Network number for the new virtual interface to be configured on the AWS.
	// This tag is required for any traffic traversing the AWS Direct Connect connection
	Vlan uint32 `protobuf:"varint,6,opt,name=vlan,proto3" json:"vlan,omitempty"`
	// BGP ASN
	//
	// x-displayName: "BGP ASN"
	// x-example: "64512"
	// x-required
	// The Border Gateway Protocol (BGP) Autonomous System Number (ASN) of your on-premises
	// router for the new virtual interface to be configured on AWS.
	BgpAsn uint32 `protobuf:"varint,7,opt,name=bgp_asn,json=bgpAsn,proto3" json:"bgp_asn,omitempty"`
	// Address family
	//
	// x-displayName: "Address family"
	// x-required
	// Configure BGP IP peering for endpoints
	//
	// Types that are valid to be assigned to IpType:
	//	*AWSBYOCType_Ipv4
	//	*AWSBYOCType_Ipv6
	IpType isAWSBYOCType_IpType `protobuf_oneof:"ip_type"`
	// BGP Auth Key
	//
	// x-displayName: "BGP Auth Key"
	// x-example: ""
	// x-required
	// The authentication key for BGP configuration.
	// This string has a minimum length of 6 characters and and a maximum length of 80 characters.
	AuthKey *schema.SecretType `protobuf:"bytes,11,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
	// AWS Tags
	//
	// x-displayName: "AWS Tags"
	// x-example: "dev: staging"
	// AWS Tags is a label consisting of a user-defined key and value.
	// It helps to manage, identify, organize, search for, and filter resources in AWS console.
	// Specified tags will be added to Virtual interface along with any F5XC specific tags
	Tags map[string]string `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Jumbo MTU
	//
	// x-displayName: "Jumbo MTU (MTU size 9001)"
	// Allow maximum transmission unit (MTU) size of 9001 on virtual interface.
	// The Virtual Interface will be created with option to use jumbo frames enabled
	JumboMtu bool `protobuf:"varint,13,opt,name=jumbo_mtu,json=jumboMtu,proto3" json:"jumbo_mtu,omitempty"`
	// Enable SiteLink
	//
	// x-displayName: "Enable SiteLink"
	// Enable direct connectivity between Direct Connect points of presence. The Virtual Interface will be created with SiteLink enabled.
	EnableSitelink bool `protobuf:"varint,14,opt,name=enable_sitelink,json=enableSitelink,proto3" json:"enable_sitelink,omitempty"`
}

func (m *AWSBYOCType) Reset()      { *m = AWSBYOCType{} }
func (*AWSBYOCType) ProtoMessage() {}
func (*AWSBYOCType) Descriptor() ([]byte, []int) {
	return fileDescriptor_580b870794b9a906, []int{4}
}
func (m *AWSBYOCType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSBYOCType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSBYOCType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSBYOCType.Merge(m, src)
}
func (m *AWSBYOCType) XXX_Size() int {
	return m.Size()
}
func (m *AWSBYOCType) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSBYOCType.DiscardUnknown(m)
}

var xxx_messageInfo_AWSBYOCType proto.InternalMessageInfo

type isAWSBYOCType_ResourceNameChoice interface {
	isAWSBYOCType_ResourceNameChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAWSBYOCType_IpType interface {
	isAWSBYOCType_IpType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AWSBYOCType_SystemGeneratedName struct {
	SystemGeneratedName *schema.Empty `protobuf:"bytes,3,opt,name=system_generated_name,json=systemGeneratedName,proto3,oneof" json:"system_generated_name,omitempty"`
}
type AWSBYOCType_UserAssignedName struct {
	UserAssignedName string `protobuf:"bytes,4,opt,name=user_assigned_name,json=userAssignedName,proto3,oneof" json:"user_assigned_name,omitempty"`
}
type AWSBYOCType_Ipv4 struct {
	Ipv4 *Ipv4Type `protobuf:"bytes,9,opt,name=ipv4,proto3,oneof" json:"ipv4,omitempty"`
}
type AWSBYOCType_Ipv6 struct {
	Ipv6 *Ipv6Type `protobuf:"bytes,10,opt,name=ipv6,proto3,oneof" json:"ipv6,omitempty"`
}

func (*AWSBYOCType_SystemGeneratedName) isAWSBYOCType_ResourceNameChoice() {}
func (*AWSBYOCType_UserAssignedName) isAWSBYOCType_ResourceNameChoice()    {}
func (*AWSBYOCType_Ipv4) isAWSBYOCType_IpType()                            {}
func (*AWSBYOCType_Ipv6) isAWSBYOCType_IpType()                            {}

func (m *AWSBYOCType) GetResourceNameChoice() isAWSBYOCType_ResourceNameChoice {
	if m != nil {
		return m.ResourceNameChoice
	}
	return nil
}
func (m *AWSBYOCType) GetIpType() isAWSBYOCType_IpType {
	if m != nil {
		return m.IpType
	}
	return nil
}

func (m *AWSBYOCType) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *AWSBYOCType) GetSystemGeneratedName() *schema.Empty {
	if x, ok := m.GetResourceNameChoice().(*AWSBYOCType_SystemGeneratedName); ok {
		return x.SystemGeneratedName
	}
	return nil
}

func (m *AWSBYOCType) GetUserAssignedName() string {
	if x, ok := m.GetResourceNameChoice().(*AWSBYOCType_UserAssignedName); ok {
		return x.UserAssignedName
	}
	return ""
}

func (m *AWSBYOCType) GetVirtualInterfaceType() VirtualInterfaceType {
	if m != nil {
		return m.VirtualInterfaceType
	}
	return PRIVATE
}

func (m *AWSBYOCType) GetVlan() uint32 {
	if m != nil {
		return m.Vlan
	}
	return 0
}

func (m *AWSBYOCType) GetBgpAsn() uint32 {
	if m != nil {
		return m.BgpAsn
	}
	return 0
}

func (m *AWSBYOCType) GetIpv4() *Ipv4Type {
	if x, ok := m.GetIpType().(*AWSBYOCType_Ipv4); ok {
		return x.Ipv4
	}
	return nil
}

func (m *AWSBYOCType) GetIpv6() *Ipv6Type {
	if x, ok := m.GetIpType().(*AWSBYOCType_Ipv6); ok {
		return x.Ipv6
	}
	return nil
}

func (m *AWSBYOCType) GetAuthKey() *schema.SecretType {
	if m != nil {
		return m.AuthKey
	}
	return nil
}

func (m *AWSBYOCType) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *AWSBYOCType) GetJumboMtu() bool {
	if m != nil {
		return m.JumboMtu
	}
	return false
}

func (m *AWSBYOCType) GetEnableSitelink() bool {
	if m != nil {
		return m.EnableSitelink
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AWSBYOCType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AWSBYOCType_SystemGeneratedName)(nil),
		(*AWSBYOCType_UserAssignedName)(nil),
		(*AWSBYOCType_Ipv4)(nil),
		(*AWSBYOCType_Ipv6)(nil),
	}
}

// IPv4 Peering
//
// x-displayName: "IPv4 Peering"
// Configure BGP IPv4 peering for endpoints
type Ipv4Type struct {
	// Router peer IP
	//
	// x-displayName: "Router peer IP"
	// x-example: "10.1.0.0/31"
	// x-required
	// The BGP peer IP configured on your endpoint
	RouterPeerAddress string `protobuf:"bytes,1,opt,name=router_peer_address,json=routerPeerAddress,proto3" json:"router_peer_address,omitempty"`
	// AWS Router Peer IP
	//
	// x-displayName: "AWS Router Peer IP"
	// x-example: "10.1.0.0/31"
	// x-required
	// The BGP peer IP configured on the AWS endpoint
	AwsRouterPeerAddress string `protobuf:"bytes,2,opt,name=aws_router_peer_address,json=awsRouterPeerAddress,proto3" json:"aws_router_peer_address,omitempty"`
}

func (m *Ipv4Type) Reset()      { *m = Ipv4Type{} }
func (*Ipv4Type) ProtoMessage() {}
func (*Ipv4Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_580b870794b9a906, []int{5}
}
func (m *Ipv4Type) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ipv4Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Ipv4Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv4Type.Merge(m, src)
}
func (m *Ipv4Type) XXX_Size() int {
	return m.Size()
}
func (m *Ipv4Type) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv4Type.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv4Type proto.InternalMessageInfo

func (m *Ipv4Type) GetRouterPeerAddress() string {
	if m != nil {
		return m.RouterPeerAddress
	}
	return ""
}

func (m *Ipv4Type) GetAwsRouterPeerAddress() string {
	if m != nil {
		return m.AwsRouterPeerAddress
	}
	return ""
}

// IPv6 Peering
//
// x-displayName: "IPv6 Peering"
// Configure BGP IPv6 peering for endpoints
type Ipv6Type struct {
}

func (m *Ipv6Type) Reset()      { *m = Ipv6Type{} }
func (*Ipv6Type) ProtoMessage() {}
func (*Ipv6Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_580b870794b9a906, []int{6}
}
func (m *Ipv6Type) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ipv6Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Ipv6Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv6Type.Merge(m, src)
}
func (m *Ipv6Type) XXX_Size() int {
	return m.Size()
}
func (m *Ipv6Type) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv6Type.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv6Type proto.InternalMessageInfo

// F5 XC Managed Cloud Link Connection
//
// x-displayName: "F5 XC Managed Cloud Link Connection"
// AWS F5 XC Managed Cloud Link Connection
type AWSF5XCManagedType struct {
}

func (m *AWSF5XCManagedType) Reset()      { *m = AWSF5XCManagedType{} }
func (*AWSF5XCManagedType) ProtoMessage() {}
func (*AWSF5XCManagedType) Descriptor() ([]byte, []int) {
	return fileDescriptor_580b870794b9a906, []int{7}
}
func (m *AWSF5XCManagedType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSF5XCManagedType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSF5XCManagedType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSF5XCManagedType.Merge(m, src)
}
func (m *AWSF5XCManagedType) XXX_Size() int {
	return m.Size()
}
func (m *AWSF5XCManagedType) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSF5XCManagedType.DiscardUnknown(m)
}

var xxx_messageInfo_AWSF5XCManagedType proto.InternalMessageInfo

// Create Cloud Link
//
// x-displayName: "Create Cloud Link"
// Creates a new Cloud Link with configured parameters
type CreateSpecType struct {
	// Types that are valid to be assigned to CloudProvider:
	//	*CreateSpecType_Aws
	//	*CreateSpecType_Azure
	CloudProvider isCreateSpecType_CloudProvider `protobuf_oneof:"cloud_provider"`
	// Types that are valid to be assigned to EnableConnectionToReChoice:
	//	*CreateSpecType_Disabled
	//	*CreateSpecType_Enabled
	EnableConnectionToReChoice isCreateSpecType_EnableConnectionToReChoice `protobuf_oneof:"enable_connection_to_re_choice"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_580b870794b9a906, []int{8}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_CloudProvider interface {
	isCreateSpecType_CloudProvider()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_EnableConnectionToReChoice interface {
	isCreateSpecType_EnableConnectionToReChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_Aws struct {
	Aws *AWSType `protobuf:"bytes,2,opt,name=aws,proto3,oneof" json:"aws,omitempty"`
}
type CreateSpecType_Azure struct {
	Azure *AzureType `protobuf:"bytes,3,opt,name=azure,proto3,oneof" json:"azure,omitempty"`
}
type CreateSpecType_Disabled struct {
	Disabled *schema.Empty `protobuf:"bytes,9,opt,name=disabled,proto3,oneof" json:"disabled,omitempty"`
}
type CreateSpecType_Enabled struct {
	Enabled *views.CloudLinkADNType `protobuf:"bytes,10,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
}

func (*CreateSpecType_Aws) isCreateSpecType_CloudProvider()                   {}
func (*CreateSpecType_Azure) isCreateSpecType_CloudProvider()                 {}
func (*CreateSpecType_Disabled) isCreateSpecType_EnableConnectionToReChoice() {}
func (*CreateSpecType_Enabled) isCreateSpecType_EnableConnectionToReChoice()  {}

func (m *CreateSpecType) GetCloudProvider() isCreateSpecType_CloudProvider {
	if m != nil {
		return m.CloudProvider
	}
	return nil
}
func (m *CreateSpecType) GetEnableConnectionToReChoice() isCreateSpecType_EnableConnectionToReChoice {
	if m != nil {
		return m.EnableConnectionToReChoice
	}
	return nil
}

func (m *CreateSpecType) GetAws() *AWSType {
	if x, ok := m.GetCloudProvider().(*CreateSpecType_Aws); ok {
		return x.Aws
	}
	return nil
}

func (m *CreateSpecType) GetAzure() *AzureType {
	if x, ok := m.GetCloudProvider().(*CreateSpecType_Azure); ok {
		return x.Azure
	}
	return nil
}

func (m *CreateSpecType) GetDisabled() *schema.Empty {
	if x, ok := m.GetEnableConnectionToReChoice().(*CreateSpecType_Disabled); ok {
		return x.Disabled
	}
	return nil
}

func (m *CreateSpecType) GetEnabled() *views.CloudLinkADNType {
	if x, ok := m.GetEnableConnectionToReChoice().(*CreateSpecType_Enabled); ok {
		return x.Enabled
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_Aws)(nil),
		(*CreateSpecType_Azure)(nil),
		(*CreateSpecType_Disabled)(nil),
		(*CreateSpecType_Enabled)(nil),
	}
}

// Replace Cloud Link
//
// x-displayName: "Replace Cloud Link"
// Replaces configured Cloud Link with new set of parameters
type ReplaceSpecType struct {
	// Types that are valid to be assigned to CloudProvider:
	//	*ReplaceSpecType_Aws
	//	*ReplaceSpecType_Azure
	CloudProvider isReplaceSpecType_CloudProvider `protobuf_oneof:"cloud_provider"`
	// Types that are valid to be assigned to EnableConnectionToReChoice:
	//	*ReplaceSpecType_Disabled
	//	*ReplaceSpecType_Enabled
	EnableConnectionToReChoice isReplaceSpecType_EnableConnectionToReChoice `protobuf_oneof:"enable_connection_to_re_choice"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_580b870794b9a906, []int{9}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_CloudProvider interface {
	isReplaceSpecType_CloudProvider()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_EnableConnectionToReChoice interface {
	isReplaceSpecType_EnableConnectionToReChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_Aws struct {
	Aws *AWSType `protobuf:"bytes,2,opt,name=aws,proto3,oneof" json:"aws,omitempty"`
}
type ReplaceSpecType_Azure struct {
	Azure *AzureType `protobuf:"bytes,3,opt,name=azure,proto3,oneof" json:"azure,omitempty"`
}
type ReplaceSpecType_Disabled struct {
	Disabled *schema.Empty `protobuf:"bytes,9,opt,name=disabled,proto3,oneof" json:"disabled,omitempty"`
}
type ReplaceSpecType_Enabled struct {
	Enabled *views.CloudLinkADNType `protobuf:"bytes,10,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
}

func (*ReplaceSpecType_Aws) isReplaceSpecType_CloudProvider()                   {}
func (*ReplaceSpecType_Azure) isReplaceSpecType_CloudProvider()                 {}
func (*ReplaceSpecType_Disabled) isReplaceSpecType_EnableConnectionToReChoice() {}
func (*ReplaceSpecType_Enabled) isReplaceSpecType_EnableConnectionToReChoice()  {}

func (m *ReplaceSpecType) GetCloudProvider() isReplaceSpecType_CloudProvider {
	if m != nil {
		return m.CloudProvider
	}
	return nil
}
func (m *ReplaceSpecType) GetEnableConnectionToReChoice() isReplaceSpecType_EnableConnectionToReChoice {
	if m != nil {
		return m.EnableConnectionToReChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetAws() *AWSType {
	if x, ok := m.GetCloudProvider().(*ReplaceSpecType_Aws); ok {
		return x.Aws
	}
	return nil
}

func (m *ReplaceSpecType) GetAzure() *AzureType {
	if x, ok := m.GetCloudProvider().(*ReplaceSpecType_Azure); ok {
		return x.Azure
	}
	return nil
}

func (m *ReplaceSpecType) GetDisabled() *schema.Empty {
	if x, ok := m.GetEnableConnectionToReChoice().(*ReplaceSpecType_Disabled); ok {
		return x.Disabled
	}
	return nil
}

func (m *ReplaceSpecType) GetEnabled() *views.CloudLinkADNType {
	if x, ok := m.GetEnableConnectionToReChoice().(*ReplaceSpecType_Enabled); ok {
		return x.Enabled
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_Aws)(nil),
		(*ReplaceSpecType_Azure)(nil),
		(*ReplaceSpecType_Disabled)(nil),
		(*ReplaceSpecType_Enabled)(nil),
	}
}

// Get Cloud Link
//
// x-displayName: "Get Cloud Link"
// Gets Cloud Link parameters
type GetSpecType struct {
	// Types that are valid to be assigned to CloudProvider:
	//	*GetSpecType_Aws
	//	*GetSpecType_Azure
	CloudProvider    isGetSpecType_CloudProvider `protobuf_oneof:"cloud_provider"`
	Status           CloudLinkStatus             `protobuf:"varint,4,opt,name=status,proto3,enum=ves.io.schema.cloud_link.CloudLinkStatus" json:"status,omitempty"`
	SuggestedAction  string                      `protobuf:"bytes,5,opt,name=suggested_action,json=suggestedAction,proto3" json:"suggested_action,omitempty"`
	ErrorDescription string                      `protobuf:"bytes,6,opt,name=error_description,json=errorDescription,proto3" json:"error_description,omitempty"`
	Sites            int32                       `protobuf:"varint,7,opt,name=sites,proto3" json:"sites,omitempty"`
	// Types that are valid to be assigned to EnableConnectionToReChoice:
	//	*GetSpecType_Disabled
	//	*GetSpecType_Enabled
	EnableConnectionToReChoice isGetSpecType_EnableConnectionToReChoice `protobuf_oneof:"enable_connection_to_re_choice"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_580b870794b9a906, []int{10}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_CloudProvider interface {
	isGetSpecType_CloudProvider()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_EnableConnectionToReChoice interface {
	isGetSpecType_EnableConnectionToReChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_Aws struct {
	Aws *AWSType `protobuf:"bytes,2,opt,name=aws,proto3,oneof" json:"aws,omitempty"`
}
type GetSpecType_Azure struct {
	Azure *AzureType `protobuf:"bytes,3,opt,name=azure,proto3,oneof" json:"azure,omitempty"`
}
type GetSpecType_Disabled struct {
	Disabled *schema.Empty `protobuf:"bytes,9,opt,name=disabled,proto3,oneof" json:"disabled,omitempty"`
}
type GetSpecType_Enabled struct {
	Enabled *views.CloudLinkADNType `protobuf:"bytes,10,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
}

func (*GetSpecType_Aws) isGetSpecType_CloudProvider()                   {}
func (*GetSpecType_Azure) isGetSpecType_CloudProvider()                 {}
func (*GetSpecType_Disabled) isGetSpecType_EnableConnectionToReChoice() {}
func (*GetSpecType_Enabled) isGetSpecType_EnableConnectionToReChoice()  {}

func (m *GetSpecType) GetCloudProvider() isGetSpecType_CloudProvider {
	if m != nil {
		return m.CloudProvider
	}
	return nil
}
func (m *GetSpecType) GetEnableConnectionToReChoice() isGetSpecType_EnableConnectionToReChoice {
	if m != nil {
		return m.EnableConnectionToReChoice
	}
	return nil
}

func (m *GetSpecType) GetAws() *AWSType {
	if x, ok := m.GetCloudProvider().(*GetSpecType_Aws); ok {
		return x.Aws
	}
	return nil
}

func (m *GetSpecType) GetAzure() *AzureType {
	if x, ok := m.GetCloudProvider().(*GetSpecType_Azure); ok {
		return x.Azure
	}
	return nil
}

func (m *GetSpecType) GetStatus() CloudLinkStatus {
	if m != nil {
		return m.Status
	}
	return IN_PROGRESS
}

func (m *GetSpecType) GetSuggestedAction() string {
	if m != nil {
		return m.SuggestedAction
	}
	return ""
}

func (m *GetSpecType) GetErrorDescription() string {
	if m != nil {
		return m.ErrorDescription
	}
	return ""
}

func (m *GetSpecType) GetSites() int32 {
	if m != nil {
		return m.Sites
	}
	return 0
}

func (m *GetSpecType) GetDisabled() *schema.Empty {
	if x, ok := m.GetEnableConnectionToReChoice().(*GetSpecType_Disabled); ok {
		return x.Disabled
	}
	return nil
}

func (m *GetSpecType) GetEnabled() *views.CloudLinkADNType {
	if x, ok := m.GetEnableConnectionToReChoice().(*GetSpecType_Enabled); ok {
		return x.Enabled
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_Aws)(nil),
		(*GetSpecType_Azure)(nil),
		(*GetSpecType_Disabled)(nil),
		(*GetSpecType_Enabled)(nil),
	}
}

func init() {
	proto.RegisterEnum("ves.io.schema.cloud_link.CloudLinkStatus", CloudLinkStatus_name, CloudLinkStatus_value)
	golang_proto.RegisterEnum("ves.io.schema.cloud_link.CloudLinkStatus", CloudLinkStatus_name, CloudLinkStatus_value)
	proto.RegisterEnum("ves.io.schema.cloud_link.VirtualInterfaceType", VirtualInterfaceType_name, VirtualInterfaceType_value)
	golang_proto.RegisterEnum("ves.io.schema.cloud_link.VirtualInterfaceType", VirtualInterfaceType_name, VirtualInterfaceType_value)
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.cloud_link.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.cloud_link.GlobalSpecType")
	proto.RegisterType((*AWSType)(nil), "ves.io.schema.cloud_link.AWSType")
	golang_proto.RegisterType((*AWSType)(nil), "ves.io.schema.cloud_link.AWSType")
	proto.RegisterType((*AzureType)(nil), "ves.io.schema.cloud_link.AzureType")
	golang_proto.RegisterType((*AzureType)(nil), "ves.io.schema.cloud_link.AzureType")
	proto.RegisterType((*AWSBYOCListType)(nil), "ves.io.schema.cloud_link.AWSBYOCListType")
	golang_proto.RegisterType((*AWSBYOCListType)(nil), "ves.io.schema.cloud_link.AWSBYOCListType")
	proto.RegisterType((*AWSBYOCType)(nil), "ves.io.schema.cloud_link.AWSBYOCType")
	golang_proto.RegisterType((*AWSBYOCType)(nil), "ves.io.schema.cloud_link.AWSBYOCType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.cloud_link.AWSBYOCType.TagsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.cloud_link.AWSBYOCType.TagsEntry")
	proto.RegisterType((*Ipv4Type)(nil), "ves.io.schema.cloud_link.Ipv4Type")
	golang_proto.RegisterType((*Ipv4Type)(nil), "ves.io.schema.cloud_link.Ipv4Type")
	proto.RegisterType((*Ipv6Type)(nil), "ves.io.schema.cloud_link.Ipv6Type")
	golang_proto.RegisterType((*Ipv6Type)(nil), "ves.io.schema.cloud_link.Ipv6Type")
	proto.RegisterType((*AWSF5XCManagedType)(nil), "ves.io.schema.cloud_link.AWSF5XCManagedType")
	golang_proto.RegisterType((*AWSF5XCManagedType)(nil), "ves.io.schema.cloud_link.AWSF5XCManagedType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.cloud_link.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.cloud_link.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.cloud_link.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.cloud_link.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.cloud_link.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.cloud_link.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/cloud_link/types.proto", fileDescriptor_580b870794b9a906)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/cloud_link/types.proto", fileDescriptor_580b870794b9a906)
}

var fileDescriptor_580b870794b9a906 = []byte{
	// 1956 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcf, 0x6f, 0x1b, 0xc7,
	0x15, 0xe6, 0x90, 0xcb, 0x5f, 0x8f, 0x92, 0xb8, 0x9a, 0xb0, 0x31, 0xa3, 0x26, 0xd4, 0x9a, 0x91,
	0x5d, 0x4a, 0xa6, 0x48, 0x93, 0xa2, 0x24, 0x4b, 0x05, 0xda, 0x92, 0x92, 0x62, 0x51, 0x55, 0x24,
	0x61, 0x29, 0xbb, 0x75, 0x8a, 0x74, 0xb1, 0x5c, 0x8e, 0xd6, 0x1b, 0x91, 0xbb, 0xc4, 0xee, 0x92,
	0x32, 0xd3, 0x1a, 0x08, 0x72, 0x2c, 0x0a, 0xd4, 0x28, 0x0a, 0xb4, 0xf5, 0xa9, 0xc7, 0xa0, 0xff,
	0x41, 0x4d, 0x1f, 0x04, 0x03, 0x05, 0x82, 0x9c, 0x74, 0xf4, 0x31, 0xa6, 0x2f, 0xe9, 0xa9, 0xb9,
	0x35, 0xc8, 0xa1, 0x2e, 0x66, 0x76, 0x29, 0x51, 0x94, 0xe4, 0xe4, 0x56, 0x07, 0x88, 0x2e, 0x9a,
	0x9d, 0xf7, 0x7d, 0x6f, 0xdf, 0xbc, 0xf9, 0xde, 0x9b, 0xe1, 0xc2, 0x54, 0x9b, 0x58, 0x19, 0xcd,
	0xc8, 0x5a, 0xca, 0x5d, 0xd2, 0x90, 0xb3, 0x4a, 0xdd, 0x68, 0xd5, 0xa4, 0xba, 0xa6, 0xef, 0x67,
	0xed, 0x4e, 0x93, 0x58, 0x99, 0xa6, 0x69, 0xd8, 0x06, 0x8e, 0x3b, 0xa8, 0x8c, 0x83, 0xca, 0x9c,
	0xa0, 0x26, 0x66, 0x55, 0xcd, 0xbe, 0xdb, 0xaa, 0x66, 0x14, 0xa3, 0x91, 0x55, 0x0d, 0xd5, 0xc8,
	0x32, 0x42, 0xb5, 0xb5, 0xc7, 0x9e, 0xd8, 0x03, 0x1b, 0x39, 0x8e, 0x26, 0x26, 0x55, 0xc3, 0x50,
	0xeb, 0xe4, 0x04, 0x65, 0x6b, 0x0d, 0x62, 0xd9, 0x72, 0xa3, 0xe9, 0x02, 0x2e, 0x9d, 0x8e, 0x47,
	0x27, 0xb6, 0x6b, 0x48, 0x9f, 0x31, 0x1c, 0x18, 0xe6, 0xbe, 0xd4, 0x34, 0xea, 0x9a, 0xd2, 0x91,
	0x2c, 0x62, 0x0f, 0x06, 0x3c, 0xf1, 0xc3, 0xd3, 0x68, 0xa3, 0x69, 0x6b, 0x86, 0xde, 0x37, 0xbe,
	0x71, 0xda, 0x38, 0xc8, 0x7b, 0xf3, 0xb4, 0xa9, 0x2d, 0xd7, 0xb5, 0x9a, 0x6c, 0x13, 0xd7, 0x2a,
	0x0c, 0x59, 0x35, 0x72, 0x20, 0x9d, 0x76, 0x3d, 0x75, 0x16, 0x61, 0x65, 0x2d, 0xcd, 0x26, 0xd2,
	0xe0, 0x5b, 0x26, 0xcf, 0x43, 0x0d, 0x00, 0x92, 0x3d, 0x0e, 0xc6, 0x6e, 0xd6, 0x8d, 0xaa, 0x5c,
	0xaf, 0x34, 0x89, 0xb2, 0xdb, 0x69, 0x12, 0x3c, 0x0f, 0x3e, 0xf9, 0xc0, 0x8a, 0x7b, 0x05, 0x94,
	0x8a, 0xe4, 0x2f, 0x67, 0x2e, 0xda, 0x90, 0x4c, 0xf1, 0x17, 0x15, 0x8a, 0x5f, 0xf7, 0x88, 0x14,
	0x8f, 0x57, 0xc1, 0x2f, 0x7f, 0xd8, 0x32, 0x49, 0xdc, 0xc7, 0x88, 0x6f, 0xbf, 0x84, 0x48, 0x61,
	0x94, 0x5a, 0x0a, 0x3e, 0xbd, 0x8f, 0xbe, 0xe8, 0x22, 0xb4, 0xee, 0x11, 0x1d, 0x32, 0x2e, 0x42,
	0xc0, 0xb2, 0x65, 0xbb, 0x65, 0xc5, 0x39, 0x01, 0xa5, 0xc6, 0xf2, 0xd3, 0x17, 0xbb, 0x59, 0xa1,
	0xc3, 0x4d, 0x4d, 0xdf, 0xaf, 0x30, 0x82, 0xe8, 0x12, 0xf1, 0x34, 0xf0, 0x56, 0x4b, 0x55, 0x89,
	0x65, 0x93, 0x9a, 0x24, 0x2b, 0x34, 0x69, 0x71, 0xbf, 0x80, 0x52, 0x61, 0x31, 0x7a, 0x3c, 0x5f,
	0x64, 0xd3, 0xf8, 0x1a, 0x8c, 0x13, 0xd3, 0x34, 0x4c, 0xa9, 0x46, 0x2c, 0xc5, 0xd4, 0x58, 0x82,
	0xe3, 0x01, 0x86, 0xe5, 0x99, 0x61, 0xf5, 0x64, 0x1e, 0x4f, 0x82, 0x9f, 0xe6, 0xd7, 0x8a, 0x07,
	0x05, 0x94, 0xf2, 0x97, 0xc2, 0x8f, 0xfe, 0x75, 0xe8, 0xe3, 0x26, 0xbc, 0xf1, 0x98, 0xe8, 0xcc,
	0xe3, 0x3c, 0x84, 0x6a, 0x9a, 0x25, 0x57, 0xeb, 0xa4, 0x16, 0x0f, 0xb3, 0x24, 0xc4, 0x86, 0xa2,
	0x5f, 0x6b, 0x34, 0xed, 0xce, 0x3a, 0x12, 0x8f, 0x71, 0xb8, 0x08, 0x41, 0xa2, 0x3b, 0x14, 0x60,
	0x94, 0x2b, 0x43, 0x14, 0xb6, 0x65, 0x27, 0x6b, 0x2d, 0xae, 0x6e, 0xb1, 0xa4, 0x23, 0xb1, 0xcf,
	0x5b, 0xfe, 0xf1, 0x93, 0x2e, 0x5a, 0x84, 0x71, 0x18, 0x61, 0x20, 0x61, 0xdb, 0x89, 0x16, 0xe5,
	0x20, 0x09, 0x6f, 0xad, 0x18, 0xba, 0x4e, 0x14, 0x5b, 0x6b, 0x6b, 0x76, 0x47, 0xb0, 0x0d, 0x41,
	0x24, 0xaa, 0x66, 0xe8, 0x72, 0x5d, 0x58, 0xab, 0xa9, 0x04, 0xa3, 0x1b, 0xa5, 0xb7, 0x61, 0xcc,
	0x49, 0x69, 0xd3, 0x34, 0xda, 0x5a, 0x8d, 0x98, 0x78, 0xfc, 0xb0, 0x8b, 0xbc, 0x47, 0x5d, 0x84,
	0x7a, 0x5d, 0x84, 0xf2, 0x7f, 0x7b, 0x8c, 0x50, 0x29, 0x0f, 0x09, 0xe7, 0x65, 0x92, 0xe2, 0xfa,
	0x33, 0x74, 0xc9, 0x36, 0x24, 0x93, 0x48, 0xca, 0x5d, 0x43, 0x53, 0x08, 0xe6, 0x0f, 0xbb, 0x28,
	0x7c, 0xd4, 0x45, 0xa1, 0x5e, 0x17, 0x71, 0x4b, 0xe9, 0xdc, 0xf5, 0x0d, 0x2e, 0x84, 0x78, 0xef,
	0x06, 0x17, 0x0a, 0xf1, 0xe1, 0xe4, 0x27, 0x1c, 0x04, 0x5d, 0xb5, 0x60, 0x02, 0x21, 0xf9, 0xc0,
	0x92, 0x14, 0x93, 0xd4, 0xe2, 0x88, 0xad, 0x38, 0x79, 0xee, 0x8a, 0xb7, 0xab, 0x1f, 0x10, 0xc5,
	0x16, 0xc9, 0x1e, 0x13, 0xca, 0xd5, 0xbf, 0xdf, 0x1f, 0x77, 0xe2, 0xa4, 0x44, 0xa2, 0xdb, 0x9a,
	0x5c, 0xb7, 0x1e, 0x3d, 0x46, 0x63, 0x21, 0x94, 0x42, 0xd7, 0xd1, 0x72, 0x40, 0x31, 0xf4, 0x3d,
	0x4d, 0x15, 0x83, 0xf2, 0x81, 0xb5, 0x62, 0x92, 0x1a, 0xfe, 0x29, 0x70, 0xd5, 0x8e, 0xa1, 0xb8,
	0x62, 0x9c, 0x7e, 0xa9, 0x8a, 0x4b, 0x77, 0xb6, 0x57, 0x36, 0x35, 0xcb, 0x76, 0xd5, 0xcc, 0x88,
	0xf8, 0x3d, 0x18, 0xd9, 0x9b, 0xbf, 0xa7, 0x48, 0x0d, 0x59, 0x97, 0x55, 0x52, 0x63, 0x72, 0x8c,
	0xe4, 0xd3, 0x2f, 0x75, 0xf4, 0xce, 0xfc, 0x2f, 0x57, 0xde, 0x75, 0xf0, 0xc3, 0xf2, 0x8e, 0x50,
	0x67, 0xae, 0x0d, 0xcf, 0x00, 0x27, 0xb7, 0x6c, 0x83, 0x29, 0xed, 0x62, 0x91, 0x30, 0x0c, 0xde,
	0x04, 0x50, 0x5a, 0x96, 0x6d, 0x34, 0x24, 0xd9, 0xd2, 0x99, 0xf4, 0x46, 0x4b, 0xd7, 0xa8, 0xf4,
	0xae, 0xce, 0x4c, 0x95, 0x92, 0x0b, 0x85, 0xf9, 0x5c, 0x7e, 0x76, 0x61, 0x7e, 0x7e, 0xae, 0x90,
	0x16, 0x0a, 0xf9, 0xeb, 0xee, 0xdf, 0x6c, 0x21, 0xbf, 0x54, 0x58, 0x5a, 0x58, 0xcc, 0x2f, 0x15,
	0xd6, 0x91, 0x18, 0x76, 0x1c, 0x14, 0x2d, 0x7d, 0x79, 0xf1, 0x49, 0x17, 0xcd, 0x41, 0x14, 0xc0,
	0xd1, 0x0a, 0x55, 0x14, 0x46, 0x79, 0x36, 0x71, 0x9c, 0x57, 0x2a, 0x9d, 0x28, 0x40, 0xb1, 0xb2,
	0x75, 0xac, 0xa5, 0xf9, 0xd2, 0x14, 0x44, 0x4f, 0xd6, 0xca, 0x5a, 0x0c, 0x13, 0x8a, 0xef, 0xa8,
	0x8b, 0xbc, 0x54, 0x28, 0x73, 0x4c, 0x28, 0x05, 0xb8, 0x5c, 0xd3, 0x4c, 0xa2, 0xd8, 0x7d, 0xa1,
	0x48, 0xaa, 0x6c, 0x93, 0x03, 0xb9, 0x43, 0x83, 0xef, 0x6b, 0x25, 0x7a, 0xd8, 0x45, 0x81, 0xa3,
	0x2e, 0xf2, 0xf7, 0xba, 0xc8, 0xb7, 0x90, 0x5e, 0xdc, 0xe0, 0x42, 0x5e, 0xde, 0xb7, 0xc1, 0x85,
	0xfc, 0x7c, 0x20, 0x19, 0x81, 0xf0, 0x71, 0x7b, 0x48, 0xfe, 0x19, 0x41, 0x74, 0x68, 0x7f, 0xf0,
	0xfb, 0x10, 0x39, 0x11, 0xa1, 0x15, 0x47, 0x82, 0xef, 0x9c, 0xa2, 0x39, 0xbb, 0xbf, 0x6c, 0x3f,
	0x62, 0x34, 0x6f, 0xfe, 0x3f, 0x22, 0x2f, 0x0f, 0xfd, 0x51, 0x08, 0x89, 0x83, 0xfe, 0x96, 0xaf,
	0x3c, 0xe9, 0xa2, 0xcb, 0x30, 0x09, 0x13, 0xab, 0x6c, 0x1d, 0x82, 0x5b, 0x40, 0xfd, 0xff, 0x14,
	0x83, 0x51, 0x2e, 0xf9, 0xef, 0x30, 0x44, 0x06, 0x3c, 0x63, 0x03, 0x46, 0x07, 0x4a, 0x43, 0x73,
	0xa4, 0x1d, 0x2e, 0x6d, 0x7c, 0xd5, 0x45, 0x9e, 0x47, 0x8f, 0xd1, 0x48, 0x68, 0x40, 0xa4, 0xac,
	0x6f, 0x98, 0xde, 0xf8, 0xcf, 0xe8, 0x20, 0x65, 0x5e, 0xcd, 0x4f, 0xfd, 0x3a, 0x55, 0xbb, 0xa7,
	0x18, 0xfa, 0xec, 0x74, 0xea, 0x57, 0xf2, 0xec, 0x87, 0xd7, 0x67, 0x97, 0xde, 0xff, 0xcd, 0x8d,
	0xfb, 0xbf, 0x3d, 0x1e, 0xe7, 0x16, 0xef, 0x4f, 0x4f, 0x89, 0x23, 0x27, 0x2f, 0x28, 0xd7, 0xf0,
	0x06, 0xfc, 0xc0, 0xea, 0x58, 0x36, 0x69, 0x48, 0x2a, 0xd1, 0x89, 0x29, 0xd3, 0x5e, 0xa7, 0xcb,
	0x8d, 0x7e, 0xf7, 0x3d, 0x5f, 0x53, 0x1e, 0xf1, 0x35, 0x87, 0x74, 0xb3, 0xcf, 0xd9, 0x92, 0x1b,
	0x04, 0x2f, 0x03, 0x6e, 0x59, 0xc4, 0x94, 0x64, 0xcb, 0xd2, 0x54, 0xbd, 0xef, 0x88, 0x63, 0x2b,
	0x70, 0x12, 0x65, 0xfa, 0xe2, 0x1f, 0x79, 0xd7, 0x3d, 0x22, 0x4f, 0x71, 0x45, 0x17, 0xc6, 0xb8,
	0x35, 0x78, 0xbd, 0xad, 0x99, 0x76, 0x4b, 0xae, 0x4b, 0x9a, 0x6e, 0x13, 0x73, 0x4f, 0x56, 0x9c,
	0x13, 0x88, 0xb5, 0xdc, 0xb1, 0x7c, 0xe6, 0xe2, 0x9d, 0xb9, 0xed, 0xf0, 0xca, 0x7d, 0x1a, 0x4d,
	0xa4, 0x18, 0x6b, 0x9f, 0x33, 0x8b, 0x05, 0xe0, 0xda, 0x75, 0xd9, 0x69, 0xcd, 0xa3, 0xa5, 0x11,
	0x1a, 0x53, 0x70, 0xc6, 0x1f, 0xff, 0xef, 0x64, 0x0a, 0x89, 0xcc, 0x82, 0x53, 0x10, 0xac, 0xaa,
	0xcd, 0x81, 0x1a, 0x89, 0x52, 0x10, 0xcc, 0x84, 0xe2, 0x2f, 0x5e, 0xbc, 0x78, 0x11, 0x4c, 0x21,
	0x31, 0x50, 0x55, 0x9b, 0x45, 0x4b, 0xc7, 0x37, 0x80, 0xd3, 0x9a, 0xed, 0x82, 0xdb, 0xa1, 0x93,
	0x17, 0xc7, 0x57, 0x6e, 0xb6, 0x0b, 0x6e, 0xaf, 0x65, 0x0c, 0x5c, 0x64, 0xcc, 0x05, 0xb7, 0x51,
	0xbf, 0x9c, 0xb9, 0x70, 0xba, 0x01, 0x38, 0x2e, 0x16, 0x70, 0x11, 0x42, 0x72, 0xcb, 0xbe, 0x2b,
	0xed, 0x93, 0x4e, 0x3c, 0xc2, 0xdc, 0xbc, 0x31, 0xe4, 0xa6, 0x42, 0x14, 0x93, 0x30, 0xa9, 0x97,
	0x22, 0x74, 0x09, 0x01, 0x93, 0x13, 0x02, 0xa9, 0x1d, 0x31, 0x48, 0x79, 0x3f, 0x27, 0x1d, 0xfc,
	0x27, 0x04, 0x9c, 0x2d, 0xab, 0x56, 0x7c, 0x84, 0x49, 0x3f, 0xfb, 0xad, 0xa4, 0x9f, 0xd9, 0x95,
	0x55, 0x6b, 0x4d, 0xb7, 0xcd, 0x4e, 0x69, 0x9b, 0x25, 0xe6, 0x21, 0x0a, 0x26, 0xd9, 0xb6, 0x22,
	0xfa, 0x18, 0x7e, 0x88, 0x02, 0x49, 0xce, 0xf4, 0xf2, 0xec, 0xc9, 0xff, 0x10, 0x79, 0xf9, 0x54,
	0x1f, 0x36, 0xe3, 0xec, 0x7e, 0x1f, 0x36, 0xc3, 0x60, 0xbd, 0xcf, 0xff, 0xe9, 0x0b, 0xfc, 0xee,
	0x31, 0xf2, 0x86, 0x3c, 0x22, 0x8b, 0x06, 0x5f, 0x81, 0xf0, 0x07, 0xad, 0x46, 0xd5, 0x90, 0x1a,
	0x76, 0x2b, 0x3e, 0x2a, 0xa0, 0x54, 0xa8, 0x14, 0x3a, 0xec, 0x22, 0x44, 0x2b, 0x40, 0x0c, 0x31,
	0xd3, 0xbb, 0x76, 0x0b, 0xe7, 0x20, 0xea, 0x1e, 0x25, 0xf4, 0xcc, 0xa4, 0x61, 0xc6, 0xc7, 0x86,
	0xc0, 0x63, 0x0e, 0xa0, 0xe2, 0xda, 0x27, 0x16, 0x21, 0x7c, 0x1c, 0x3d, 0xe6, 0xc1, 0x47, 0x73,
	0xc7, 0xca, 0x4b, 0xa4, 0x43, 0x1c, 0x03, 0x7f, 0x5b, 0xae, 0xb7, 0x08, 0xbb, 0xb0, 0x84, 0x45,
	0xe7, 0x61, 0xd9, 0x7b, 0x03, 0x2d, 0xff, 0x07, 0x3d, 0xe9, 0xa2, 0x5b, 0x90, 0x84, 0xb1, 0xd3,
	0xc5, 0x8c, 0xf9, 0x5c, 0x3a, 0x9f, 0x9e, 0x4f, 0x2f, 0xa4, 0x73, 0xf9, 0x74, 0x6e, 0x2e, 0x9d,
	0x2b, 0xc0, 0x25, 0x88, 0x96, 0x6e, 0xee, 0x08, 0x65, 0x7d, 0xcf, 0x30, 0x1b, 0x32, 0x6b, 0x7a,
	0xdc, 0x62, 0x3a, 0x97, 0x83, 0xd7, 0x61, 0x7c, 0x87, 0x10, 0x53, 0x28, 0xef, 0x08, 0xc5, 0x5a,
	0xcd, 0x24, 0x96, 0x45, 0x2c, 0x8c, 0x6e, 0x7c, 0xd6, 0x45, 0x7f, 0x45, 0x20, 0xc0, 0xe8, 0x49,
	0x5f, 0x10, 0xca, 0xb5, 0x89, 0xe8, 0x50, 0x1b, 0x80, 0x75, 0x18, 0x15, 0x89, 0x65, 0xb4, 0x4c,
	0x85, 0x08, 0xb4, 0x5e, 0x66, 0x16, 0x61, 0x1e, 0xde, 0xba, 0xa0, 0x76, 0xf3, 0x5c, 0xb1, 0x65,
	0x1b, 0x10, 0x3b, 0xaf, 0x1c, 0xe1, 0x1a, 0x5c, 0x76, 0x0b, 0x46, 0xd8, 0x34, 0x14, 0xb9, 0x2e,
	0x14, 0x4d, 0x22, 0x0b, 0x5b, 0xce, 0xe5, 0x54, 0x48, 0xdd, 0xde, 0x2c, 0x6e, 0x4d, 0x4f, 0x04,
	0x9c, 0x3a, 0x29, 0xfd, 0x08, 0x62, 0xa6, 0xfb, 0x5a, 0xc6, 0x1e, 0x6c, 0xbd, 0xfd, 0x96, 0xed,
	0x9b, 0x4b, 0x17, 0x4a, 0x6f, 0x42, 0x50, 0x6b, 0x9e, 0xb4, 0xf3, 0xfe, 0x11, 0x8e, 0x96, 0x68,
	0x3b, 0x3f, 0x6e, 0xcc, 0xf4, 0x0c, 0xff, 0x07, 0x82, 0x50, 0xbf, 0x22, 0xb0, 0x08, 0xaf, 0x99,
	0x46, 0xcb, 0x26, 0xa6, 0xd4, 0x24, 0x34, 0x52, 0x27, 0x33, 0x6e, 0xd3, 0x4b, 0xb2, 0xa6, 0xe7,
	0xb4, 0x8d, 0xaf, 0x10, 0x72, 0x47, 0x7f, 0xf1, 0x4e, 0xba, 0xa3, 0x07, 0xde, 0x49, 0x71, 0xdc,
	0xa1, 0xd3, 0xd4, 0xba, 0x69, 0xc5, 0x77, 0xe0, 0x12, 0xbd, 0x18, 0x9c, 0xe7, 0xd7, 0xfb, 0xad,
	0xfd, 0xc6, 0xe4, 0x03, 0x4b, 0x1c, 0x76, 0x9d, 0x04, 0x16, 0x3a, 0x2b, 0xc9, 0x64, 0x0c, 0xf0,
	0xd9, 0x93, 0x3a, 0xf9, 0x07, 0x1f, 0x8c, 0xad, 0x98, 0x44, 0xb6, 0xc9, 0xab, 0x71, 0x0d, 0xfe,
	0x3f, 0x5d, 0x25, 0xc7, 0x3f, 0xfb, 0xc9, 0xd0, 0xaf, 0x81, 0xd2, 0xd4, 0x99, 0x0b, 0x22, 0xfe,
	0xf8, 0x6b, 0x34, 0x34, 0x57, 0x5a, 0xfd, 0xc6, 0x1b, 0x62, 0xf2, 0xe3, 0xaf, 0xd1, 0x37, 0x60,
	0x4e, 0xdd, 0x19, 0x1f, 0xf8, 0x20, 0x2a, 0x92, 0x66, 0x5d, 0x56, 0xbe, 0xdf, 0x92, 0x57, 0x64,
	0x4b, 0x3e, 0xe5, 0x20, 0x72, 0x93, 0xd8, 0xdf, 0xff, 0x50, 0xfc, 0x8e, 0xfe, 0x50, 0x7c, 0x75,
	0xa4, 0x34, 0xb3, 0x0b, 0xd1, 0xa1, 0x5d, 0xc1, 0x51, 0x88, 0x94, 0xb7, 0xa4, 0x1d, 0x71, 0xfb,
	0xa6, 0xb8, 0x56, 0xa9, 0xf0, 0x1e, 0x1c, 0x06, 0xff, 0x9a, 0x28, 0x6e, 0x8b, 0x3c, 0xa2, 0x43,
	0x71, 0xad, 0xb8, 0x7a, 0x87, 0xf7, 0x62, 0x80, 0x40, 0x79, 0x4b, 0xba, 0x55, 0x59, 0xe3, 0x7d,
	0x78, 0x0c, 0xe0, 0x9d, 0x5b, 0x9b, 0x9b, 0x77, 0xe8, 0xe3, 0x2a, 0xcf, 0xcd, 0x2c, 0x40, 0xec,
	0xbc, 0x4b, 0x25, 0x8e, 0x40, 0x70, 0x47, 0x2c, 0xdf, 0x2e, 0xee, 0xae, 0xf1, 0x1e, 0x3c, 0x0e,
	0xc1, 0x5d, 0xb1, 0xb8, 0x55, 0x29, 0xef, 0xf2, 0x68, 0x82, 0xa3, 0xb7, 0x8e, 0xd2, 0xef, 0xd1,
	0xd1, 0xb3, 0x84, 0xe7, 0xe9, 0xb3, 0x84, 0xe7, 0xcb, 0x67, 0x09, 0xf4, 0x51, 0x2f, 0x81, 0x3e,
	0xe9, 0x25, 0xd0, 0xa7, 0xbd, 0x04, 0x3a, 0xea, 0x25, 0xd0, 0xd3, 0x5e, 0x02, 0x7d, 0xde, 0x4b,
	0xa0, 0x2f, 0x7a, 0x09, 0xcf, 0x97, 0xbd, 0x04, 0x7a, 0xf0, 0x3c, 0xe1, 0x39, 0x7c, 0x9e, 0x40,
	0x47, 0xcf, 0x13, 0x9e, 0xa7, 0xcf, 0x13, 0x9e, 0xf7, 0xb6, 0x54, 0xa3, 0xb9, 0xaf, 0x66, 0xda,
	0x46, 0xdd, 0x26, 0xa6, 0x29, 0x67, 0x5a, 0x56, 0x96, 0x0d, 0xe8, 0x5d, 0x62, 0xb6, 0x9f, 0xc4,
	0xd9, 0xbe, 0x39, 0xdb, 0xac, 0xaa, 0x46, 0x96, 0xdc, 0xb3, 0xdd, 0x6f, 0x32, 0x67, 0xbe, 0x87,
	0x55, 0x03, 0xec, 0xd3, 0xcc, 0xdc, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb5, 0xc0, 0x48, 0xa6,
	0x32, 0x13, 0x00, 0x00,
}

func (x CloudLinkStatus) String() string {
	s, ok := CloudLinkStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x VirtualInterfaceType) String() string {
	s, ok := VirtualInterfaceType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.CloudProvider == nil {
		if this.CloudProvider != nil {
			return false
		}
	} else if this.CloudProvider == nil {
		return false
	} else if !this.CloudProvider.Equal(that1.CloudProvider) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.SuggestedAction != that1.SuggestedAction {
		return false
	}
	if this.ErrorDescription != that1.ErrorDescription {
		return false
	}
	if this.Sites != that1.Sites {
		return false
	}
	if that1.EnableConnectionToReChoice == nil {
		if this.EnableConnectionToReChoice != nil {
			return false
		}
	} else if this.EnableConnectionToReChoice == nil {
		return false
	} else if !this.EnableConnectionToReChoice.Equal(that1.EnableConnectionToReChoice) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Aws) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Aws)
	if !ok {
		that2, ok := that.(GlobalSpecType_Aws)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aws.Equal(that1.Aws) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Azure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Azure)
	if !ok {
		that2, ok := that.(GlobalSpecType_Azure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Azure.Equal(that1.Azure) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Disabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Disabled)
	if !ok {
		that2, ok := that.(GlobalSpecType_Disabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disabled.Equal(that1.Disabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Enabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Enabled)
	if !ok {
		that2, ok := that.(GlobalSpecType_Enabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enabled.Equal(that1.Enabled) {
		return false
	}
	return true
}
func (this *AWSType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSType)
	if !ok {
		that2, ok := that.(AWSType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsCred.Equal(that1.AwsCred) {
		return false
	}
	if that1.CloudLinkType == nil {
		if this.CloudLinkType != nil {
			return false
		}
	} else if this.CloudLinkType == nil {
		return false
	} else if !this.CloudLinkType.Equal(that1.CloudLinkType) {
		return false
	}
	if that1.DirectConnectGatewayAsnChoice == nil {
		if this.DirectConnectGatewayAsnChoice != nil {
			return false
		}
	} else if this.DirectConnectGatewayAsnChoice == nil {
		return false
	} else if !this.DirectConnectGatewayAsnChoice.Equal(that1.DirectConnectGatewayAsnChoice) {
		return false
	}
	return true
}
func (this *AWSType_Byoc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSType_Byoc)
	if !ok {
		that2, ok := that.(AWSType_Byoc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Byoc.Equal(that1.Byoc) {
		return false
	}
	return true
}
func (this *AWSType_F5XcManaged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSType_F5XcManaged)
	if !ok {
		that2, ok := that.(AWSType_F5XcManaged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.F5XcManaged.Equal(that1.F5XcManaged) {
		return false
	}
	return true
}
func (this *AWSType_Auto) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSType_Auto)
	if !ok {
		that2, ok := that.(AWSType_Auto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Auto.Equal(that1.Auto) {
		return false
	}
	return true
}
func (this *AWSType_CustomAsn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSType_CustomAsn)
	if !ok {
		that2, ok := that.(AWSType_CustomAsn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CustomAsn != that1.CustomAsn {
		return false
	}
	return true
}
func (this *AzureType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureType)
	if !ok {
		that2, ok := that.(AzureType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *AWSBYOCListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSBYOCListType)
	if !ok {
		that2, ok := that.(AWSBYOCListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Connections) != len(that1.Connections) {
		return false
	}
	for i := range this.Connections {
		if !this.Connections[i].Equal(that1.Connections[i]) {
			return false
		}
	}
	return true
}
func (this *AWSBYOCType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSBYOCType)
	if !ok {
		that2, ok := that.(AWSBYOCType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConnectionId != that1.ConnectionId {
		return false
	}
	if that1.ResourceNameChoice == nil {
		if this.ResourceNameChoice != nil {
			return false
		}
	} else if this.ResourceNameChoice == nil {
		return false
	} else if !this.ResourceNameChoice.Equal(that1.ResourceNameChoice) {
		return false
	}
	if this.VirtualInterfaceType != that1.VirtualInterfaceType {
		return false
	}
	if this.Vlan != that1.Vlan {
		return false
	}
	if this.BgpAsn != that1.BgpAsn {
		return false
	}
	if that1.IpType == nil {
		if this.IpType != nil {
			return false
		}
	} else if this.IpType == nil {
		return false
	} else if !this.IpType.Equal(that1.IpType) {
		return false
	}
	if !this.AuthKey.Equal(that1.AuthKey) {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if this.JumboMtu != that1.JumboMtu {
		return false
	}
	if this.EnableSitelink != that1.EnableSitelink {
		return false
	}
	return true
}
func (this *AWSBYOCType_SystemGeneratedName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSBYOCType_SystemGeneratedName)
	if !ok {
		that2, ok := that.(AWSBYOCType_SystemGeneratedName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SystemGeneratedName.Equal(that1.SystemGeneratedName) {
		return false
	}
	return true
}
func (this *AWSBYOCType_UserAssignedName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSBYOCType_UserAssignedName)
	if !ok {
		that2, ok := that.(AWSBYOCType_UserAssignedName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserAssignedName != that1.UserAssignedName {
		return false
	}
	return true
}
func (this *AWSBYOCType_Ipv4) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSBYOCType_Ipv4)
	if !ok {
		that2, ok := that.(AWSBYOCType_Ipv4)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ipv4.Equal(that1.Ipv4) {
		return false
	}
	return true
}
func (this *AWSBYOCType_Ipv6) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSBYOCType_Ipv6)
	if !ok {
		that2, ok := that.(AWSBYOCType_Ipv6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ipv6.Equal(that1.Ipv6) {
		return false
	}
	return true
}
func (this *Ipv4Type) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ipv4Type)
	if !ok {
		that2, ok := that.(Ipv4Type)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RouterPeerAddress != that1.RouterPeerAddress {
		return false
	}
	if this.AwsRouterPeerAddress != that1.AwsRouterPeerAddress {
		return false
	}
	return true
}
func (this *Ipv6Type) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ipv6Type)
	if !ok {
		that2, ok := that.(Ipv6Type)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *AWSF5XCManagedType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSF5XCManagedType)
	if !ok {
		that2, ok := that.(AWSF5XCManagedType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.CloudProvider == nil {
		if this.CloudProvider != nil {
			return false
		}
	} else if this.CloudProvider == nil {
		return false
	} else if !this.CloudProvider.Equal(that1.CloudProvider) {
		return false
	}
	if that1.EnableConnectionToReChoice == nil {
		if this.EnableConnectionToReChoice != nil {
			return false
		}
	} else if this.EnableConnectionToReChoice == nil {
		return false
	} else if !this.EnableConnectionToReChoice.Equal(that1.EnableConnectionToReChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_Aws) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Aws)
	if !ok {
		that2, ok := that.(CreateSpecType_Aws)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aws.Equal(that1.Aws) {
		return false
	}
	return true
}
func (this *CreateSpecType_Azure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Azure)
	if !ok {
		that2, ok := that.(CreateSpecType_Azure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Azure.Equal(that1.Azure) {
		return false
	}
	return true
}
func (this *CreateSpecType_Disabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Disabled)
	if !ok {
		that2, ok := that.(CreateSpecType_Disabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disabled.Equal(that1.Disabled) {
		return false
	}
	return true
}
func (this *CreateSpecType_Enabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Enabled)
	if !ok {
		that2, ok := that.(CreateSpecType_Enabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enabled.Equal(that1.Enabled) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.CloudProvider == nil {
		if this.CloudProvider != nil {
			return false
		}
	} else if this.CloudProvider == nil {
		return false
	} else if !this.CloudProvider.Equal(that1.CloudProvider) {
		return false
	}
	if that1.EnableConnectionToReChoice == nil {
		if this.EnableConnectionToReChoice != nil {
			return false
		}
	} else if this.EnableConnectionToReChoice == nil {
		return false
	} else if !this.EnableConnectionToReChoice.Equal(that1.EnableConnectionToReChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Aws) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Aws)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Aws)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aws.Equal(that1.Aws) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Azure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Azure)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Azure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Azure.Equal(that1.Azure) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Disabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Disabled)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Disabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disabled.Equal(that1.Disabled) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Enabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Enabled)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Enabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enabled.Equal(that1.Enabled) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.CloudProvider == nil {
		if this.CloudProvider != nil {
			return false
		}
	} else if this.CloudProvider == nil {
		return false
	} else if !this.CloudProvider.Equal(that1.CloudProvider) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.SuggestedAction != that1.SuggestedAction {
		return false
	}
	if this.ErrorDescription != that1.ErrorDescription {
		return false
	}
	if this.Sites != that1.Sites {
		return false
	}
	if that1.EnableConnectionToReChoice == nil {
		if this.EnableConnectionToReChoice != nil {
			return false
		}
	} else if this.EnableConnectionToReChoice == nil {
		return false
	} else if !this.EnableConnectionToReChoice.Equal(that1.EnableConnectionToReChoice) {
		return false
	}
	return true
}
func (this *GetSpecType_Aws) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Aws)
	if !ok {
		that2, ok := that.(GetSpecType_Aws)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aws.Equal(that1.Aws) {
		return false
	}
	return true
}
func (this *GetSpecType_Azure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Azure)
	if !ok {
		that2, ok := that.(GetSpecType_Azure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Azure.Equal(that1.Azure) {
		return false
	}
	return true
}
func (this *GetSpecType_Disabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Disabled)
	if !ok {
		that2, ok := that.(GetSpecType_Disabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disabled.Equal(that1.Disabled) {
		return false
	}
	return true
}
func (this *GetSpecType_Enabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Enabled)
	if !ok {
		that2, ok := that.(GetSpecType_Enabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enabled.Equal(that1.Enabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&cloud_link.GlobalSpecType{")
	if this.CloudProvider != nil {
		s = append(s, "CloudProvider: "+fmt.Sprintf("%#v", this.CloudProvider)+",\n")
	}
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "SuggestedAction: "+fmt.Sprintf("%#v", this.SuggestedAction)+",\n")
	s = append(s, "ErrorDescription: "+fmt.Sprintf("%#v", this.ErrorDescription)+",\n")
	s = append(s, "Sites: "+fmt.Sprintf("%#v", this.Sites)+",\n")
	if this.EnableConnectionToReChoice != nil {
		s = append(s, "EnableConnectionToReChoice: "+fmt.Sprintf("%#v", this.EnableConnectionToReChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_Aws) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.GlobalSpecType_Aws{` +
		`Aws:` + fmt.Sprintf("%#v", this.Aws) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Azure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.GlobalSpecType_Azure{` +
		`Azure:` + fmt.Sprintf("%#v", this.Azure) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Disabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.GlobalSpecType_Disabled{` +
		`Disabled:` + fmt.Sprintf("%#v", this.Disabled) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Enabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.GlobalSpecType_Enabled{` +
		`Enabled:` + fmt.Sprintf("%#v", this.Enabled) + `}`}, ", ")
	return s
}
func (this *AWSType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&cloud_link.AWSType{")
	if this.AwsCred != nil {
		s = append(s, "AwsCred: "+fmt.Sprintf("%#v", this.AwsCred)+",\n")
	}
	if this.CloudLinkType != nil {
		s = append(s, "CloudLinkType: "+fmt.Sprintf("%#v", this.CloudLinkType)+",\n")
	}
	if this.DirectConnectGatewayAsnChoice != nil {
		s = append(s, "DirectConnectGatewayAsnChoice: "+fmt.Sprintf("%#v", this.DirectConnectGatewayAsnChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSType_Byoc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.AWSType_Byoc{` +
		`Byoc:` + fmt.Sprintf("%#v", this.Byoc) + `}`}, ", ")
	return s
}
func (this *AWSType_F5XcManaged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.AWSType_F5XcManaged{` +
		`F5XcManaged:` + fmt.Sprintf("%#v", this.F5XcManaged) + `}`}, ", ")
	return s
}
func (this *AWSType_Auto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.AWSType_Auto{` +
		`Auto:` + fmt.Sprintf("%#v", this.Auto) + `}`}, ", ")
	return s
}
func (this *AWSType_CustomAsn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.AWSType_CustomAsn{` +
		`CustomAsn:` + fmt.Sprintf("%#v", this.CustomAsn) + `}`}, ", ")
	return s
}
func (this *AzureType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&cloud_link.AzureType{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSBYOCListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloud_link.AWSBYOCListType{")
	if this.Connections != nil {
		s = append(s, "Connections: "+fmt.Sprintf("%#v", this.Connections)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSBYOCType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&cloud_link.AWSBYOCType{")
	s = append(s, "ConnectionId: "+fmt.Sprintf("%#v", this.ConnectionId)+",\n")
	if this.ResourceNameChoice != nil {
		s = append(s, "ResourceNameChoice: "+fmt.Sprintf("%#v", this.ResourceNameChoice)+",\n")
	}
	s = append(s, "VirtualInterfaceType: "+fmt.Sprintf("%#v", this.VirtualInterfaceType)+",\n")
	s = append(s, "Vlan: "+fmt.Sprintf("%#v", this.Vlan)+",\n")
	s = append(s, "BgpAsn: "+fmt.Sprintf("%#v", this.BgpAsn)+",\n")
	if this.IpType != nil {
		s = append(s, "IpType: "+fmt.Sprintf("%#v", this.IpType)+",\n")
	}
	if this.AuthKey != nil {
		s = append(s, "AuthKey: "+fmt.Sprintf("%#v", this.AuthKey)+",\n")
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	s = append(s, "JumboMtu: "+fmt.Sprintf("%#v", this.JumboMtu)+",\n")
	s = append(s, "EnableSitelink: "+fmt.Sprintf("%#v", this.EnableSitelink)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSBYOCType_SystemGeneratedName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.AWSBYOCType_SystemGeneratedName{` +
		`SystemGeneratedName:` + fmt.Sprintf("%#v", this.SystemGeneratedName) + `}`}, ", ")
	return s
}
func (this *AWSBYOCType_UserAssignedName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.AWSBYOCType_UserAssignedName{` +
		`UserAssignedName:` + fmt.Sprintf("%#v", this.UserAssignedName) + `}`}, ", ")
	return s
}
func (this *AWSBYOCType_Ipv4) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.AWSBYOCType_Ipv4{` +
		`Ipv4:` + fmt.Sprintf("%#v", this.Ipv4) + `}`}, ", ")
	return s
}
func (this *AWSBYOCType_Ipv6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.AWSBYOCType_Ipv6{` +
		`Ipv6:` + fmt.Sprintf("%#v", this.Ipv6) + `}`}, ", ")
	return s
}
func (this *Ipv4Type) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cloud_link.Ipv4Type{")
	s = append(s, "RouterPeerAddress: "+fmt.Sprintf("%#v", this.RouterPeerAddress)+",\n")
	s = append(s, "AwsRouterPeerAddress: "+fmt.Sprintf("%#v", this.AwsRouterPeerAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Ipv6Type) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&cloud_link.Ipv6Type{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSF5XCManagedType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&cloud_link.AWSF5XCManagedType{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cloud_link.CreateSpecType{")
	if this.CloudProvider != nil {
		s = append(s, "CloudProvider: "+fmt.Sprintf("%#v", this.CloudProvider)+",\n")
	}
	if this.EnableConnectionToReChoice != nil {
		s = append(s, "EnableConnectionToReChoice: "+fmt.Sprintf("%#v", this.EnableConnectionToReChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_Aws) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.CreateSpecType_Aws{` +
		`Aws:` + fmt.Sprintf("%#v", this.Aws) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Azure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.CreateSpecType_Azure{` +
		`Azure:` + fmt.Sprintf("%#v", this.Azure) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Disabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.CreateSpecType_Disabled{` +
		`Disabled:` + fmt.Sprintf("%#v", this.Disabled) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Enabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.CreateSpecType_Enabled{` +
		`Enabled:` + fmt.Sprintf("%#v", this.Enabled) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cloud_link.ReplaceSpecType{")
	if this.CloudProvider != nil {
		s = append(s, "CloudProvider: "+fmt.Sprintf("%#v", this.CloudProvider)+",\n")
	}
	if this.EnableConnectionToReChoice != nil {
		s = append(s, "EnableConnectionToReChoice: "+fmt.Sprintf("%#v", this.EnableConnectionToReChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_Aws) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.ReplaceSpecType_Aws{` +
		`Aws:` + fmt.Sprintf("%#v", this.Aws) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Azure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.ReplaceSpecType_Azure{` +
		`Azure:` + fmt.Sprintf("%#v", this.Azure) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Disabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.ReplaceSpecType_Disabled{` +
		`Disabled:` + fmt.Sprintf("%#v", this.Disabled) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Enabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.ReplaceSpecType_Enabled{` +
		`Enabled:` + fmt.Sprintf("%#v", this.Enabled) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&cloud_link.GetSpecType{")
	if this.CloudProvider != nil {
		s = append(s, "CloudProvider: "+fmt.Sprintf("%#v", this.CloudProvider)+",\n")
	}
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "SuggestedAction: "+fmt.Sprintf("%#v", this.SuggestedAction)+",\n")
	s = append(s, "ErrorDescription: "+fmt.Sprintf("%#v", this.ErrorDescription)+",\n")
	s = append(s, "Sites: "+fmt.Sprintf("%#v", this.Sites)+",\n")
	if this.EnableConnectionToReChoice != nil {
		s = append(s, "EnableConnectionToReChoice: "+fmt.Sprintf("%#v", this.EnableConnectionToReChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_Aws) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.GetSpecType_Aws{` +
		`Aws:` + fmt.Sprintf("%#v", this.Aws) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Azure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.GetSpecType_Azure{` +
		`Azure:` + fmt.Sprintf("%#v", this.Azure) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Disabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.GetSpecType_Disabled{` +
		`Disabled:` + fmt.Sprintf("%#v", this.Disabled) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Enabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cloud_link.GetSpecType_Enabled{` +
		`Enabled:` + fmt.Sprintf("%#v", this.Enabled) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableConnectionToReChoice != nil {
		{
			size := m.EnableConnectionToReChoice.Size()
			i -= size
			if _, err := m.EnableConnectionToReChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Sites != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Sites))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ErrorDescription) > 0 {
		i -= len(m.ErrorDescription)
		copy(dAtA[i:], m.ErrorDescription)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ErrorDescription)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SuggestedAction) > 0 {
		i -= len(m.SuggestedAction)
		copy(dAtA[i:], m.SuggestedAction)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SuggestedAction)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.CloudProvider != nil {
		{
			size := m.CloudProvider.Size()
			i -= size
			if _, err := m.CloudProvider.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_Aws) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Aws) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Aws != nil {
		{
			size, err := m.Aws.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Azure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Azure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Azure != nil {
		{
			size, err := m.Azure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Disabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Disabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disabled != nil {
		{
			size, err := m.Disabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Enabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Enabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *AWSType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DirectConnectGatewayAsnChoice != nil {
		{
			size := m.DirectConnectGatewayAsnChoice.Size()
			i -= size
			if _, err := m.DirectConnectGatewayAsnChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CloudLinkType != nil {
		{
			size := m.CloudLinkType.Size()
			i -= size
			if _, err := m.CloudLinkType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AwsCred != nil {
		{
			size, err := m.AwsCred.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AWSType_Byoc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSType_Byoc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Byoc != nil {
		{
			size, err := m.Byoc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *AWSType_F5XcManaged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSType_F5XcManaged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.F5XcManaged != nil {
		{
			size, err := m.F5XcManaged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AWSType_Auto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSType_Auto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Auto != nil {
		{
			size, err := m.Auto.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *AWSType_CustomAsn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSType_CustomAsn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.CustomAsn))
	i--
	dAtA[i] = 0x38
	return len(dAtA) - i, nil
}
func (m *AzureType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AWSBYOCListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSBYOCListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSBYOCListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Connections) > 0 {
		for iNdEx := len(m.Connections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Connections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AWSBYOCType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSBYOCType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSBYOCType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableSitelink {
		i--
		if m.EnableSitelink {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.JumboMtu {
		i--
		if m.JumboMtu {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x62
		}
	}
	if m.AuthKey != nil {
		{
			size, err := m.AuthKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.IpType != nil {
		{
			size := m.IpType.Size()
			i -= size
			if _, err := m.IpType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BgpAsn != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BgpAsn))
		i--
		dAtA[i] = 0x38
	}
	if m.Vlan != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Vlan))
		i--
		dAtA[i] = 0x30
	}
	if m.VirtualInterfaceType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VirtualInterfaceType))
		i--
		dAtA[i] = 0x28
	}
	if m.ResourceNameChoice != nil {
		{
			size := m.ResourceNameChoice.Size()
			i -= size
			if _, err := m.ResourceNameChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AWSBYOCType_SystemGeneratedName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSBYOCType_SystemGeneratedName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemGeneratedName != nil {
		{
			size, err := m.SystemGeneratedName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *AWSBYOCType_UserAssignedName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSBYOCType_UserAssignedName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.UserAssignedName)
	copy(dAtA[i:], m.UserAssignedName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.UserAssignedName)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *AWSBYOCType_Ipv4) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSBYOCType_Ipv4) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ipv4 != nil {
		{
			size, err := m.Ipv4.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *AWSBYOCType_Ipv6) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSBYOCType_Ipv6) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ipv6 != nil {
		{
			size, err := m.Ipv6.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *Ipv4Type) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ipv4Type) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ipv4Type) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AwsRouterPeerAddress) > 0 {
		i -= len(m.AwsRouterPeerAddress)
		copy(dAtA[i:], m.AwsRouterPeerAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AwsRouterPeerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RouterPeerAddress) > 0 {
		i -= len(m.RouterPeerAddress)
		copy(dAtA[i:], m.RouterPeerAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RouterPeerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Ipv6Type) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ipv6Type) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ipv6Type) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AWSF5XCManagedType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSF5XCManagedType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSF5XCManagedType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableConnectionToReChoice != nil {
		{
			size := m.EnableConnectionToReChoice.Size()
			i -= size
			if _, err := m.EnableConnectionToReChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CloudProvider != nil {
		{
			size := m.CloudProvider.Size()
			i -= size
			if _, err := m.CloudProvider.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_Aws) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Aws) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Aws != nil {
		{
			size, err := m.Aws.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Azure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Azure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Azure != nil {
		{
			size, err := m.Azure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Disabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Disabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disabled != nil {
		{
			size, err := m.Disabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Enabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Enabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableConnectionToReChoice != nil {
		{
			size := m.EnableConnectionToReChoice.Size()
			i -= size
			if _, err := m.EnableConnectionToReChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CloudProvider != nil {
		{
			size := m.CloudProvider.Size()
			i -= size
			if _, err := m.CloudProvider.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_Aws) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Aws) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Aws != nil {
		{
			size, err := m.Aws.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Azure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Azure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Azure != nil {
		{
			size, err := m.Azure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Disabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Disabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disabled != nil {
		{
			size, err := m.Disabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Enabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Enabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableConnectionToReChoice != nil {
		{
			size := m.EnableConnectionToReChoice.Size()
			i -= size
			if _, err := m.EnableConnectionToReChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Sites != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Sites))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ErrorDescription) > 0 {
		i -= len(m.ErrorDescription)
		copy(dAtA[i:], m.ErrorDescription)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ErrorDescription)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SuggestedAction) > 0 {
		i -= len(m.SuggestedAction)
		copy(dAtA[i:], m.SuggestedAction)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SuggestedAction)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.CloudProvider != nil {
		{
			size := m.CloudProvider.Size()
			i -= size
			if _, err := m.CloudProvider.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_Aws) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Aws) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Aws != nil {
		{
			size, err := m.Aws.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Azure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Azure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Azure != nil {
		{
			size, err := m.Azure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Disabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Disabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disabled != nil {
		{
			size, err := m.Disabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Enabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Enabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudProvider != nil {
		n += m.CloudProvider.Size()
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	l = len(m.SuggestedAction)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ErrorDescription)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Sites != 0 {
		n += 1 + sovTypes(uint64(m.Sites))
	}
	if m.EnableConnectionToReChoice != nil {
		n += m.EnableConnectionToReChoice.Size()
	}
	return n
}

func (m *GlobalSpecType_Aws) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aws != nil {
		l = m.Aws.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Azure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Azure != nil {
		l = m.Azure.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Disabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disabled != nil {
		l = m.Disabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Enabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AwsCred != nil {
		l = m.AwsCred.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CloudLinkType != nil {
		n += m.CloudLinkType.Size()
	}
	if m.DirectConnectGatewayAsnChoice != nil {
		n += m.DirectConnectGatewayAsnChoice.Size()
	}
	return n
}

func (m *AWSType_Byoc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Byoc != nil {
		l = m.Byoc.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSType_F5XcManaged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F5XcManaged != nil {
		l = m.F5XcManaged.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSType_Auto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Auto != nil {
		l = m.Auto.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSType_CustomAsn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.CustomAsn))
	return n
}
func (m *AzureType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AWSBYOCListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Connections) > 0 {
		for _, e := range m.Connections {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *AWSBYOCType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ResourceNameChoice != nil {
		n += m.ResourceNameChoice.Size()
	}
	if m.VirtualInterfaceType != 0 {
		n += 1 + sovTypes(uint64(m.VirtualInterfaceType))
	}
	if m.Vlan != 0 {
		n += 1 + sovTypes(uint64(m.Vlan))
	}
	if m.BgpAsn != 0 {
		n += 1 + sovTypes(uint64(m.BgpAsn))
	}
	if m.IpType != nil {
		n += m.IpType.Size()
	}
	if m.AuthKey != nil {
		l = m.AuthKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.JumboMtu {
		n += 2
	}
	if m.EnableSitelink {
		n += 2
	}
	return n
}

func (m *AWSBYOCType_SystemGeneratedName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemGeneratedName != nil {
		l = m.SystemGeneratedName.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSBYOCType_UserAssignedName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAssignedName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *AWSBYOCType_Ipv4) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipv4 != nil {
		l = m.Ipv4.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSBYOCType_Ipv6) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipv6 != nil {
		l = m.Ipv6.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Ipv4Type) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RouterPeerAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AwsRouterPeerAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Ipv6Type) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AWSF5XCManagedType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudProvider != nil {
		n += m.CloudProvider.Size()
	}
	if m.EnableConnectionToReChoice != nil {
		n += m.EnableConnectionToReChoice.Size()
	}
	return n
}

func (m *CreateSpecType_Aws) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aws != nil {
		l = m.Aws.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Azure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Azure != nil {
		l = m.Azure.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Disabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disabled != nil {
		l = m.Disabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Enabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudProvider != nil {
		n += m.CloudProvider.Size()
	}
	if m.EnableConnectionToReChoice != nil {
		n += m.EnableConnectionToReChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_Aws) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aws != nil {
		l = m.Aws.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Azure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Azure != nil {
		l = m.Azure.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Disabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disabled != nil {
		l = m.Disabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Enabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudProvider != nil {
		n += m.CloudProvider.Size()
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	l = len(m.SuggestedAction)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ErrorDescription)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Sites != 0 {
		n += 1 + sovTypes(uint64(m.Sites))
	}
	if m.EnableConnectionToReChoice != nil {
		n += m.EnableConnectionToReChoice.Size()
	}
	return n
}

func (m *GetSpecType_Aws) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aws != nil {
		l = m.Aws.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Azure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Azure != nil {
		l = m.Azure.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Disabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disabled != nil {
		l = m.Disabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Enabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`CloudProvider:` + fmt.Sprintf("%v", this.CloudProvider) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`SuggestedAction:` + fmt.Sprintf("%v", this.SuggestedAction) + `,`,
		`ErrorDescription:` + fmt.Sprintf("%v", this.ErrorDescription) + `,`,
		`Sites:` + fmt.Sprintf("%v", this.Sites) + `,`,
		`EnableConnectionToReChoice:` + fmt.Sprintf("%v", this.EnableConnectionToReChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Aws) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Aws{`,
		`Aws:` + strings.Replace(fmt.Sprintf("%v", this.Aws), "AWSType", "AWSType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Azure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Azure{`,
		`Azure:` + strings.Replace(fmt.Sprintf("%v", this.Azure), "AzureType", "AzureType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Disabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Disabled{`,
		`Disabled:` + strings.Replace(fmt.Sprintf("%v", this.Disabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Enabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Enabled{`,
		`Enabled:` + strings.Replace(fmt.Sprintf("%v", this.Enabled), "CloudLinkADNType", "views.CloudLinkADNType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSType{`,
		`AwsCred:` + strings.Replace(fmt.Sprintf("%v", this.AwsCred), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`CloudLinkType:` + fmt.Sprintf("%v", this.CloudLinkType) + `,`,
		`DirectConnectGatewayAsnChoice:` + fmt.Sprintf("%v", this.DirectConnectGatewayAsnChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSType_Byoc) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSType_Byoc{`,
		`Byoc:` + strings.Replace(fmt.Sprintf("%v", this.Byoc), "AWSBYOCListType", "AWSBYOCListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSType_F5XcManaged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSType_F5XcManaged{`,
		`F5XcManaged:` + strings.Replace(fmt.Sprintf("%v", this.F5XcManaged), "AWSF5XCManagedType", "AWSF5XCManagedType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSType_Auto) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSType_Auto{`,
		`Auto:` + strings.Replace(fmt.Sprintf("%v", this.Auto), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSType_CustomAsn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSType_CustomAsn{`,
		`CustomAsn:` + fmt.Sprintf("%v", this.CustomAsn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureType{`,
		`}`,
	}, "")
	return s
}
func (this *AWSBYOCListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConnections := "[]*AWSBYOCType{"
	for _, f := range this.Connections {
		repeatedStringForConnections += strings.Replace(f.String(), "AWSBYOCType", "AWSBYOCType", 1) + ","
	}
	repeatedStringForConnections += "}"
	s := strings.Join([]string{`&AWSBYOCListType{`,
		`Connections:` + repeatedStringForConnections + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSBYOCType) String() string {
	if this == nil {
		return "nil"
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&AWSBYOCType{`,
		`ConnectionId:` + fmt.Sprintf("%v", this.ConnectionId) + `,`,
		`ResourceNameChoice:` + fmt.Sprintf("%v", this.ResourceNameChoice) + `,`,
		`VirtualInterfaceType:` + fmt.Sprintf("%v", this.VirtualInterfaceType) + `,`,
		`Vlan:` + fmt.Sprintf("%v", this.Vlan) + `,`,
		`BgpAsn:` + fmt.Sprintf("%v", this.BgpAsn) + `,`,
		`IpType:` + fmt.Sprintf("%v", this.IpType) + `,`,
		`AuthKey:` + strings.Replace(fmt.Sprintf("%v", this.AuthKey), "SecretType", "schema.SecretType", 1) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`JumboMtu:` + fmt.Sprintf("%v", this.JumboMtu) + `,`,
		`EnableSitelink:` + fmt.Sprintf("%v", this.EnableSitelink) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSBYOCType_SystemGeneratedName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSBYOCType_SystemGeneratedName{`,
		`SystemGeneratedName:` + strings.Replace(fmt.Sprintf("%v", this.SystemGeneratedName), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSBYOCType_UserAssignedName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSBYOCType_UserAssignedName{`,
		`UserAssignedName:` + fmt.Sprintf("%v", this.UserAssignedName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSBYOCType_Ipv4) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSBYOCType_Ipv4{`,
		`Ipv4:` + strings.Replace(fmt.Sprintf("%v", this.Ipv4), "Ipv4Type", "Ipv4Type", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSBYOCType_Ipv6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSBYOCType_Ipv6{`,
		`Ipv6:` + strings.Replace(fmt.Sprintf("%v", this.Ipv6), "Ipv6Type", "Ipv6Type", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ipv4Type) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ipv4Type{`,
		`RouterPeerAddress:` + fmt.Sprintf("%v", this.RouterPeerAddress) + `,`,
		`AwsRouterPeerAddress:` + fmt.Sprintf("%v", this.AwsRouterPeerAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ipv6Type) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ipv6Type{`,
		`}`,
	}, "")
	return s
}
func (this *AWSF5XCManagedType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSF5XCManagedType{`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`CloudProvider:` + fmt.Sprintf("%v", this.CloudProvider) + `,`,
		`EnableConnectionToReChoice:` + fmt.Sprintf("%v", this.EnableConnectionToReChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Aws) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Aws{`,
		`Aws:` + strings.Replace(fmt.Sprintf("%v", this.Aws), "AWSType", "AWSType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Azure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Azure{`,
		`Azure:` + strings.Replace(fmt.Sprintf("%v", this.Azure), "AzureType", "AzureType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Disabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Disabled{`,
		`Disabled:` + strings.Replace(fmt.Sprintf("%v", this.Disabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Enabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Enabled{`,
		`Enabled:` + strings.Replace(fmt.Sprintf("%v", this.Enabled), "CloudLinkADNType", "views.CloudLinkADNType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`CloudProvider:` + fmt.Sprintf("%v", this.CloudProvider) + `,`,
		`EnableConnectionToReChoice:` + fmt.Sprintf("%v", this.EnableConnectionToReChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Aws) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Aws{`,
		`Aws:` + strings.Replace(fmt.Sprintf("%v", this.Aws), "AWSType", "AWSType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Azure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Azure{`,
		`Azure:` + strings.Replace(fmt.Sprintf("%v", this.Azure), "AzureType", "AzureType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Disabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Disabled{`,
		`Disabled:` + strings.Replace(fmt.Sprintf("%v", this.Disabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Enabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Enabled{`,
		`Enabled:` + strings.Replace(fmt.Sprintf("%v", this.Enabled), "CloudLinkADNType", "views.CloudLinkADNType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`CloudProvider:` + fmt.Sprintf("%v", this.CloudProvider) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`SuggestedAction:` + fmt.Sprintf("%v", this.SuggestedAction) + `,`,
		`ErrorDescription:` + fmt.Sprintf("%v", this.ErrorDescription) + `,`,
		`Sites:` + fmt.Sprintf("%v", this.Sites) + `,`,
		`EnableConnectionToReChoice:` + fmt.Sprintf("%v", this.EnableConnectionToReChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Aws) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Aws{`,
		`Aws:` + strings.Replace(fmt.Sprintf("%v", this.Aws), "AWSType", "AWSType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Azure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Azure{`,
		`Azure:` + strings.Replace(fmt.Sprintf("%v", this.Azure), "AzureType", "AzureType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Disabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Disabled{`,
		`Disabled:` + strings.Replace(fmt.Sprintf("%v", this.Disabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Enabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Enabled{`,
		`Enabled:` + strings.Replace(fmt.Sprintf("%v", this.Enabled), "CloudLinkADNType", "views.CloudLinkADNType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CloudProvider = &GlobalSpecType_Aws{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Azure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CloudProvider = &GlobalSpecType_Azure{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CloudLinkStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuggestedAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuggestedAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sites", wireType)
			}
			m.Sites = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sites |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnableConnectionToReChoice = &GlobalSpecType_Disabled{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.CloudLinkADNType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnableConnectionToReChoice = &GlobalSpecType_Enabled{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwsCred == nil {
				m.AwsCred = &views.ObjectRefType{}
			}
			if err := m.AwsCred.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Byoc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSBYOCListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CloudLinkType = &AWSType_Byoc{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5XcManaged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSF5XCManagedType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CloudLinkType = &AWSType_F5XcManaged{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auto", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectGatewayAsnChoice = &AWSType_Auto{v}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomAsn", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DirectConnectGatewayAsnChoice = &AWSType_CustomAsn{v}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSBYOCListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSBYOCListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSBYOCListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Connections = append(m.Connections, &AWSBYOCType{})
			if err := m.Connections[len(m.Connections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSBYOCType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSBYOCType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSBYOCType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemGeneratedName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ResourceNameChoice = &AWSBYOCType_SystemGeneratedName{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAssignedName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceNameChoice = &AWSBYOCType_UserAssignedName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualInterfaceType", wireType)
			}
			m.VirtualInterfaceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VirtualInterfaceType |= VirtualInterfaceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vlan", wireType)
			}
			m.Vlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vlan |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgpAsn", wireType)
			}
			m.BgpAsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BgpAsn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Ipv4Type{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpType = &AWSBYOCType_Ipv4{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Ipv6Type{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpType = &AWSBYOCType_Ipv6{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthKey == nil {
				m.AuthKey = &schema.SecretType{}
			}
			if err := m.AuthKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumboMtu", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JumboMtu = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableSitelink", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableSitelink = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ipv4Type) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ipv4Type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ipv4Type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouterPeerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouterPeerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsRouterPeerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsRouterPeerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ipv6Type) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ipv6Type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ipv6Type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSF5XCManagedType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSF5XCManagedType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSF5XCManagedType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CloudProvider = &CreateSpecType_Aws{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Azure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CloudProvider = &CreateSpecType_Azure{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnableConnectionToReChoice = &CreateSpecType_Disabled{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.CloudLinkADNType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnableConnectionToReChoice = &CreateSpecType_Enabled{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CloudProvider = &ReplaceSpecType_Aws{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Azure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CloudProvider = &ReplaceSpecType_Azure{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnableConnectionToReChoice = &ReplaceSpecType_Disabled{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.CloudLinkADNType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnableConnectionToReChoice = &ReplaceSpecType_Enabled{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CloudProvider = &GetSpecType_Aws{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Azure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CloudProvider = &GetSpecType_Azure{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CloudLinkStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuggestedAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuggestedAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sites", wireType)
			}
			m.Sites = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sites |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnableConnectionToReChoice = &GetSpecType_Disabled{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.CloudLinkADNType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnableConnectionToReChoice = &GetSpecType_Enabled{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
