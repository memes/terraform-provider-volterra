// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/dns_load_balancer/public_custom_data_api.proto

// DNS Load Balancer
//
// x-displayName: "DNS Load Balancer"
// APIs to get monitoring data for DNS Load Balancer

package dns_load_balancer

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// HealthStatus
//
// x-displayName: "Health Status"
// Enumerates Health Status of DNS LB and associated objects
type HealthStatus int32

const (
	// Unhealthy
	//
	// x-displayName: "Unhealthy"
	HEALTH_STATUS_UNHEALTHY HealthStatus = 0
	// Degraded
	//
	// x-displayName: "Degraded"
	HEALTH_STATUS_DEGRADED HealthStatus = 1
	// Healthy
	//
	// x-displayName: "Healthy"
	HEALTH_STATUS_HEALTHY HealthStatus = 2
)

var HealthStatus_name = map[int32]string{
	0: "HEALTH_STATUS_UNHEALTHY",
	1: "HEALTH_STATUS_DEGRADED",
	2: "HEALTH_STATUS_HEALTHY",
}

var HealthStatus_value = map[string]int32{
	"HEALTH_STATUS_UNHEALTHY": 0,
	"HEALTH_STATUS_DEGRADED":  1,
	"HEALTH_STATUS_HEALTHY":   2,
}

func (HealthStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fe61b9267aedb241, []int{0}
}

// DNSLBHealthStatusListRequest
//
// x-displayName: "DNS Load Balancer Health Status List Request"
// Request to get health status of all DNS Load Balancers in a namespace
type DNSLBHealthStatusListRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of DNS LB health status
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *DNSLBHealthStatusListRequest) Reset()      { *m = DNSLBHealthStatusListRequest{} }
func (*DNSLBHealthStatusListRequest) ProtoMessage() {}
func (*DNSLBHealthStatusListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe61b9267aedb241, []int{0}
}
func (m *DNSLBHealthStatusListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSLBHealthStatusListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNSLBHealthStatusListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DNSLBHealthStatusListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSLBHealthStatusListRequest.Merge(m, src)
}
func (m *DNSLBHealthStatusListRequest) XXX_Size() int {
	return m.Size()
}
func (m *DNSLBHealthStatusListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSLBHealthStatusListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DNSLBHealthStatusListRequest proto.InternalMessageInfo

func (m *DNSLBHealthStatusListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// DNSLBHealthStatusListResponse
//
// x-displayName: "DNS Load Balancer Health Status List Response"
// Response for DNS Load Balancer Health Status List Request
type DNSLBHealthStatusListResponse struct {
	// Items
	//
	// x-displayName: "Items"
	// Collection of DNS Load Balancer Health status
	Items []*DNSLBHealthStatusListResponseItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *DNSLBHealthStatusListResponse) Reset()      { *m = DNSLBHealthStatusListResponse{} }
func (*DNSLBHealthStatusListResponse) ProtoMessage() {}
func (*DNSLBHealthStatusListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe61b9267aedb241, []int{1}
}
func (m *DNSLBHealthStatusListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSLBHealthStatusListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNSLBHealthStatusListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DNSLBHealthStatusListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSLBHealthStatusListResponse.Merge(m, src)
}
func (m *DNSLBHealthStatusListResponse) XXX_Size() int {
	return m.Size()
}
func (m *DNSLBHealthStatusListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSLBHealthStatusListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DNSLBHealthStatusListResponse proto.InternalMessageInfo

func (m *DNSLBHealthStatusListResponse) GetItems() []*DNSLBHealthStatusListResponseItem {
	if m != nil {
		return m.Items
	}
	return nil
}

// DNSLBHealthStatusRequest
//
// x-displayName: "DNS Load Balancer Health Status Request"
// Request to get health status of a DNS Load Balancer
type DNSLBHealthStatusRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace in which the DNS Load Balancer is present
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "dns_lb1"
	// Name of the DNS Load Balancer
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DNSLBHealthStatusRequest) Reset()      { *m = DNSLBHealthStatusRequest{} }
func (*DNSLBHealthStatusRequest) ProtoMessage() {}
func (*DNSLBHealthStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe61b9267aedb241, []int{2}
}
func (m *DNSLBHealthStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSLBHealthStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNSLBHealthStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DNSLBHealthStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSLBHealthStatusRequest.Merge(m, src)
}
func (m *DNSLBHealthStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *DNSLBHealthStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSLBHealthStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DNSLBHealthStatusRequest proto.InternalMessageInfo

func (m *DNSLBHealthStatusRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DNSLBHealthStatusRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// DNSLBHealthStatusResponse
//
// x-displayName: "DNS Load Balancer Health Status Response"
// Response for DNS Load Balancer Health Status Request
type DNSLBHealthStatusResponse struct {
	// Status
	//
	// x-displayName: "Status"
	// Health Status of DNS Load Balancer
	Status []*schema.MetricValue `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty"`
	// DNS Load Balancer Pool Items
	//
	// x-displayName: "DNS Load Balancer Pool Items"
	// Collection of DNS Load Balancer Pools
	DnsLbPoolItems []*DNSLBPoolHealthStatusListResponseItem `protobuf:"bytes,2,rep,name=dns_lb_pool_items,json=dnsLbPoolItems,proto3" json:"dns_lb_pool_items,omitempty"`
}

func (m *DNSLBHealthStatusResponse) Reset()      { *m = DNSLBHealthStatusResponse{} }
func (*DNSLBHealthStatusResponse) ProtoMessage() {}
func (*DNSLBHealthStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe61b9267aedb241, []int{3}
}
func (m *DNSLBHealthStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSLBHealthStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNSLBHealthStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DNSLBHealthStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSLBHealthStatusResponse.Merge(m, src)
}
func (m *DNSLBHealthStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *DNSLBHealthStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSLBHealthStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DNSLBHealthStatusResponse proto.InternalMessageInfo

func (m *DNSLBHealthStatusResponse) GetStatus() []*schema.MetricValue {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DNSLBHealthStatusResponse) GetDnsLbPoolItems() []*DNSLBPoolHealthStatusListResponseItem {
	if m != nil {
		return m.DnsLbPoolItems
	}
	return nil
}

// DNSLBPoolHealthStatusRequest
//
// x-displayName: "DNS Load Balancer Pool Health Status Request"
// Request to get health status of a DNS Load Balancer Pool
type DNSLBPoolHealthStatusRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace in which the DNS Load Balancer Pool is present
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// DNS Load Balancer Name
	//
	// x-displayName: "DNS Load Balancer Name"
	// x-example: "dns_lb1"
	// Name of the DNS Load Balancer
	DnsLbName string `protobuf:"bytes,2,opt,name=dns_lb_name,json=dnsLbName,proto3" json:"dns_lb_name,omitempty"`
	// DNS Load Balancer Pool Name
	//
	// x-displayName: "DNS Load Balancer Pool Name"
	// x-example: "dns_lb_pool1"
	// Name of the DNS Load Balancer Pool
	DnsLbPoolName string `protobuf:"bytes,3,opt,name=dns_lb_pool_name,json=dnsLbPoolName,proto3" json:"dns_lb_pool_name,omitempty"`
}

func (m *DNSLBPoolHealthStatusRequest) Reset()      { *m = DNSLBPoolHealthStatusRequest{} }
func (*DNSLBPoolHealthStatusRequest) ProtoMessage() {}
func (*DNSLBPoolHealthStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe61b9267aedb241, []int{4}
}
func (m *DNSLBPoolHealthStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSLBPoolHealthStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNSLBPoolHealthStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DNSLBPoolHealthStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSLBPoolHealthStatusRequest.Merge(m, src)
}
func (m *DNSLBPoolHealthStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *DNSLBPoolHealthStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSLBPoolHealthStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DNSLBPoolHealthStatusRequest proto.InternalMessageInfo

func (m *DNSLBPoolHealthStatusRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DNSLBPoolHealthStatusRequest) GetDnsLbName() string {
	if m != nil {
		return m.DnsLbName
	}
	return ""
}

func (m *DNSLBPoolHealthStatusRequest) GetDnsLbPoolName() string {
	if m != nil {
		return m.DnsLbPoolName
	}
	return ""
}

// DNSLBPoolHealthStatusResponse
//
// x-displayName: "DNS Load Balancer Pool Health Status Response"
// Response for DNS Load Balancer Pool Health Status Request
type DNSLBPoolHealthStatusResponse struct {
	// Status
	//
	// x-displayName: "Status"
	// Health Status of DNS Load Balancer Pool
	Status []*schema.MetricValue `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty"`
	// DNS Load Balancer Pool Members
	//
	// x-displayName: "DNS Load Balancer Pool Member Items"
	// Collection of DNS Load Balancer Pool Members
	DnsLbPoolMemberItems []*DNSLBPoolMemberHealthStatusListResponseItem `protobuf:"bytes,2,rep,name=dns_lb_pool_member_items,json=dnsLbPoolMemberItems,proto3" json:"dns_lb_pool_member_items,omitempty"`
}

func (m *DNSLBPoolHealthStatusResponse) Reset()      { *m = DNSLBPoolHealthStatusResponse{} }
func (*DNSLBPoolHealthStatusResponse) ProtoMessage() {}
func (*DNSLBPoolHealthStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe61b9267aedb241, []int{5}
}
func (m *DNSLBPoolHealthStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSLBPoolHealthStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNSLBPoolHealthStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DNSLBPoolHealthStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSLBPoolHealthStatusResponse.Merge(m, src)
}
func (m *DNSLBPoolHealthStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *DNSLBPoolHealthStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSLBPoolHealthStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DNSLBPoolHealthStatusResponse proto.InternalMessageInfo

func (m *DNSLBPoolHealthStatusResponse) GetStatus() []*schema.MetricValue {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DNSLBPoolHealthStatusResponse) GetDnsLbPoolMemberItems() []*DNSLBPoolMemberHealthStatusListResponseItem {
	if m != nil {
		return m.DnsLbPoolMemberItems
	}
	return nil
}

// DNSLBHealthStatusListResponseItem
//
// x-displayName: "DNS Load Balancer Health Status List Item"
// Individual item in a collection of DNS Load Balancer
type DNSLBHealthStatusListResponseItem struct {
	// Name
	//
	// x-displayName: "Name"
	// x-example: "dns_lb1"
	// Name of the DNS Load Balancer
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Status
	//
	// x-displayName: "Status"
	// Health Status of DNS Load Balancer
	Status []*schema.MetricValue `protobuf:"bytes,2,rep,name=status,proto3" json:"status,omitempty"`
	// DNS Load Balancer Pools Status Summary
	//
	// x-displayName: "DNS Load Balancer Pools Status Summary"
	// Summary of DNS Load Balancer Pools by Health Status
	DnsLbPoolsStatusSummary []*HealthStatusSummary `protobuf:"bytes,3,rep,name=dns_lb_pools_status_summary,json=dnsLbPoolsStatusSummary,proto3" json:"dns_lb_pools_status_summary,omitempty"`
}

func (m *DNSLBHealthStatusListResponseItem) Reset()      { *m = DNSLBHealthStatusListResponseItem{} }
func (*DNSLBHealthStatusListResponseItem) ProtoMessage() {}
func (*DNSLBHealthStatusListResponseItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe61b9267aedb241, []int{6}
}
func (m *DNSLBHealthStatusListResponseItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSLBHealthStatusListResponseItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNSLBHealthStatusListResponseItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DNSLBHealthStatusListResponseItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSLBHealthStatusListResponseItem.Merge(m, src)
}
func (m *DNSLBHealthStatusListResponseItem) XXX_Size() int {
	return m.Size()
}
func (m *DNSLBHealthStatusListResponseItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSLBHealthStatusListResponseItem.DiscardUnknown(m)
}

var xxx_messageInfo_DNSLBHealthStatusListResponseItem proto.InternalMessageInfo

func (m *DNSLBHealthStatusListResponseItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSLBHealthStatusListResponseItem) GetStatus() []*schema.MetricValue {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DNSLBHealthStatusListResponseItem) GetDnsLbPoolsStatusSummary() []*HealthStatusSummary {
	if m != nil {
		return m.DnsLbPoolsStatusSummary
	}
	return nil
}

// DNSLBPoolHealthStatusListResponseItem
//
// x-displayName: "DNS Load Balancer Pool Health Status List Item"
// Individual item in a collection of DNS Load Balancer Pool
type DNSLBPoolHealthStatusListResponseItem struct {
	// Name
	//
	// x-displayName: "Name"
	// x-example: "dns_lb_pool1"
	// Name of the DNS Load Balancer Pool
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Status
	//
	// x-displayName: "Status"
	// Health Status of DNS Load Balancer Pool
	Status []*schema.MetricValue `protobuf:"bytes,2,rep,name=status,proto3" json:"status,omitempty"`
	// DNS Load Balancer Pool Members Status Summary
	//
	// x-displayName: "DNS Load Balancer Pool Members Status Summary"
	// Summary of DNS Load Balancer Pool Members by Health Status
	DnsLbPoolMembersStatusSummary []*HealthStatusSummary `protobuf:"bytes,3,rep,name=dns_lb_pool_members_status_summary,json=dnsLbPoolMembersStatusSummary,proto3" json:"dns_lb_pool_members_status_summary,omitempty"`
}

func (m *DNSLBPoolHealthStatusListResponseItem) Reset()      { *m = DNSLBPoolHealthStatusListResponseItem{} }
func (*DNSLBPoolHealthStatusListResponseItem) ProtoMessage() {}
func (*DNSLBPoolHealthStatusListResponseItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe61b9267aedb241, []int{7}
}
func (m *DNSLBPoolHealthStatusListResponseItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSLBPoolHealthStatusListResponseItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNSLBPoolHealthStatusListResponseItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DNSLBPoolHealthStatusListResponseItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSLBPoolHealthStatusListResponseItem.Merge(m, src)
}
func (m *DNSLBPoolHealthStatusListResponseItem) XXX_Size() int {
	return m.Size()
}
func (m *DNSLBPoolHealthStatusListResponseItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSLBPoolHealthStatusListResponseItem.DiscardUnknown(m)
}

var xxx_messageInfo_DNSLBPoolHealthStatusListResponseItem proto.InternalMessageInfo

func (m *DNSLBPoolHealthStatusListResponseItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSLBPoolHealthStatusListResponseItem) GetStatus() []*schema.MetricValue {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DNSLBPoolHealthStatusListResponseItem) GetDnsLbPoolMembersStatusSummary() []*HealthStatusSummary {
	if m != nil {
		return m.DnsLbPoolMembersStatusSummary
	}
	return nil
}

// DNSLBPoolMemberHealthStatusListResponseItem
//
// x-displayName: "DNS Load Balancer Pool Member Health Status List Item"
// Individual item in a collection of DNS Load Balancer Pool Member
type DNSLBPoolMemberHealthStatusListResponseItem struct {
	// Name
	//
	// x-displayName: "Name"
	// x-example: "dns_lb_pool_member1"
	// Name of the DNS Load Balancer Pool Member
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Health Check Type
	//
	// x-displayName: "Health Check Type"
	// x-example: "HTTP"
	// Health Check Type associated with the Pool Member
	HealthCheckType string `protobuf:"bytes,2,opt,name=health_check_type,json=healthCheckType,proto3" json:"health_check_type,omitempty"`
	// Status
	//
	// x-displayName: "Status"
	// Health Status of DNS Load Balancer Pool Member
	Status []*schema.MetricValue `protobuf:"bytes,3,rep,name=status,proto3" json:"status,omitempty"`
}

func (m *DNSLBPoolMemberHealthStatusListResponseItem) Reset() {
	*m = DNSLBPoolMemberHealthStatusListResponseItem{}
}
func (*DNSLBPoolMemberHealthStatusListResponseItem) ProtoMessage() {}
func (*DNSLBPoolMemberHealthStatusListResponseItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe61b9267aedb241, []int{8}
}
func (m *DNSLBPoolMemberHealthStatusListResponseItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSLBPoolMemberHealthStatusListResponseItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNSLBPoolMemberHealthStatusListResponseItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DNSLBPoolMemberHealthStatusListResponseItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSLBPoolMemberHealthStatusListResponseItem.Merge(m, src)
}
func (m *DNSLBPoolMemberHealthStatusListResponseItem) XXX_Size() int {
	return m.Size()
}
func (m *DNSLBPoolMemberHealthStatusListResponseItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSLBPoolMemberHealthStatusListResponseItem.DiscardUnknown(m)
}

var xxx_messageInfo_DNSLBPoolMemberHealthStatusListResponseItem proto.InternalMessageInfo

func (m *DNSLBPoolMemberHealthStatusListResponseItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSLBPoolMemberHealthStatusListResponseItem) GetHealthCheckType() string {
	if m != nil {
		return m.HealthCheckType
	}
	return ""
}

func (m *DNSLBPoolMemberHealthStatusListResponseItem) GetStatus() []*schema.MetricValue {
	if m != nil {
		return m.Status
	}
	return nil
}

// HealthStatusSummary
//
// x-displayName: "Health Status Summary"
// Health Status Summary
type HealthStatusSummary struct {
	// Status
	//
	// x-displayName: "Status"
	// Health Status
	Status HealthStatus `protobuf:"varint,1,opt,name=status,proto3,enum=ves.io.schema.dns_load_balancer.HealthStatus" json:"status,omitempty"`
	// Count
	//
	// x-displayName: "Count"
	// Number of objects
	Count []*schema.MetricValue `protobuf:"bytes,2,rep,name=count,proto3" json:"count,omitempty"`
}

func (m *HealthStatusSummary) Reset()      { *m = HealthStatusSummary{} }
func (*HealthStatusSummary) ProtoMessage() {}
func (*HealthStatusSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe61b9267aedb241, []int{9}
}
func (m *HealthStatusSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthStatusSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthStatusSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthStatusSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthStatusSummary.Merge(m, src)
}
func (m *HealthStatusSummary) XXX_Size() int {
	return m.Size()
}
func (m *HealthStatusSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthStatusSummary.DiscardUnknown(m)
}

var xxx_messageInfo_HealthStatusSummary proto.InternalMessageInfo

func (m *HealthStatusSummary) GetStatus() HealthStatus {
	if m != nil {
		return m.Status
	}
	return HEALTH_STATUS_UNHEALTHY
}

func (m *HealthStatusSummary) GetCount() []*schema.MetricValue {
	if m != nil {
		return m.Count
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.dns_load_balancer.HealthStatus", HealthStatus_name, HealthStatus_value)
	golang_proto.RegisterEnum("ves.io.schema.dns_load_balancer.HealthStatus", HealthStatus_name, HealthStatus_value)
	proto.RegisterType((*DNSLBHealthStatusListRequest)(nil), "ves.io.schema.dns_load_balancer.DNSLBHealthStatusListRequest")
	golang_proto.RegisterType((*DNSLBHealthStatusListRequest)(nil), "ves.io.schema.dns_load_balancer.DNSLBHealthStatusListRequest")
	proto.RegisterType((*DNSLBHealthStatusListResponse)(nil), "ves.io.schema.dns_load_balancer.DNSLBHealthStatusListResponse")
	golang_proto.RegisterType((*DNSLBHealthStatusListResponse)(nil), "ves.io.schema.dns_load_balancer.DNSLBHealthStatusListResponse")
	proto.RegisterType((*DNSLBHealthStatusRequest)(nil), "ves.io.schema.dns_load_balancer.DNSLBHealthStatusRequest")
	golang_proto.RegisterType((*DNSLBHealthStatusRequest)(nil), "ves.io.schema.dns_load_balancer.DNSLBHealthStatusRequest")
	proto.RegisterType((*DNSLBHealthStatusResponse)(nil), "ves.io.schema.dns_load_balancer.DNSLBHealthStatusResponse")
	golang_proto.RegisterType((*DNSLBHealthStatusResponse)(nil), "ves.io.schema.dns_load_balancer.DNSLBHealthStatusResponse")
	proto.RegisterType((*DNSLBPoolHealthStatusRequest)(nil), "ves.io.schema.dns_load_balancer.DNSLBPoolHealthStatusRequest")
	golang_proto.RegisterType((*DNSLBPoolHealthStatusRequest)(nil), "ves.io.schema.dns_load_balancer.DNSLBPoolHealthStatusRequest")
	proto.RegisterType((*DNSLBPoolHealthStatusResponse)(nil), "ves.io.schema.dns_load_balancer.DNSLBPoolHealthStatusResponse")
	golang_proto.RegisterType((*DNSLBPoolHealthStatusResponse)(nil), "ves.io.schema.dns_load_balancer.DNSLBPoolHealthStatusResponse")
	proto.RegisterType((*DNSLBHealthStatusListResponseItem)(nil), "ves.io.schema.dns_load_balancer.DNSLBHealthStatusListResponseItem")
	golang_proto.RegisterType((*DNSLBHealthStatusListResponseItem)(nil), "ves.io.schema.dns_load_balancer.DNSLBHealthStatusListResponseItem")
	proto.RegisterType((*DNSLBPoolHealthStatusListResponseItem)(nil), "ves.io.schema.dns_load_balancer.DNSLBPoolHealthStatusListResponseItem")
	golang_proto.RegisterType((*DNSLBPoolHealthStatusListResponseItem)(nil), "ves.io.schema.dns_load_balancer.DNSLBPoolHealthStatusListResponseItem")
	proto.RegisterType((*DNSLBPoolMemberHealthStatusListResponseItem)(nil), "ves.io.schema.dns_load_balancer.DNSLBPoolMemberHealthStatusListResponseItem")
	golang_proto.RegisterType((*DNSLBPoolMemberHealthStatusListResponseItem)(nil), "ves.io.schema.dns_load_balancer.DNSLBPoolMemberHealthStatusListResponseItem")
	proto.RegisterType((*HealthStatusSummary)(nil), "ves.io.schema.dns_load_balancer.HealthStatusSummary")
	golang_proto.RegisterType((*HealthStatusSummary)(nil), "ves.io.schema.dns_load_balancer.HealthStatusSummary")
}

func init() {
	proto.RegisterFile("ves.io/schema/dns_load_balancer/public_custom_data_api.proto", fileDescriptor_fe61b9267aedb241)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/dns_load_balancer/public_custom_data_api.proto", fileDescriptor_fe61b9267aedb241)
}

var fileDescriptor_fe61b9267aedb241 = []byte{
	// 946 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4d, 0x6c, 0xdc, 0x44,
	0x14, 0xde, 0xf1, 0xd2, 0x48, 0x99, 0xd2, 0x92, 0x0c, 0x94, 0x3a, 0x9b, 0xd4, 0x14, 0x4b, 0x40,
	0x54, 0xb4, 0x36, 0x0a, 0xbd, 0x80, 0x0a, 0x68, 0xd3, 0x4d, 0x49, 0xa4, 0x6d, 0xa8, 0x76, 0x13,
	0x04, 0x5c, 0xac, 0xb1, 0x77, 0xe2, 0x35, 0xb5, 0x3d, 0xae, 0x67, 0xbc, 0x22, 0x42, 0x15, 0x50,
	0xc1, 0x15, 0x90, 0x38, 0x70, 0xe6, 0xc6, 0x91, 0x23, 0x52, 0x2f, 0x15, 0x17, 0x7a, 0x42, 0x11,
	0x5c, 0x2a, 0x2e, 0x10, 0x87, 0x03, 0xc7, 0xdc, 0xe1, 0x50, 0xed, 0xd8, 0xeb, 0xda, 0xbb, 0xf9,
	0xf1, 0xa6, 0xbd, 0xcd, 0xcc, 0xf7, 0xbe, 0xf1, 0xfb, 0xbe, 0x79, 0x9e, 0x37, 0xf0, 0x4a, 0x9f,
	0x30, 0xcd, 0xa1, 0x3a, 0xb3, 0x7a, 0xc4, 0xc3, 0x7a, 0xd7, 0x67, 0x86, 0x4b, 0x71, 0xd7, 0x30,
	0xb1, 0x8b, 0x7d, 0x8b, 0x84, 0x7a, 0x10, 0x99, 0xae, 0x63, 0x19, 0x56, 0xc4, 0x38, 0xf5, 0x8c,
	0x2e, 0xe6, 0xd8, 0xc0, 0x81, 0xa3, 0x05, 0x21, 0xe5, 0x14, 0xbd, 0x90, 0xb0, 0xb5, 0x84, 0xad,
	0x8d, 0xb1, 0x6b, 0x75, 0xdb, 0xe1, 0xbd, 0xc8, 0xd4, 0x2c, 0xea, 0xe9, 0x36, 0xb5, 0xa9, 0x2e,
	0x78, 0x66, 0xb4, 0x25, 0x66, 0x62, 0x22, 0x46, 0xc9, 0x7e, 0xb5, 0x05, 0x9b, 0x52, 0xdb, 0x25,
	0x3a, 0x0e, 0x1c, 0x1d, 0xfb, 0x3e, 0xe5, 0x98, 0x3b, 0xd4, 0x67, 0x29, 0x3a, 0x5f, 0xcc, 0x95,
	0x06, 0x79, 0x70, 0xae, 0x08, 0xf2, 0xed, 0x80, 0x0c, 0x21, 0xb5, 0x08, 0xf5, 0x09, 0x23, 0x7e,
	0xbf, 0x48, 0x57, 0xaf, 0xc0, 0x85, 0xe6, 0x7a, 0xa7, 0xb5, 0xbc, 0x4a, 0xb0, 0xcb, 0x7b, 0x1d,
	0x8e, 0x79, 0xc4, 0x5a, 0x0e, 0xe3, 0x6d, 0x72, 0x2b, 0x22, 0x8c, 0xa3, 0x05, 0x38, 0xed, 0x63,
	0x8f, 0xb0, 0x00, 0x5b, 0x44, 0x06, 0x17, 0xc1, 0xe2, 0x74, 0xfb, 0xd1, 0x82, 0xba, 0x0d, 0x2f,
	0x1c, 0xc2, 0x66, 0x01, 0xf5, 0x19, 0x41, 0x1f, 0xc0, 0x53, 0x0e, 0x27, 0x1e, 0x93, 0xc1, 0xc5,
	0xea, 0xe2, 0xe9, 0xa5, 0x65, 0xed, 0x18, 0xe3, 0xb4, 0x23, 0xb7, 0x5b, 0xe3, 0xc4, 0x6b, 0x27,
	0x1b, 0xaa, 0x2d, 0x28, 0x8f, 0xc5, 0x96, 0x4a, 0x1a, 0x21, 0xf8, 0xd4, 0x60, 0x22, 0x4b, 0x02,
	0x10, 0x63, 0xf5, 0x17, 0x00, 0xe7, 0x0e, 0xd8, 0x2e, 0x55, 0xb1, 0x04, 0xa7, 0x98, 0x58, 0x49,
	0x65, 0xd4, 0x46, 0x64, 0x5c, 0x27, 0x3c, 0x74, 0xac, 0xf7, 0xb1, 0x1b, 0x91, 0x76, 0x1a, 0x89,
	0x6e, 0xc1, 0x59, 0xa1, 0xce, 0x34, 0x02, 0x4a, 0x5d, 0x23, 0x71, 0x41, 0x12, 0xf4, 0x6b, 0xe5,
	0x5c, 0xb8, 0x41, 0xa9, 0x7b, 0xa4, 0x13, 0x67, 0xbb, 0x3e, 0x6b, 0x99, 0x83, 0xb0, 0x35, 0x61,
	0xc9, 0x57, 0x20, 0x3d, 0xcc, 0x51, 0x66, 0x39, 0x5f, 0x14, 0x78, 0x3a, 0xcd, 0x38, 0x67, 0xcf,
	0xb4, 0xf8, 0xc6, 0x3a, 0xf6, 0x08, 0x7a, 0x05, 0xce, 0xe4, 0x15, 0x89, 0xa0, 0xaa, 0x08, 0x3a,
	0x93, 0x25, 0x32, 0x08, 0x54, 0xff, 0x04, 0x69, 0x59, 0x8c, 0xe7, 0xf1, 0x18, 0x86, 0x7e, 0x09,
	0xa0, 0x9c, 0xff, 0xbe, 0x47, 0x3c, 0x93, 0x84, 0x05, 0x63, 0x5b, 0xe5, 0x8d, 0xbd, 0x2e, 0xd8,
	0x47, 0xda, 0xfb, 0x5c, 0xa6, 0x2a, 0x09, 0x4e, 0x4c, 0xfe, 0x0b, 0xc0, 0x17, 0x8f, 0x2d, 0xd2,
	0xac, 0xc6, 0xc0, 0xa3, 0x1a, 0xcb, 0x89, 0x96, 0x4a, 0x8b, 0x0e, 0xe1, 0x7c, 0x4e, 0x33, 0x33,
	0x92, 0x65, 0x83, 0x45, 0x9e, 0x87, 0xc3, 0x6d, 0xb9, 0x2a, 0x36, 0xba, 0x7c, 0xac, 0xec, 0x7c,
	0xae, 0x9d, 0x84, 0xdb, 0x3e, 0x9f, 0xc9, 0x63, 0x05, 0x40, 0xdd, 0x07, 0xf0, 0xa5, 0x52, 0x05,
	0xf8, 0xc4, 0x54, 0x7e, 0x06, 0xd5, 0xf1, 0x93, 0x7d, 0xa2, 0x62, 0x2f, 0x8c, 0x9c, 0xe5, 0x88,
	0xe4, 0x1f, 0x00, 0x7c, 0x75, 0x82, 0xd2, 0x38, 0x50, 0xf8, 0x25, 0x38, 0xdb, 0x13, 0x1c, 0xc3,
	0xea, 0x11, 0xeb, 0xa6, 0x31, 0xb8, 0x89, 0xd3, 0x9f, 0xe8, 0x99, 0x04, 0xb8, 0x3a, 0x58, 0xdf,
	0xd8, 0x0e, 0xf2, 0x26, 0x55, 0xcb, 0x9a, 0xa4, 0x7e, 0x0d, 0xe0, 0xb3, 0x07, 0x48, 0x43, 0x2b,
	0xb9, 0x7f, 0x09, 0x2c, 0x9e, 0x5d, 0xaa, 0x4f, 0x64, 0x50, 0x76, 0x06, 0xaf, 0xc1, 0x53, 0x16,
	0x8d, 0x7c, 0x5e, 0xe2, 0xd8, 0x92, 0xc0, 0x4b, 0x26, 0x7c, 0x3a, 0xbf, 0x13, 0x9a, 0x87, 0xe7,
	0x57, 0x57, 0x1a, 0xad, 0x8d, 0x55, 0xa3, 0xb3, 0xd1, 0xd8, 0xd8, 0xec, 0x18, 0x9b, 0xeb, 0xc9,
	0xfc, 0xc3, 0x99, 0x0a, 0xaa, 0xc1, 0xe7, 0x8b, 0x60, 0x73, 0xe5, 0xdd, 0x76, 0xa3, 0xb9, 0xd2,
	0x9c, 0x01, 0x68, 0x0e, 0x9e, 0x2b, 0x62, 0x43, 0x9a, 0xb4, 0xf4, 0xdf, 0x14, 0x3c, 0x73, 0x55,
	0xb4, 0xe0, 0x26, 0xe6, 0xb8, 0x71, 0x63, 0x0d, 0x7d, 0x21, 0xc1, 0x73, 0x07, 0xfe, 0x7f, 0xe8,
	0xad, 0x93, 0x36, 0x17, 0x71, 0x39, 0xd6, 0xde, 0x7e, 0xbc, 0xde, 0xa4, 0x3a, 0xf7, 0x7f, 0x96,
	0x40, 0xfc, 0xab, 0x5c, 0xeb, 0x13, 0x56, 0x77, 0x68, 0xdd, 0xf1, 0xb7, 0x42, 0xcc, 0x78, 0x18,
	0x59, 0x3c, 0x0a, 0x49, 0x3d, 0x24, 0xb8, 0x7b, 0xe7, 0x8f, 0x7f, 0xbe, 0x93, 0x1a, 0xe8, 0x9d,
	0xf4, 0x71, 0xa1, 0x67, 0x77, 0x2f, 0xd3, 0x3f, 0xcd, 0xc6, 0xb7, 0xc7, 0x1f, 0x23, 0x4c, 0x4f,
	0x2b, 0x2b, 0x3d, 0xab, 0xff, 0x01, 0x9c, 0x1d, 0x4b, 0x06, 0xbd, 0x31, 0xb9, 0x80, 0xa1, 0xf6,
	0x37, 0x4f, 0x42, 0x4d, 0x75, 0x07, 0x25, 0x75, 0xaf, 0xa2, 0x6b, 0x93, 0xeb, 0x16, 0xf0, 0xed,
	0x11, 0xf9, 0x3f, 0x0d, 0x4b, 0x60, 0xf4, 0x82, 0x2a, 0x5b, 0x02, 0x87, 0xf4, 0xc7, 0xb2, 0x25,
	0x70, 0x58, 0x5b, 0x53, 0xbf, 0x07, 0x25, 0xbd, 0xa0, 0xc8, 0x3b, 0x81, 0x17, 0xb9, 0xee, 0x9c,
	0x06, 0xa4, 0x6d, 0x21, 0x83, 0xb2, 0xc6, 0x3c, 0x62, 0x59, 0xed, 0xf2, 0xbd, 0xbb, 0xa0, 0xfa,
	0xfb, 0x5d, 0xf0, 0xf2, 0x71, 0x02, 0xdf, 0x33, 0x3f, 0x26, 0x16, 0xbf, 0xf3, 0x9b, 0x2c, 0xc9,
	0x60, 0xf9, 0x1b, 0xb0, 0xb3, 0xab, 0x54, 0x1e, 0xec, 0x2a, 0x95, 0xfd, 0x5d, 0x05, 0x7c, 0x1e,
	0x2b, 0xe0, 0xc7, 0x58, 0x01, 0xf7, 0x63, 0x05, 0xec, 0xc4, 0x0a, 0xf8, 0x3b, 0x56, 0xc0, 0xbf,
	0xb1, 0x52, 0xd9, 0x8f, 0x15, 0xf0, 0xed, 0x9e, 0x52, 0xb9, 0xb7, 0xa7, 0x80, 0x9d, 0x3d, 0xa5,
	0xf2, 0x60, 0x4f, 0xa9, 0x7c, 0xb4, 0x69, 0xd3, 0xe0, 0xa6, 0xad, 0xf5, 0xa9, 0xcb, 0x49, 0x18,
	0x62, 0x2d, 0x62, 0xba, 0x18, 0x6c, 0xd1, 0xd0, 0xab, 0x07, 0x21, 0xed, 0x3b, 0x5d, 0x12, 0xd6,
	0x87, 0xb0, 0x1e, 0x98, 0x36, 0xd5, 0xc9, 0x27, 0x3c, 0x7d, 0xaa, 0x1e, 0xf6, 0x2a, 0x37, 0xa7,
	0xc4, 0xab, 0xf5, 0xf5, 0x87, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x8d, 0x67, 0xff, 0xbf, 0x0b,
	0x00, 0x00,
}

func (x HealthStatus) String() string {
	s, ok := HealthStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *DNSLBHealthStatusListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSLBHealthStatusListRequest)
	if !ok {
		that2, ok := that.(DNSLBHealthStatusListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *DNSLBHealthStatusListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSLBHealthStatusListResponse)
	if !ok {
		that2, ok := that.(DNSLBHealthStatusListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *DNSLBHealthStatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSLBHealthStatusRequest)
	if !ok {
		that2, ok := that.(DNSLBHealthStatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *DNSLBHealthStatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSLBHealthStatusResponse)
	if !ok {
		that2, ok := that.(DNSLBHealthStatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Status) != len(that1.Status) {
		return false
	}
	for i := range this.Status {
		if !this.Status[i].Equal(that1.Status[i]) {
			return false
		}
	}
	if len(this.DnsLbPoolItems) != len(that1.DnsLbPoolItems) {
		return false
	}
	for i := range this.DnsLbPoolItems {
		if !this.DnsLbPoolItems[i].Equal(that1.DnsLbPoolItems[i]) {
			return false
		}
	}
	return true
}
func (this *DNSLBPoolHealthStatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSLBPoolHealthStatusRequest)
	if !ok {
		that2, ok := that.(DNSLBPoolHealthStatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.DnsLbName != that1.DnsLbName {
		return false
	}
	if this.DnsLbPoolName != that1.DnsLbPoolName {
		return false
	}
	return true
}
func (this *DNSLBPoolHealthStatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSLBPoolHealthStatusResponse)
	if !ok {
		that2, ok := that.(DNSLBPoolHealthStatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Status) != len(that1.Status) {
		return false
	}
	for i := range this.Status {
		if !this.Status[i].Equal(that1.Status[i]) {
			return false
		}
	}
	if len(this.DnsLbPoolMemberItems) != len(that1.DnsLbPoolMemberItems) {
		return false
	}
	for i := range this.DnsLbPoolMemberItems {
		if !this.DnsLbPoolMemberItems[i].Equal(that1.DnsLbPoolMemberItems[i]) {
			return false
		}
	}
	return true
}
func (this *DNSLBHealthStatusListResponseItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSLBHealthStatusListResponseItem)
	if !ok {
		that2, ok := that.(DNSLBHealthStatusListResponseItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Status) != len(that1.Status) {
		return false
	}
	for i := range this.Status {
		if !this.Status[i].Equal(that1.Status[i]) {
			return false
		}
	}
	if len(this.DnsLbPoolsStatusSummary) != len(that1.DnsLbPoolsStatusSummary) {
		return false
	}
	for i := range this.DnsLbPoolsStatusSummary {
		if !this.DnsLbPoolsStatusSummary[i].Equal(that1.DnsLbPoolsStatusSummary[i]) {
			return false
		}
	}
	return true
}
func (this *DNSLBPoolHealthStatusListResponseItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSLBPoolHealthStatusListResponseItem)
	if !ok {
		that2, ok := that.(DNSLBPoolHealthStatusListResponseItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Status) != len(that1.Status) {
		return false
	}
	for i := range this.Status {
		if !this.Status[i].Equal(that1.Status[i]) {
			return false
		}
	}
	if len(this.DnsLbPoolMembersStatusSummary) != len(that1.DnsLbPoolMembersStatusSummary) {
		return false
	}
	for i := range this.DnsLbPoolMembersStatusSummary {
		if !this.DnsLbPoolMembersStatusSummary[i].Equal(that1.DnsLbPoolMembersStatusSummary[i]) {
			return false
		}
	}
	return true
}
func (this *DNSLBPoolMemberHealthStatusListResponseItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSLBPoolMemberHealthStatusListResponseItem)
	if !ok {
		that2, ok := that.(DNSLBPoolMemberHealthStatusListResponseItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.HealthCheckType != that1.HealthCheckType {
		return false
	}
	if len(this.Status) != len(that1.Status) {
		return false
	}
	for i := range this.Status {
		if !this.Status[i].Equal(that1.Status[i]) {
			return false
		}
	}
	return true
}
func (this *HealthStatusSummary) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthStatusSummary)
	if !ok {
		that2, ok := that.(HealthStatusSummary)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Count) != len(that1.Count) {
		return false
	}
	for i := range this.Count {
		if !this.Count[i].Equal(that1.Count[i]) {
			return false
		}
	}
	return true
}
func (this *DNSLBHealthStatusListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dns_load_balancer.DNSLBHealthStatusListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSLBHealthStatusListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dns_load_balancer.DNSLBHealthStatusListResponse{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSLBHealthStatusRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_load_balancer.DNSLBHealthStatusRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSLBHealthStatusResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_load_balancer.DNSLBHealthStatusResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.DnsLbPoolItems != nil {
		s = append(s, "DnsLbPoolItems: "+fmt.Sprintf("%#v", this.DnsLbPoolItems)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSLBPoolHealthStatusRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dns_load_balancer.DNSLBPoolHealthStatusRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "DnsLbName: "+fmt.Sprintf("%#v", this.DnsLbName)+",\n")
	s = append(s, "DnsLbPoolName: "+fmt.Sprintf("%#v", this.DnsLbPoolName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSLBPoolHealthStatusResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_load_balancer.DNSLBPoolHealthStatusResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.DnsLbPoolMemberItems != nil {
		s = append(s, "DnsLbPoolMemberItems: "+fmt.Sprintf("%#v", this.DnsLbPoolMemberItems)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSLBHealthStatusListResponseItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dns_load_balancer.DNSLBHealthStatusListResponseItem{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.DnsLbPoolsStatusSummary != nil {
		s = append(s, "DnsLbPoolsStatusSummary: "+fmt.Sprintf("%#v", this.DnsLbPoolsStatusSummary)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSLBPoolHealthStatusListResponseItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dns_load_balancer.DNSLBPoolHealthStatusListResponseItem{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.DnsLbPoolMembersStatusSummary != nil {
		s = append(s, "DnsLbPoolMembersStatusSummary: "+fmt.Sprintf("%#v", this.DnsLbPoolMembersStatusSummary)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSLBPoolMemberHealthStatusListResponseItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dns_load_balancer.DNSLBPoolMemberHealthStatusListResponseItem{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "HealthCheckType: "+fmt.Sprintf("%#v", this.HealthCheckType)+",\n")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HealthStatusSummary) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_load_balancer.HealthStatusSummary{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.Count != nil {
		s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomDataApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomDataAPIClient is the client API for CustomDataAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomDataAPIClient interface {
	// DNS Load Balancer Health Status List
	//
	// x-displayName: "DNS Load Balancer Health Status List"
	// Get Health Status of all DNS Load Balancers in a namespace
	DNSLBHealthStatusList(ctx context.Context, in *DNSLBHealthStatusListRequest, opts ...grpc.CallOption) (*DNSLBHealthStatusListResponse, error)
	// DNS Load Balancer Health Status
	//
	// x-displayName: "DNS Load Balancer Health Status"
	// Get DNS Load Balancer Health status
	DNSLBHealthStatus(ctx context.Context, in *DNSLBHealthStatusRequest, opts ...grpc.CallOption) (*DNSLBHealthStatusResponse, error)
	// DNS Load Balancer Pool Health Status
	//
	// x-displayName: "DNS Load Balancer Pool Health Status"
	// Get DNS Load Balancer Pool Health Status
	DNSLBPoolHealthStatus(ctx context.Context, in *DNSLBPoolHealthStatusRequest, opts ...grpc.CallOption) (*DNSLBPoolHealthStatusResponse, error)
}

type customDataAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomDataAPIClient(cc *grpc.ClientConn) CustomDataAPIClient {
	return &customDataAPIClient{cc}
}

func (c *customDataAPIClient) DNSLBHealthStatusList(ctx context.Context, in *DNSLBHealthStatusListRequest, opts ...grpc.CallOption) (*DNSLBHealthStatusListResponse, error) {
	out := new(DNSLBHealthStatusListResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.dns_load_balancer.CustomDataAPI/DNSLBHealthStatusList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataAPIClient) DNSLBHealthStatus(ctx context.Context, in *DNSLBHealthStatusRequest, opts ...grpc.CallOption) (*DNSLBHealthStatusResponse, error) {
	out := new(DNSLBHealthStatusResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.dns_load_balancer.CustomDataAPI/DNSLBHealthStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataAPIClient) DNSLBPoolHealthStatus(ctx context.Context, in *DNSLBPoolHealthStatusRequest, opts ...grpc.CallOption) (*DNSLBPoolHealthStatusResponse, error) {
	out := new(DNSLBPoolHealthStatusResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.dns_load_balancer.CustomDataAPI/DNSLBPoolHealthStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomDataAPIServer is the server API for CustomDataAPI service.
type CustomDataAPIServer interface {
	// DNS Load Balancer Health Status List
	//
	// x-displayName: "DNS Load Balancer Health Status List"
	// Get Health Status of all DNS Load Balancers in a namespace
	DNSLBHealthStatusList(context.Context, *DNSLBHealthStatusListRequest) (*DNSLBHealthStatusListResponse, error)
	// DNS Load Balancer Health Status
	//
	// x-displayName: "DNS Load Balancer Health Status"
	// Get DNS Load Balancer Health status
	DNSLBHealthStatus(context.Context, *DNSLBHealthStatusRequest) (*DNSLBHealthStatusResponse, error)
	// DNS Load Balancer Pool Health Status
	//
	// x-displayName: "DNS Load Balancer Pool Health Status"
	// Get DNS Load Balancer Pool Health Status
	DNSLBPoolHealthStatus(context.Context, *DNSLBPoolHealthStatusRequest) (*DNSLBPoolHealthStatusResponse, error)
}

// UnimplementedCustomDataAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomDataAPIServer struct {
}

func (*UnimplementedCustomDataAPIServer) DNSLBHealthStatusList(ctx context.Context, req *DNSLBHealthStatusListRequest) (*DNSLBHealthStatusListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DNSLBHealthStatusList not implemented")
}
func (*UnimplementedCustomDataAPIServer) DNSLBHealthStatus(ctx context.Context, req *DNSLBHealthStatusRequest) (*DNSLBHealthStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DNSLBHealthStatus not implemented")
}
func (*UnimplementedCustomDataAPIServer) DNSLBPoolHealthStatus(ctx context.Context, req *DNSLBPoolHealthStatusRequest) (*DNSLBPoolHealthStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DNSLBPoolHealthStatus not implemented")
}

func RegisterCustomDataAPIServer(s *grpc.Server, srv CustomDataAPIServer) {
	s.RegisterService(&_CustomDataAPI_serviceDesc, srv)
}

func _CustomDataAPI_DNSLBHealthStatusList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNSLBHealthStatusListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataAPIServer).DNSLBHealthStatusList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.dns_load_balancer.CustomDataAPI/DNSLBHealthStatusList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataAPIServer).DNSLBHealthStatusList(ctx, req.(*DNSLBHealthStatusListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataAPI_DNSLBHealthStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNSLBHealthStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataAPIServer).DNSLBHealthStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.dns_load_balancer.CustomDataAPI/DNSLBHealthStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataAPIServer).DNSLBHealthStatus(ctx, req.(*DNSLBHealthStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataAPI_DNSLBPoolHealthStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNSLBPoolHealthStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataAPIServer).DNSLBPoolHealthStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.dns_load_balancer.CustomDataAPI/DNSLBPoolHealthStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataAPIServer).DNSLBPoolHealthStatus(ctx, req.(*DNSLBPoolHealthStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomDataAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.dns_load_balancer.CustomDataAPI",
	HandlerType: (*CustomDataAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DNSLBHealthStatusList",
			Handler:    _CustomDataAPI_DNSLBHealthStatusList_Handler,
		},
		{
			MethodName: "DNSLBHealthStatus",
			Handler:    _CustomDataAPI_DNSLBHealthStatus_Handler,
		},
		{
			MethodName: "DNSLBPoolHealthStatus",
			Handler:    _CustomDataAPI_DNSLBPoolHealthStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/dns_load_balancer/public_custom_data_api.proto",
}

func (m *DNSLBHealthStatusListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSLBHealthStatusListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSLBHealthStatusListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNSLBHealthStatusListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSLBHealthStatusListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSLBHealthStatusListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DNSLBHealthStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSLBHealthStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSLBHealthStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNSLBHealthStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSLBHealthStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSLBHealthStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DnsLbPoolItems) > 0 {
		for iNdEx := len(m.DnsLbPoolItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DnsLbPoolItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Status) > 0 {
		for iNdEx := len(m.Status) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Status[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DNSLBPoolHealthStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSLBPoolHealthStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSLBPoolHealthStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DnsLbPoolName) > 0 {
		i -= len(m.DnsLbPoolName)
		copy(dAtA[i:], m.DnsLbPoolName)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.DnsLbPoolName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DnsLbName) > 0 {
		i -= len(m.DnsLbName)
		copy(dAtA[i:], m.DnsLbName)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.DnsLbName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNSLBPoolHealthStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSLBPoolHealthStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSLBPoolHealthStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DnsLbPoolMemberItems) > 0 {
		for iNdEx := len(m.DnsLbPoolMemberItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DnsLbPoolMemberItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Status) > 0 {
		for iNdEx := len(m.Status) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Status[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DNSLBHealthStatusListResponseItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSLBHealthStatusListResponseItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSLBHealthStatusListResponseItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DnsLbPoolsStatusSummary) > 0 {
		for iNdEx := len(m.DnsLbPoolsStatusSummary) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DnsLbPoolsStatusSummary[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Status) > 0 {
		for iNdEx := len(m.Status) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Status[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNSLBPoolHealthStatusListResponseItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSLBPoolHealthStatusListResponseItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSLBPoolHealthStatusListResponseItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DnsLbPoolMembersStatusSummary) > 0 {
		for iNdEx := len(m.DnsLbPoolMembersStatusSummary) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DnsLbPoolMembersStatusSummary[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Status) > 0 {
		for iNdEx := len(m.Status) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Status[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNSLBPoolMemberHealthStatusListResponseItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSLBPoolMemberHealthStatusListResponseItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSLBPoolMemberHealthStatusListResponseItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		for iNdEx := len(m.Status) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Status[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.HealthCheckType) > 0 {
		i -= len(m.HealthCheckType)
		copy(dAtA[i:], m.HealthCheckType)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.HealthCheckType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HealthStatusSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthStatusSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HealthStatusSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Count) > 0 {
		for iNdEx := len(m.Count) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Count[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Status != 0 {
		i = encodeVarintPublicCustomDataApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomDataApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomDataApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DNSLBHealthStatusListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	return n
}

func (m *DNSLBHealthStatusListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	return n
}

func (m *DNSLBHealthStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	return n
}

func (m *DNSLBHealthStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Status) > 0 {
		for _, e := range m.Status {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	if len(m.DnsLbPoolItems) > 0 {
		for _, e := range m.DnsLbPoolItems {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	return n
}

func (m *DNSLBPoolHealthStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.DnsLbName)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.DnsLbPoolName)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	return n
}

func (m *DNSLBPoolHealthStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Status) > 0 {
		for _, e := range m.Status {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	if len(m.DnsLbPoolMemberItems) > 0 {
		for _, e := range m.DnsLbPoolMemberItems {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	return n
}

func (m *DNSLBHealthStatusListResponseItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	if len(m.Status) > 0 {
		for _, e := range m.Status {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	if len(m.DnsLbPoolsStatusSummary) > 0 {
		for _, e := range m.DnsLbPoolsStatusSummary {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	return n
}

func (m *DNSLBPoolHealthStatusListResponseItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	if len(m.Status) > 0 {
		for _, e := range m.Status {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	if len(m.DnsLbPoolMembersStatusSummary) > 0 {
		for _, e := range m.DnsLbPoolMembersStatusSummary {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	return n
}

func (m *DNSLBPoolMemberHealthStatusListResponseItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	l = len(m.HealthCheckType)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataApi(uint64(l))
	}
	if len(m.Status) > 0 {
		for _, e := range m.Status {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	return n
}

func (m *HealthStatusSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPublicCustomDataApi(uint64(m.Status))
	}
	if len(m.Count) > 0 {
		for _, e := range m.Count {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataApi(uint64(l))
		}
	}
	return n
}

func sovPublicCustomDataApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomDataApi(x uint64) (n int) {
	return sovPublicCustomDataApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DNSLBHealthStatusListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSLBHealthStatusListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSLBHealthStatusListResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*DNSLBHealthStatusListResponseItem{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(f.String(), "DNSLBHealthStatusListResponseItem", "DNSLBHealthStatusListResponseItem", 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&DNSLBHealthStatusListResponse{`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSLBHealthStatusRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSLBHealthStatusRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSLBHealthStatusResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStatus := "[]*MetricValue{"
	for _, f := range this.Status {
		repeatedStringForStatus += strings.Replace(fmt.Sprintf("%v", f), "MetricValue", "schema.MetricValue", 1) + ","
	}
	repeatedStringForStatus += "}"
	repeatedStringForDnsLbPoolItems := "[]*DNSLBPoolHealthStatusListResponseItem{"
	for _, f := range this.DnsLbPoolItems {
		repeatedStringForDnsLbPoolItems += strings.Replace(f.String(), "DNSLBPoolHealthStatusListResponseItem", "DNSLBPoolHealthStatusListResponseItem", 1) + ","
	}
	repeatedStringForDnsLbPoolItems += "}"
	s := strings.Join([]string{`&DNSLBHealthStatusResponse{`,
		`Status:` + repeatedStringForStatus + `,`,
		`DnsLbPoolItems:` + repeatedStringForDnsLbPoolItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSLBPoolHealthStatusRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSLBPoolHealthStatusRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`DnsLbName:` + fmt.Sprintf("%v", this.DnsLbName) + `,`,
		`DnsLbPoolName:` + fmt.Sprintf("%v", this.DnsLbPoolName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSLBPoolHealthStatusResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStatus := "[]*MetricValue{"
	for _, f := range this.Status {
		repeatedStringForStatus += strings.Replace(fmt.Sprintf("%v", f), "MetricValue", "schema.MetricValue", 1) + ","
	}
	repeatedStringForStatus += "}"
	repeatedStringForDnsLbPoolMemberItems := "[]*DNSLBPoolMemberHealthStatusListResponseItem{"
	for _, f := range this.DnsLbPoolMemberItems {
		repeatedStringForDnsLbPoolMemberItems += strings.Replace(f.String(), "DNSLBPoolMemberHealthStatusListResponseItem", "DNSLBPoolMemberHealthStatusListResponseItem", 1) + ","
	}
	repeatedStringForDnsLbPoolMemberItems += "}"
	s := strings.Join([]string{`&DNSLBPoolHealthStatusResponse{`,
		`Status:` + repeatedStringForStatus + `,`,
		`DnsLbPoolMemberItems:` + repeatedStringForDnsLbPoolMemberItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSLBHealthStatusListResponseItem) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStatus := "[]*MetricValue{"
	for _, f := range this.Status {
		repeatedStringForStatus += strings.Replace(fmt.Sprintf("%v", f), "MetricValue", "schema.MetricValue", 1) + ","
	}
	repeatedStringForStatus += "}"
	repeatedStringForDnsLbPoolsStatusSummary := "[]*HealthStatusSummary{"
	for _, f := range this.DnsLbPoolsStatusSummary {
		repeatedStringForDnsLbPoolsStatusSummary += strings.Replace(f.String(), "HealthStatusSummary", "HealthStatusSummary", 1) + ","
	}
	repeatedStringForDnsLbPoolsStatusSummary += "}"
	s := strings.Join([]string{`&DNSLBHealthStatusListResponseItem{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Status:` + repeatedStringForStatus + `,`,
		`DnsLbPoolsStatusSummary:` + repeatedStringForDnsLbPoolsStatusSummary + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSLBPoolHealthStatusListResponseItem) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStatus := "[]*MetricValue{"
	for _, f := range this.Status {
		repeatedStringForStatus += strings.Replace(fmt.Sprintf("%v", f), "MetricValue", "schema.MetricValue", 1) + ","
	}
	repeatedStringForStatus += "}"
	repeatedStringForDnsLbPoolMembersStatusSummary := "[]*HealthStatusSummary{"
	for _, f := range this.DnsLbPoolMembersStatusSummary {
		repeatedStringForDnsLbPoolMembersStatusSummary += strings.Replace(f.String(), "HealthStatusSummary", "HealthStatusSummary", 1) + ","
	}
	repeatedStringForDnsLbPoolMembersStatusSummary += "}"
	s := strings.Join([]string{`&DNSLBPoolHealthStatusListResponseItem{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Status:` + repeatedStringForStatus + `,`,
		`DnsLbPoolMembersStatusSummary:` + repeatedStringForDnsLbPoolMembersStatusSummary + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSLBPoolMemberHealthStatusListResponseItem) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStatus := "[]*MetricValue{"
	for _, f := range this.Status {
		repeatedStringForStatus += strings.Replace(fmt.Sprintf("%v", f), "MetricValue", "schema.MetricValue", 1) + ","
	}
	repeatedStringForStatus += "}"
	s := strings.Join([]string{`&DNSLBPoolMemberHealthStatusListResponseItem{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`HealthCheckType:` + fmt.Sprintf("%v", this.HealthCheckType) + `,`,
		`Status:` + repeatedStringForStatus + `,`,
		`}`,
	}, "")
	return s
}
func (this *HealthStatusSummary) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCount := "[]*MetricValue{"
	for _, f := range this.Count {
		repeatedStringForCount += strings.Replace(fmt.Sprintf("%v", f), "MetricValue", "schema.MetricValue", 1) + ","
	}
	repeatedStringForCount += "}"
	s := strings.Join([]string{`&HealthStatusSummary{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Count:` + repeatedStringForCount + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomDataApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DNSLBHealthStatusListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSLBHealthStatusListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSLBHealthStatusListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSLBHealthStatusListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSLBHealthStatusListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSLBHealthStatusListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &DNSLBHealthStatusListResponseItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSLBHealthStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSLBHealthStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSLBHealthStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSLBHealthStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSLBHealthStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSLBHealthStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = append(m.Status, &schema.MetricValue{})
			if err := m.Status[len(m.Status)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsLbPoolItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsLbPoolItems = append(m.DnsLbPoolItems, &DNSLBPoolHealthStatusListResponseItem{})
			if err := m.DnsLbPoolItems[len(m.DnsLbPoolItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSLBPoolHealthStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSLBPoolHealthStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSLBPoolHealthStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsLbName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsLbName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsLbPoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsLbPoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSLBPoolHealthStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSLBPoolHealthStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSLBPoolHealthStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = append(m.Status, &schema.MetricValue{})
			if err := m.Status[len(m.Status)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsLbPoolMemberItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsLbPoolMemberItems = append(m.DnsLbPoolMemberItems, &DNSLBPoolMemberHealthStatusListResponseItem{})
			if err := m.DnsLbPoolMemberItems[len(m.DnsLbPoolMemberItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSLBHealthStatusListResponseItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSLBHealthStatusListResponseItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSLBHealthStatusListResponseItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = append(m.Status, &schema.MetricValue{})
			if err := m.Status[len(m.Status)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsLbPoolsStatusSummary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsLbPoolsStatusSummary = append(m.DnsLbPoolsStatusSummary, &HealthStatusSummary{})
			if err := m.DnsLbPoolsStatusSummary[len(m.DnsLbPoolsStatusSummary)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSLBPoolHealthStatusListResponseItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSLBPoolHealthStatusListResponseItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSLBPoolHealthStatusListResponseItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = append(m.Status, &schema.MetricValue{})
			if err := m.Status[len(m.Status)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsLbPoolMembersStatusSummary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsLbPoolMembersStatusSummary = append(m.DnsLbPoolMembersStatusSummary, &HealthStatusSummary{})
			if err := m.DnsLbPoolMembersStatusSummary[len(m.DnsLbPoolMembersStatusSummary)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSLBPoolMemberHealthStatusListResponseItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSLBPoolMemberHealthStatusListResponseItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSLBPoolMemberHealthStatusListResponseItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthCheckType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HealthCheckType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = append(m.Status, &schema.MetricValue{})
			if err := m.Status[len(m.Status)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthStatusSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthStatusSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthStatusSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= HealthStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Count = append(m.Count, &schema.MetricValue{})
			if err := m.Count[len(m.Count)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomDataApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomDataApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomDataApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomDataApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomDataApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomDataApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomDataApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomDataApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomDataApi = fmt.Errorf("proto: unexpected end of group")
)
