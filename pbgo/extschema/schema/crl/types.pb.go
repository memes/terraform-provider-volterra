// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/crl/types.proto

package crl

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// HTTPAccessInfo
//
// x-displayName: "HTTPAccessInfo"
type HTTPAccessInfo struct {
	// path
	//
	// x-displayName: "CRL File path"
	// x-example: "/repo/latest.crl"
	// CRL file location
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *HTTPAccessInfo) Reset()      { *m = HTTPAccessInfo{} }
func (*HTTPAccessInfo) ProtoMessage() {}
func (*HTTPAccessInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c39502f41b24d99, []int{0}
}
func (m *HTTPAccessInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HTTPAccessInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HTTPAccessInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPAccessInfo.Merge(m, src)
}
func (m *HTTPAccessInfo) XXX_Size() int {
	return m.Size()
}
func (m *HTTPAccessInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPAccessInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPAccessInfo proto.InternalMessageInfo

func (m *HTTPAccessInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// Specification for CRL
//
// x-displayName: "Specification"
// Desired state of CRL
type GlobalSpecType struct {
	// CRL server
	//
	// x-displayName: "CRL Server address"
	// x-required
	// x-example: "mycrl.it.com"
	// CRL server address or hostname
	ServerAddress string `protobuf:"bytes,1,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	// CRL Server Port Number
	//
	// x-displayName: "CRL Server Port"
	// x-example: "80"
	// Set CRL Server port number
	ServerPort uint32 `protobuf:"varint,2,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`
	// Refresh interval
	//
	// x-displayName: "CRL Refresh interval"
	// x-example: "24"
	// CRL refresh interval, in hours.
	RefreshInterval uint32 `protobuf:"varint,3,opt,name=refresh_interval,json=refreshInterval,proto3" json:"refresh_interval,omitempty"`
	// Download Timeout
	//
	// x-displayName: "CRL download timeout"
	// x-example: "10"
	// CRL download wait time, in seconds
	Timeout uint32 `protobuf:"varint,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Verify all certificates in chain
	//
	// x-displayName: "Verify all certificates in the chain with CRL"
	// x-example: false
	// If this option is set, when CRL is used for any certificate authority in a trust chain,
	// a CRL must be provided for all certificate authorities in that chain.
	// Failure to do so will result in verification failure for both revoked and unrevoked certificates
	// from that chain.
	VerifyAllCertsWithCrl bool `protobuf:"varint,4,opt,name=verify_all_certs_with_crl,json=verifyAllCertsWithCrl,proto3" json:"verify_all_certs_with_crl,omitempty"`
	// CRL Access information
	//
	// x-displayName: "CRL Access information"
	//
	// Types that are valid to be assigned to AccessInfoChoice:
	//	*GlobalSpecType_HttpAccess
	AccessInfoChoice isGlobalSpecType_AccessInfoChoice `protobuf_oneof:"access_info_choice"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c39502f41b24d99, []int{1}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_AccessInfoChoice interface {
	isGlobalSpecType_AccessInfoChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_HttpAccess struct {
	HttpAccess *HTTPAccessInfo `protobuf:"bytes,6,opt,name=http_access,json=httpAccess,proto3,oneof" json:"http_access,omitempty"`
}

func (*GlobalSpecType_HttpAccess) isGlobalSpecType_AccessInfoChoice() {}

func (m *GlobalSpecType) GetAccessInfoChoice() isGlobalSpecType_AccessInfoChoice {
	if m != nil {
		return m.AccessInfoChoice
	}
	return nil
}

func (m *GlobalSpecType) GetServerAddress() string {
	if m != nil {
		return m.ServerAddress
	}
	return ""
}

func (m *GlobalSpecType) GetServerPort() uint32 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

func (m *GlobalSpecType) GetRefreshInterval() uint32 {
	if m != nil {
		return m.RefreshInterval
	}
	return 0
}

func (m *GlobalSpecType) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *GlobalSpecType) GetVerifyAllCertsWithCrl() bool {
	if m != nil {
		return m.VerifyAllCertsWithCrl
	}
	return false
}

func (m *GlobalSpecType) GetHttpAccess() *HTTPAccessInfo {
	if x, ok := m.GetAccessInfoChoice().(*GlobalSpecType_HttpAccess); ok {
		return x.HttpAccess
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_HttpAccess)(nil),
	}
}

// Create CRL
//
// x-displayName: "Create CRL"
// API to create CRL object
type CreateSpecType struct {
	ServerAddress         string `protobuf:"bytes,1,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	ServerPort            uint32 `protobuf:"varint,2,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`
	RefreshInterval       uint32 `protobuf:"varint,3,opt,name=refresh_interval,json=refreshInterval,proto3" json:"refresh_interval,omitempty"`
	Timeout               uint32 `protobuf:"varint,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
	VerifyAllCertsWithCrl bool   `protobuf:"varint,4,opt,name=verify_all_certs_with_crl,json=verifyAllCertsWithCrl,proto3" json:"verify_all_certs_with_crl,omitempty"`
	// Types that are valid to be assigned to AccessInfoChoice:
	//	*CreateSpecType_HttpAccess
	AccessInfoChoice isCreateSpecType_AccessInfoChoice `protobuf_oneof:"access_info_choice"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c39502f41b24d99, []int{2}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_AccessInfoChoice interface {
	isCreateSpecType_AccessInfoChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_HttpAccess struct {
	HttpAccess *HTTPAccessInfo `protobuf:"bytes,6,opt,name=http_access,json=httpAccess,proto3,oneof" json:"http_access,omitempty"`
}

func (*CreateSpecType_HttpAccess) isCreateSpecType_AccessInfoChoice() {}

func (m *CreateSpecType) GetAccessInfoChoice() isCreateSpecType_AccessInfoChoice {
	if m != nil {
		return m.AccessInfoChoice
	}
	return nil
}

func (m *CreateSpecType) GetServerAddress() string {
	if m != nil {
		return m.ServerAddress
	}
	return ""
}

func (m *CreateSpecType) GetServerPort() uint32 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

func (m *CreateSpecType) GetRefreshInterval() uint32 {
	if m != nil {
		return m.RefreshInterval
	}
	return 0
}

func (m *CreateSpecType) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *CreateSpecType) GetVerifyAllCertsWithCrl() bool {
	if m != nil {
		return m.VerifyAllCertsWithCrl
	}
	return false
}

func (m *CreateSpecType) GetHttpAccess() *HTTPAccessInfo {
	if x, ok := m.GetAccessInfoChoice().(*CreateSpecType_HttpAccess); ok {
		return x.HttpAccess
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_HttpAccess)(nil),
	}
}

// Replace CRL
//
// x-displayName: "Replace CRL"
// API to replace CRL object
type ReplaceSpecType struct {
	ServerAddress         string `protobuf:"bytes,1,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	ServerPort            uint32 `protobuf:"varint,2,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`
	RefreshInterval       uint32 `protobuf:"varint,3,opt,name=refresh_interval,json=refreshInterval,proto3" json:"refresh_interval,omitempty"`
	Timeout               uint32 `protobuf:"varint,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
	VerifyAllCertsWithCrl bool   `protobuf:"varint,4,opt,name=verify_all_certs_with_crl,json=verifyAllCertsWithCrl,proto3" json:"verify_all_certs_with_crl,omitempty"`
	// Types that are valid to be assigned to AccessInfoChoice:
	//	*ReplaceSpecType_HttpAccess
	AccessInfoChoice isReplaceSpecType_AccessInfoChoice `protobuf_oneof:"access_info_choice"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c39502f41b24d99, []int{3}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_AccessInfoChoice interface {
	isReplaceSpecType_AccessInfoChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_HttpAccess struct {
	HttpAccess *HTTPAccessInfo `protobuf:"bytes,6,opt,name=http_access,json=httpAccess,proto3,oneof" json:"http_access,omitempty"`
}

func (*ReplaceSpecType_HttpAccess) isReplaceSpecType_AccessInfoChoice() {}

func (m *ReplaceSpecType) GetAccessInfoChoice() isReplaceSpecType_AccessInfoChoice {
	if m != nil {
		return m.AccessInfoChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetServerAddress() string {
	if m != nil {
		return m.ServerAddress
	}
	return ""
}

func (m *ReplaceSpecType) GetServerPort() uint32 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

func (m *ReplaceSpecType) GetRefreshInterval() uint32 {
	if m != nil {
		return m.RefreshInterval
	}
	return 0
}

func (m *ReplaceSpecType) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *ReplaceSpecType) GetVerifyAllCertsWithCrl() bool {
	if m != nil {
		return m.VerifyAllCertsWithCrl
	}
	return false
}

func (m *ReplaceSpecType) GetHttpAccess() *HTTPAccessInfo {
	if x, ok := m.GetAccessInfoChoice().(*ReplaceSpecType_HttpAccess); ok {
		return x.HttpAccess
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_HttpAccess)(nil),
	}
}

// Get CRL
//
// x-displayName: "Get CRL"
// API to Get CRL
type GetSpecType struct {
	ServerAddress         string `protobuf:"bytes,1,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	ServerPort            uint32 `protobuf:"varint,2,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`
	RefreshInterval       uint32 `protobuf:"varint,3,opt,name=refresh_interval,json=refreshInterval,proto3" json:"refresh_interval,omitempty"`
	Timeout               uint32 `protobuf:"varint,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
	VerifyAllCertsWithCrl bool   `protobuf:"varint,4,opt,name=verify_all_certs_with_crl,json=verifyAllCertsWithCrl,proto3" json:"verify_all_certs_with_crl,omitempty"`
	// Types that are valid to be assigned to AccessInfoChoice:
	//	*GetSpecType_HttpAccess
	AccessInfoChoice isGetSpecType_AccessInfoChoice `protobuf_oneof:"access_info_choice"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c39502f41b24d99, []int{4}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_AccessInfoChoice interface {
	isGetSpecType_AccessInfoChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_HttpAccess struct {
	HttpAccess *HTTPAccessInfo `protobuf:"bytes,6,opt,name=http_access,json=httpAccess,proto3,oneof" json:"http_access,omitempty"`
}

func (*GetSpecType_HttpAccess) isGetSpecType_AccessInfoChoice() {}

func (m *GetSpecType) GetAccessInfoChoice() isGetSpecType_AccessInfoChoice {
	if m != nil {
		return m.AccessInfoChoice
	}
	return nil
}

func (m *GetSpecType) GetServerAddress() string {
	if m != nil {
		return m.ServerAddress
	}
	return ""
}

func (m *GetSpecType) GetServerPort() uint32 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

func (m *GetSpecType) GetRefreshInterval() uint32 {
	if m != nil {
		return m.RefreshInterval
	}
	return 0
}

func (m *GetSpecType) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *GetSpecType) GetVerifyAllCertsWithCrl() bool {
	if m != nil {
		return m.VerifyAllCertsWithCrl
	}
	return false
}

func (m *GetSpecType) GetHttpAccess() *HTTPAccessInfo {
	if x, ok := m.GetAccessInfoChoice().(*GetSpecType_HttpAccess); ok {
		return x.HttpAccess
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_HttpAccess)(nil),
	}
}

func init() {
	proto.RegisterType((*HTTPAccessInfo)(nil), "ves.io.schema.crl.HTTPAccessInfo")
	golang_proto.RegisterType((*HTTPAccessInfo)(nil), "ves.io.schema.crl.HTTPAccessInfo")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.crl.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.crl.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.crl.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.crl.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.crl.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.crl.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.crl.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.crl.GetSpecType")
}

func init() { proto.RegisterFile("ves.io/schema/crl/types.proto", fileDescriptor_2c39502f41b24d99) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/crl/types.proto", fileDescriptor_2c39502f41b24d99)
}

var fileDescriptor_2c39502f41b24d99 = []byte{
	// 795 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xcf, 0x6f, 0xe3, 0x44,
	0x18, 0xf5, 0xe7, 0xfc, 0x68, 0x99, 0xa8, 0x69, 0x6b, 0xb1, 0x8b, 0x93, 0x05, 0x63, 0x02, 0x2b,
	0x65, 0x97, 0xad, 0xbd, 0xed, 0x2e, 0x50, 0xed, 0x01, 0x94, 0x64, 0x51, 0xb7, 0x88, 0xc3, 0xca,
	0x1b, 0x09, 0x89, 0x8b, 0xe5, 0x38, 0x93, 0xd8, 0x30, 0xc9, 0x58, 0xe3, 0x49, 0x4a, 0x0f, 0x48,
	0x2b, 0x24, 0x24, 0x8e, 0xfc, 0x19, 0xfb, 0x07, 0xec, 0x09, 0x73, 0x88, 0x7a, 0x42, 0x9c, 0x72,
	0x8c, 0x40, 0x02, 0xea, 0x5c, 0xca, 0xad, 0x47, 0xc4, 0xa5, 0xc8, 0x3f, 0xd2, 0x92, 0x34, 0x88,
	0x53, 0x6f, 0xbd, 0x8d, 0xfd, 0xbe, 0xf7, 0x7d, 0x33, 0xef, 0xbd, 0x64, 0x8c, 0xde, 0x18, 0x62,
	0x5f, 0x73, 0xa9, 0xee, 0xdb, 0x0e, 0xee, 0x59, 0xba, 0xcd, 0x88, 0xce, 0x0f, 0x3d, 0xec, 0x6b,
	0x1e, 0xa3, 0x9c, 0x4a, 0x9b, 0x09, 0xac, 0x25, 0xb0, 0x66, 0x33, 0x52, 0xde, 0xea, 0xba, 0xdc,
	0x19, 0xb4, 0x34, 0x9b, 0xf6, 0xf4, 0x2e, 0xed, 0x52, 0x3d, 0xae, 0x6c, 0x0d, 0x3a, 0xf1, 0x53,
	0xfc, 0x10, 0xaf, 0x92, 0x0e, 0xe5, 0x5b, 0xf3, 0x03, 0xa8, 0xc7, 0x5d, 0xda, 0x4f, 0xdb, 0x97,
	0x4b, 0xf3, 0xe0, 0xbf, 0x26, 0x97, 0x5f, 0x9f, 0x87, 0x86, 0x16, 0x71, 0xdb, 0x16, 0xc7, 0x29,
	0xaa, 0x2e, 0xa0, 0x2e, 0x3e, 0x30, 0xe7, 0x5a, 0x57, 0x1c, 0x54, 0x7c, 0xd2, 0x6c, 0x3e, 0xad,
	0xd9, 0x36, 0xf6, 0xfd, 0xfd, 0x7e, 0x87, 0x4a, 0xb7, 0x51, 0xd6, 0xb3, 0xb8, 0x23, 0x83, 0x0a,
	0xd5, 0x57, 0xea, 0x9b, 0x7f, 0x05, 0x20, 0xfc, 0xf0, 0xe7, 0x28, 0xb3, 0xca, 0xf2, 0xf2, 0x73,
	0xf1, 0x44, 0x04, 0x23, 0x86, 0x1f, 0xe9, 0x47, 0x01, 0xbc, 0x8b, 0xee, 0xa0, 0x77, 0x22, 0xba,
	0x6a, 0xc5, 0x7c, 0xd5, 0xed, 0x77, 0x28, 0xeb, 0x59, 0xd1, 0x00, 0xb5, 0x43, 0x99, 0xda, 0x30,
	0x3e, 0x55, 0x3b, 0x2e, 0xc1, 0x12, 0x6c, 0x57, 0x5e, 0x66, 0x51, 0x71, 0x8f, 0xd0, 0x96, 0x45,
	0x9e, 0x79, 0xd8, 0x6e, 0x1e, 0x7a, 0x58, 0xfa, 0x08, 0x15, 0x7d, 0xcc, 0x86, 0x98, 0x99, 0x56,
	0xbb, 0xcd, 0xb0, 0xef, 0xa7, 0x43, 0xe5, 0xd9, 0xd0, 0x1c, 0xcb, 0xc8, 0x67, 0x90, 0xae, 0x26,
	0x22, 0x18, 0x6b, 0x49, 0x7d, 0x2d, 0x29, 0x97, 0x76, 0x51, 0x21, 0x6d, 0xe0, 0x51, 0xc6, 0x65,
	0x51, 0x85, 0xea, 0x5a, 0xfd, 0xb5, 0x5f, 0x02, 0x10, 0x77, 0xef, 0x9f, 0x6f, 0xfc, 0x6e, 0x5e,
	0x3e, 0x3b, 0xcb, 0x54, 0xc1, 0x40, 0x49, 0xed, 0x53, 0xca, 0xb8, 0xf4, 0x31, 0xda, 0x60, 0xb8,
	0xc3, 0xb0, 0xef, 0x98, 0x6e, 0x9f, 0x63, 0x36, 0xb4, 0x88, 0x9c, 0x89, 0xe9, 0xe5, 0x88, 0xbe,
	0xf3, 0x30, 0xa2, 0x7f, 0xf7, 0x23, 0x64, 0xa2, 0x16, 0x2b, 0x77, 0x73, 0xf2, 0x0b, 0xa8, 0xe6,
	0x8d, 0xf5, 0x94, 0xb3, 0x9f, 0x52, 0xa4, 0x87, 0x68, 0x85, 0xbb, 0x3d, 0x4c, 0x07, 0x5c, 0x5e,
	0xb9, 0x60, 0x6f, 0xdf, 0x4f, 0xd9, 0x30, 0x63, 0xbf, 0x84, 0x2a, 0x18, 0xb3, 0x52, 0x69, 0x1f,
	0x95, 0x86, 0x98, 0xb9, 0x9d, 0x43, 0xd3, 0x22, 0xc4, 0xb4, 0x31, 0xe3, 0xbe, 0x79, 0xe0, 0x72,
	0xc7, 0xb4, 0x19, 0x91, 0xb3, 0x2a, 0x54, 0x57, 0xeb, 0xeb, 0x93, 0xaf, 0x61, 0x14, 0x00, 0x9c,
	0x04, 0x00, 0x51, 0x33, 0xe3, 0x46, 0xc2, 0xa8, 0x11, 0xd2, 0x88, 0xea, 0x3f, 0x73, 0xb9, 0xd3,
	0x60, 0x44, 0x7a, 0x8c, 0x0a, 0x0e, 0xe7, 0x9e, 0x99, 0x18, 0x20, 0xe7, 0x55, 0xa8, 0x16, 0x76,
	0xde, 0xd2, 0x2e, 0xe5, 0x51, 0x9b, 0x77, 0xf9, 0x89, 0x60, 0xa0, 0x88, 0x97, 0xbc, 0x79, 0xd4,
	0x3f, 0x0a, 0xe0, 0x0b, 0x54, 0x42, 0x52, 0x64, 0xd8, 0xb3, 0x58, 0x25, 0x75, 0xa6, 0x71, 0x66,
	0xfb, 0xde, 0x0e, 0xba, 0x81, 0x36, 0x8c, 0xe4, 0xe8, 0xea, 0xf9, 0xd9, 0xe1, 0x01, 0x2a, 0xa1,
	0x57, 0x23, 0xc6, 0x63, 0x7a, 0xd0, 0x27, 0xd4, 0x6a, 0xab, 0xcd, 0xf4, 0x80, 0xf0, 0x01, 0xba,
	0x85, 0x6e, 0x46, 0x50, 0xed, 0x52, 0x30, 0x24, 0x78, 0xaf, 0xfe, 0x36, 0x92, 0x92, 0x0d, 0x9b,
	0x11, 0x60, 0xda, 0x0e, 0x75, 0x6d, 0x2c, 0xad, 0x8d, 0x02, 0xc8, 0x8f, 0x03, 0xc8, 0x85, 0x01,
	0xc0, 0xfb, 0x9f, 0x64, 0x57, 0x73, 0x1b, 0xf9, 0xca, 0x6f, 0x22, 0x2a, 0x36, 0x18, 0xb6, 0x38,
	0x3e, 0x8f, 0xcd, 0xed, 0xe5, 0xb1, 0x59, 0x0c, 0xc7, 0x9b, 0x4b, 0xc2, 0x31, 0x97, 0x81, 0x3b,
	0xff, 0x95, 0x81, 0xcb, 0x3e, 0xcb, 0x0b, 0x3e, 0x5f, 0x78, 0xb9, 0xfb, 0xbf, 0x5e, 0x5e, 0xad,
	0x75, 0x9b, 0x3f, 0x7f, 0xb8, 0xf0, 0xb3, 0xaa, 0xdf, 0x5b, 0xaa, 0xee, 0xcd, 0x6f, 0xfe, 0x86,
	0x25, 0xef, 0x2b, 0xbf, 0x8b, 0x68, 0xdd, 0xc0, 0x1e, 0xb1, 0xec, 0x6b, 0x85, 0xaf, 0x46, 0xe1,
	0x5f, 0x45, 0x54, 0xd8, 0xc3, 0xfc, 0x5a, 0xdd, 0xab, 0x50, 0xb7, 0xfe, 0x2d, 0x8c, 0x8f, 0x15,
	0x61, 0x72, 0xac, 0x08, 0xa7, 0xc7, 0x0a, 0x3c, 0x0f, 0x15, 0x78, 0x11, 0x2a, 0xf0, 0x53, 0xa8,
	0xc0, 0x38, 0x54, 0x60, 0x12, 0x2a, 0xf0, 0x47, 0xa8, 0xc0, 0x49, 0xa8, 0x08, 0xa7, 0xa1, 0x02,
	0xdf, 0x4f, 0x15, 0x61, 0x34, 0x55, 0x60, 0x3c, 0x55, 0x84, 0xc9, 0x54, 0x11, 0x3e, 0xdf, 0xeb,
	0x52, 0xef, 0xcb, 0xae, 0x36, 0xa4, 0x84, 0x63, 0xc6, 0x2c, 0x6d, 0xe0, 0xeb, 0xf1, 0x22, 0xfa,
	0xbf, 0xda, 0xf2, 0x18, 0x1d, 0xba, 0x6d, 0xcc, 0xb6, 0x66, 0xb0, 0xee, 0xb5, 0xba, 0x54, 0xc7,
	0x5f, 0xf1, 0xf4, 0x46, 0xbd, 0xf8, 0x1e, 0x68, 0xe5, 0xe3, 0x0b, 0xf5, 0xc1, 0x3f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x74, 0x62, 0xb3, 0x44, 0x2b, 0x08, 0x00, 0x00,
}

func (this *HTTPAccessInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPAccessInfo)
	if !ok {
		that2, ok := that.(HTTPAccessInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerAddress != that1.ServerAddress {
		return false
	}
	if this.ServerPort != that1.ServerPort {
		return false
	}
	if this.RefreshInterval != that1.RefreshInterval {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if this.VerifyAllCertsWithCrl != that1.VerifyAllCertsWithCrl {
		return false
	}
	if that1.AccessInfoChoice == nil {
		if this.AccessInfoChoice != nil {
			return false
		}
	} else if this.AccessInfoChoice == nil {
		return false
	} else if !this.AccessInfoChoice.Equal(that1.AccessInfoChoice) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HttpAccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HttpAccess)
	if !ok {
		that2, ok := that.(GlobalSpecType_HttpAccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpAccess.Equal(that1.HttpAccess) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerAddress != that1.ServerAddress {
		return false
	}
	if this.ServerPort != that1.ServerPort {
		return false
	}
	if this.RefreshInterval != that1.RefreshInterval {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if this.VerifyAllCertsWithCrl != that1.VerifyAllCertsWithCrl {
		return false
	}
	if that1.AccessInfoChoice == nil {
		if this.AccessInfoChoice != nil {
			return false
		}
	} else if this.AccessInfoChoice == nil {
		return false
	} else if !this.AccessInfoChoice.Equal(that1.AccessInfoChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_HttpAccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HttpAccess)
	if !ok {
		that2, ok := that.(CreateSpecType_HttpAccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpAccess.Equal(that1.HttpAccess) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerAddress != that1.ServerAddress {
		return false
	}
	if this.ServerPort != that1.ServerPort {
		return false
	}
	if this.RefreshInterval != that1.RefreshInterval {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if this.VerifyAllCertsWithCrl != that1.VerifyAllCertsWithCrl {
		return false
	}
	if that1.AccessInfoChoice == nil {
		if this.AccessInfoChoice != nil {
			return false
		}
	} else if this.AccessInfoChoice == nil {
		return false
	} else if !this.AccessInfoChoice.Equal(that1.AccessInfoChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HttpAccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HttpAccess)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HttpAccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpAccess.Equal(that1.HttpAccess) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerAddress != that1.ServerAddress {
		return false
	}
	if this.ServerPort != that1.ServerPort {
		return false
	}
	if this.RefreshInterval != that1.RefreshInterval {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if this.VerifyAllCertsWithCrl != that1.VerifyAllCertsWithCrl {
		return false
	}
	if that1.AccessInfoChoice == nil {
		if this.AccessInfoChoice != nil {
			return false
		}
	} else if this.AccessInfoChoice == nil {
		return false
	} else if !this.AccessInfoChoice.Equal(that1.AccessInfoChoice) {
		return false
	}
	return true
}
func (this *GetSpecType_HttpAccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HttpAccess)
	if !ok {
		that2, ok := that.(GetSpecType_HttpAccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpAccess.Equal(that1.HttpAccess) {
		return false
	}
	return true
}
func (this *HTTPAccessInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&crl.HTTPAccessInfo{")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&crl.GlobalSpecType{")
	s = append(s, "ServerAddress: "+fmt.Sprintf("%#v", this.ServerAddress)+",\n")
	s = append(s, "ServerPort: "+fmt.Sprintf("%#v", this.ServerPort)+",\n")
	s = append(s, "RefreshInterval: "+fmt.Sprintf("%#v", this.RefreshInterval)+",\n")
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "VerifyAllCertsWithCrl: "+fmt.Sprintf("%#v", this.VerifyAllCertsWithCrl)+",\n")
	if this.AccessInfoChoice != nil {
		s = append(s, "AccessInfoChoice: "+fmt.Sprintf("%#v", this.AccessInfoChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_HttpAccess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&crl.GlobalSpecType_HttpAccess{` +
		`HttpAccess:` + fmt.Sprintf("%#v", this.HttpAccess) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&crl.CreateSpecType{")
	s = append(s, "ServerAddress: "+fmt.Sprintf("%#v", this.ServerAddress)+",\n")
	s = append(s, "ServerPort: "+fmt.Sprintf("%#v", this.ServerPort)+",\n")
	s = append(s, "RefreshInterval: "+fmt.Sprintf("%#v", this.RefreshInterval)+",\n")
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "VerifyAllCertsWithCrl: "+fmt.Sprintf("%#v", this.VerifyAllCertsWithCrl)+",\n")
	if this.AccessInfoChoice != nil {
		s = append(s, "AccessInfoChoice: "+fmt.Sprintf("%#v", this.AccessInfoChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_HttpAccess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&crl.CreateSpecType_HttpAccess{` +
		`HttpAccess:` + fmt.Sprintf("%#v", this.HttpAccess) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&crl.ReplaceSpecType{")
	s = append(s, "ServerAddress: "+fmt.Sprintf("%#v", this.ServerAddress)+",\n")
	s = append(s, "ServerPort: "+fmt.Sprintf("%#v", this.ServerPort)+",\n")
	s = append(s, "RefreshInterval: "+fmt.Sprintf("%#v", this.RefreshInterval)+",\n")
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "VerifyAllCertsWithCrl: "+fmt.Sprintf("%#v", this.VerifyAllCertsWithCrl)+",\n")
	if this.AccessInfoChoice != nil {
		s = append(s, "AccessInfoChoice: "+fmt.Sprintf("%#v", this.AccessInfoChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_HttpAccess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&crl.ReplaceSpecType_HttpAccess{` +
		`HttpAccess:` + fmt.Sprintf("%#v", this.HttpAccess) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&crl.GetSpecType{")
	s = append(s, "ServerAddress: "+fmt.Sprintf("%#v", this.ServerAddress)+",\n")
	s = append(s, "ServerPort: "+fmt.Sprintf("%#v", this.ServerPort)+",\n")
	s = append(s, "RefreshInterval: "+fmt.Sprintf("%#v", this.RefreshInterval)+",\n")
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "VerifyAllCertsWithCrl: "+fmt.Sprintf("%#v", this.VerifyAllCertsWithCrl)+",\n")
	if this.AccessInfoChoice != nil {
		s = append(s, "AccessInfoChoice: "+fmt.Sprintf("%#v", this.AccessInfoChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_HttpAccess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&crl.GetSpecType_HttpAccess{` +
		`HttpAccess:` + fmt.Sprintf("%#v", this.HttpAccess) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *HTTPAccessInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HTTPAccessInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPAccessInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x38
	}
	if m.AccessInfoChoice != nil {
		{
			size := m.AccessInfoChoice.Size()
			i -= size
			if _, err := m.AccessInfoChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.VerifyAllCertsWithCrl {
		i--
		if m.VerifyAllCertsWithCrl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.RefreshInterval != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RefreshInterval))
		i--
		dAtA[i] = 0x18
	}
	if m.ServerPort != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ServerPort))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ServerAddress) > 0 {
		i -= len(m.ServerAddress)
		copy(dAtA[i:], m.ServerAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_HttpAccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_HttpAccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpAccess != nil {
		{
			size, err := m.HttpAccess.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x38
	}
	if m.AccessInfoChoice != nil {
		{
			size := m.AccessInfoChoice.Size()
			i -= size
			if _, err := m.AccessInfoChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.VerifyAllCertsWithCrl {
		i--
		if m.VerifyAllCertsWithCrl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.RefreshInterval != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RefreshInterval))
		i--
		dAtA[i] = 0x18
	}
	if m.ServerPort != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ServerPort))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ServerAddress) > 0 {
		i -= len(m.ServerAddress)
		copy(dAtA[i:], m.ServerAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_HttpAccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_HttpAccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpAccess != nil {
		{
			size, err := m.HttpAccess.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x38
	}
	if m.AccessInfoChoice != nil {
		{
			size := m.AccessInfoChoice.Size()
			i -= size
			if _, err := m.AccessInfoChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.VerifyAllCertsWithCrl {
		i--
		if m.VerifyAllCertsWithCrl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.RefreshInterval != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RefreshInterval))
		i--
		dAtA[i] = 0x18
	}
	if m.ServerPort != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ServerPort))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ServerAddress) > 0 {
		i -= len(m.ServerAddress)
		copy(dAtA[i:], m.ServerAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_HttpAccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_HttpAccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpAccess != nil {
		{
			size, err := m.HttpAccess.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x38
	}
	if m.AccessInfoChoice != nil {
		{
			size := m.AccessInfoChoice.Size()
			i -= size
			if _, err := m.AccessInfoChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.VerifyAllCertsWithCrl {
		i--
		if m.VerifyAllCertsWithCrl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.RefreshInterval != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RefreshInterval))
		i--
		dAtA[i] = 0x18
	}
	if m.ServerPort != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ServerPort))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ServerAddress) > 0 {
		i -= len(m.ServerAddress)
		copy(dAtA[i:], m.ServerAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_HttpAccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_HttpAccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpAccess != nil {
		{
			size, err := m.HttpAccess.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HTTPAccessInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ServerPort != 0 {
		n += 1 + sovTypes(uint64(m.ServerPort))
	}
	if m.RefreshInterval != 0 {
		n += 1 + sovTypes(uint64(m.RefreshInterval))
	}
	if m.VerifyAllCertsWithCrl {
		n += 2
	}
	if m.AccessInfoChoice != nil {
		n += m.AccessInfoChoice.Size()
	}
	if m.Timeout != 0 {
		n += 1 + sovTypes(uint64(m.Timeout))
	}
	return n
}

func (m *GlobalSpecType_HttpAccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpAccess != nil {
		l = m.HttpAccess.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ServerPort != 0 {
		n += 1 + sovTypes(uint64(m.ServerPort))
	}
	if m.RefreshInterval != 0 {
		n += 1 + sovTypes(uint64(m.RefreshInterval))
	}
	if m.VerifyAllCertsWithCrl {
		n += 2
	}
	if m.AccessInfoChoice != nil {
		n += m.AccessInfoChoice.Size()
	}
	if m.Timeout != 0 {
		n += 1 + sovTypes(uint64(m.Timeout))
	}
	return n
}

func (m *CreateSpecType_HttpAccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpAccess != nil {
		l = m.HttpAccess.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ServerPort != 0 {
		n += 1 + sovTypes(uint64(m.ServerPort))
	}
	if m.RefreshInterval != 0 {
		n += 1 + sovTypes(uint64(m.RefreshInterval))
	}
	if m.VerifyAllCertsWithCrl {
		n += 2
	}
	if m.AccessInfoChoice != nil {
		n += m.AccessInfoChoice.Size()
	}
	if m.Timeout != 0 {
		n += 1 + sovTypes(uint64(m.Timeout))
	}
	return n
}

func (m *ReplaceSpecType_HttpAccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpAccess != nil {
		l = m.HttpAccess.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ServerPort != 0 {
		n += 1 + sovTypes(uint64(m.ServerPort))
	}
	if m.RefreshInterval != 0 {
		n += 1 + sovTypes(uint64(m.RefreshInterval))
	}
	if m.VerifyAllCertsWithCrl {
		n += 2
	}
	if m.AccessInfoChoice != nil {
		n += m.AccessInfoChoice.Size()
	}
	if m.Timeout != 0 {
		n += 1 + sovTypes(uint64(m.Timeout))
	}
	return n
}

func (m *GetSpecType_HttpAccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpAccess != nil {
		l = m.HttpAccess.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HTTPAccessInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPAccessInfo{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`ServerAddress:` + fmt.Sprintf("%v", this.ServerAddress) + `,`,
		`ServerPort:` + fmt.Sprintf("%v", this.ServerPort) + `,`,
		`RefreshInterval:` + fmt.Sprintf("%v", this.RefreshInterval) + `,`,
		`VerifyAllCertsWithCrl:` + fmt.Sprintf("%v", this.VerifyAllCertsWithCrl) + `,`,
		`AccessInfoChoice:` + fmt.Sprintf("%v", this.AccessInfoChoice) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HttpAccess) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HttpAccess{`,
		`HttpAccess:` + strings.Replace(fmt.Sprintf("%v", this.HttpAccess), "HTTPAccessInfo", "HTTPAccessInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`ServerAddress:` + fmt.Sprintf("%v", this.ServerAddress) + `,`,
		`ServerPort:` + fmt.Sprintf("%v", this.ServerPort) + `,`,
		`RefreshInterval:` + fmt.Sprintf("%v", this.RefreshInterval) + `,`,
		`VerifyAllCertsWithCrl:` + fmt.Sprintf("%v", this.VerifyAllCertsWithCrl) + `,`,
		`AccessInfoChoice:` + fmt.Sprintf("%v", this.AccessInfoChoice) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HttpAccess) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HttpAccess{`,
		`HttpAccess:` + strings.Replace(fmt.Sprintf("%v", this.HttpAccess), "HTTPAccessInfo", "HTTPAccessInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`ServerAddress:` + fmt.Sprintf("%v", this.ServerAddress) + `,`,
		`ServerPort:` + fmt.Sprintf("%v", this.ServerPort) + `,`,
		`RefreshInterval:` + fmt.Sprintf("%v", this.RefreshInterval) + `,`,
		`VerifyAllCertsWithCrl:` + fmt.Sprintf("%v", this.VerifyAllCertsWithCrl) + `,`,
		`AccessInfoChoice:` + fmt.Sprintf("%v", this.AccessInfoChoice) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HttpAccess) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HttpAccess{`,
		`HttpAccess:` + strings.Replace(fmt.Sprintf("%v", this.HttpAccess), "HTTPAccessInfo", "HTTPAccessInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`ServerAddress:` + fmt.Sprintf("%v", this.ServerAddress) + `,`,
		`ServerPort:` + fmt.Sprintf("%v", this.ServerPort) + `,`,
		`RefreshInterval:` + fmt.Sprintf("%v", this.RefreshInterval) + `,`,
		`VerifyAllCertsWithCrl:` + fmt.Sprintf("%v", this.VerifyAllCertsWithCrl) + `,`,
		`AccessInfoChoice:` + fmt.Sprintf("%v", this.AccessInfoChoice) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HttpAccess) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HttpAccess{`,
		`HttpAccess:` + strings.Replace(fmt.Sprintf("%v", this.HttpAccess), "HTTPAccessInfo", "HTTPAccessInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HTTPAccessInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HTTPAccessInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HTTPAccessInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPort", wireType)
			}
			m.ServerPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshInterval", wireType)
			}
			m.RefreshInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshInterval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyAllCertsWithCrl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VerifyAllCertsWithCrl = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpAccess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HTTPAccessInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AccessInfoChoice = &GlobalSpecType_HttpAccess{v}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPort", wireType)
			}
			m.ServerPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshInterval", wireType)
			}
			m.RefreshInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshInterval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyAllCertsWithCrl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VerifyAllCertsWithCrl = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpAccess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HTTPAccessInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AccessInfoChoice = &CreateSpecType_HttpAccess{v}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPort", wireType)
			}
			m.ServerPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshInterval", wireType)
			}
			m.RefreshInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshInterval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyAllCertsWithCrl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VerifyAllCertsWithCrl = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpAccess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HTTPAccessInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AccessInfoChoice = &ReplaceSpecType_HttpAccess{v}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPort", wireType)
			}
			m.ServerPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshInterval", wireType)
			}
			m.RefreshInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshInterval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyAllCertsWithCrl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VerifyAllCertsWithCrl = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpAccess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HTTPAccessInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AccessInfoChoice = &GetSpecType_HttpAccess{v}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
