//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	ves_io_schema_views_cdn_loadbalancer "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/cdn_loadbalancer"
	ves_io_schema_views_http_loadbalancer "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/http_loadbalancer"
	ves_io_schema_views_origin_pool "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/origin_pool"
)

// resourceVolterraCdnLoadbalancer is implementation of Volterra's CdnLoadbalancer resources
func resourceVolterraCdnLoadbalancer() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraCdnLoadbalancerCreate,
		Read:   resourceVolterraCdnLoadbalancerRead,
		Update: resourceVolterraCdnLoadbalancerUpdate,
		Delete: resourceVolterraCdnLoadbalancerDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"add_location": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"domains": {

				Type: schema.TypeList,

				Required: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"http": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"dns_volterra_managed": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"port": {
							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"https": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"add_hsts": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"http_redirect": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"tls_parameters": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"tls_certificates": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"certificate_url": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"description": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"custom_hash_algorithms": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"hash_algorithms": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"disable_ocsp_stapling": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{},
													},
												},

												"use_system_defaults": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{},
													},
												},

												"private_key": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info_internal": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"secret_encoding_type": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"blindfold_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"vault_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"key": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"secret_encoding": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"version": {
																			Type:     schema.TypeInt,
																			Optional: true,
																		},
																	},
																},
															},

															"wingman_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"tls_config": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"tls_11_plus": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"tls_12_plus": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"https_auto_cert": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"add_hsts": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"http_redirect": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"tls_config": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"tls_11_plus": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"tls_12_plus": {

										Type:     schema.TypeBool,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},

			"more_option": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"cache_ttl_options": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"cache_disabled": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"cache_ttl_default": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"cache_ttl_override": {

										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"header_options": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"request_headers_to_add": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"append": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"secret_value": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info_internal": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"secret_encoding_type": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"blindfold_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"vault_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"key": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"secret_encoding": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"version": {
																			Type:     schema.TypeInt,
																			Optional: true,
																		},
																	},
																},
															},

															"wingman_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"value": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"request_headers_to_remove": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},

									"response_headers_to_add": {

										Type:     schema.TypeList,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"append": {
													Type:     schema.TypeBool,
													Optional: true,
												},

												"name": {
													Type:     schema.TypeString,
													Optional: true,
												},

												"secret_value": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"blindfold_secret_info_internal": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"secret_encoding_type": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"blindfold_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"decryption_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"store_provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"clear_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"url": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"vault_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"key": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"location": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"provider": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"secret_encoding": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"version": {
																			Type:     schema.TypeInt,
																			Optional: true,
																		},
																	},
																},
															},

															"wingman_secret_info": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},

												"value": {

													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"response_headers_to_remove": {

										Type: schema.TypeList,

										Optional: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},

						"logging_options": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"client_log_options": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"header_list": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},

									"origin_log_options": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"header_list": {

													Type: schema.TypeList,

													Optional: true,
													Elem: &schema.Schema{
														Type: schema.TypeString,
													},
												},
											},
										},
									},
								},
							},
						},

						"security_options": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"auth_options": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"disable_auth": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"jwt": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"secret_key": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"blindfold_secret_info_internal": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"location": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"store_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"secret_encoding_type": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"blindfold_secret_info": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"location": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"store_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"clear_secret_info": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"url": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"vault_secret_info": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"key": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"location": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"secret_encoding": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"version": {
																						Type:     schema.TypeInt,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"wingman_secret_info": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"name": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},
																	},
																},
															},

															"bearer_token": {

																Type:     schema.TypeBool,
																Optional: true,
															},

															"cookie": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"header": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"name": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},

															"query_param": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"key": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"geo_filtering": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"allow_list": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"country_codes": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"invert_match": {
																Type:     schema.TypeBool,
																Optional: true,
															},
														},
													},
												},

												"block_list": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"country_codes": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"invert_match": {
																Type:     schema.TypeBool,
																Optional: true,
															},
														},
													},
												},
											},
										},
									},

									"ip_filtering": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"allow_list": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_match": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"ip_prefixes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"ipv6_prefixes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},

												"block_list": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"invert_match": {
																Type:     schema.TypeBool,
																Optional: true,
															},

															"ip_prefixes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"ipv6_prefixes": {

																Type: schema.TypeList,

																Optional: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},

			"origin_pool": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"follow_origin_redirect": {
							Type:     schema.TypeBool,
							Optional: true,
						},

						"origin_request_timeout": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"origin_servers": {

							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"public_ip": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"ip": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"public_name": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"dns_name": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},

						"public_name": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"dns_name": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"no_tls": {

							Type:     schema.TypeBool,
							Optional: true,
						},

						"use_tls": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"no_mtls": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"use_mtls": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"tls_certificates": {

													Type:     schema.TypeList,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"certificate_url": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"description": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"custom_hash_algorithms": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"hash_algorithms": {

																			Type: schema.TypeList,

																			Required: true,
																			Elem: &schema.Schema{
																				Type: schema.TypeString,
																			},
																		},
																	},
																},
															},

															"disable_ocsp_stapling": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{},
																},
															},

															"use_system_defaults": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{},
																},
															},

															"private_key": {

																Type:     schema.TypeSet,
																Optional: true,
																Elem: &schema.Resource{
																	Schema: map[string]*schema.Schema{

																		"blindfold_secret_info_internal": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"location": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"store_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"secret_encoding_type": {
																			Type:     schema.TypeString,
																			Optional: true,
																		},

																		"blindfold_secret_info": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"decryption_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"location": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"store_provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"clear_secret_info": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"url": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"vault_secret_info": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"key": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"location": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"provider": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"secret_encoding": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},

																					"version": {
																						Type:     schema.TypeInt,
																						Optional: true,
																					},
																				},
																			},
																		},

																		"wingman_secret_info": {

																			Type:     schema.TypeSet,
																			Optional: true,
																			Elem: &schema.Resource{
																				Schema: map[string]*schema.Schema{

																					"name": {
																						Type:     schema.TypeString,
																						Optional: true,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},

									"skip_server_verification": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"use_server_verification": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"trusted_ca_url": {
													Type:     schema.TypeString,
													Optional: true,
												},
											},
										},
									},

									"volterra_trusted_ca": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"disable_sni": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"sni": {

										Type:     schema.TypeString,
										Optional: true,
									},

									"use_host_header_as_sni": {

										Type:     schema.TypeBool,
										Optional: true,
									},

									"tls_config": {

										Type:     schema.TypeSet,
										Optional: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{

												"custom_security": {

													Type:     schema.TypeSet,
													Optional: true,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{

															"cipher_suites": {

																Type: schema.TypeList,

																Required: true,
																Elem: &schema.Schema{
																	Type: schema.TypeString,
																},
															},

															"max_version": {
																Type:     schema.TypeString,
																Optional: true,
															},

															"min_version": {
																Type:     schema.TypeString,
																Optional: true,
															},
														},
													},
												},

												"default_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"low_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},

												"medium_security": {

													Type:     schema.TypeBool,
													Optional: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// resourceVolterraCdnLoadbalancerCreate creates CdnLoadbalancer resource
func resourceVolterraCdnLoadbalancerCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType{}
	createReq := &ves_io_schema_views_cdn_loadbalancer.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//add_location
	if v, ok := d.GetOk("add_location"); ok && !isIntfNil(v) {

		createSpec.AddLocation =
			v.(bool)

	}

	//domains
	if v, ok := d.GetOk("domains"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			ls[i] = v.(string)
		}
		createSpec.Domains = ls

	}

	//loadbalancer_type

	loadbalancerTypeTypeFound := false

	if v, ok := d.GetOk("http"); ok && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_Http{}
		loadbalancerTypeInt.Http = &ves_io_schema_views_http_loadbalancer.ProxyTypeHttp{}
		createSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["dns_volterra_managed"]; ok && !isIntfNil(v) {

				loadbalancerTypeInt.Http.DnsVolterraManaged = v.(bool)

			}

			if v, ok := cs["port"]; ok && !isIntfNil(v) {

				loadbalancerTypeInt.Http.Port = uint32(v.(int))

			}

		}

	}

	if v, ok := d.GetOk("https"); ok && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_Https{}
		loadbalancerTypeInt.Https = &ves_io_schema_views_cdn_loadbalancer.CDNHTTPSCustomCertsType{}
		createSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["add_hsts"]; ok && !isIntfNil(v) {

				loadbalancerTypeInt.Https.AddHsts = v.(bool)

			}

			if v, ok := cs["http_redirect"]; ok && !isIntfNil(v) {

				loadbalancerTypeInt.Https.HttpRedirect = v.(bool)

			}

			if v, ok := cs["tls_parameters"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				tlsParameters := &ves_io_schema_views_cdn_loadbalancer.CDNDownstreamTlsParamsType{}
				loadbalancerTypeInt.Https.TlsParameters = tlsParameters
				for _, set := range sl {
					tlsParametersMapStrToI := set.(map[string]interface{})

					if v, ok := tlsParametersMapStrToI["tls_certificates"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
						tlsParameters.TlsCertificates = tlsCertificates
						for i, set := range sl {
							tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
							tlsCertificatesMapStrToI := set.(map[string]interface{})

							if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
								tlsCertificates[i].CertificateUrl = w.(string)
							}

							if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
								tlsCertificates[i].Description = w.(string)
							}

							ocspStaplingChoiceTypeFound := false

							if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

								ocspStaplingChoiceTypeFound = true
								ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
								ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
								tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

										hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
										for _, j := range v.([]interface{}) {
											hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
										}
										ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

									}

								}

							}

							if v, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

								ocspStaplingChoiceTypeFound = true
								_ = v
							}

							if v, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

								ocspStaplingChoiceTypeFound = true
								_ = v
							}

							if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								privateKey := &ves_io_schema.SecretType{}
								tlsCertificates[i].PrivateKey = privateKey
								for _, set := range sl {
									privateKeyMapStrToI := set.(map[string]interface{})

									if v, ok := privateKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										privateKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := privateKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

										privateKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := privateKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := privateKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

						}

					}

					if v, ok := tlsParametersMapStrToI["tls_config"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						tlsConfig := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig{}
						tlsParameters.TlsConfig = tlsConfig
						for _, set := range sl {
							tlsConfigMapStrToI := set.(map[string]interface{})

							choiceTypeFound := false

							if v, ok := tlsConfigMapStrToI["tls_11_plus"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig_Tls_11Plus{}
									choiceInt.Tls_11Plus = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["tls_12_plus"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig_Tls_12Plus{}
									choiceInt.Tls_12Plus = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("https_auto_cert"); ok && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_cdn_loadbalancer.CreateSpecType_HttpsAutoCert{}
		loadbalancerTypeInt.HttpsAutoCert = &ves_io_schema_views_cdn_loadbalancer.CDNHTTPSAutoCertsType{}
		createSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["add_hsts"]; ok && !isIntfNil(v) {

				loadbalancerTypeInt.HttpsAutoCert.AddHsts = v.(bool)

			}

			if v, ok := cs["http_redirect"]; ok && !isIntfNil(v) {

				loadbalancerTypeInt.HttpsAutoCert.HttpRedirect = v.(bool)

			}

			if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				tlsConfig := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig{}
				loadbalancerTypeInt.HttpsAutoCert.TlsConfig = tlsConfig
				for _, set := range sl {
					tlsConfigMapStrToI := set.(map[string]interface{})

					choiceTypeFound := false

					if v, ok := tlsConfigMapStrToI["tls_11_plus"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true

						if v.(bool) {
							choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig_Tls_11Plus{}
							choiceInt.Tls_11Plus = &ves_io_schema.Empty{}
							tlsConfig.Choice = choiceInt
						}

					}

					if v, ok := tlsConfigMapStrToI["tls_12_plus"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true

						if v.(bool) {
							choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig_Tls_12Plus{}
							choiceInt.Tls_12Plus = &ves_io_schema.Empty{}
							tlsConfig.Choice = choiceInt
						}

					}

				}

			}

		}

	}

	//more_option
	if v, ok := d.GetOk("more_option"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		moreOption := &ves_io_schema_views_cdn_loadbalancer.AdvancedOptionsType{}
		createSpec.MoreOption = moreOption
		for _, set := range sl {
			moreOptionMapStrToI := set.(map[string]interface{})

			if v, ok := moreOptionMapStrToI["cache_ttl_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				cacheTtlOptions := &ves_io_schema_views_cdn_loadbalancer.CacheTTLOptionsType{}
				moreOption.CacheTtlOptions = cacheTtlOptions
				for _, set := range sl {
					cacheTtlOptionsMapStrToI := set.(map[string]interface{})

					ttlOptionsTypeFound := false

					if v, ok := cacheTtlOptionsMapStrToI["cache_disabled"]; ok && !isIntfNil(v) && !ttlOptionsTypeFound {

						ttlOptionsTypeFound = true

						if v.(bool) {
							ttlOptionsInt := &ves_io_schema_views_cdn_loadbalancer.CacheTTLOptionsType_CacheDisabled{}
							ttlOptionsInt.CacheDisabled = &ves_io_schema.Empty{}
							cacheTtlOptions.TtlOptions = ttlOptionsInt
						}

					}

					if v, ok := cacheTtlOptionsMapStrToI["cache_ttl_default"]; ok && !isIntfNil(v) && !ttlOptionsTypeFound {

						ttlOptionsTypeFound = true
						ttlOptionsInt := &ves_io_schema_views_cdn_loadbalancer.CacheTTLOptionsType_CacheTtlDefault{}

						cacheTtlOptions.TtlOptions = ttlOptionsInt

						ttlOptionsInt.CacheTtlDefault = v.(string)

					}

					if v, ok := cacheTtlOptionsMapStrToI["cache_ttl_override"]; ok && !isIntfNil(v) && !ttlOptionsTypeFound {

						ttlOptionsTypeFound = true
						ttlOptionsInt := &ves_io_schema_views_cdn_loadbalancer.CacheTTLOptionsType_CacheTtlOverride{}

						cacheTtlOptions.TtlOptions = ttlOptionsInt

						ttlOptionsInt.CacheTtlOverride = v.(string)

					}

				}

			}

			if v, ok := moreOptionMapStrToI["header_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				headerOptions := &ves_io_schema_views_cdn_loadbalancer.HeaderControlType{}
				moreOption.HeaderOptions = headerOptions
				for _, set := range sl {
					headerOptionsMapStrToI := set.(map[string]interface{})

					if v, ok := headerOptionsMapStrToI["request_headers_to_add"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						requestHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
						headerOptions.RequestHeadersToAdd = requestHeadersToAdd
						for i, set := range sl {
							requestHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
							requestHeadersToAddMapStrToI := set.(map[string]interface{})

							if w, ok := requestHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
								requestHeadersToAdd[i].Append = w.(bool)
							}

							if w, ok := requestHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
								requestHeadersToAdd[i].Name = w.(string)
							}

							valueChoiceTypeFound := false

							if v, ok := requestHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
								valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
								requestHeadersToAdd[i].ValueChoice = valueChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := cs["secret_encoding_type"]; ok && !isIntfNil(v) {

										valueChoiceInt.SecretValue.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := cs["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := cs["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

							if v, ok := requestHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

								requestHeadersToAdd[i].ValueChoice = valueChoiceInt

								valueChoiceInt.Value = v.(string)

							}

						}

					}

					if w, ok := headerOptionsMapStrToI["request_headers_to_remove"]; ok && !isIntfNil(w) {
						ls := make([]string, len(w.([]interface{})))
						for i, v := range w.([]interface{}) {
							ls[i] = v.(string)
						}
						headerOptions.RequestHeadersToRemove = ls
					}

					if v, ok := headerOptionsMapStrToI["response_headers_to_add"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						responseHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
						headerOptions.ResponseHeadersToAdd = responseHeadersToAdd
						for i, set := range sl {
							responseHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
							responseHeadersToAddMapStrToI := set.(map[string]interface{})

							if w, ok := responseHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
								responseHeadersToAdd[i].Append = w.(bool)
							}

							if w, ok := responseHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
								responseHeadersToAdd[i].Name = w.(string)
							}

							valueChoiceTypeFound := false

							if v, ok := responseHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
								valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
								responseHeadersToAdd[i].ValueChoice = valueChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := cs["secret_encoding_type"]; ok && !isIntfNil(v) {

										valueChoiceInt.SecretValue.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := cs["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := cs["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

							if v, ok := responseHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

								responseHeadersToAdd[i].ValueChoice = valueChoiceInt

								valueChoiceInt.Value = v.(string)

							}

						}

					}

					if w, ok := headerOptionsMapStrToI["response_headers_to_remove"]; ok && !isIntfNil(w) {
						ls := make([]string, len(w.([]interface{})))
						for i, v := range w.([]interface{}) {
							ls[i] = v.(string)
						}
						headerOptions.ResponseHeadersToRemove = ls
					}

				}

			}

			if v, ok := moreOptionMapStrToI["logging_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				loggingOptions := &ves_io_schema_views_cdn_loadbalancer.LoggingOptionsType{}
				moreOption.LoggingOptions = loggingOptions
				for _, set := range sl {
					loggingOptionsMapStrToI := set.(map[string]interface{})

					if v, ok := loggingOptionsMapStrToI["client_log_options"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						clientLogOptions := &ves_io_schema_views_cdn_loadbalancer.LogHeaderOptions{}
						loggingOptions.ClientLogOptions = clientLogOptions
						for _, set := range sl {
							clientLogOptionsMapStrToI := set.(map[string]interface{})

							if w, ok := clientLogOptionsMapStrToI["header_list"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								clientLogOptions.HeaderList = ls
							}

						}

					}

					if v, ok := loggingOptionsMapStrToI["origin_log_options"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						originLogOptions := &ves_io_schema_views_cdn_loadbalancer.LogHeaderOptions{}
						loggingOptions.OriginLogOptions = originLogOptions
						for _, set := range sl {
							originLogOptionsMapStrToI := set.(map[string]interface{})

							if w, ok := originLogOptionsMapStrToI["header_list"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								originLogOptions.HeaderList = ls
							}

						}

					}

				}

			}

			if v, ok := moreOptionMapStrToI["security_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				securityOptions := &ves_io_schema_views_cdn_loadbalancer.SecurityOptionsType{}
				moreOption.SecurityOptions = securityOptions
				for _, set := range sl {
					securityOptionsMapStrToI := set.(map[string]interface{})

					if v, ok := securityOptionsMapStrToI["auth_options"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						authOptions := &ves_io_schema_views_cdn_loadbalancer.AuthenticationOptions{}
						securityOptions.AuthOptions = authOptions
						for _, set := range sl {
							authOptionsMapStrToI := set.(map[string]interface{})

							authOptionsTypeFound := false

							if v, ok := authOptionsMapStrToI["disable_auth"]; ok && !isIntfNil(v) && !authOptionsTypeFound {

								authOptionsTypeFound = true

								if v.(bool) {
									authOptionsInt := &ves_io_schema_views_cdn_loadbalancer.AuthenticationOptions_DisableAuth{}
									authOptionsInt.DisableAuth = &ves_io_schema.Empty{}
									authOptions.AuthOptions = authOptionsInt
								}

							}

							if v, ok := authOptionsMapStrToI["jwt"]; ok && !isIntfNil(v) && !authOptionsTypeFound {

								authOptionsTypeFound = true
								authOptionsInt := &ves_io_schema_views_cdn_loadbalancer.AuthenticationOptions_Jwt{}
								authOptionsInt.Jwt = &ves_io_schema_policy.JwtTokenAuthOptions{}
								authOptions.AuthOptions = authOptionsInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["secret_key"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										secretKey := &ves_io_schema.SecretType{}
										authOptionsInt.Jwt.SecretKey = secretKey
										for _, set := range sl {
											secretKeyMapStrToI := set.(map[string]interface{})

											if v, ok := secretKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
												secretKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
												for _, set := range sl {
													blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

													if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.Location = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.StoreProvider = w.(string)
													}

												}

											}

											if v, ok := secretKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

												secretKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											secretInfoOneofTypeFound := false

											if v, ok := secretKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
												secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
												secretKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}

											}

											if v, ok := secretKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
												secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
												secretKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}

											}

											if v, ok := secretKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
												secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
												secretKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["key"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

													}

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

													}

													if v, ok := cs["version"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

													}

												}

											}

											if v, ok := secretKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
												secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
												secretKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

													}

												}

											}

										}

									}

									tokenSourceTypeFound := false

									if v, ok := cs["bearer_token"]; ok && !isIntfNil(v) && !tokenSourceTypeFound {

										tokenSourceTypeFound = true

										if v.(bool) {
											tokenSourceInt := &ves_io_schema_policy.JwtTokenAuthOptions_BearerToken{}
											tokenSourceInt.BearerToken = &ves_io_schema.Empty{}
											authOptionsInt.Jwt.TokenSource = tokenSourceInt
										}

									}

									if v, ok := cs["cookie"]; ok && !isIntfNil(v) && !tokenSourceTypeFound {

										tokenSourceTypeFound = true
										tokenSourceInt := &ves_io_schema_policy.JwtTokenAuthOptions_Cookie{}
										tokenSourceInt.Cookie = &ves_io_schema_policy.HttpCookieName{}
										authOptionsInt.Jwt.TokenSource = tokenSourceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												tokenSourceInt.Cookie.Name = v.(string)

											}

										}

									}

									if v, ok := cs["header"]; ok && !isIntfNil(v) && !tokenSourceTypeFound {

										tokenSourceTypeFound = true
										tokenSourceInt := &ves_io_schema_policy.JwtTokenAuthOptions_Header{}
										tokenSourceInt.Header = &ves_io_schema_policy.HttpHeaderName{}
										authOptionsInt.Jwt.TokenSource = tokenSourceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												tokenSourceInt.Header.Name = v.(string)

											}

										}

									}

									if v, ok := cs["query_param"]; ok && !isIntfNil(v) && !tokenSourceTypeFound {

										tokenSourceTypeFound = true
										tokenSourceInt := &ves_io_schema_policy.JwtTokenAuthOptions_QueryParam{}
										tokenSourceInt.QueryParam = &ves_io_schema_policy.HttpQueryParameterName{}
										authOptionsInt.Jwt.TokenSource = tokenSourceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												tokenSourceInt.QueryParam.Key = v.(string)

											}

										}

									}

								}

							}

						}

					}

					if v, ok := securityOptionsMapStrToI["geo_filtering"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						geoFiltering := &ves_io_schema_views_cdn_loadbalancer.GeoFilteringOptions{}
						securityOptions.GeoFiltering = geoFiltering
						for _, set := range sl {
							geoFilteringMapStrToI := set.(map[string]interface{})

							geoFilteringTypeTypeFound := false

							if v, ok := geoFilteringMapStrToI["allow_list"]; ok && !isIntfNil(v) && !geoFilteringTypeTypeFound {

								geoFilteringTypeTypeFound = true
								geoFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.GeoFilteringOptions_AllowList{}
								geoFilteringTypeInt.AllowList = &ves_io_schema_policy.CountryCodeList{}
								geoFiltering.GeoFilteringType = geoFilteringTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["country_codes"]; ok && !isIntfNil(v) {

										country_codesList := []ves_io_schema_policy.CountryCode{}
										for _, j := range v.([]interface{}) {
											country_codesList = append(country_codesList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
										}
										geoFilteringTypeInt.AllowList.CountryCodes = country_codesList

									}

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										geoFilteringTypeInt.AllowList.InvertMatch = v.(bool)

									}

								}

							}

							if v, ok := geoFilteringMapStrToI["block_list"]; ok && !isIntfNil(v) && !geoFilteringTypeTypeFound {

								geoFilteringTypeTypeFound = true
								geoFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.GeoFilteringOptions_BlockList{}
								geoFilteringTypeInt.BlockList = &ves_io_schema_policy.CountryCodeList{}
								geoFiltering.GeoFilteringType = geoFilteringTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["country_codes"]; ok && !isIntfNil(v) {

										country_codesList := []ves_io_schema_policy.CountryCode{}
										for _, j := range v.([]interface{}) {
											country_codesList = append(country_codesList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
										}
										geoFilteringTypeInt.BlockList.CountryCodes = country_codesList

									}

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										geoFilteringTypeInt.BlockList.InvertMatch = v.(bool)

									}

								}

							}

						}

					}

					if v, ok := securityOptionsMapStrToI["ip_filtering"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						ipFiltering := &ves_io_schema_views_cdn_loadbalancer.IpFilteringOptions{}
						securityOptions.IpFiltering = ipFiltering
						for _, set := range sl {
							ipFilteringMapStrToI := set.(map[string]interface{})

							ipFilteringTypeTypeFound := false

							if v, ok := ipFilteringMapStrToI["allow_list"]; ok && !isIntfNil(v) && !ipFilteringTypeTypeFound {

								ipFilteringTypeTypeFound = true
								ipFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.IpFilteringOptions_AllowList{}
								ipFilteringTypeInt.AllowList = &ves_io_schema_policy.PrefixMatchList{}
								ipFiltering.IpFilteringType = ipFilteringTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										ipFilteringTypeInt.AllowList.InvertMatch = v.(bool)

									}

									if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipFilteringTypeInt.AllowList.IpPrefixes = ls

									}

									if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipFilteringTypeInt.AllowList.Ipv6Prefixes = ls

									}

								}

							}

							if v, ok := ipFilteringMapStrToI["block_list"]; ok && !isIntfNil(v) && !ipFilteringTypeTypeFound {

								ipFilteringTypeTypeFound = true
								ipFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.IpFilteringOptions_BlockList{}
								ipFilteringTypeInt.BlockList = &ves_io_schema_policy.PrefixMatchList{}
								ipFiltering.IpFilteringType = ipFilteringTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										ipFilteringTypeInt.BlockList.InvertMatch = v.(bool)

									}

									if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipFilteringTypeInt.BlockList.IpPrefixes = ls

									}

									if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipFilteringTypeInt.BlockList.Ipv6Prefixes = ls

									}

								}

							}

						}

					}

				}

			}

		}

	}

	//origin_pool
	if v, ok := d.GetOk("origin_pool"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		originPool := &ves_io_schema_views_cdn_loadbalancer.CdnOriginPoolType{}
		createSpec.OriginPool = originPool
		for _, set := range sl {
			originPoolMapStrToI := set.(map[string]interface{})

			if w, ok := originPoolMapStrToI["follow_origin_redirect"]; ok && !isIntfNil(w) {
				originPool.FollowOriginRedirect = w.(bool)
			}

			if w, ok := originPoolMapStrToI["origin_request_timeout"]; ok && !isIntfNil(w) {
				originPool.OriginRequestTimeout = w.(string)
			}

			if v, ok := originPoolMapStrToI["origin_servers"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				originServers := make([]*ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType, len(sl))
				originPool.OriginServers = originServers
				for i, set := range sl {
					originServers[i] = &ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType{}
					originServersMapStrToI := set.(map[string]interface{})

					choiceTypeFound := false

					if v, ok := originServersMapStrToI["public_ip"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true
						choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType_PublicIp{}
						choiceInt.PublicIp = &ves_io_schema_views_origin_pool.OriginServerPublicIP{}
						originServers[i].Choice = choiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["ip"]; ok && !isIntfNil(v) {

								choiceInt.PublicIp.Ip = v.(string)

							}

						}

					}

					if v, ok := originServersMapStrToI["public_name"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true
						choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType_PublicName{}
						choiceInt.PublicName = &ves_io_schema_views_origin_pool.OriginServerPublicName{}
						originServers[i].Choice = choiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["dns_name"]; ok && !isIntfNil(v) {

								choiceInt.PublicName.DnsName = v.(string)

							}

						}

					}

				}

			}

			if v, ok := originPoolMapStrToI["public_name"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				publicName := &ves_io_schema_views_origin_pool.OriginServerPublicName{}
				originPool.PublicName = publicName
				for _, set := range sl {
					publicNameMapStrToI := set.(map[string]interface{})

					if w, ok := publicNameMapStrToI["dns_name"]; ok && !isIntfNil(w) {
						publicName.DnsName = w.(string)
					}

				}

			}

			tlsChoiceTypeFound := false

			if v, ok := originPoolMapStrToI["no_tls"]; ok && !isIntfNil(v) && !tlsChoiceTypeFound {

				tlsChoiceTypeFound = true

				if v.(bool) {
					tlsChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CdnOriginPoolType_NoTls{}
					tlsChoiceInt.NoTls = &ves_io_schema.Empty{}
					originPool.TlsChoice = tlsChoiceInt
				}

			}

			if v, ok := originPoolMapStrToI["use_tls"]; ok && !isIntfNil(v) && !tlsChoiceTypeFound {

				tlsChoiceTypeFound = true
				tlsChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CdnOriginPoolType_UseTls{}
				tlsChoiceInt.UseTls = &ves_io_schema_views_origin_pool.UpstreamTlsParameters{}
				originPool.TlsChoice = tlsChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					mtlsChoiceTypeFound := false

					if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true

						if v.(bool) {
							mtlsChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_NoMtls{}
							mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.MtlsChoice = mtlsChoiceInt
						}

					}

					if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true
						mtlsChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_UseMtls{}
						mtlsChoiceInt.UseMtls = &ves_io_schema_views_origin_pool.TlsCertificatesType{}
						tlsChoiceInt.UseTls.MtlsChoice = mtlsChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["tls_certificates"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
								mtlsChoiceInt.UseMtls.TlsCertificates = tlsCertificates
								for i, set := range sl {
									tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
									tlsCertificatesMapStrToI := set.(map[string]interface{})

									if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
										tlsCertificates[i].CertificateUrl = w.(string)
									}

									if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
										tlsCertificates[i].Description = w.(string)
									}

									ocspStaplingChoiceTypeFound := false

									if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

										ocspStaplingChoiceTypeFound = true
										ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
										ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
										tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

												hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
												for _, j := range v.([]interface{}) {
													hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
												}
												ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

											}

										}

									}

									if v, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

										ocspStaplingChoiceTypeFound = true
										_ = v
									}

									if v, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

										ocspStaplingChoiceTypeFound = true
										_ = v
									}

									if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										privateKey := &ves_io_schema.SecretType{}
										tlsCertificates[i].PrivateKey = privateKey
										for _, set := range sl {
											privateKeyMapStrToI := set.(map[string]interface{})

											if v, ok := privateKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
												privateKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
												for _, set := range sl {
													blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

													if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.Location = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.StoreProvider = w.(string)
													}

												}

											}

											if v, ok := privateKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

												privateKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											secretInfoOneofTypeFound := false

											if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
												secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}

											}

											if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
												secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}

											}

											if v, ok := privateKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
												secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["key"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

													}

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

													}

													if v, ok := cs["version"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

													}

												}

											}

											if v, ok := privateKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
												secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

													}

												}

											}

										}

									}

								}

							}

						}

					}

					serverValidationChoiceTypeFound := false

					if v, ok := cs["skip_server_verification"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

						serverValidationChoiceTypeFound = true

						if v.(bool) {
							serverValidationChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_SkipServerVerification{}
							serverValidationChoiceInt.SkipServerVerification = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.ServerValidationChoice = serverValidationChoiceInt
						}

					}

					if v, ok := cs["use_server_verification"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

						serverValidationChoiceTypeFound = true
						serverValidationChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_UseServerVerification{}
						serverValidationChoiceInt.UseServerVerification = &ves_io_schema_views_origin_pool.UpstreamTlsValidationContext{}
						tlsChoiceInt.UseTls.ServerValidationChoice = serverValidationChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) {

								serverValidationChoiceInt.UseServerVerification.TrustedCaUrl = v.(string)

							}

						}

					}

					if v, ok := cs["volterra_trusted_ca"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

						serverValidationChoiceTypeFound = true

						if v.(bool) {
							serverValidationChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_VolterraTrustedCa{}
							serverValidationChoiceInt.VolterraTrustedCa = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.ServerValidationChoice = serverValidationChoiceInt
						}

					}

					sniChoiceTypeFound := false

					if v, ok := cs["disable_sni"]; ok && !isIntfNil(v) && !sniChoiceTypeFound {

						sniChoiceTypeFound = true

						if v.(bool) {
							sniChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_DisableSni{}
							sniChoiceInt.DisableSni = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.SniChoice = sniChoiceInt
						}

					}

					if v, ok := cs["sni"]; ok && !isIntfNil(v) && !sniChoiceTypeFound {

						sniChoiceTypeFound = true
						sniChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_Sni{}

						tlsChoiceInt.UseTls.SniChoice = sniChoiceInt

						sniChoiceInt.Sni = v.(string)

					}

					if v, ok := cs["use_host_header_as_sni"]; ok && !isIntfNil(v) && !sniChoiceTypeFound {

						sniChoiceTypeFound = true

						if v.(bool) {
							sniChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_UseHostHeaderAsSni{}
							sniChoiceInt.UseHostHeaderAsSni = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.SniChoice = sniChoiceInt
						}

					}

					if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						tlsConfig := &ves_io_schema_views.TlsConfig{}
						tlsChoiceInt.UseTls.TlsConfig = tlsConfig
						for _, set := range sl {
							tlsConfigMapStrToI := set.(map[string]interface{})

							choiceTypeFound := false

							if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
								choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
								tlsConfig.Choice = choiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										choiceInt.CustomSecurity.CipherSuites = ls

									}

									if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

										choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

									}

									if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

										choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

									}

								}

							}

							if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
									choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
									choiceInt.LowSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
									choiceInt.MediumSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

						}

					}

				}

			}

		}

	}

	log.Printf("[DEBUG] Creating Volterra CdnLoadbalancer object with struct: %+v", createReq)

	createCdnLoadbalancerResp, err := client.CreateObject(context.Background(), ves_io_schema_views_cdn_loadbalancer.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating CdnLoadbalancer: %s", err)
	}
	d.SetId(createCdnLoadbalancerResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraCdnLoadbalancerRead(d, meta)
}

func resourceVolterraCdnLoadbalancerRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_views_cdn_loadbalancer.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] CdnLoadbalancer %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra CdnLoadbalancer %q: %s", d.Id(), err)
	}
	return setCdnLoadbalancerFields(client, d, resp)
}

func setCdnLoadbalancerFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraCdnLoadbalancerUpdate updates CdnLoadbalancer resource
func resourceVolterraCdnLoadbalancerUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType{}
	updateReq := &ves_io_schema_views_cdn_loadbalancer.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}
	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	if v, ok := d.GetOk("add_location"); ok && !isIntfNil(v) {

		updateSpec.AddLocation =
			v.(bool)

	}

	if v, ok := d.GetOk("domains"); ok && !isIntfNil(v) {

		ls := make([]string, len(v.([]interface{})))
		for i, v := range v.([]interface{}) {
			ls[i] = v.(string)
		}
		updateSpec.Domains = ls

	}

	loadbalancerTypeTypeFound := false

	if v, ok := d.GetOk("http"); ok && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_Http{}
		loadbalancerTypeInt.Http = &ves_io_schema_views_http_loadbalancer.ProxyTypeHttp{}
		updateSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["dns_volterra_managed"]; ok && !isIntfNil(v) {

				loadbalancerTypeInt.Http.DnsVolterraManaged = v.(bool)

			}

			if v, ok := cs["port"]; ok && !isIntfNil(v) {

				loadbalancerTypeInt.Http.Port = uint32(v.(int))

			}

		}

	}

	if v, ok := d.GetOk("https"); ok && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_Https{}
		loadbalancerTypeInt.Https = &ves_io_schema_views_cdn_loadbalancer.CDNHTTPSCustomCertsType{}
		updateSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["add_hsts"]; ok && !isIntfNil(v) {

				loadbalancerTypeInt.Https.AddHsts = v.(bool)

			}

			if v, ok := cs["http_redirect"]; ok && !isIntfNil(v) {

				loadbalancerTypeInt.Https.HttpRedirect = v.(bool)

			}

			if v, ok := cs["tls_parameters"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				tlsParameters := &ves_io_schema_views_cdn_loadbalancer.CDNDownstreamTlsParamsType{}
				loadbalancerTypeInt.Https.TlsParameters = tlsParameters
				for _, set := range sl {
					tlsParametersMapStrToI := set.(map[string]interface{})

					if v, ok := tlsParametersMapStrToI["tls_certificates"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
						tlsParameters.TlsCertificates = tlsCertificates
						for i, set := range sl {
							tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
							tlsCertificatesMapStrToI := set.(map[string]interface{})

							if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
								tlsCertificates[i].CertificateUrl = w.(string)
							}

							if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
								tlsCertificates[i].Description = w.(string)
							}

							ocspStaplingChoiceTypeFound := false

							if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

								ocspStaplingChoiceTypeFound = true
								ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
								ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
								tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

										hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
										for _, j := range v.([]interface{}) {
											hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
										}
										ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

									}

								}

							}

							if v, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

								ocspStaplingChoiceTypeFound = true
								_ = v
							}

							if v, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

								ocspStaplingChoiceTypeFound = true
								_ = v
							}

							if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

								sl := v.(*schema.Set).List()
								privateKey := &ves_io_schema.SecretType{}
								tlsCertificates[i].PrivateKey = privateKey
								for _, set := range sl {
									privateKeyMapStrToI := set.(map[string]interface{})

									if v, ok := privateKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										privateKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := privateKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

										privateKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := privateKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := privateKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										privateKey.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

						}

					}

					if v, ok := tlsParametersMapStrToI["tls_config"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						tlsConfig := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig{}
						tlsParameters.TlsConfig = tlsConfig
						for _, set := range sl {
							tlsConfigMapStrToI := set.(map[string]interface{})

							choiceTypeFound := false

							if v, ok := tlsConfigMapStrToI["tls_11_plus"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig_Tls_11Plus{}
									choiceInt.Tls_11Plus = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["tls_12_plus"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig_Tls_12Plus{}
									choiceInt.Tls_12Plus = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("https_auto_cert"); ok && !loadbalancerTypeTypeFound {

		loadbalancerTypeTypeFound = true
		loadbalancerTypeInt := &ves_io_schema_views_cdn_loadbalancer.ReplaceSpecType_HttpsAutoCert{}
		loadbalancerTypeInt.HttpsAutoCert = &ves_io_schema_views_cdn_loadbalancer.CDNHTTPSAutoCertsType{}
		updateSpec.LoadbalancerType = loadbalancerTypeInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["add_hsts"]; ok && !isIntfNil(v) {

				loadbalancerTypeInt.HttpsAutoCert.AddHsts = v.(bool)

			}

			if v, ok := cs["http_redirect"]; ok && !isIntfNil(v) {

				loadbalancerTypeInt.HttpsAutoCert.HttpRedirect = v.(bool)

			}

			if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				tlsConfig := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig{}
				loadbalancerTypeInt.HttpsAutoCert.TlsConfig = tlsConfig
				for _, set := range sl {
					tlsConfigMapStrToI := set.(map[string]interface{})

					choiceTypeFound := false

					if v, ok := tlsConfigMapStrToI["tls_11_plus"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true

						if v.(bool) {
							choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig_Tls_11Plus{}
							choiceInt.Tls_11Plus = &ves_io_schema.Empty{}
							tlsConfig.Choice = choiceInt
						}

					}

					if v, ok := tlsConfigMapStrToI["tls_12_plus"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true

						if v.(bool) {
							choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNTLSConfig_Tls_12Plus{}
							choiceInt.Tls_12Plus = &ves_io_schema.Empty{}
							tlsConfig.Choice = choiceInt
						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("more_option"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		moreOption := &ves_io_schema_views_cdn_loadbalancer.AdvancedOptionsType{}
		updateSpec.MoreOption = moreOption
		for _, set := range sl {
			moreOptionMapStrToI := set.(map[string]interface{})

			if v, ok := moreOptionMapStrToI["cache_ttl_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				cacheTtlOptions := &ves_io_schema_views_cdn_loadbalancer.CacheTTLOptionsType{}
				moreOption.CacheTtlOptions = cacheTtlOptions
				for _, set := range sl {
					cacheTtlOptionsMapStrToI := set.(map[string]interface{})

					ttlOptionsTypeFound := false

					if v, ok := cacheTtlOptionsMapStrToI["cache_disabled"]; ok && !isIntfNil(v) && !ttlOptionsTypeFound {

						ttlOptionsTypeFound = true

						if v.(bool) {
							ttlOptionsInt := &ves_io_schema_views_cdn_loadbalancer.CacheTTLOptionsType_CacheDisabled{}
							ttlOptionsInt.CacheDisabled = &ves_io_schema.Empty{}
							cacheTtlOptions.TtlOptions = ttlOptionsInt
						}

					}

					if v, ok := cacheTtlOptionsMapStrToI["cache_ttl_default"]; ok && !isIntfNil(v) && !ttlOptionsTypeFound {

						ttlOptionsTypeFound = true
						ttlOptionsInt := &ves_io_schema_views_cdn_loadbalancer.CacheTTLOptionsType_CacheTtlDefault{}

						cacheTtlOptions.TtlOptions = ttlOptionsInt

						ttlOptionsInt.CacheTtlDefault = v.(string)

					}

					if v, ok := cacheTtlOptionsMapStrToI["cache_ttl_override"]; ok && !isIntfNil(v) && !ttlOptionsTypeFound {

						ttlOptionsTypeFound = true
						ttlOptionsInt := &ves_io_schema_views_cdn_loadbalancer.CacheTTLOptionsType_CacheTtlOverride{}

						cacheTtlOptions.TtlOptions = ttlOptionsInt

						ttlOptionsInt.CacheTtlOverride = v.(string)

					}

				}

			}

			if v, ok := moreOptionMapStrToI["header_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				headerOptions := &ves_io_schema_views_cdn_loadbalancer.HeaderControlType{}
				moreOption.HeaderOptions = headerOptions
				for _, set := range sl {
					headerOptionsMapStrToI := set.(map[string]interface{})

					if v, ok := headerOptionsMapStrToI["request_headers_to_add"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						requestHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
						headerOptions.RequestHeadersToAdd = requestHeadersToAdd
						for i, set := range sl {
							requestHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
							requestHeadersToAddMapStrToI := set.(map[string]interface{})

							if w, ok := requestHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
								requestHeadersToAdd[i].Append = w.(bool)
							}

							if w, ok := requestHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
								requestHeadersToAdd[i].Name = w.(string)
							}

							valueChoiceTypeFound := false

							if v, ok := requestHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
								valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
								requestHeadersToAdd[i].ValueChoice = valueChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := cs["secret_encoding_type"]; ok && !isIntfNil(v) {

										valueChoiceInt.SecretValue.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := cs["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := cs["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

							if v, ok := requestHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

								requestHeadersToAdd[i].ValueChoice = valueChoiceInt

								valueChoiceInt.Value = v.(string)

							}

						}

					}

					if w, ok := headerOptionsMapStrToI["request_headers_to_remove"]; ok && !isIntfNil(w) {
						ls := make([]string, len(w.([]interface{})))
						for i, v := range w.([]interface{}) {
							ls[i] = v.(string)
						}
						headerOptions.RequestHeadersToRemove = ls
					}

					if v, ok := headerOptionsMapStrToI["response_headers_to_add"]; ok && !isIntfNil(v) {

						sl := v.([]interface{})
						responseHeadersToAdd := make([]*ves_io_schema.HeaderManipulationOptionType, len(sl))
						headerOptions.ResponseHeadersToAdd = responseHeadersToAdd
						for i, set := range sl {
							responseHeadersToAdd[i] = &ves_io_schema.HeaderManipulationOptionType{}
							responseHeadersToAddMapStrToI := set.(map[string]interface{})

							if w, ok := responseHeadersToAddMapStrToI["append"]; ok && !isIntfNil(w) {
								responseHeadersToAdd[i].Append = w.(bool)
							}

							if w, ok := responseHeadersToAddMapStrToI["name"]; ok && !isIntfNil(w) {
								responseHeadersToAdd[i].Name = w.(string)
							}

							valueChoiceTypeFound := false

							if v, ok := responseHeadersToAddMapStrToI["secret_value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_SecretValue{}
								valueChoiceInt.SecretValue = &ves_io_schema.SecretType{}
								responseHeadersToAdd[i].ValueChoice = valueChoiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
										for _, set := range sl {
											blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

											if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.Location = w.(string)
											}

											if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
												blindfoldSecretInfoInternal.StoreProvider = w.(string)
											}

										}

									}

									if v, ok := cs["secret_encoding_type"]; ok && !isIntfNil(v) {

										valueChoiceInt.SecretValue.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

									}

									secretInfoOneofTypeFound := false

									if v, ok := cs["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
										secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

											}

											if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

											}

										}

									}

									if v, ok := cs["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
										secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["url"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

											}

										}

									}

									if v, ok := cs["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
										secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

											}

											if v, ok := cs["location"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

											}

											if v, ok := cs["provider"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

											}

											if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											if v, ok := cs["version"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

											}

										}

									}

									if v, ok := cs["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

										secretInfoOneofTypeFound = true
										secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
										secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
										valueChoiceInt.SecretValue.SecretInfoOneof = secretInfoOneofInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

											}

										}

									}

								}

							}

							if v, ok := responseHeadersToAddMapStrToI["value"]; ok && !isIntfNil(v) && !valueChoiceTypeFound {

								valueChoiceTypeFound = true
								valueChoiceInt := &ves_io_schema.HeaderManipulationOptionType_Value{}

								responseHeadersToAdd[i].ValueChoice = valueChoiceInt

								valueChoiceInt.Value = v.(string)

							}

						}

					}

					if w, ok := headerOptionsMapStrToI["response_headers_to_remove"]; ok && !isIntfNil(w) {
						ls := make([]string, len(w.([]interface{})))
						for i, v := range w.([]interface{}) {
							ls[i] = v.(string)
						}
						headerOptions.ResponseHeadersToRemove = ls
					}

				}

			}

			if v, ok := moreOptionMapStrToI["logging_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				loggingOptions := &ves_io_schema_views_cdn_loadbalancer.LoggingOptionsType{}
				moreOption.LoggingOptions = loggingOptions
				for _, set := range sl {
					loggingOptionsMapStrToI := set.(map[string]interface{})

					if v, ok := loggingOptionsMapStrToI["client_log_options"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						clientLogOptions := &ves_io_schema_views_cdn_loadbalancer.LogHeaderOptions{}
						loggingOptions.ClientLogOptions = clientLogOptions
						for _, set := range sl {
							clientLogOptionsMapStrToI := set.(map[string]interface{})

							if w, ok := clientLogOptionsMapStrToI["header_list"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								clientLogOptions.HeaderList = ls
							}

						}

					}

					if v, ok := loggingOptionsMapStrToI["origin_log_options"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						originLogOptions := &ves_io_schema_views_cdn_loadbalancer.LogHeaderOptions{}
						loggingOptions.OriginLogOptions = originLogOptions
						for _, set := range sl {
							originLogOptionsMapStrToI := set.(map[string]interface{})

							if w, ok := originLogOptionsMapStrToI["header_list"]; ok && !isIntfNil(w) {
								ls := make([]string, len(w.([]interface{})))
								for i, v := range w.([]interface{}) {
									ls[i] = v.(string)
								}
								originLogOptions.HeaderList = ls
							}

						}

					}

				}

			}

			if v, ok := moreOptionMapStrToI["security_options"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				securityOptions := &ves_io_schema_views_cdn_loadbalancer.SecurityOptionsType{}
				moreOption.SecurityOptions = securityOptions
				for _, set := range sl {
					securityOptionsMapStrToI := set.(map[string]interface{})

					if v, ok := securityOptionsMapStrToI["auth_options"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						authOptions := &ves_io_schema_views_cdn_loadbalancer.AuthenticationOptions{}
						securityOptions.AuthOptions = authOptions
						for _, set := range sl {
							authOptionsMapStrToI := set.(map[string]interface{})

							authOptionsTypeFound := false

							if v, ok := authOptionsMapStrToI["disable_auth"]; ok && !isIntfNil(v) && !authOptionsTypeFound {

								authOptionsTypeFound = true

								if v.(bool) {
									authOptionsInt := &ves_io_schema_views_cdn_loadbalancer.AuthenticationOptions_DisableAuth{}
									authOptionsInt.DisableAuth = &ves_io_schema.Empty{}
									authOptions.AuthOptions = authOptionsInt
								}

							}

							if v, ok := authOptionsMapStrToI["jwt"]; ok && !isIntfNil(v) && !authOptionsTypeFound {

								authOptionsTypeFound = true
								authOptionsInt := &ves_io_schema_views_cdn_loadbalancer.AuthenticationOptions_Jwt{}
								authOptionsInt.Jwt = &ves_io_schema_policy.JwtTokenAuthOptions{}
								authOptions.AuthOptions = authOptionsInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["secret_key"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										secretKey := &ves_io_schema.SecretType{}
										authOptionsInt.Jwt.SecretKey = secretKey
										for _, set := range sl {
											secretKeyMapStrToI := set.(map[string]interface{})

											if v, ok := secretKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
												secretKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
												for _, set := range sl {
													blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

													if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.Location = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.StoreProvider = w.(string)
													}

												}

											}

											if v, ok := secretKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

												secretKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											secretInfoOneofTypeFound := false

											if v, ok := secretKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
												secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
												secretKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}

											}

											if v, ok := secretKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
												secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
												secretKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}

											}

											if v, ok := secretKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
												secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
												secretKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["key"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

													}

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

													}

													if v, ok := cs["version"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

													}

												}

											}

											if v, ok := secretKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
												secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
												secretKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

													}

												}

											}

										}

									}

									tokenSourceTypeFound := false

									if v, ok := cs["bearer_token"]; ok && !isIntfNil(v) && !tokenSourceTypeFound {

										tokenSourceTypeFound = true

										if v.(bool) {
											tokenSourceInt := &ves_io_schema_policy.JwtTokenAuthOptions_BearerToken{}
											tokenSourceInt.BearerToken = &ves_io_schema.Empty{}
											authOptionsInt.Jwt.TokenSource = tokenSourceInt
										}

									}

									if v, ok := cs["cookie"]; ok && !isIntfNil(v) && !tokenSourceTypeFound {

										tokenSourceTypeFound = true
										tokenSourceInt := &ves_io_schema_policy.JwtTokenAuthOptions_Cookie{}
										tokenSourceInt.Cookie = &ves_io_schema_policy.HttpCookieName{}
										authOptionsInt.Jwt.TokenSource = tokenSourceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												tokenSourceInt.Cookie.Name = v.(string)

											}

										}

									}

									if v, ok := cs["header"]; ok && !isIntfNil(v) && !tokenSourceTypeFound {

										tokenSourceTypeFound = true
										tokenSourceInt := &ves_io_schema_policy.JwtTokenAuthOptions_Header{}
										tokenSourceInt.Header = &ves_io_schema_policy.HttpHeaderName{}
										authOptionsInt.Jwt.TokenSource = tokenSourceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["name"]; ok && !isIntfNil(v) {

												tokenSourceInt.Header.Name = v.(string)

											}

										}

									}

									if v, ok := cs["query_param"]; ok && !isIntfNil(v) && !tokenSourceTypeFound {

										tokenSourceTypeFound = true
										tokenSourceInt := &ves_io_schema_policy.JwtTokenAuthOptions_QueryParam{}
										tokenSourceInt.QueryParam = &ves_io_schema_policy.HttpQueryParameterName{}
										authOptionsInt.Jwt.TokenSource = tokenSourceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["key"]; ok && !isIntfNil(v) {

												tokenSourceInt.QueryParam.Key = v.(string)

											}

										}

									}

								}

							}

						}

					}

					if v, ok := securityOptionsMapStrToI["geo_filtering"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						geoFiltering := &ves_io_schema_views_cdn_loadbalancer.GeoFilteringOptions{}
						securityOptions.GeoFiltering = geoFiltering
						for _, set := range sl {
							geoFilteringMapStrToI := set.(map[string]interface{})

							geoFilteringTypeTypeFound := false

							if v, ok := geoFilteringMapStrToI["allow_list"]; ok && !isIntfNil(v) && !geoFilteringTypeTypeFound {

								geoFilteringTypeTypeFound = true
								geoFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.GeoFilteringOptions_AllowList{}
								geoFilteringTypeInt.AllowList = &ves_io_schema_policy.CountryCodeList{}
								geoFiltering.GeoFilteringType = geoFilteringTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["country_codes"]; ok && !isIntfNil(v) {

										country_codesList := []ves_io_schema_policy.CountryCode{}
										for _, j := range v.([]interface{}) {
											country_codesList = append(country_codesList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
										}
										geoFilteringTypeInt.AllowList.CountryCodes = country_codesList

									}

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										geoFilteringTypeInt.AllowList.InvertMatch = v.(bool)

									}

								}

							}

							if v, ok := geoFilteringMapStrToI["block_list"]; ok && !isIntfNil(v) && !geoFilteringTypeTypeFound {

								geoFilteringTypeTypeFound = true
								geoFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.GeoFilteringOptions_BlockList{}
								geoFilteringTypeInt.BlockList = &ves_io_schema_policy.CountryCodeList{}
								geoFiltering.GeoFilteringType = geoFilteringTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["country_codes"]; ok && !isIntfNil(v) {

										country_codesList := []ves_io_schema_policy.CountryCode{}
										for _, j := range v.([]interface{}) {
											country_codesList = append(country_codesList, ves_io_schema_policy.CountryCode(ves_io_schema_policy.CountryCode_value[j.(string)]))
										}
										geoFilteringTypeInt.BlockList.CountryCodes = country_codesList

									}

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										geoFilteringTypeInt.BlockList.InvertMatch = v.(bool)

									}

								}

							}

						}

					}

					if v, ok := securityOptionsMapStrToI["ip_filtering"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						ipFiltering := &ves_io_schema_views_cdn_loadbalancer.IpFilteringOptions{}
						securityOptions.IpFiltering = ipFiltering
						for _, set := range sl {
							ipFilteringMapStrToI := set.(map[string]interface{})

							ipFilteringTypeTypeFound := false

							if v, ok := ipFilteringMapStrToI["allow_list"]; ok && !isIntfNil(v) && !ipFilteringTypeTypeFound {

								ipFilteringTypeTypeFound = true
								ipFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.IpFilteringOptions_AllowList{}
								ipFilteringTypeInt.AllowList = &ves_io_schema_policy.PrefixMatchList{}
								ipFiltering.IpFilteringType = ipFilteringTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										ipFilteringTypeInt.AllowList.InvertMatch = v.(bool)

									}

									if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipFilteringTypeInt.AllowList.IpPrefixes = ls

									}

									if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipFilteringTypeInt.AllowList.Ipv6Prefixes = ls

									}

								}

							}

							if v, ok := ipFilteringMapStrToI["block_list"]; ok && !isIntfNil(v) && !ipFilteringTypeTypeFound {

								ipFilteringTypeTypeFound = true
								ipFilteringTypeInt := &ves_io_schema_views_cdn_loadbalancer.IpFilteringOptions_BlockList{}
								ipFilteringTypeInt.BlockList = &ves_io_schema_policy.PrefixMatchList{}
								ipFiltering.IpFilteringType = ipFilteringTypeInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["invert_match"]; ok && !isIntfNil(v) {

										ipFilteringTypeInt.BlockList.InvertMatch = v.(bool)

									}

									if v, ok := cs["ip_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipFilteringTypeInt.BlockList.IpPrefixes = ls

									}

									if v, ok := cs["ipv6_prefixes"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										ipFilteringTypeInt.BlockList.Ipv6Prefixes = ls

									}

								}

							}

						}

					}

				}

			}

		}

	}

	if v, ok := d.GetOk("origin_pool"); ok && !isIntfNil(v) {

		sl := v.(*schema.Set).List()
		originPool := &ves_io_schema_views_cdn_loadbalancer.CdnOriginPoolType{}
		updateSpec.OriginPool = originPool
		for _, set := range sl {
			originPoolMapStrToI := set.(map[string]interface{})

			if w, ok := originPoolMapStrToI["follow_origin_redirect"]; ok && !isIntfNil(w) {
				originPool.FollowOriginRedirect = w.(bool)
			}

			if w, ok := originPoolMapStrToI["origin_request_timeout"]; ok && !isIntfNil(w) {
				originPool.OriginRequestTimeout = w.(string)
			}

			if v, ok := originPoolMapStrToI["origin_servers"]; ok && !isIntfNil(v) {

				sl := v.([]interface{})
				originServers := make([]*ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType, len(sl))
				originPool.OriginServers = originServers
				for i, set := range sl {
					originServers[i] = &ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType{}
					originServersMapStrToI := set.(map[string]interface{})

					choiceTypeFound := false

					if v, ok := originServersMapStrToI["public_ip"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true
						choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType_PublicIp{}
						choiceInt.PublicIp = &ves_io_schema_views_origin_pool.OriginServerPublicIP{}
						originServers[i].Choice = choiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["ip"]; ok && !isIntfNil(v) {

								choiceInt.PublicIp.Ip = v.(string)

							}

						}

					}

					if v, ok := originServersMapStrToI["public_name"]; ok && !isIntfNil(v) && !choiceTypeFound {

						choiceTypeFound = true
						choiceInt := &ves_io_schema_views_cdn_loadbalancer.CDNOriginServerType_PublicName{}
						choiceInt.PublicName = &ves_io_schema_views_origin_pool.OriginServerPublicName{}
						originServers[i].Choice = choiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["dns_name"]; ok && !isIntfNil(v) {

								choiceInt.PublicName.DnsName = v.(string)

							}

						}

					}

				}

			}

			if v, ok := originPoolMapStrToI["public_name"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				publicName := &ves_io_schema_views_origin_pool.OriginServerPublicName{}
				originPool.PublicName = publicName
				for _, set := range sl {
					publicNameMapStrToI := set.(map[string]interface{})

					if w, ok := publicNameMapStrToI["dns_name"]; ok && !isIntfNil(w) {
						publicName.DnsName = w.(string)
					}

				}

			}

			tlsChoiceTypeFound := false

			if v, ok := originPoolMapStrToI["no_tls"]; ok && !isIntfNil(v) && !tlsChoiceTypeFound {

				tlsChoiceTypeFound = true

				if v.(bool) {
					tlsChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CdnOriginPoolType_NoTls{}
					tlsChoiceInt.NoTls = &ves_io_schema.Empty{}
					originPool.TlsChoice = tlsChoiceInt
				}

			}

			if v, ok := originPoolMapStrToI["use_tls"]; ok && !isIntfNil(v) && !tlsChoiceTypeFound {

				tlsChoiceTypeFound = true
				tlsChoiceInt := &ves_io_schema_views_cdn_loadbalancer.CdnOriginPoolType_UseTls{}
				tlsChoiceInt.UseTls = &ves_io_schema_views_origin_pool.UpstreamTlsParameters{}
				originPool.TlsChoice = tlsChoiceInt

				sl := v.(*schema.Set).List()
				for _, set := range sl {
					cs := set.(map[string]interface{})

					mtlsChoiceTypeFound := false

					if v, ok := cs["no_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true

						if v.(bool) {
							mtlsChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_NoMtls{}
							mtlsChoiceInt.NoMtls = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.MtlsChoice = mtlsChoiceInt
						}

					}

					if v, ok := cs["use_mtls"]; ok && !isIntfNil(v) && !mtlsChoiceTypeFound {

						mtlsChoiceTypeFound = true
						mtlsChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_UseMtls{}
						mtlsChoiceInt.UseMtls = &ves_io_schema_views_origin_pool.TlsCertificatesType{}
						tlsChoiceInt.UseTls.MtlsChoice = mtlsChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["tls_certificates"]; ok && !isIntfNil(v) {

								sl := v.([]interface{})
								tlsCertificates := make([]*ves_io_schema.TlsCertificateType, len(sl))
								mtlsChoiceInt.UseMtls.TlsCertificates = tlsCertificates
								for i, set := range sl {
									tlsCertificates[i] = &ves_io_schema.TlsCertificateType{}
									tlsCertificatesMapStrToI := set.(map[string]interface{})

									if w, ok := tlsCertificatesMapStrToI["certificate_url"]; ok && !isIntfNil(w) {
										tlsCertificates[i].CertificateUrl = w.(string)
									}

									if w, ok := tlsCertificatesMapStrToI["description"]; ok && !isIntfNil(w) {
										tlsCertificates[i].Description = w.(string)
									}

									ocspStaplingChoiceTypeFound := false

									if v, ok := tlsCertificatesMapStrToI["custom_hash_algorithms"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

										ocspStaplingChoiceTypeFound = true
										ocspStaplingChoiceInt := &ves_io_schema.TlsCertificateType_CustomHashAlgorithms{}
										ocspStaplingChoiceInt.CustomHashAlgorithms = &ves_io_schema.HashAlgorithms{}
										tlsCertificates[i].OcspStaplingChoice = ocspStaplingChoiceInt

										sl := v.(*schema.Set).List()
										for _, set := range sl {
											cs := set.(map[string]interface{})

											if v, ok := cs["hash_algorithms"]; ok && !isIntfNil(v) {

												hash_algorithmsList := []ves_io_schema.HashAlgorithm{}
												for _, j := range v.([]interface{}) {
													hash_algorithmsList = append(hash_algorithmsList, ves_io_schema.HashAlgorithm(ves_io_schema.HashAlgorithm_value[j.(string)]))
												}
												ocspStaplingChoiceInt.CustomHashAlgorithms.HashAlgorithms = hash_algorithmsList

											}

										}

									}

									if v, ok := tlsCertificatesMapStrToI["disable_ocsp_stapling"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

										ocspStaplingChoiceTypeFound = true
										_ = v
									}

									if v, ok := tlsCertificatesMapStrToI["use_system_defaults"]; ok && !isIntfNil(v) && !ocspStaplingChoiceTypeFound {

										ocspStaplingChoiceTypeFound = true
										_ = v
									}

									if v, ok := tlsCertificatesMapStrToI["private_key"]; ok && !isIntfNil(v) {

										sl := v.(*schema.Set).List()
										privateKey := &ves_io_schema.SecretType{}
										tlsCertificates[i].PrivateKey = privateKey
										for _, set := range sl {
											privateKeyMapStrToI := set.(map[string]interface{})

											if v, ok := privateKeyMapStrToI["blindfold_secret_info_internal"]; ok && !isIntfNil(v) {

												sl := v.(*schema.Set).List()
												blindfoldSecretInfoInternal := &ves_io_schema.BlindfoldSecretInfoType{}
												privateKey.BlindfoldSecretInfoInternal = blindfoldSecretInfoInternal
												for _, set := range sl {
													blindfoldSecretInfoInternalMapStrToI := set.(map[string]interface{})

													if w, ok := blindfoldSecretInfoInternalMapStrToI["decryption_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.DecryptionProvider = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["location"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.Location = w.(string)
													}

													if w, ok := blindfoldSecretInfoInternalMapStrToI["store_provider"]; ok && !isIntfNil(w) {
														blindfoldSecretInfoInternal.StoreProvider = w.(string)
													}

												}

											}

											if v, ok := privateKeyMapStrToI["secret_encoding_type"]; ok && !isIntfNil(v) {

												privateKey.SecretEncodingType = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

											}

											secretInfoOneofTypeFound := false

											if v, ok := privateKeyMapStrToI["blindfold_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_BlindfoldSecretInfo{}
												secretInfoOneofInt.BlindfoldSecretInfo = &ves_io_schema.BlindfoldSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["decryption_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.DecryptionProvider = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.Location = v.(string)

													}

													if v, ok := cs["store_provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.BlindfoldSecretInfo.StoreProvider = v.(string)

													}

												}

											}

											if v, ok := privateKeyMapStrToI["clear_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_ClearSecretInfo{}
												secretInfoOneofInt.ClearSecretInfo = &ves_io_schema.ClearSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["url"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.ClearSecretInfo.Url = v.(string)

													}

												}

											}

											if v, ok := privateKeyMapStrToI["vault_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_VaultSecretInfo{}
												secretInfoOneofInt.VaultSecretInfo = &ves_io_schema.VaultSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["key"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Key = v.(string)

													}

													if v, ok := cs["location"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Location = v.(string)

													}

													if v, ok := cs["provider"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Provider = v.(string)

													}

													if v, ok := cs["secret_encoding"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.SecretEncoding = ves_io_schema.SecretEncodingType(ves_io_schema.SecretEncodingType_value[v.(string)])

													}

													if v, ok := cs["version"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.VaultSecretInfo.Version = uint32(v.(int))

													}

												}

											}

											if v, ok := privateKeyMapStrToI["wingman_secret_info"]; ok && !isIntfNil(v) && !secretInfoOneofTypeFound {

												secretInfoOneofTypeFound = true
												secretInfoOneofInt := &ves_io_schema.SecretType_WingmanSecretInfo{}
												secretInfoOneofInt.WingmanSecretInfo = &ves_io_schema.WingmanSecretInfoType{}
												privateKey.SecretInfoOneof = secretInfoOneofInt

												sl := v.(*schema.Set).List()
												for _, set := range sl {
													cs := set.(map[string]interface{})

													if v, ok := cs["name"]; ok && !isIntfNil(v) {

														secretInfoOneofInt.WingmanSecretInfo.Name = v.(string)

													}

												}

											}

										}

									}

								}

							}

						}

					}

					serverValidationChoiceTypeFound := false

					if v, ok := cs["skip_server_verification"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

						serverValidationChoiceTypeFound = true

						if v.(bool) {
							serverValidationChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_SkipServerVerification{}
							serverValidationChoiceInt.SkipServerVerification = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.ServerValidationChoice = serverValidationChoiceInt
						}

					}

					if v, ok := cs["use_server_verification"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

						serverValidationChoiceTypeFound = true
						serverValidationChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_UseServerVerification{}
						serverValidationChoiceInt.UseServerVerification = &ves_io_schema_views_origin_pool.UpstreamTlsValidationContext{}
						tlsChoiceInt.UseTls.ServerValidationChoice = serverValidationChoiceInt

						sl := v.(*schema.Set).List()
						for _, set := range sl {
							cs := set.(map[string]interface{})

							if v, ok := cs["trusted_ca_url"]; ok && !isIntfNil(v) {

								serverValidationChoiceInt.UseServerVerification.TrustedCaUrl = v.(string)

							}

						}

					}

					if v, ok := cs["volterra_trusted_ca"]; ok && !isIntfNil(v) && !serverValidationChoiceTypeFound {

						serverValidationChoiceTypeFound = true

						if v.(bool) {
							serverValidationChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_VolterraTrustedCa{}
							serverValidationChoiceInt.VolterraTrustedCa = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.ServerValidationChoice = serverValidationChoiceInt
						}

					}

					sniChoiceTypeFound := false

					if v, ok := cs["disable_sni"]; ok && !isIntfNil(v) && !sniChoiceTypeFound {

						sniChoiceTypeFound = true

						if v.(bool) {
							sniChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_DisableSni{}
							sniChoiceInt.DisableSni = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.SniChoice = sniChoiceInt
						}

					}

					if v, ok := cs["sni"]; ok && !isIntfNil(v) && !sniChoiceTypeFound {

						sniChoiceTypeFound = true
						sniChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_Sni{}

						tlsChoiceInt.UseTls.SniChoice = sniChoiceInt

						sniChoiceInt.Sni = v.(string)

					}

					if v, ok := cs["use_host_header_as_sni"]; ok && !isIntfNil(v) && !sniChoiceTypeFound {

						sniChoiceTypeFound = true

						if v.(bool) {
							sniChoiceInt := &ves_io_schema_views_origin_pool.UpstreamTlsParameters_UseHostHeaderAsSni{}
							sniChoiceInt.UseHostHeaderAsSni = &ves_io_schema.Empty{}
							tlsChoiceInt.UseTls.SniChoice = sniChoiceInt
						}

					}

					if v, ok := cs["tls_config"]; ok && !isIntfNil(v) {

						sl := v.(*schema.Set).List()
						tlsConfig := &ves_io_schema_views.TlsConfig{}
						tlsChoiceInt.UseTls.TlsConfig = tlsConfig
						for _, set := range sl {
							tlsConfigMapStrToI := set.(map[string]interface{})

							choiceTypeFound := false

							if v, ok := tlsConfigMapStrToI["custom_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true
								choiceInt := &ves_io_schema_views.TlsConfig_CustomSecurity{}
								choiceInt.CustomSecurity = &ves_io_schema_views.CustomCiphers{}
								tlsConfig.Choice = choiceInt

								sl := v.(*schema.Set).List()
								for _, set := range sl {
									cs := set.(map[string]interface{})

									if v, ok := cs["cipher_suites"]; ok && !isIntfNil(v) {

										ls := make([]string, len(v.([]interface{})))
										for i, v := range v.([]interface{}) {
											ls[i] = v.(string)
										}
										choiceInt.CustomSecurity.CipherSuites = ls

									}

									if v, ok := cs["max_version"]; ok && !isIntfNil(v) {

										choiceInt.CustomSecurity.MaxVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

									}

									if v, ok := cs["min_version"]; ok && !isIntfNil(v) {

										choiceInt.CustomSecurity.MinVersion = ves_io_schema.TlsProtocol(ves_io_schema.TlsProtocol_value[v.(string)])

									}

								}

							}

							if v, ok := tlsConfigMapStrToI["default_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_DefaultSecurity{}
									choiceInt.DefaultSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["low_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_LowSecurity{}
									choiceInt.LowSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

							if v, ok := tlsConfigMapStrToI["medium_security"]; ok && !isIntfNil(v) && !choiceTypeFound {

								choiceTypeFound = true

								if v.(bool) {
									choiceInt := &ves_io_schema_views.TlsConfig_MediumSecurity{}
									choiceInt.MediumSecurity = &ves_io_schema.Empty{}
									tlsConfig.Choice = choiceInt
								}

							}

						}

					}

				}

			}

		}

	}

	log.Printf("[DEBUG] Updating Volterra CdnLoadbalancer obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_views_cdn_loadbalancer.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating CdnLoadbalancer: %s", err)
	}

	return resourceVolterraCdnLoadbalancerRead(d, meta)
}

func resourceVolterraCdnLoadbalancerDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_views_cdn_loadbalancer.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] CdnLoadbalancer %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra CdnLoadbalancer before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra CdnLoadbalancer obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_views_cdn_loadbalancer.ObjectType, namespace, name)
}
